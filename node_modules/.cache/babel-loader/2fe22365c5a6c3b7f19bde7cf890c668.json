{"ast":null,"code":"import { each, isEmpty, isNumber, isNumberEqual, max, min } from '@antv/util';\n// 获取图形的包围盒\nfunction getPointsBox(points) {\n  if (isEmpty(points)) {\n    return null;\n  }\n  var minX = points[0].x;\n  var maxX = points[0].x;\n  var minY = points[0].y;\n  var maxY = points[0].y;\n  each(points, function (point) {\n    minX = minX > point.x ? point.x : minX;\n    maxX = maxX < point.x ? point.x : maxX;\n    minY = minY > point.y ? point.y : minY;\n    maxY = maxY < point.y ? point.y : maxY;\n  });\n  return {\n    minX: minX,\n    maxX: maxX,\n    minY: minY,\n    maxY: maxY,\n    centerX: (minX + maxX) / 2,\n    centerY: (minY + maxY) / 2\n  };\n}\nfunction uniqueValues(array) {\n  return Array.from(new Set(array)).length === 1;\n}\nfunction mid(array) {\n  return (min(array) + max(array)) / 2;\n}\n/**\n * @ignore\n * 根据弧度计算极坐标系下的坐标点\n * @param centerX\n * @param centerY\n * @param radius\n * @param angleInRadian\n * @returns\n */\nexport function polarToCartesian(centerX, centerY, radius, angleInRadian) {\n  return {\n    x: centerX + radius * Math.cos(angleInRadian),\n    y: centerY + radius * Math.sin(angleInRadian)\n  };\n}\n/**\n * @ignore\n * 根据起始角度计算绘制扇形的 path\n * @param centerX\n * @param centerY\n * @param radius\n * @param startAngleInRadian\n * @param endAngleInRadian\n * @returns\n */\nexport function getSectorPath(centerX, centerY, radius, startAngleInRadian, endAngleInRadian, innerRadius) {\n  if (innerRadius === void 0) {\n    innerRadius = 0;\n  }\n  var start = polarToCartesian(centerX, centerY, radius, startAngleInRadian);\n  var end = polarToCartesian(centerX, centerY, radius, endAngleInRadian);\n  var innerStart = polarToCartesian(centerX, centerY, innerRadius, startAngleInRadian);\n  var innerEnd = polarToCartesian(centerX, centerY, innerRadius, endAngleInRadian);\n  if (endAngleInRadian - startAngleInRadian === Math.PI * 2) {\n    // 整个圆是分割成两个圆\n    var middlePoint = polarToCartesian(centerX, centerY, radius, startAngleInRadian + Math.PI);\n    var innerMiddlePoint = polarToCartesian(centerX, centerY, innerRadius, startAngleInRadian + Math.PI);\n    var circlePathCommands = [['M', start.x, start.y], ['A', radius, radius, 0, 1, 1, middlePoint.x, middlePoint.y], ['A', radius, radius, 0, 1, 1, end.x, end.y], ['M', innerStart.x, innerStart.y]];\n    if (innerRadius) {\n      circlePathCommands.push(['A', innerRadius, innerRadius, 0, 1, 0, innerMiddlePoint.x, innerMiddlePoint.y]);\n      circlePathCommands.push(['A', innerRadius, innerRadius, 0, 1, 0, innerEnd.x, innerEnd.y]);\n    }\n    circlePathCommands.push(['M', start.x, start.y]);\n    circlePathCommands.push(['Z']);\n    return circlePathCommands;\n  }\n  var arcSweep = endAngleInRadian - startAngleInRadian <= Math.PI ? 0 : 1;\n  var sectorPathCommands = [['M', start.x, start.y], ['A', radius, radius, 0, arcSweep, 1, end.x, end.y], ['L', innerEnd.x, innerEnd.y]];\n  if (innerRadius) {\n    sectorPathCommands.push(['A', innerRadius, innerRadius, 0, arcSweep, 0, innerStart.x, innerStart.y]);\n  }\n  sectorPathCommands.push(['L', start.x, start.y]);\n  sectorPathCommands.push(['Z']);\n  return sectorPathCommands;\n}\n/**\n * @ignore\n * Gets arc path\n * @param centerX\n * @param centerY\n * @param radius\n * @param startAngleInRadian\n * @param endAngleInRadian\n * @returns\n */\nexport function getArcPath(centerX, centerY, radius, startAngleInRadian, endAngleInRadian) {\n  var start = polarToCartesian(centerX, centerY, radius, startAngleInRadian);\n  var end = polarToCartesian(centerX, centerY, radius, endAngleInRadian);\n  if (isNumberEqual(endAngleInRadian - startAngleInRadian, Math.PI * 2)) {\n    var middlePoint = polarToCartesian(centerX, centerY, radius, startAngleInRadian + Math.PI);\n    return [['M', start.x, start.y], ['A', radius, radius, 0, 1, 1, middlePoint.x, middlePoint.y], ['A', radius, radius, 0, 1, 1, start.x, start.y], ['A', radius, radius, 0, 1, 0, middlePoint.x, middlePoint.y], ['A', radius, radius, 0, 1, 0, start.x, start.y], ['Z']];\n  }\n  var arcSweep = endAngleInRadian - startAngleInRadian <= Math.PI ? 0 : 1;\n  return [['M', start.x, start.y], ['A', radius, radius, 0, arcSweep, 1, end.x, end.y]];\n}\n/**\n * @ignore\n * 从数据模型中的 points 换算角度\n * @param shapeModel\n * @param coordinate\n * @returns\n */\nexport function getAngle(shapeModel, coordinate) {\n  var points = shapeModel.points;\n  var box = getPointsBox(points);\n  var endAngle;\n  var startAngle;\n  var coordStartAngle = coordinate.startAngle,\n    coordEndAngle = coordinate.endAngle;\n  var diffAngle = coordEndAngle - coordStartAngle;\n  if (coordinate.isTransposed) {\n    endAngle = box.maxY * diffAngle;\n    startAngle = box.minY * diffAngle;\n  } else {\n    endAngle = box.maxX * diffAngle;\n    startAngle = box.minX * diffAngle;\n  }\n  endAngle += coordStartAngle;\n  startAngle += coordStartAngle;\n  return {\n    startAngle: startAngle,\n    endAngle: endAngle\n  };\n}\n/**\n * @ignore\n * 计算多边形重心: https://en.wikipedia.org/wiki/Centroid#Of_a_polygon\n */\nexport function getPolygonCentroid(xs, ys) {\n  if (isNumber(xs) && isNumber(ys)) {\n    // 普通色块图，xs 和 ys 是数值\n    return [xs, ys];\n  }\n  xs = xs;\n  ys = ys;\n  // 当这个 polygon 的点在一条线上的时候\n  // 也就是说 xs 里面的值都相同，比如：[1, 1, 1, 1]\n  // 或者说 ys 里面的值都相同，比如：[0, 0, 0, 0]\n  // 下面计算得到的 k = 0\n  // 导致返回的值是 [NaN, NaN]\n  // 所以这里做相应的处理\n  if (uniqueValues(xs) || uniqueValues(ys)) return [mid(xs), mid(ys)];\n  var i = -1;\n  var x = 0;\n  var y = 0;\n  var former;\n  var current = xs.length - 1;\n  var diff;\n  var k = 0;\n  while (++i < xs.length) {\n    former = current;\n    current = i;\n    k += diff = xs[former] * ys[current] - xs[current] * ys[former];\n    x += (xs[former] + xs[current]) * diff;\n    y += (ys[former] + ys[current]) * diff;\n  }\n  k *= 3;\n  return [x / k, y / k];\n}\n/**\n * @ignore\n * 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\n */\nexport function getReplaceAttrs(sourceShape, targetShape) {\n  var originAttrs = sourceShape.attr();\n  var newAttrs = targetShape.attr();\n  each(originAttrs, function (v, k) {\n    if (newAttrs[k] === undefined) {\n      newAttrs[k] = undefined;\n    }\n  });\n  return newAttrs;\n}","map":{"version":3,"sources":["../../src/util/graphics.ts"],"names":[],"mappings":"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","sourcesContent":["import { BBox } from '@antv/g-svg';\nimport { each, isEmpty, isNumber, isNumberEqual, max, min } from '@antv/util';\nimport { Coordinate, IShape, Point } from '../dependents';\nimport { ShapeInfo } from '../interface';\n\n// 获取图形的包围盒\nfunction getPointsBox(points) {\n  if (isEmpty(points)) {\n    return null;\n  }\n\n  let minX = points[0].x;\n  let maxX = points[0].x;\n  let minY = points[0].y;\n  let maxY = points[0].y;\n  each(points, (point) => {\n    minX = minX > point.x ? point.x : minX;\n    maxX = maxX < point.x ? point.x : maxX;\n    minY = minY > point.y ? point.y : minY;\n    maxY = maxY < point.y ? point.y : maxY;\n  });\n\n  return {\n    minX,\n    maxX,\n    minY,\n    maxY,\n    centerX: (minX + maxX) / 2,\n    centerY: (minY + maxY) / 2,\n  };\n}\n\nfunction uniqueValues<T = number>(array: T[]) {\n  return Array.from(new Set(array)).length === 1;\n}\n\nfunction mid(array: number[]) {\n  return (min(array) + max(array)) / 2;\n}\n\n/**\n * @ignore\n * 根据弧度计算极坐标系下的坐标点\n * @param centerX\n * @param centerY\n * @param radius\n * @param angleInRadian\n * @returns\n */\nexport function polarToCartesian(centerX: number, centerY: number, radius: number, angleInRadian: number) {\n  return {\n    x: centerX + radius * Math.cos(angleInRadian),\n    y: centerY + radius * Math.sin(angleInRadian),\n  };\n}\n\n/**\n * @ignore\n * 根据起始角度计算绘制扇形的 path\n * @param centerX\n * @param centerY\n * @param radius\n * @param startAngleInRadian\n * @param endAngleInRadian\n * @returns\n */\nexport function getSectorPath(\n  centerX: number,\n  centerY: number,\n  radius: number,\n  startAngleInRadian: number,\n  endAngleInRadian: number,\n  innerRadius: number = 0\n) {\n  const start = polarToCartesian(centerX, centerY, radius, startAngleInRadian);\n  const end = polarToCartesian(centerX, centerY, radius, endAngleInRadian);\n\n  const innerStart = polarToCartesian(centerX, centerY, innerRadius, startAngleInRadian);\n  const innerEnd = polarToCartesian(centerX, centerY, innerRadius, endAngleInRadian);\n\n  if (endAngleInRadian - startAngleInRadian === Math.PI * 2) {\n    // 整个圆是分割成两个圆\n    const middlePoint = polarToCartesian(centerX, centerY, radius, startAngleInRadian + Math.PI);\n    const innerMiddlePoint = polarToCartesian(centerX, centerY, innerRadius, startAngleInRadian + Math.PI);\n    const circlePathCommands = [\n      ['M', start.x, start.y],\n      ['A', radius, radius, 0, 1, 1, middlePoint.x, middlePoint.y],\n      ['A', radius, radius, 0, 1, 1, end.x, end.y],\n      ['M', innerStart.x, innerStart.y],\n    ];\n    if (innerRadius) {\n      circlePathCommands.push(['A', innerRadius, innerRadius, 0, 1, 0, innerMiddlePoint.x, innerMiddlePoint.y]);\n      circlePathCommands.push(['A', innerRadius, innerRadius, 0, 1, 0, innerEnd.x, innerEnd.y]);\n    }\n\n    circlePathCommands.push(['M', start.x, start.y]);\n    circlePathCommands.push(['Z']);\n\n    return circlePathCommands;\n  }\n\n  const arcSweep = endAngleInRadian - startAngleInRadian <= Math.PI ? 0 : 1;\n  const sectorPathCommands = [\n    ['M', start.x, start.y],\n    ['A', radius, radius, 0, arcSweep, 1, end.x, end.y],\n    ['L', innerEnd.x, innerEnd.y],\n  ];\n  if (innerRadius) {\n    sectorPathCommands.push(['A', innerRadius, innerRadius, 0, arcSweep, 0, innerStart.x, innerStart.y]);\n  }\n  sectorPathCommands.push(['L', start.x, start.y]);\n  sectorPathCommands.push(['Z']);\n\n  return sectorPathCommands;\n}\n\n/**\n * @ignore\n * Gets arc path\n * @param centerX\n * @param centerY\n * @param radius\n * @param startAngleInRadian\n * @param endAngleInRadian\n * @returns\n */\nexport function getArcPath(\n  centerX: number,\n  centerY: number,\n  radius: number,\n  startAngleInRadian: number,\n  endAngleInRadian: number\n) {\n  const start = polarToCartesian(centerX, centerY, radius, startAngleInRadian);\n  const end = polarToCartesian(centerX, centerY, radius, endAngleInRadian);\n\n  if (isNumberEqual(endAngleInRadian - startAngleInRadian, Math.PI * 2)) {\n    const middlePoint = polarToCartesian(centerX, centerY, radius, startAngleInRadian + Math.PI);\n    return [\n      ['M', start.x, start.y],\n      ['A', radius, radius, 0, 1, 1, middlePoint.x, middlePoint.y],\n      ['A', radius, radius, 0, 1, 1, start.x, start.y],\n      ['A', radius, radius, 0, 1, 0, middlePoint.x, middlePoint.y],\n      ['A', radius, radius, 0, 1, 0, start.x, start.y],\n      ['Z'],\n    ];\n  }\n  const arcSweep = endAngleInRadian - startAngleInRadian <= Math.PI ? 0 : 1;\n  return [\n    ['M', start.x, start.y],\n    ['A', radius, radius, 0, arcSweep, 1, end.x, end.y],\n  ];\n}\n\n/**\n * @ignore\n * 从数据模型中的 points 换算角度\n * @param shapeModel\n * @param coordinate\n * @returns\n */\nexport function getAngle(shapeModel: ShapeInfo, coordinate: Coordinate) {\n  const points = shapeModel.points;\n  const box = getPointsBox(points);\n  let endAngle;\n  let startAngle;\n  const { startAngle: coordStartAngle, endAngle: coordEndAngle } = coordinate;\n  const diffAngle = coordEndAngle - coordStartAngle;\n\n  if (coordinate.isTransposed) {\n    endAngle = box.maxY * diffAngle;\n    startAngle = box.minY * diffAngle;\n  } else {\n    endAngle = box.maxX * diffAngle;\n    startAngle = box.minX * diffAngle;\n  }\n  endAngle += coordStartAngle;\n  startAngle += coordStartAngle;\n  return {\n    startAngle,\n    endAngle,\n  };\n}\n\n/**\n * @ignore\n * 计算多边形重心: https://en.wikipedia.org/wiki/Centroid#Of_a_polygon\n */\nexport function getPolygonCentroid(xs: number | number[], ys: number | number[]) {\n  if (isNumber(xs) && isNumber(ys)) {\n    // 普通色块图，xs 和 ys 是数值\n    return [xs, ys];\n  }\n\n  xs = xs as number[];\n  ys = ys as number[];\n  // 当这个 polygon 的点在一条线上的时候\n  // 也就是说 xs 里面的值都相同，比如：[1, 1, 1, 1]\n  // 或者说 ys 里面的值都相同，比如：[0, 0, 0, 0]\n  // 下面计算得到的 k = 0\n  // 导致返回的值是 [NaN, NaN]\n  // 所以这里做相应的处理\n  if (uniqueValues(xs) || uniqueValues(ys)) return [mid(xs), mid(ys)];\n\n  let i = -1;\n  let x = 0;\n  let y = 0;\n  let former;\n  let current = xs.length - 1;\n  let diff;\n  let k = 0;\n  while (++i < xs.length) {\n    former = current;\n    current = i;\n    k += diff = xs[former] * ys[current] - xs[current] * ys[former];\n    x += (xs[former] + xs[current]) * diff;\n    y += (ys[former] + ys[current]) * diff;\n  }\n  k *= 3;\n  return [x / k, y / k];\n}\n\n/**\n * @ignore\n * 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\n */\nexport function getReplaceAttrs(sourceShape: IShape, targetShape: IShape) {\n  const originAttrs = sourceShape.attr();\n  const newAttrs = targetShape.attr();\n  each(originAttrs, (v, k) => {\n    if (newAttrs[k] === undefined) {\n      newAttrs[k] = undefined;\n    }\n  });\n  return newAttrs;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}