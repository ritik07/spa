{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Element from './element';\nimport { multiplyVec2 } from '../util/matrix';\nvar AbstractShape = /** @class */function (_super) {\n  __extends(AbstractShape, _super);\n  function AbstractShape(cfg) {\n    return _super.call(this, cfg) || this;\n  }\n  // 是否在包围盒内\n  AbstractShape.prototype._isInBBox = function (refX, refY) {\n    var bbox = this.getBBox();\n    return bbox.minX <= refX && bbox.maxX >= refX && bbox.minY <= refY && bbox.maxY >= refY;\n  };\n  /**\n   * 属性更改后需要做的事情\n   * @protected\n   * @param {ShapeAttrs} targetAttrs 渲染的图像属性\n   */\n  AbstractShape.prototype.afterAttrsChange = function (targetAttrs) {\n    _super.prototype.afterAttrsChange.call(this, targetAttrs);\n    this.clearCacheBBox();\n  };\n  // 计算包围盒时，需要缓存，这是一个高频的操作\n  AbstractShape.prototype.getBBox = function () {\n    var bbox = this.cfg.bbox;\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set('bbox', bbox);\n    }\n    return bbox;\n  };\n  // 计算相对于画布的包围盒\n  AbstractShape.prototype.getCanvasBBox = function () {\n    var canvasBBox = this.cfg.canvasBBox;\n    if (!canvasBBox) {\n      canvasBBox = this.calculateCanvasBBox();\n      this.set('canvasBBox', canvasBBox);\n    }\n    return canvasBBox;\n  };\n  AbstractShape.prototype.applyMatrix = function (matrix) {\n    _super.prototype.applyMatrix.call(this, matrix);\n    // 清理掉缓存的包围盒\n    this.set('canvasBBox', null);\n  };\n  /**\n   * 计算相对于画布的包围盒，默认等同于 bbox\n   * @return {BBox} 包围盒\n   */\n  AbstractShape.prototype.calculateCanvasBBox = function () {\n    var bbox = this.getBBox();\n    var totalMatrix = this.getTotalMatrix();\n    var minX = bbox.minX,\n      minY = bbox.minY,\n      maxX = bbox.maxX,\n      maxY = bbox.maxY;\n    if (totalMatrix) {\n      var topLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.minY]);\n      var topRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.minY]);\n      var bottomLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.maxY]);\n      var bottomRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.maxY]);\n      minX = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      maxX = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      minY = Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n      maxY = Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n    }\n    var attrs = this.attrs;\n    // 如果存在 shadow 则计算 shadow\n    if (attrs.shadowColor) {\n      var _a = attrs.shadowBlur,\n        shadowBlur = _a === void 0 ? 0 : _a,\n        _b = attrs.shadowOffsetX,\n        shadowOffsetX = _b === void 0 ? 0 : _b,\n        _c = attrs.shadowOffsetY,\n        shadowOffsetY = _c === void 0 ? 0 : _c;\n      var shadowLeft = minX - shadowBlur + shadowOffsetX;\n      var shadowRight = maxX + shadowBlur + shadowOffsetX;\n      var shadowTop = minY - shadowBlur + shadowOffsetY;\n      var shadowBottom = maxY + shadowBlur + shadowOffsetY;\n      minX = Math.min(minX, shadowLeft);\n      maxX = Math.max(maxX, shadowRight);\n      minY = Math.min(minY, shadowTop);\n      maxY = Math.max(maxY, shadowBottom);\n    }\n    return {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  };\n  /**\n   * @protected\n   * 清理缓存的 bbox\n   */\n  AbstractShape.prototype.clearCacheBBox = function () {\n    this.set('bbox', null);\n    this.set('canvasBBox', null);\n  };\n  // 实现接口\n  AbstractShape.prototype.isClipShape = function () {\n    return this.get('isClipShape');\n  };\n  /**\n   * @protected\n   * 不同的图形自己实现是否在图形内部的逻辑，要判断边和填充区域\n   * @param  {number}  refX 相对于图形的坐标 x\n   * @param  {number}  refY 相对于图形的坐标 Y\n   * @return {boolean} 点是否在图形内部\n   */\n  AbstractShape.prototype.isInShape = function (refX, refY) {\n    return false;\n  };\n  /**\n   * 是否仅仅使用 BBox 检测就可以判定拾取到图形\n   * 默认是 false，但是有些图形例如 image、marker 等都可直接使用 BBox 的检测而不需要使用图形拾取\n   * @return {Boolean} 仅仅使用 BBox 进行拾取\n   */\n  AbstractShape.prototype.isOnlyHitBox = function () {\n    return false;\n  };\n  // 不同的 Shape 各自实现\n  AbstractShape.prototype.isHit = function (x, y) {\n    var startArrowShape = this.get('startArrowShape');\n    var endArrowShape = this.get('endArrowShape');\n    var vec = [x, y, 1];\n    vec = this.invertFromMatrix(vec);\n    var refX = vec[0],\n      refY = vec[1];\n    var inBBox = this._isInBBox(refX, refY);\n    // 跳过图形的拾取，在某些图形中可以省略一倍的检测成本\n    if (this.isOnlyHitBox()) {\n      return inBBox;\n    }\n    // 被裁减掉的和不在包围盒内的不进行计算\n    if (inBBox && !this.isClipped(refX, refY)) {\n      // 对图形进行拾取判断\n      if (this.isInShape(refX, refY)) {\n        return true;\n      }\n      // 对起始箭头进行拾取判断\n      if (startArrowShape && startArrowShape.isHit(refX, refY)) {\n        return true;\n      }\n      // 对结束箭头进行拾取判断\n      if (endArrowShape && endArrowShape.isHit(refX, refY)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  return AbstractShape;\n}(Element);\nexport default AbstractShape;","map":{"version":3,"sources":["../../src/abstract/shape.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport Element from './element';\nimport { multiplyVec2 } from '../util/matrix';\nvar AbstractShape = /** @class */ (function (_super) {\n    __extends(AbstractShape, _super);\n    function AbstractShape(cfg) {\n        return _super.call(this, cfg) || this;\n    }\n    // 是否在包围盒内\n    AbstractShape.prototype._isInBBox = function (refX, refY) {\n        var bbox = this.getBBox();\n        return bbox.minX <= refX && bbox.maxX >= refX && bbox.minY <= refY && bbox.maxY >= refY;\n    };\n    /**\n     * 属性更改后需要做的事情\n     * @protected\n     * @param {ShapeAttrs} targetAttrs 渲染的图像属性\n     */\n    AbstractShape.prototype.afterAttrsChange = function (targetAttrs) {\n        _super.prototype.afterAttrsChange.call(this, targetAttrs);\n        this.clearCacheBBox();\n    };\n    // 计算包围盒时，需要缓存，这是一个高频的操作\n    AbstractShape.prototype.getBBox = function () {\n        var bbox = this.cfg.bbox;\n        if (!bbox) {\n            bbox = this.calculateBBox();\n            this.set('bbox', bbox);\n        }\n        return bbox;\n    };\n    // 计算相对于画布的包围盒\n    AbstractShape.prototype.getCanvasBBox = function () {\n        var canvasBBox = this.cfg.canvasBBox;\n        if (!canvasBBox) {\n            canvasBBox = this.calculateCanvasBBox();\n            this.set('canvasBBox', canvasBBox);\n        }\n        return canvasBBox;\n    };\n    AbstractShape.prototype.applyMatrix = function (matrix) {\n        _super.prototype.applyMatrix.call(this, matrix);\n        // 清理掉缓存的包围盒\n        this.set('canvasBBox', null);\n    };\n    /**\n     * 计算相对于画布的包围盒，默认等同于 bbox\n     * @return {BBox} 包围盒\n     */\n    AbstractShape.prototype.calculateCanvasBBox = function () {\n        var bbox = this.getBBox();\n        var totalMatrix = this.getTotalMatrix();\n        var minX = bbox.minX, minY = bbox.minY, maxX = bbox.maxX, maxY = bbox.maxY;\n        if (totalMatrix) {\n            var topLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.minY]);\n            var topRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.minY]);\n            var bottomLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.maxY]);\n            var bottomRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.maxY]);\n            minX = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n            maxX = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n            minY = Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n            maxY = Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n        }\n        var attrs = this.attrs;\n        // 如果存在 shadow 则计算 shadow\n        if (attrs.shadowColor) {\n            var _a = attrs.shadowBlur, shadowBlur = _a === void 0 ? 0 : _a, _b = attrs.shadowOffsetX, shadowOffsetX = _b === void 0 ? 0 : _b, _c = attrs.shadowOffsetY, shadowOffsetY = _c === void 0 ? 0 : _c;\n            var shadowLeft = minX - shadowBlur + shadowOffsetX;\n            var shadowRight = maxX + shadowBlur + shadowOffsetX;\n            var shadowTop = minY - shadowBlur + shadowOffsetY;\n            var shadowBottom = maxY + shadowBlur + shadowOffsetY;\n            minX = Math.min(minX, shadowLeft);\n            maxX = Math.max(maxX, shadowRight);\n            minY = Math.min(minY, shadowTop);\n            maxY = Math.max(maxY, shadowBottom);\n        }\n        return {\n            x: minX,\n            y: minY,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    };\n    /**\n     * @protected\n     * 清理缓存的 bbox\n     */\n    AbstractShape.prototype.clearCacheBBox = function () {\n        this.set('bbox', null);\n        this.set('canvasBBox', null);\n    };\n    // 实现接口\n    AbstractShape.prototype.isClipShape = function () {\n        return this.get('isClipShape');\n    };\n    /**\n     * @protected\n     * 不同的图形自己实现是否在图形内部的逻辑，要判断边和填充区域\n     * @param  {number}  refX 相对于图形的坐标 x\n     * @param  {number}  refY 相对于图形的坐标 Y\n     * @return {boolean} 点是否在图形内部\n     */\n    AbstractShape.prototype.isInShape = function (refX, refY) {\n        return false;\n    };\n    /**\n     * 是否仅仅使用 BBox 检测就可以判定拾取到图形\n     * 默认是 false，但是有些图形例如 image、marker 等都可直接使用 BBox 的检测而不需要使用图形拾取\n     * @return {Boolean} 仅仅使用 BBox 进行拾取\n     */\n    AbstractShape.prototype.isOnlyHitBox = function () {\n        return false;\n    };\n    // 不同的 Shape 各自实现\n    AbstractShape.prototype.isHit = function (x, y) {\n        var startArrowShape = this.get('startArrowShape');\n        var endArrowShape = this.get('endArrowShape');\n        var vec = [x, y, 1];\n        vec = this.invertFromMatrix(vec);\n        var refX = vec[0], refY = vec[1];\n        var inBBox = this._isInBBox(refX, refY);\n        // 跳过图形的拾取，在某些图形中可以省略一倍的检测成本\n        if (this.isOnlyHitBox()) {\n            return inBBox;\n        }\n        // 被裁减掉的和不在包围盒内的不进行计算\n        if (inBBox && !this.isClipped(refX, refY)) {\n            // 对图形进行拾取判断\n            if (this.isInShape(refX, refY)) {\n                return true;\n            }\n            // 对起始箭头进行拾取判断\n            if (startArrowShape && startArrowShape.isHit(refX, refY)) {\n                return true;\n            }\n            // 对结束箭头进行拾取判断\n            if (endArrowShape && endArrowShape.isHit(refX, refY)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return AbstractShape;\n}(Element));\nexport default AbstractShape;\n//# sourceMappingURL=shape.js.map"]},"metadata":{},"sourceType":"module"}