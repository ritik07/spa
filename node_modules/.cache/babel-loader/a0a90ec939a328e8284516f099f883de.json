{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { isArray, isNil, get } from '@antv/util';\nimport { getAngle, getSectorPath } from '../../../util/graphics';\n/**\n * @ignore\n * 根据数据点生成矩形的四个关键点\n * @param pointInfo 数据点信息\n * @param [isPyramid] 是否为尖底漏斗图\n * @returns rect points 返回矩形四个顶点信息\n */\nexport function getRectPoints(pointInfo) {\n  var _a, _b;\n  var x = pointInfo.x,\n    y = pointInfo.y,\n    y0 = pointInfo.y0,\n    size = pointInfo.size;\n  // 有 4 种情况，\n  // 1. x, y 都不是数组\n  // 2. y是数组，x不是\n  // 3. x是数组，y不是\n  // 4. x, y 都是数组\n  var yMin;\n  var yMax;\n  if (isArray(y)) {\n    _a = __read(y, 2), yMin = _a[0], yMax = _a[1];\n  } else {\n    yMin = y0;\n    yMax = y;\n  }\n  var xMin;\n  var xMax;\n  if (isArray(x)) {\n    _b = __read(x, 2), xMin = _b[0], xMax = _b[1];\n  } else {\n    xMin = x - size / 2;\n    xMax = x + size / 2;\n  }\n  var points = [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMin,\n    y: yMax\n  }];\n  // 矩形的四个关键点，结构如下（左下角顺时针连接）\n  // 1 ---- 2\n  // |      |\n  // 0 ---- 3\n  points.push({\n    x: xMax,\n    y: yMax\n  }, {\n    x: xMax,\n    y: yMin\n  });\n  return points;\n}\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param isClosed path 是否需要闭合\n * @returns 返回矩形的 path\n */\nexport function getRectPath(points, isClosed) {\n  if (isClosed === void 0) {\n    isClosed = true;\n  }\n  var path = [];\n  var firstPoint = points[0];\n  path.push(['M', firstPoint.x, firstPoint.y]);\n  for (var i = 1, len = points.length; i < len; i++) {\n    path.push(['L', points[i].x, points[i].y]);\n  }\n  // 对于 shape=\"line\" path 不应该闭合，否则会造成 lineCap 绘图属性失效\n  if (isClosed) {\n    path.push(['L', firstPoint.x, firstPoint.y]); // 需要闭合\n    path.push(['z']);\n  }\n  return path;\n}\n/**\n * 处理 rect path 的 radius\n * @returns 返回矩形 path 的四个角的 arc 半径\n */\nexport function parseRadius(radius, minLength) {\n  var r1 = 0;\n  var r2 = 0;\n  var r3 = 0;\n  var r4 = 0;\n  if (isArray(radius)) {\n    if (radius.length === 1) {\n      r1 = r2 = r3 = r4 = radius[0];\n    } else if (radius.length === 2) {\n      r1 = r3 = radius[0];\n      r2 = r4 = radius[1];\n    } else if (radius.length === 3) {\n      r1 = radius[0];\n      r2 = r4 = radius[1];\n      r3 = radius[2];\n    } else {\n      r1 = radius[0];\n      r2 = radius[1];\n      r3 = radius[2];\n      r4 = radius[3];\n    }\n  } else {\n    r1 = r2 = r3 = r4 = radius;\n  }\n  // 处理 边界值\n  if (r1 + r2 > minLength) {\n    r1 = r1 ? minLength / (1 + r2 / r1) : 0;\n    r2 = minLength - r1;\n  }\n  if (r3 + r4 > minLength) {\n    r3 = r3 ? minLength / (1 + r4 / r3) : 0;\n    r4 = minLength - r3;\n  }\n  return [r1 || 0, r2 || 0, r3 || 0, r4 || 0];\n}\n/**\n * 获取 interval 矩形背景的 path\n * @param cfg 关键点的信息\n * @param points 已转化为画布坐标的 4 个关键点\n * @param coordinate 坐标系\n * @returns 返回矩形背景的 path\n */\nexport function getBackgroundRectPath(cfg, points, coordinate) {\n  var path = [];\n  if (coordinate.isRect) {\n    var p0 = coordinate.isTransposed ? {\n      x: coordinate.start.x,\n      y: points[0].y\n    } : {\n      x: points[0].x,\n      y: coordinate.start.y\n    };\n    var p1 = coordinate.isTransposed ? {\n      x: coordinate.end.x,\n      y: points[2].y\n    } : {\n      x: points[3].x,\n      y: coordinate.end.y\n    };\n    // corner radius of background shape works only in 笛卡尔坐标系\n    var radius = get(cfg, ['background', 'style', 'radius']);\n    if (radius) {\n      var width = coordinate.isTransposed ? Math.abs(points[0].y - points[2].y) : points[2].x - points[1].x;\n      var height = coordinate.isTransposed ? coordinate.getWidth() : coordinate.getHeight();\n      var _a = __read(parseRadius(radius, Math.min(width, height)), 4),\n        r1 = _a[0],\n        r2 = _a[1],\n        r3 = _a[2],\n        r4 = _a[3];\n      // 同时存在 坐标系是否发生转置 和 y 镜像的时候\n      var isReflectYTransposed_1 = coordinate.isTransposed && coordinate.isReflect('y');\n      var bump = isReflectYTransposed_1 ? 0 : 1;\n      var opposite = function (r) {\n        return isReflectYTransposed_1 ? -r : r;\n      };\n      path.push(['M', p0.x, p1.y + opposite(r1)]);\n      r1 !== 0 && path.push(['A', r1, r1, 0, 0, bump, p0.x + r1, p1.y]);\n      path.push(['L', p1.x - r2, p1.y]);\n      r2 !== 0 && path.push(['A', r2, r2, 0, 0, bump, p1.x, p1.y + opposite(r2)]);\n      path.push(['L', p1.x, p0.y - opposite(r3)]);\n      r3 !== 0 && path.push(['A', r3, r3, 0, 0, bump, p1.x - r3, p0.y]);\n      path.push(['L', p0.x + r4, p0.y]);\n      r4 !== 0 && path.push(['A', r4, r4, 0, 0, bump, p0.x, p0.y - opposite(r4)]);\n    } else {\n      path.push(['M', p0.x, p0.y]);\n      path.push(['L', p1.x, p0.y]);\n      path.push(['L', p1.x, p1.y]);\n      path.push(['L', p0.x, p1.y]);\n      path.push(['L', p0.x, p0.y]);\n    }\n    path.push(['z']);\n  }\n  if (coordinate.isPolar) {\n    var center = coordinate.getCenter();\n    var _b = getAngle(cfg, coordinate),\n      startAngle = _b.startAngle,\n      endAngle = _b.endAngle;\n    if (coordinate.type !== 'theta' && !coordinate.isTransposed) {\n      // 获取扇形 path\n      path = getSectorPath(center.x, center.y, coordinate.getRadius(), startAngle, endAngle);\n    } else {\n      var pow = function (v) {\n        return Math.pow(v, 2);\n      };\n      var r1 = Math.sqrt(pow(center.x - points[0].x) + pow(center.y - points[0].y));\n      var r2 = Math.sqrt(pow(center.x - points[2].x) + pow(center.y - points[2].y));\n      // 获取扇形 path（其实是一个圆环，从 coordinate 的起始角度到结束角度）\n      path = getSectorPath(center.x, center.y, r1, coordinate.startAngle, coordinate.endAngle, r2);\n    }\n  }\n  return path;\n}\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param lineCap 'round'圆角样式\n * @param coor 坐标\n * @returns 返回矩形的 path\n */\nexport function getIntervalRectPath(points, lineCap, coor) {\n  var width = coor.getWidth();\n  var height = coor.getHeight();\n  var isRect = coor.type === 'rect';\n  var path = [];\n  var r = (points[2].x - points[1].x) / 2;\n  var ry = coor.isTransposed ? r * height / width : r * width / height;\n  if (lineCap === 'round') {\n    if (isRect) {\n      path.push(['M', points[0].x, points[0].y + ry]);\n      path.push(['L', points[1].x, points[1].y - ry]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y - ry]);\n      path.push(['L', points[3].x, points[3].y + ry]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y + ry]);\n    } else {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['L', points[1].x, points[1].y]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y]);\n      path.push(['L', points[3].x, points[3].y]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y]);\n    }\n    path.push(['z']);\n  } else {\n    path = getRectPath(points);\n  }\n  return path;\n}\n/**\n * @ignore\n * 根据 funnel 关键点绘制漏斗图的 path\n * @param points 图形关键点信息\n * @param nextPoints 下一个数据的图形关键点信息\n * @param isPyramid 是否为尖底漏斗图\n * @returns 返回漏斗图的图形 path\n */\nexport function getFunnelPath(points, nextPoints, isPyramid) {\n  var path = [];\n  if (!isNil(nextPoints)) {\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', nextPoints[1].x, nextPoints[1].y], ['L', nextPoints[0].x, nextPoints[0].y], ['Z']);\n  } else if (isPyramid) {\n    // 金字塔最底部\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', (points[2].x + points[3].x) / 2, (points[2].y + points[3].y) / 2], ['Z']);\n  } else {\n    // 漏斗图最底部\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']);\n  }\n  return path;\n}\n/**\n * 交换两个对象\n */\nfunction swap(p0, p1) {\n  return [p1, p0];\n}\n/**\n * 获取 倒角 矩形\n * - 目前只适用于笛卡尔坐标系下\n */\nexport function getRectWithCornerRadius(points, coordinate, radius) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  // 获取 四个关键点\n  var _h = __read(__spreadArray([], __read(points), false), 4),\n    p0 = _h[0],\n    p1 = _h[1],\n    p2 = _h[2],\n    p3 = _h[3];\n  var _j = __read(typeof radius === 'number' ? Array(4).fill(radius) : radius, 4),\n    r1 = _j[0],\n    r2 = _j[1],\n    r3 = _j[2],\n    r4 = _j[3];\n  if (coordinate.isTransposed) {\n    _a = __read(swap(p1, p3), 2), p1 = _a[0], p3 = _a[1];\n  }\n  /**\n   * 存在镜像\n   */\n  if (coordinate.isReflect('y')) {\n    _b = __read(swap(p0, p1), 2), p0 = _b[0], p1 = _b[1];\n    _c = __read(swap(p2, p3), 2), p2 = _c[0], p3 = _c[1];\n  }\n  if (coordinate.isReflect('x')) {\n    _d = __read(swap(p0, p3), 2), p0 = _d[0], p3 = _d[1];\n    _e = __read(swap(p1, p2), 2), p1 = _e[0], p2 = _e[1];\n  }\n  var path = [];\n  /**\n   *  p1 → p2\n   *  ↑    ↓\n   *  p0 ← p3\n   *\n   *  负数的情况，关键点会变成下面的形式\n   *\n   *  p0 ← p3               p2 ← p1\n   *  ↓    ↑                ↓     ↑\n   *  p1 → p2  --> (转置下)  p3 → p0\n   */\n  var abs = function (v) {\n    return Math.abs(v);\n  };\n  _f = __read(parseRadius([r1, r2, r3, r4], Math.min(abs(p3.x - p0.x), abs(p1.y - p0.y))).map(function (d) {\n    return abs(d);\n  }), 4), r1 = _f[0], r2 = _f[1], r3 = _f[2], r4 = _f[3];\n  if (coordinate.isTransposed) {\n    _g = __read([r4, r1, r2, r3], 4), r1 = _g[0], r2 = _g[1], r3 = _g[2], r4 = _g[3];\n  }\n  if (p0.y < p1.y /** 负数情况 */) {\n    path.push(['M', p3.x, p3.y + r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x - r3, p3.y]);\n    path.push(['L', p0.x + r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y + r4]);\n    path.push(['L', p1.x, p1.y - r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0 /** 逆时针 */, p1.x + r1, p1.y]);\n    path.push(['L', p2.x - r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y - r2]);\n    path.push(['L', p3.x, p3.y + r3]);\n    path.push(['z']);\n  } else if (p3.x < p0.x) {\n    path.push(['M', p2.x + r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y + r2]);\n    path.push(['L', p3.x, p3.y - r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x + r3, p3.y]);\n    path.push(['L', p0.x - r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y - r4]);\n    path.push(['L', p1.x, p1.y + r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0, p1.x - r1, p1.y]);\n    path.push(['L', p2.x + r2, p2.y]);\n    path.push(['z']);\n  } else {\n    path.push(['M', p1.x, p1.y + r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 1, p1.x + r1, p1.y]);\n    path.push(['L', p2.x - r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 1, p2.x, p2.y + r2]);\n    path.push(['L', p3.x, p3.y - r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 1, p3.x - r3, p3.y]);\n    path.push(['L', p0.x + r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 1, p0.x, p0.y - r4]);\n    path.push(['L', p1.x, p1.y + r1]);\n    path.push(['z']);\n  }\n  return path;\n}","map":{"version":3,"sources":["../../../../src/geometry/shape/interval/util.ts"],"names":[],"mappings":";AACA,SAAS,OAAO,EAAE,KAAK,EAAE,GAAG,QAAQ,YAAY;AAChD,SAAS,QAAQ,EAAE,aAAa,QAAQ,wBAAwB;AAIhE;;;;;;AAMG;AACH,OAAM,SAAU,aAAa,CAAC,SAAqB,EAAA;;EACzC,IAAA,CAAC,GAAkB,SAAS,CAAA,CAA3B;IAAE,CAAC,GAAe,SAAS,CAAA,CAAxB;IAAE,EAAE,GAAW,SAAS,CAAA,EAApB;IAAE,IAAI,GAAK,SAAS,CAAA,IAAd;EACtB;EACA;EACA;EACA;EACA;EACA,IAAI,IAAI;EACR,IAAI,IAAI;EACR,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;IACd,EAAA,GAAA,MAAA,CAAe,CAAC,EAAA,CAAA,CAAA,EAAf,IAAI,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,IAAI,GAAA,EAAA,CAAA,CAAA,CAAA;GACZ,MAAM;IACL,IAAI,GAAG,EAAE;IACT,IAAI,GAAG,CAAC;EACT;EAED,IAAI,IAAI;EACR,IAAI,IAAI;EACR,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;IACd,EAAA,GAAA,MAAA,CAAe,CAAC,EAAA,CAAA,CAAA,EAAf,IAAI,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,IAAI,GAAA,EAAA,CAAA,CAAA,CAAA;GACZ,MAAM;IACL,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC;IACnB,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC;EACpB;EAED,IAAM,MAAM,GAAG,CACb;IAAE,CAAC,EAAE,IAAI;IAAE,CAAC,EAAE;EAAI,CAAE,EACpB;IAAE,CAAC,EAAE,IAAI;IAAE,CAAC,EAAE;EAAI,CAAE,CACrB;EAED;EACA;EACA;EACA;EACA,MAAM,CAAC,IAAI,CAAC;IAAE,CAAC,EAAE,IAAI;IAAE,CAAC,EAAE;EAAI,CAAE,EAAE;IAAE,CAAC,EAAE,IAAI;IAAE,CAAC,EAAE;EAAI,CAAE,CAAC;EAEvD,OAAO,MAAM;AACf;AAEA;;;;;;AAMG;AACH,OAAM,SAAU,WAAW,CAAC,MAAe,EAAE,QAAwB,EAAA;EAAxB,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA;IAAA,QAAA,GAAA,IAAwB;EAAA;EACnE,IAAM,IAAI,GAAG,EAAE;EACf,IAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC;EAC5B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;EAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;IACjD,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3C;EACD;EACA,IAAI,QAAQ,EAAE;IACZ,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB;EACD,OAAO,IAAI;AACb;AAEA;;;AAGG;AACH,OAAM,SAAU,WAAW,CAAC,MAAyB,EAAE,SAAiB,EAAA;EACtE,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;IACnB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;MACvB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;KAC9B,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;MAC9B,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACnB,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;KACpB,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;MAC9B,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACd,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACnB,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;KACf,MAAM;MACL,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACd,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACd,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACd,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACf;GACF,MAAM;IACL,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM;EAC3B;EAED;EACA,IAAI,EAAE,GAAG,EAAE,GAAG,SAAS,EAAE;IACvB,EAAE,GAAG,EAAE,GAAG,SAAS,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;IACvC,EAAE,GAAG,SAAS,GAAG,EAAE;EACpB;EAED,IAAI,EAAE,GAAG,EAAE,GAAG,SAAS,EAAE;IACvB,EAAE,GAAG,EAAE,GAAG,SAAS,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;IACvC,EAAE,GAAG,SAAS,GAAG,EAAE;EACpB;EAED,OAAO,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;AAC7C;AAEA;;;;;;AAMG;AACH,OAAM,SAAU,qBAAqB,CAAC,GAAc,EAAE,MAAe,EAAE,UAAsB,EAAA;EAC3F,IAAI,IAAI,GAAG,EAAE;EACb,IAAI,UAAU,CAAC,MAAM,EAAE;IACrB,IAAM,EAAE,GAAG,UAAU,CAAC,YAAY,GAC9B;MAAE,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;MAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IAAC,CAAE,GACzC;MAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAAE,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC;IAAC,CAAE;IAC7C,IAAM,EAAE,GAAG,UAAU,CAAC,YAAY,GAC9B;MAAE,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;MAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IAAC,CAAE,GACvC;MAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAAE,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC;IAAC,CAAE;IAE3C;IACA,IAAM,MAAM,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC1D,IAAI,MAAM,EAAE;MACV,IAAM,KAAK,GAAG,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MACvG,IAAM,MAAM,GAAG,UAAU,CAAC,YAAY,GAAG,UAAU,CAAC,QAAQ,EAAE,GAAG,UAAU,CAAC,SAAS,EAAE;MACjF,IAAA,EAAA,GAAA,MAAA,CAAmB,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,EAAA,CAAA,CAAA;QAA9D,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAgD;MAErE;MACA,IAAM,sBAAoB,GAAI,UAAU,CAAC,YAAY,IAAI,UAAU,CAAC,SAAS,CAAC,GAAG,CAAE;MACnF,IAAM,IAAI,GAAG,sBAAoB,GAAG,CAAC,GAAG,CAAC;MACzC,IAAM,QAAQ,GAAG,UAAC,CAAS,EAAA;QAAK,OAAA,sBAAoB,GAAG,CAAC,CAAC,GAAG,CAAC;MAA7B,CAA6B;MAE7D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;MAC3C,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MACjE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;MAC3E,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;MAC3C,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MACjE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;KAC5E,MAAM;MACL,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MAC5B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MAC5B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MAC5B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MAC5B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7B;IAED,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB;EAED,IAAI,UAAU,CAAC,OAAO,EAAE;IACtB,IAAM,MAAM,GAAG,UAAU,CAAC,SAAS,EAAE;IAC/B,IAAA,EAAA,GAA2B,QAAQ,CAAC,GAAG,EAAE,UAAU,CAAC;MAAlD,UAAU,GAAA,EAAA,CAAA,UAAA;MAAE,QAAQ,GAAA,EAAA,CAAA,QAA8B;IAC1D,IAAI,UAAU,CAAC,IAAI,KAAK,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;MAC3D;MACA,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,EAAE,EAAE,UAAU,EAAE,QAAQ,CAAC;KACvF,MAAM;MACL,IAAM,GAAG,GAAG,UAAC,CAAC,EAAA;QAAK,OAAA,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MAAd,CAAc;MACjC,IAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/E,IAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/E;MACA,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC7F;EACF;EACD,OAAO,IAAI;AACb;AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,mBAAmB,CAAC,MAAe,EAAE,OAAsB,EAAE,IAAgB,EAAA;EAC3F,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;EAC7B,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;EAC/B,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,KAAK,MAAM;EACnC,IAAI,IAAI,GAAG,EAAE;EACb,IAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;EACzC,IAAM,EAAE,GAAG,IAAI,CAAC,YAAY,GAAI,CAAC,GAAG,MAAM,GAAI,KAAK,GAAI,CAAC,GAAG,KAAK,GAAI,MAAM;EAC1E,IAAI,OAAO,KAAK,OAAO,EAAE;IACvB,IAAI,MAAM,EAAE;MACV,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;MAC/C,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;MAC/C,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;MAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;MAC/C,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;KAC/D,MAAM;MACL,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1C,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1C,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACzD,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1C,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D;IACD,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;GACjB,MAAM;IACL,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC;EAC3B;EACD,OAAO,IAAI;AACb;AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,aAAa,CAAC,MAAe,EAAE,UAAmB,EAAE,SAAkB,EAAA;EACpF,IAAM,IAAI,GAAG,EAAE;EACf,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;IACtB,IAAI,CAAC,IAAI,CACP,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC/B,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC/B,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACvC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACvC,CAAC,GAAG,CAAC,CACN;GACF,MAAM,IAAI,SAAS,EAAE;IACpB;IACA,IAAI,CAAC,IAAI,CACP,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC/B,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC/B,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EACvE,CAAC,GAAG,CAAC,CACN;GACF,MAAM;IACL;IACA,IAAI,CAAC,IAAI,CACP,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC/B,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC/B,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC/B,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC/B,CAAC,GAAG,CAAC,CACN;EACF;EAED,OAAO,IAAI;AACb;AAEA;;AAEG;AACH,SAAS,IAAI,CAAI,EAAK,EAAE,EAAK,EAAA;EAC3B,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC;AACjB;AAEA;;;AAGG;AACH,OAAM,SAAU,uBAAuB,CAAC,MAAe,EAAE,UAAsB,EAAE,MAA0B,EAAA;;EACzG;EACI,IAAA,EAAA,GAAA,MAAA,CAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAuB,MAAM,CAAA,EAAA,KAAA,CAAA,EAAA,CAAA,CAAC;IAA7B,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAe;EAC9B,IAAA,EAAA,GAAA,MAAA,CAAmB,OAAO,MAAM,KAAK,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,EAAA,CAAA,CAAA;IAA7E,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAA+D;EAElF,IAAI,UAAU,CAAC,YAAY,EAAE;IAC3B,EAAA,GAAA,MAAA,CAAW,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA,CAAA,CAAA,EAAtB,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;EACR;EAED;;AAEG;EACH,IAAI,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;IAC7B,EAAA,GAAA,MAAA,CAAW,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA,CAAA,CAAA,EAAtB,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;IACP,EAAA,GAAA,MAAA,CAAW,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA,CAAA,CAAA,EAAtB,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;EACR;EACD,IAAI,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;IAC7B,EAAA,GAAA,MAAA,CAAW,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA,CAAA,CAAA,EAAtB,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;IACP,EAAA,GAAA,MAAA,CAAW,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA,CAAA,CAAA,EAAtB,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;EACR;EAED,IAAM,IAAI,GAAG,EAAE;EAGf;;;;;;;;;;AAUG;EACH,IAAM,GAAG,GAAG,UAAA,CAAC,EAAA;IAAI,OAAA,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EAAX,CAAW;EAC5B,EAAA,GAAA,MAAA,CAAmB,WAAW,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,EAAA;IAAI,OAAA,GAAG,CAAC,CAAC,CAAC;EAAN,CAAM,CAAC,EAAA,CAAA,CAAA,EAA9G,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;EAEf,IAAI,UAAU,CAAC,YAAY,EAAE;IAC3B,EAAA,GAAA,MAAA,CAAmB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAA,CAAA,CAAA,EAAlC,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,EAAE,GAAA,EAAA,CAAA,CAAA,CAAA;EAChB;EAED,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,aAAa;IAC3B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA,YAAY,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACxE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACjC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;GACjB,MAAM,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE;IACtB,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;GACjB,MAAM;IACL,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACjC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB;EAED,OAAO,IAAI;AACb","sourcesContent":["import { Coordinate } from '@antv/coord';\nimport { isArray, isNil, get } from '@antv/util';\nimport { getAngle, getSectorPath } from '../../../util/graphics';\nimport { PathCommand } from '../../../dependents';\nimport { Point, ShapeInfo, ShapePoint } from '../../../interface';\n\n/**\n * @ignore\n * 根据数据点生成矩形的四个关键点\n * @param pointInfo 数据点信息\n * @param [isPyramid] 是否为尖底漏斗图\n * @returns rect points 返回矩形四个顶点信息\n */\nexport function getRectPoints(pointInfo: ShapePoint): Point[] {\n  const { x, y, y0, size } = pointInfo;\n  // 有 4 种情况，\n  // 1. x, y 都不是数组\n  // 2. y是数组，x不是\n  // 3. x是数组，y不是\n  // 4. x, y 都是数组\n  let yMin;\n  let yMax;\n  if (isArray(y)) {\n    [yMin, yMax] = y;\n  } else {\n    yMin = y0;\n    yMax = y;\n  }\n\n  let xMin;\n  let xMax;\n  if (isArray(x)) {\n    [xMin, xMax] = x;\n  } else {\n    xMin = x - size / 2;\n    xMax = x + size / 2;\n  }\n\n  const points = [\n    { x: xMin, y: yMin },\n    { x: xMin, y: yMax },\n  ];\n\n  // 矩形的四个关键点，结构如下（左下角顺时针连接）\n  // 1 ---- 2\n  // |      |\n  // 0 ---- 3\n  points.push({ x: xMax, y: yMax }, { x: xMax, y: yMin });\n\n  return points;\n}\n\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param isClosed path 是否需要闭合\n * @returns 返回矩形的 path\n */\nexport function getRectPath(points: Point[], isClosed: boolean = true): PathCommand[] {\n  const path = [];\n  const firstPoint = points[0];\n  path.push(['M', firstPoint.x, firstPoint.y]);\n  for (let i = 1, len = points.length; i < len; i++) {\n    path.push(['L', points[i].x, points[i].y]);\n  }\n  // 对于 shape=\"line\" path 不应该闭合，否则会造成 lineCap 绘图属性失效\n  if (isClosed) {\n    path.push(['L', firstPoint.x, firstPoint.y]); // 需要闭合\n    path.push(['z']);\n  }\n  return path;\n}\n\n/**\n * 处理 rect path 的 radius\n * @returns 返回矩形 path 的四个角的 arc 半径\n */\nexport function parseRadius(radius: number | number[], minLength: number): number[] {\n  let r1 = 0;\n  let r2 = 0;\n  let r3 = 0;\n  let r4 = 0;\n  if (isArray(radius)) {\n    if (radius.length === 1) {\n      r1 = r2 = r3 = r4 = radius[0];\n    } else if (radius.length === 2) {\n      r1 = r3 = radius[0];\n      r2 = r4 = radius[1];\n    } else if (radius.length === 3) {\n      r1 = radius[0];\n      r2 = r4 = radius[1];\n      r3 = radius[2];\n    } else {\n      r1 = radius[0];\n      r2 = radius[1];\n      r3 = radius[2];\n      r4 = radius[3];\n    }\n  } else {\n    r1 = r2 = r3 = r4 = radius;\n  }\n\n  // 处理 边界值\n  if (r1 + r2 > minLength) {\n    r1 = r1 ? minLength / (1 + r2 / r1) : 0;\n    r2 = minLength - r1;\n  }\n\n  if (r3 + r4 > minLength) {\n    r3 = r3 ? minLength / (1 + r4 / r3) : 0;\n    r4 = minLength - r3;\n  }\n\n  return [r1 || 0, r2 || 0, r3 || 0, r4 || 0];\n}\n\n/**\n * 获取 interval 矩形背景的 path\n * @param cfg 关键点的信息\n * @param points 已转化为画布坐标的 4 个关键点\n * @param coordinate 坐标系\n * @returns 返回矩形背景的 path\n */\nexport function getBackgroundRectPath(cfg: ShapeInfo, points: Point[], coordinate: Coordinate): PathCommand[] {\n  let path = [];\n  if (coordinate.isRect) {\n    const p0 = coordinate.isTransposed\n      ? { x: coordinate.start.x, y: points[0].y }\n      : { x: points[0].x, y: coordinate.start.y };\n    const p1 = coordinate.isTransposed\n      ? { x: coordinate.end.x, y: points[2].y }\n      : { x: points[3].x, y: coordinate.end.y };\n\n    // corner radius of background shape works only in 笛卡尔坐标系\n    const radius = get(cfg, ['background', 'style', 'radius']);\n    if (radius) {\n      const width = coordinate.isTransposed ? Math.abs(points[0].y - points[2].y) : points[2].x - points[1].x;\n      const height = coordinate.isTransposed ? coordinate.getWidth() : coordinate.getHeight();\n      const [r1, r2, r3, r4] = parseRadius(radius, Math.min(width, height));\n\n      // 同时存在 坐标系是否发生转置 和 y 镜像的时候\n      const isReflectYTransposed = (coordinate.isTransposed && coordinate.isReflect('y'));\n      const bump = isReflectYTransposed ? 0 : 1;\n      const opposite = (r: number) => isReflectYTransposed ? -r : r;\n\n      path.push(['M', p0.x, p1.y + opposite(r1)]);\n      r1 !== 0 && path.push(['A', r1, r1, 0, 0, bump, p0.x + r1, p1.y]);\n      path.push(['L', p1.x - r2, p1.y]);\n      r2 !== 0 && path.push(['A', r2, r2, 0, 0, bump, p1.x, p1.y + opposite(r2)]);\n      path.push(['L', p1.x, p0.y - opposite(r3)]);\n      r3 !== 0 && path.push(['A', r3, r3, 0, 0, bump, p1.x - r3, p0.y]);\n      path.push(['L', p0.x + r4, p0.y]);\n      r4 !== 0 && path.push(['A', r4, r4, 0, 0, bump, p0.x, p0.y - opposite(r4)]);\n    } else {\n      path.push(['M', p0.x, p0.y]);\n      path.push(['L', p1.x, p0.y]);\n      path.push(['L', p1.x, p1.y]);\n      path.push(['L', p0.x, p1.y]);\n      path.push(['L', p0.x, p0.y]);\n    }\n\n    path.push(['z']);\n  }\n\n  if (coordinate.isPolar) {\n    const center = coordinate.getCenter();\n    const { startAngle, endAngle } = getAngle(cfg, coordinate);\n    if (coordinate.type !== 'theta' && !coordinate.isTransposed) {\n      // 获取扇形 path\n      path = getSectorPath(center.x, center.y, coordinate.getRadius(), startAngle, endAngle);\n    } else {\n      const pow = (v) => Math.pow(v, 2);\n      const r1 = Math.sqrt(pow(center.x - points[0].x) + pow(center.y - points[0].y));\n      const r2 = Math.sqrt(pow(center.x - points[2].x) + pow(center.y - points[2].y));\n      // 获取扇形 path（其实是一个圆环，从 coordinate 的起始角度到结束角度）\n      path = getSectorPath(center.x, center.y, r1, coordinate.startAngle, coordinate.endAngle, r2);\n    }\n  }\n  return path;\n}\n\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param lineCap 'round'圆角样式\n * @param coor 坐标\n * @returns 返回矩形的 path\n */\nexport function getIntervalRectPath(points: Point[], lineCap: CanvasLineCap, coor: Coordinate): PathCommand[] {\n  const width = coor.getWidth();\n  const height = coor.getHeight();\n  const isRect = coor.type === 'rect';\n  let path = [];\n  const r = (points[2].x - points[1].x) / 2;\n  const ry = coor.isTransposed ? (r * height) / width : (r * width) / height;\n  if (lineCap === 'round') {\n    if (isRect) {\n      path.push(['M', points[0].x, points[0].y + ry]);\n      path.push(['L', points[1].x, points[1].y - ry]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y - ry]);\n      path.push(['L', points[3].x, points[3].y + ry]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y + ry]);\n    } else {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['L', points[1].x, points[1].y]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y]);\n      path.push(['L', points[3].x, points[3].y]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y]);\n    }\n    path.push(['z']);\n  } else {\n    path = getRectPath(points);\n  }\n  return path;\n}\n\n/**\n * @ignore\n * 根据 funnel 关键点绘制漏斗图的 path\n * @param points 图形关键点信息\n * @param nextPoints 下一个数据的图形关键点信息\n * @param isPyramid 是否为尖底漏斗图\n * @returns 返回漏斗图的图形 path\n */\nexport function getFunnelPath(points: Point[], nextPoints: Point[], isPyramid: boolean) {\n  const path = [];\n  if (!isNil(nextPoints)) {\n    path.push(\n      ['M', points[0].x, points[0].y],\n      ['L', points[1].x, points[1].y],\n      ['L', nextPoints[1].x, nextPoints[1].y],\n      ['L', nextPoints[0].x, nextPoints[0].y],\n      ['Z']\n    );\n  } else if (isPyramid) {\n    // 金字塔最底部\n    path.push(\n      ['M', points[0].x, points[0].y],\n      ['L', points[1].x, points[1].y],\n      ['L', (points[2].x + points[3].x) / 2, (points[2].y + points[3].y) / 2],\n      ['Z']\n    );\n  } else {\n    // 漏斗图最底部\n    path.push(\n      ['M', points[0].x, points[0].y],\n      ['L', points[1].x, points[1].y],\n      ['L', points[2].x, points[2].y],\n      ['L', points[3].x, points[3].y],\n      ['Z']\n    );\n  }\n\n  return path;\n}\n\n/**\n * 交换两个对象\n */\nfunction swap<T>(p0: T, p1: T) {\n  return [p1, p0];\n}\n\n/**\n * 获取 倒角 矩形\n * - 目前只适用于笛卡尔坐标系下\n */\nexport function getRectWithCornerRadius(points: Point[], coordinate: Coordinate, radius?: number | number[]) {\n  // 获取 四个关键点\n  let [p0, p1, p2, p3] = [...points];\n  let [r1, r2, r3, r4] = typeof radius === 'number' ? Array(4).fill(radius) : radius;\n\n  if (coordinate.isTransposed) {\n    [p1, p3] = swap(p1, p3);\n  }\n\n  /**\n   * 存在镜像\n   */\n  if (coordinate.isReflect('y')) {\n    [p0, p1] = swap(p0, p1);\n    [p2, p3] = swap(p2, p3);\n  }\n  if (coordinate.isReflect('x')) {\n    [p0, p3] = swap(p0, p3);\n    [p1, p2] = swap(p1, p2);\n  }\n\n  const path = [];\n\n\n  /**\n   *  p1 → p2\n   *  ↑    ↓\n   *  p0 ← p3\n   *\n   *  负数的情况，关键点会变成下面的形式\n   *\n   *  p0 ← p3               p2 ← p1\n   *  ↓    ↑                ↓     ↑\n   *  p1 → p2  --> (转置下)  p3 → p0\n   */\n  const abs = v => Math.abs(v);\n  [r1, r2, r3, r4] = parseRadius([r1, r2, r3, r4], Math.min(abs(p3.x - p0.x), abs(p1.y - p0.y))).map(d => abs(d));\n\n  if (coordinate.isTransposed) {\n    [r1, r2, r3, r4] = [r4, r1, r2, r3]\n  }\n\n  if (p0.y < p1.y /** 负数情况 */) {\n    path.push(['M', p3.x, p3.y + r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x - r3, p3.y]);\n    path.push(['L', p0.x + r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y + r4]);\n    path.push(['L', p1.x, p1.y - r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0/** 逆时针 */, p1.x + r1, p1.y]);\n    path.push(['L', p2.x - r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y - r2]);\n    path.push(['L', p3.x, p3.y + r3]);\n    path.push(['z']);\n  } else if (p3.x < p0.x) {\n    path.push(['M', p2.x + r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y + r2]);\n    path.push(['L', p3.x, p3.y - r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x + r3, p3.y]);\n    path.push(['L', p0.x - r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y - r4]);\n    path.push(['L', p1.x, p1.y + r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0, p1.x - r1, p1.y]);\n    path.push(['L', p2.x + r2, p2.y]);\n    path.push(['z']);\n  } else {\n    path.push(['M', p1.x, p1.y + r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 1, p1.x + r1, p1.y]);\n    path.push(['L', p2.x - r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 1, p2.x, p2.y + r2]);\n    path.push(['L', p3.x, p3.y - r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 1, p3.x - r3, p3.y]);\n    path.push(['L', p0.x + r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 1, p0.x, p0.y - r4]);\n    path.push(['L', p1.x, p1.y + r1]);\n    path.push(['z']);\n  }\n\n  return path;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}