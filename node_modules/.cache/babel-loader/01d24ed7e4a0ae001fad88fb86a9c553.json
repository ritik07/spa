{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getLogPositiveMin, log } from '../util/math';\nimport Continuous from './base';\n/**\n * Log 度量，处理非均匀分布\n */\nvar Log = /** @class */function (_super) {\n  __extends(Log, _super);\n  function Log() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'log';\n    return _this;\n  }\n  /**\n   * @override\n   */\n  Log.prototype.invert = function (value) {\n    var base = this.base;\n    var max = log(base, this.max);\n    var rangeMin = this.rangeMin();\n    var range = this.rangeMax() - rangeMin;\n    var min;\n    var positiveMin = this.positiveMin;\n    if (positiveMin) {\n      if (value === 0) {\n        return 0;\n      }\n      min = log(base, positiveMin / base);\n      var appendPercent = 1 / (max - min) * range; // 0 到 positiveMin的占比\n      if (value < appendPercent) {\n        // 落到 0 - positiveMin 之间\n        return value / appendPercent * positiveMin;\n      }\n    } else {\n      min = log(base, this.min);\n    }\n    var percent = (value - rangeMin) / range;\n    var tmp = percent * (max - min) + min;\n    return Math.pow(base, tmp);\n  };\n  Log.prototype.initCfg = function () {\n    this.tickMethod = 'log';\n    this.base = 10;\n    this.tickCount = 6;\n    this.nice = true;\n  };\n  // 设置\n  Log.prototype.setDomain = function () {\n    _super.prototype.setDomain.call(this);\n    var min = this.min;\n    if (min < 0) {\n      throw new Error('When you use log scale, the minimum value must be greater than zero!');\n    }\n    if (min === 0) {\n      this.positiveMin = getLogPositiveMin(this.values, this.base, this.max);\n    }\n  };\n  // 根据当前值获取占比\n  Log.prototype.getScalePercent = function (value) {\n    var max = this.max;\n    var min = this.min;\n    if (max === min) {\n      return 0;\n    }\n    // 如果值小于等于0，则按照0处理\n    if (value <= 0) {\n      return 0;\n    }\n    var base = this.base;\n    var positiveMin = this.positiveMin;\n    // 如果min == 0, 则根据比0大的最小值，计算比例关系。这个最小值作为坐标轴上的第二个tick，第一个是0但是不显示\n    if (positiveMin) {\n      min = positiveMin * 1 / base;\n    }\n    var percent;\n    // 如果数值小于次小值，那么就计算 value / 次小值 占整体的比例\n    if (value < positiveMin) {\n      percent = value / positiveMin / (log(base, max) - log(base, min));\n    } else {\n      percent = (log(base, value) - log(base, min)) / (log(base, max) - log(base, min));\n    }\n    return percent;\n  };\n  return Log;\n}(Continuous);\nexport default Log;","map":{"version":3,"sources":["../../src/continuous/log.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { getLogPositiveMin, log } from '../util/math';\nimport Continuous from './base';\n/**\n * Log 度量，处理非均匀分布\n */\nvar Log = /** @class */ (function (_super) {\n    __extends(Log, _super);\n    function Log() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'log';\n        return _this;\n    }\n    /**\n     * @override\n     */\n    Log.prototype.invert = function (value) {\n        var base = this.base;\n        var max = log(base, this.max);\n        var rangeMin = this.rangeMin();\n        var range = this.rangeMax() - rangeMin;\n        var min;\n        var positiveMin = this.positiveMin;\n        if (positiveMin) {\n            if (value === 0) {\n                return 0;\n            }\n            min = log(base, positiveMin / base);\n            var appendPercent = (1 / (max - min)) * range; // 0 到 positiveMin的占比\n            if (value < appendPercent) {\n                // 落到 0 - positiveMin 之间\n                return (value / appendPercent) * positiveMin;\n            }\n        }\n        else {\n            min = log(base, this.min);\n        }\n        var percent = (value - rangeMin) / range;\n        var tmp = percent * (max - min) + min;\n        return Math.pow(base, tmp);\n    };\n    Log.prototype.initCfg = function () {\n        this.tickMethod = 'log';\n        this.base = 10;\n        this.tickCount = 6;\n        this.nice = true;\n    };\n    // 设置\n    Log.prototype.setDomain = function () {\n        _super.prototype.setDomain.call(this);\n        var min = this.min;\n        if (min < 0) {\n            throw new Error('When you use log scale, the minimum value must be greater than zero!');\n        }\n        if (min === 0) {\n            this.positiveMin = getLogPositiveMin(this.values, this.base, this.max);\n        }\n    };\n    // 根据当前值获取占比\n    Log.prototype.getScalePercent = function (value) {\n        var max = this.max;\n        var min = this.min;\n        if (max === min) {\n            return 0;\n        }\n        // 如果值小于等于0，则按照0处理\n        if (value <= 0) {\n            return 0;\n        }\n        var base = this.base;\n        var positiveMin = this.positiveMin;\n        // 如果min == 0, 则根据比0大的最小值，计算比例关系。这个最小值作为坐标轴上的第二个tick，第一个是0但是不显示\n        if (positiveMin) {\n            min = (positiveMin * 1) / base;\n        }\n        var percent;\n        // 如果数值小于次小值，那么就计算 value / 次小值 占整体的比例\n        if (value < positiveMin) {\n            percent = value / positiveMin / (log(base, max) - log(base, min));\n        }\n        else {\n            percent = (log(base, value) - log(base, min)) / (log(base, max) - log(base, min));\n        }\n        return percent;\n    };\n    return Log;\n}(Continuous));\nexport default Log;\n//# sourceMappingURL=log.js.map"]},"metadata":{},"sourceType":"module"}