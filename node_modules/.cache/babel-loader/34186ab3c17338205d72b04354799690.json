{"ast":null,"code":"var WILDCARD = '*';\n/* event-emitter */\nvar EventEmitter = /** @class */function () {\n  function EventEmitter() {\n    this._events = {};\n  }\n  /**\n   * 监听一个事件\n   * @param evt\n   * @param callback\n   * @param once\n   */\n  EventEmitter.prototype.on = function (evt, callback, once) {\n    if (!this._events[evt]) {\n      this._events[evt] = [];\n    }\n    this._events[evt].push({\n      callback: callback,\n      once: !!once\n    });\n    return this;\n  };\n  /**\n   * 监听一个事件一次\n   * @param evt\n   * @param callback\n   */\n  EventEmitter.prototype.once = function (evt, callback) {\n    return this.on(evt, callback, true);\n  };\n  /**\n   * 触发一个事件\n   * @param evt\n   * @param args\n   */\n  EventEmitter.prototype.emit = function (evt) {\n    var _this = this;\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var events = this._events[evt] || [];\n    var wildcardEvents = this._events[WILDCARD] || [];\n    // 实际的处理 emit 方法\n    var doEmit = function (es) {\n      var length = es.length;\n      for (var i = 0; i < length; i++) {\n        if (!es[i]) {\n          continue;\n        }\n        var _a = es[i],\n          callback = _a.callback,\n          once = _a.once;\n        if (once) {\n          es.splice(i, 1);\n          if (es.length === 0) {\n            delete _this._events[evt];\n          }\n          length--;\n          i--;\n        }\n        callback.apply(_this, args);\n      }\n    };\n    doEmit(events);\n    doEmit(wildcardEvents);\n  };\n  /**\n   * 取消监听一个事件，或者一个channel\n   * @param evt\n   * @param callback\n   */\n  EventEmitter.prototype.off = function (evt, callback) {\n    if (!evt) {\n      // evt 为空全部清除\n      this._events = {};\n    } else {\n      if (!callback) {\n        // evt 存在，callback 为空，清除事件所有方法\n        delete this._events[evt];\n      } else {\n        // evt 存在，callback 存在，清除匹配的\n        var events = this._events[evt] || [];\n        var length_1 = events.length;\n        for (var i = 0; i < length_1; i++) {\n          if (events[i].callback === callback) {\n            events.splice(i, 1);\n            length_1--;\n            i--;\n          }\n        }\n        if (events.length === 0) {\n          delete this._events[evt];\n        }\n      }\n    }\n    return this;\n  };\n  /* 当前所有的事件 */\n  EventEmitter.prototype.getEvents = function () {\n    return this._events;\n  };\n  return EventEmitter;\n}();\nexport default EventEmitter;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var WILDCARD = '*';\n/* event-emitter */\nvar EventEmitter = /** @class */ (function () {\n    function EventEmitter() {\n        this._events = {};\n    }\n    /**\n     * 监听一个事件\n     * @param evt\n     * @param callback\n     * @param once\n     */\n    EventEmitter.prototype.on = function (evt, callback, once) {\n        if (!this._events[evt]) {\n            this._events[evt] = [];\n        }\n        this._events[evt].push({\n            callback: callback,\n            once: !!once,\n        });\n        return this;\n    };\n    /**\n     * 监听一个事件一次\n     * @param evt\n     * @param callback\n     */\n    EventEmitter.prototype.once = function (evt, callback) {\n        return this.on(evt, callback, true);\n    };\n    /**\n     * 触发一个事件\n     * @param evt\n     * @param args\n     */\n    EventEmitter.prototype.emit = function (evt) {\n        var _this = this;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var events = this._events[evt] || [];\n        var wildcardEvents = this._events[WILDCARD] || [];\n        // 实际的处理 emit 方法\n        var doEmit = function (es) {\n            var length = es.length;\n            for (var i = 0; i < length; i++) {\n                if (!es[i]) {\n                    continue;\n                }\n                var _a = es[i], callback = _a.callback, once = _a.once;\n                if (once) {\n                    es.splice(i, 1);\n                    if (es.length === 0) {\n                        delete _this._events[evt];\n                    }\n                    length--;\n                    i--;\n                }\n                callback.apply(_this, args);\n            }\n        };\n        doEmit(events);\n        doEmit(wildcardEvents);\n    };\n    /**\n     * 取消监听一个事件，或者一个channel\n     * @param evt\n     * @param callback\n     */\n    EventEmitter.prototype.off = function (evt, callback) {\n        if (!evt) {\n            // evt 为空全部清除\n            this._events = {};\n        }\n        else {\n            if (!callback) {\n                // evt 存在，callback 为空，清除事件所有方法\n                delete this._events[evt];\n            }\n            else {\n                // evt 存在，callback 存在，清除匹配的\n                var events = this._events[evt] || [];\n                var length_1 = events.length;\n                for (var i = 0; i < length_1; i++) {\n                    if (events[i].callback === callback) {\n                        events.splice(i, 1);\n                        length_1--;\n                        i--;\n                    }\n                }\n                if (events.length === 0) {\n                    delete this._events[evt];\n                }\n            }\n        }\n        return this;\n    };\n    /* 当前所有的事件 */\n    EventEmitter.prototype.getEvents = function () {\n        return this._events;\n    };\n    return EventEmitter;\n}());\nexport default EventEmitter;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}