{"ast":null,"code":"import { isArray, isNil, isString } from '@antv/util';\n// todo 这个到底目的是什么？\nvar toScaleString = function (scale, value) {\n  if (isString(value)) {\n    return value;\n  }\n  return scale.invert(scale.scale(value));\n};\n/**\n * 所有视觉通道属性的基类\n * @class Base\n */\nvar Attribute = /** @class */function () {\n  function Attribute(cfg) {\n    this.names = [];\n    this.scales = [];\n    this.linear = false;\n    this.values = [];\n    this.callback = function () {\n      return [];\n    };\n    // 解析配置\n    this._parseCfg(cfg);\n  }\n  /**\n   * 映射的值组成的数组\n   * @param params 对应 scale 顺序的值传入\n   */\n  Attribute.prototype.mapping = function () {\n    var _this = this;\n    var params = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n    var values = params.map(function (param, idx) {\n      return _this._toOriginParam(param, _this.scales[idx]);\n    });\n    return this.callback.apply(this, values);\n  };\n  /**\n   * 如果进行线性映射，返回对应的映射值\n   * @param percent\n   */\n  Attribute.prototype.getLinearValue = function (percent) {\n    // 分段数量\n    var steps = this.values.length - 1;\n    var step = Math.floor(steps * percent);\n    var leftPercent = steps * percent - step;\n    // todo 不懂这个逻辑\n    var start = this.values[step];\n    var end = step === steps ? start : this.values[step + 1];\n    // 线性方程\n    return start + (end - start) * leftPercent;\n  };\n  /**\n   * 根据度量获取属性名\n   */\n  Attribute.prototype.getNames = function () {\n    var scales = this.scales;\n    var names = this.names;\n    var length = Math.min(scales.length, names.length);\n    var rst = [];\n    for (var i = 0; i < length; i += 1) {\n      rst.push(names[i]);\n    }\n    return rst;\n  };\n  /**\n   * 获取所有的维度名\n   */\n  Attribute.prototype.getFields = function () {\n    return this.scales.map(function (scale) {\n      return scale.field;\n    });\n  };\n  /**\n   * 根据名称获取度量\n   * @param name\n   */\n  Attribute.prototype.getScale = function (name) {\n    return this.scales[this.names.indexOf(name)];\n  };\n  /**\n   * 默认的回调函数（用户没有自定义 callback，或者用户自定义 callback 返回空的时候，使用 values 映射）\n   * @param params\n   */\n  Attribute.prototype.defaultCallback = function () {\n    var _this = this;\n    var params = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n    // 没有 params 的情况，是指没有指定 fields，直接返回配置的 values 常量\n    if (params.length === 0) {\n      return this.values;\n    }\n    return params.map(function (param, idx) {\n      var scale = _this.scales[idx];\n      return scale.type === 'identity' ? scale.values[0] : _this._getAttributeValue(scale, param);\n    });\n  };\n  // 解析配置\n  Attribute.prototype._parseCfg = function (cfg) {\n    var _this = this;\n    var _a = cfg.type,\n      type = _a === void 0 ? 'base' : _a,\n      _b = cfg.names,\n      names = _b === void 0 ? [] : _b,\n      _c = cfg.scales,\n      scales = _c === void 0 ? [] : _c,\n      _d = cfg.values,\n      values = _d === void 0 ? [] : _d,\n      callback = cfg.callback;\n    this.type = type;\n    this.scales = scales;\n    this.values = values;\n    this.names = names;\n    // 构造 callback 方法\n    this.callback = function () {\n      var params = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        params[_i] = arguments[_i];\n      }\n      /**\n       * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值\n       */\n      if (callback) {\n        // 使用用户返回的值处理\n        var ret = callback.apply(void 0, params);\n        if (!isNil(ret)) {\n          return [ret];\n        }\n      }\n      // 没有 callback 或者用户 callback 返回值为空，则使用默认的逻辑处理\n      return _this.defaultCallback.apply(_this, params);\n    };\n  };\n  // 获取属性值，将值映射到视觉通道\n  Attribute.prototype._getAttributeValue = function (scale, value) {\n    // 如果是非线性的字段，直接从 values 中取值即可\n    if (scale.isCategory && !this.linear) {\n      // 离散 scale 变换成索引\n      var idx = scale.translate(value);\n      return this.values[idx % this.values.length];\n    }\n    // 线性则使用线性值\n    var percent = scale.scale(value);\n    return this.getLinearValue(percent);\n  };\n  /**\n   * 通过 scale 拿到数据对应的原始的参数\n   * @param param\n   * @param scale\n   * @private\n   */\n  Attribute.prototype._toOriginParam = function (param, scale) {\n    // 是线性，直接返回\n    // 非线性，使用 scale 变换\n    return !scale.isLinear ? isArray(param) ? param.map(function (p) {\n      return toScaleString(scale, p);\n    }) : toScaleString(scale, param) : param;\n  };\n  return Attribute;\n}();\nexport default Attribute;","map":{"version":3,"sources":["../../src/attributes/base.ts"],"names":[],"mappings":"AAAA,SAAyB,OAAO,EAAE,KAAK,EAAE,QAAQ,QAAa,YAAY;AAG1E;AACA,IAAM,aAAa,GAAG,UAAC,KAAY,EAAE,KAAU,EAAA;EAC7C,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;IACnB,OAAO,KAAK;EACb;EACD,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACzC,CAAC;AAID;;;AAGG;AACH,IAAA,SAAA,GAAA,aAAA,YAAA;EAQE,SAAA,SAAA,CAAY,GAAiB,EAAA;IANtB,IAAA,CAAA,KAAK,GAAa,EAAE;IACpB,IAAA,CAAA,MAAM,GAAY,EAAE;IACpB,IAAA,CAAA,MAAM,GAAY,KAAK;IAEvB,IAAA,CAAA,MAAM,GAAU,EAAE;IAMlB,IAAA,CAAA,QAAQ,GAAiB,YAAA;MAAM,OAAA,EAAE;IAAF,CAAE;IAHtC;IACA,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;EACrB;EAGA;;;AAGG;EACI,SAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IAAe,IAAA,MAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAgB,EAAhB,EAAA,GAAA,SAAA,CAAA,MAAgB,EAAhB,EAAA,EAAgB,EAAA;MAAhB,MAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACb,IAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,GAAG,EAAA;MACnC,OAAO,KAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACrD,CAAC,CAAC;IAEF,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC;EAC1C,CAAC;EAED;;;AAGG;EACI,SAAA,CAAA,SAAA,CAAA,cAAc,GAArB,UAAsB,OAAe,EAAA;IACnC;IACA,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;IAEpC,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;IACxC,IAAM,WAAW,GAAG,KAAK,GAAG,OAAO,GAAG,IAAI;IAE1C;IACA,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IAC/B,IAAM,GAAG,GAAG,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC;IAE1D;IACA,OAAO,KAAK,GAAG,CAAC,GAAG,GAAG,KAAK,IAAI,WAAW;EAC5C,CAAC;EAED;;AAEG;EACI,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,YAAA;IACE,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM;IAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK;IAExB,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC;IACpD,IAAM,GAAG,GAAG,EAAE;IACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;MAClC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnB;IACD,OAAO,GAAG;EACZ,CAAC;EAED;;AAEG;EACI,SAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,YAAA;IACE,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAA;MAAK,OAAA,KAAK,CAAC,KAAK;IAAX,CAAW,CAAC;EAChD,CAAC;EAED;;;AAGG;EACI,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,UAAgB,IAAY,EAAA;IAC1B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;EAC9C,CAAC;EAED;;;AAGG;EACK,SAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IAAwB,IAAA,MAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAgB,EAAhB,EAAA,GAAA,SAAA,CAAA,MAAgB,EAAhB,EAAA,EAAgB,EAAA;MAAhB,MAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACtB;IACA,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;MACvB,OAAO,IAAI,CAAC,MAAM;IACnB;IAED,OAAO,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,GAAG,EAAA;MAC3B,IAAM,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC;MAE9B,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,KAAK,CAAC;IAC5F,CAAC,CAAC;EACJ,CAAC;EAED;EACQ,SAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,GAAiB,EAAA;IAAnC,IAAA,KAAA,GAAA,IAAA;IACU,IAAA,EAAA,GAAkE,GAAG,CAAA,IAAxD;MAAb,IAAI,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,MAAM,GAAA,EAAA;MAAE,EAAA,GAAmD,GAAG,CAAA,KAA5C;MAAV,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAA,EAAA;MAAE,EAAA,GAAuC,GAAG,CAAA,MAA/B;MAAX,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAA,EAAA;MAAE,EAAA,GAA0B,GAAG,CAAA,MAAlB;MAAX,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAA,EAAA;MAAE,QAAQ,GAAK,GAAG,CAAA,QAAR;IAErE,IAAI,CAAC,IAAI,GAAG,IAAI;IAEhB,IAAI,CAAC,MAAM,GAAG,MAAM;IACpB,IAAI,CAAC,MAAM,GAAG,MAAM;IACpB,IAAI,CAAC,KAAK,GAAG,KAAK;IAElB;IACA,IAAI,CAAC,QAAQ,GAAG,YAAA;MAAC,IAAA,MAAA,GAAA,EAAA;WAAA,IAAA,EAAA,GAAA,CAAgB,EAAhB,EAAA,GAAA,SAAA,CAAA,MAAgB,EAAhB,EAAA,EAAgB,EAAA;QAAhB,MAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;MACf;;AAEG;MACH,IAAI,QAAQ,EAAE;QACZ;QACA,IAAM,GAAG,GAAG,QAAQ,CAAA,KAAA,CAAA,KAAA,CAAA,EAAI,MAAM,CAAC;QAC/B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;UACf,OAAO,CAAC,GAAG,CAAC;QACb;MACF;MAED;MACA,OAAO,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAI,EAAE,MAAM,CAAC;IACjD,CAAC;EACH,CAAC;EAED;EACQ,SAAA,CAAA,SAAA,CAAA,kBAAkB,GAA1B,UAA2B,KAAY,EAAE,KAAU,EAAA;IACjD;IACA,IAAI,KAAK,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;MACpC;MACA,IAAM,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAW;MAC5C,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC7C;IAED;IACA,IAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;IAClC,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;EACrC,CAAC;EAED;;;;;AAKG;EACK,SAAA,CAAA,SAAA,CAAA,cAAc,GAAtB,UAAuB,KAAU,EAAE,KAAY,EAAA;IAC7C;IACA;IACA,OAAO,CAAC,KAAK,CAAC,QAAQ,GAClB,OAAO,CAAC,KAAK,CAAC,GACZ,KAAK,CAAC,GAAG,CAAC,UAAC,CAAM,EAAA;MAAK,OAAA,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;IAAvB,CAAuB,CAAC,GAC9C,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,GAC7B,KAAK;EACX,CAAC;EACH,OAAA,SAAC;AAAD,CAAC,EAAA","sourceRoot":"","sourcesContent":["import { isArray, isNil, isString } from '@antv/util';\n// todo 这个到底目的是什么？\nvar toScaleString = function (scale, value) {\n    if (isString(value)) {\n        return value;\n    }\n    return scale.invert(scale.scale(value));\n};\n/**\n * 所有视觉通道属性的基类\n * @class Base\n */\nvar Attribute = /** @class */ (function () {\n    function Attribute(cfg) {\n        this.names = [];\n        this.scales = [];\n        this.linear = false;\n        this.values = [];\n        this.callback = function () { return []; };\n        // 解析配置\n        this._parseCfg(cfg);\n    }\n    /**\n     * 映射的值组成的数组\n     * @param params 对应 scale 顺序的值传入\n     */\n    Attribute.prototype.mapping = function () {\n        var _this = this;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        var values = params.map(function (param, idx) {\n            return _this._toOriginParam(param, _this.scales[idx]);\n        });\n        return this.callback.apply(this, values);\n    };\n    /**\n     * 如果进行线性映射，返回对应的映射值\n     * @param percent\n     */\n    Attribute.prototype.getLinearValue = function (percent) {\n        // 分段数量\n        var steps = this.values.length - 1;\n        var step = Math.floor(steps * percent);\n        var leftPercent = steps * percent - step;\n        // todo 不懂这个逻辑\n        var start = this.values[step];\n        var end = step === steps ? start : this.values[step + 1];\n        // 线性方程\n        return start + (end - start) * leftPercent;\n    };\n    /**\n     * 根据度量获取属性名\n     */\n    Attribute.prototype.getNames = function () {\n        var scales = this.scales;\n        var names = this.names;\n        var length = Math.min(scales.length, names.length);\n        var rst = [];\n        for (var i = 0; i < length; i += 1) {\n            rst.push(names[i]);\n        }\n        return rst;\n    };\n    /**\n     * 获取所有的维度名\n     */\n    Attribute.prototype.getFields = function () {\n        return this.scales.map(function (scale) { return scale.field; });\n    };\n    /**\n     * 根据名称获取度量\n     * @param name\n     */\n    Attribute.prototype.getScale = function (name) {\n        return this.scales[this.names.indexOf(name)];\n    };\n    /**\n     * 默认的回调函数（用户没有自定义 callback，或者用户自定义 callback 返回空的时候，使用 values 映射）\n     * @param params\n     */\n    Attribute.prototype.defaultCallback = function () {\n        var _this = this;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        // 没有 params 的情况，是指没有指定 fields，直接返回配置的 values 常量\n        if (params.length === 0) {\n            return this.values;\n        }\n        return params.map(function (param, idx) {\n            var scale = _this.scales[idx];\n            return scale.type === 'identity' ? scale.values[0] : _this._getAttributeValue(scale, param);\n        });\n    };\n    // 解析配置\n    Attribute.prototype._parseCfg = function (cfg) {\n        var _this = this;\n        var _a = cfg.type, type = _a === void 0 ? 'base' : _a, _b = cfg.names, names = _b === void 0 ? [] : _b, _c = cfg.scales, scales = _c === void 0 ? [] : _c, _d = cfg.values, values = _d === void 0 ? [] : _d, callback = cfg.callback;\n        this.type = type;\n        this.scales = scales;\n        this.values = values;\n        this.names = names;\n        // 构造 callback 方法\n        this.callback = function () {\n            var params = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                params[_i] = arguments[_i];\n            }\n            /**\n             * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值\n             */\n            if (callback) {\n                // 使用用户返回的值处理\n                var ret = callback.apply(void 0, params);\n                if (!isNil(ret)) {\n                    return [ret];\n                }\n            }\n            // 没有 callback 或者用户 callback 返回值为空，则使用默认的逻辑处理\n            return _this.defaultCallback.apply(_this, params);\n        };\n    };\n    // 获取属性值，将值映射到视觉通道\n    Attribute.prototype._getAttributeValue = function (scale, value) {\n        // 如果是非线性的字段，直接从 values 中取值即可\n        if (scale.isCategory && !this.linear) {\n            // 离散 scale 变换成索引\n            var idx = scale.translate(value);\n            return this.values[idx % this.values.length];\n        }\n        // 线性则使用线性值\n        var percent = scale.scale(value);\n        return this.getLinearValue(percent);\n    };\n    /**\n     * 通过 scale 拿到数据对应的原始的参数\n     * @param param\n     * @param scale\n     * @private\n     */\n    Attribute.prototype._toOriginParam = function (param, scale) {\n        // 是线性，直接返回\n        // 非线性，使用 scale 变换\n        return !scale.isLinear\n            ? isArray(param)\n                ? param.map(function (p) { return toScaleString(scale, p); })\n                : toScaleString(scale, param)\n            : param;\n    };\n    return Attribute;\n}());\nexport default Attribute;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}