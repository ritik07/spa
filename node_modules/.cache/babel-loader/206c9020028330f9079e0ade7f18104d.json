{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Action from '../base';\nimport { distance } from '../util';\nvar DISTANCE = 4; // 移动的最小距离\n/**\n * @ignore\n * View 支持 Drag 的 Action\n */\nvar Drag = /** @class */function (_super) {\n  __extends(Drag, _super);\n  function Drag() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    // Action 开始，不等同于 拖拽开始，需要判定移动的范围\n    _this.starting = false;\n    // 拖拽开始\n    _this.dragStart = false;\n    return _this;\n  }\n  /**\n   * 开始\n   */\n  Drag.prototype.start = function () {\n    this.starting = true;\n    this.startPoint = this.context.getCurrentPoint();\n  };\n  /**\n   * 拖拽\n   */\n  Drag.prototype.drag = function () {\n    if (!this.startPoint) {\n      return;\n    }\n    var current = this.context.getCurrentPoint();\n    var view = this.context.view;\n    var event = this.context.event;\n    if (!this.dragStart) {\n      if (distance(current, this.startPoint) > DISTANCE) {\n        view.emit('dragstart', {\n          target: event.target,\n          x: event.x,\n          y: event.y\n        });\n        this.dragStart = true;\n      }\n    } else {\n      view.emit('drag', {\n        target: event.target,\n        x: event.x,\n        y: event.y\n      });\n    }\n  };\n  /**\n   * 结束\n   */\n  Drag.prototype.end = function () {\n    if (this.dragStart) {\n      var view = this.context.view;\n      var event_1 = this.context.event;\n      view.emit('dragend', {\n        target: event_1.target,\n        x: event_1.x,\n        y: event_1.y\n      });\n    }\n    this.starting = false;\n    this.dragStart = false;\n  };\n  return Drag;\n}(Action);\nexport default Drag;","map":{"version":3,"sources":["../../../../src/interaction/action/view/drag.ts"],"names":[],"mappings":";AACA,OAAO,MAAM,MAAM,SAAS;AAC5B,SAAS,QAAQ,QAAQ,SAAS;AAElC,IAAM,QAAQ,GAAG,CAAC,CAAC,CAAC;AAEpB;;;AAGG;AACH,IAAA,IAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmB,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;EAAnB,SAAA,IAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IACE;IACU,KAAA,CAAA,QAAQ,GAAG,KAAK;IAC1B;IACU,KAAA,CAAA,SAAS,GAAG,KAAK;;EAwD7B;EApDE;;AAEG;EACI,IAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,YAAA;IACE,IAAI,CAAC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;EAClD,CAAC;EAED;;AAEG;EACI,IAAA,CAAA,SAAA,CAAA,IAAI,GAAX,YAAA;IACE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;MACpB;IACD;IACD,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;IAC9C,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI;IAC9B,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK;IAChC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;MACnB,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,QAAQ,EAAE;QACjD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;UACrB,MAAM,EAAE,KAAK,CAAC,MAAM;UACpB,CAAC,EAAE,KAAK,CAAC,CAAC;UACV,CAAC,EAAE,KAAK,CAAC;SACV,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,IAAI;MACtB;KACF,MAAM;MACL,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,MAAM,EAAE,KAAK,CAAC,MAAM;QACpB,CAAC,EAAE,KAAK,CAAC,CAAC;QACV,CAAC,EAAE,KAAK,CAAC;OACV,CAAC;IACH;EACH,CAAC;EAED;;AAEG;EACI,IAAA,CAAA,SAAA,CAAA,GAAG,GAAV,YAAA;IACE,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI;MAC9B,IAAM,OAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK;MAChC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;QACnB,MAAM,EAAE,OAAK,CAAC,MAAM;QACpB,CAAC,EAAE,OAAK,CAAC,CAAC;QACV,CAAC,EAAE,OAAK,CAAC;OACV,CAAC;IACH;IACD,IAAI,CAAC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAAC,SAAS,GAAG,KAAK;EACxB,CAAC;EACH,OAAA,IAAC;AAAD,CAAC,CA5DkB,MAAM,CAAA;AA8DzB,eAAe,IAAI","sourcesContent":["import { Point } from '../../../dependents';\nimport Action from '../base';\nimport { distance } from '../util';\n\nconst DISTANCE = 4; // 移动的最小距离\n\n/**\n * @ignore\n * View 支持 Drag 的 Action\n */\nclass Drag extends Action {\n  // Action 开始，不等同于 拖拽开始，需要判定移动的范围\n  protected starting = false;\n  // 拖拽开始\n  protected dragStart = false;\n  // 开始的节点\n  protected startPoint: Point;\n\n  /**\n   * 开始\n   */\n  public start() {\n    this.starting = true;\n    this.startPoint = this.context.getCurrentPoint();\n  }\n\n  /**\n   * 拖拽\n   */\n  public drag() {\n    if (!this.startPoint) {\n      return;\n    }\n    const current = this.context.getCurrentPoint();\n    const view = this.context.view;\n    const event = this.context.event;\n    if (!this.dragStart) {\n      if (distance(current, this.startPoint) > DISTANCE) {\n        view.emit('dragstart', {\n          target: event.target,\n          x: event.x,\n          y: event.y,\n        });\n        this.dragStart = true;\n      }\n    } else {\n      view.emit('drag', {\n        target: event.target,\n        x: event.x,\n        y: event.y,\n      });\n    }\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    if (this.dragStart) {\n      const view = this.context.view;\n      const event = this.context.event;\n      view.emit('dragend', {\n        target: event.target,\n        x: event.x,\n        y: event.y,\n      });\n    }\n    this.starting = false;\n    this.dragStart = false;\n  }\n}\n\nexport default Drag;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}