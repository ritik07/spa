{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { groupBy, keys, map } from '@antv/util';\nimport { findLabelTextShape } from '../../util';\n/**\n * 对同一组(相同 xField )的 Label 进行排序：第一个、最后一个、其他...\n * @param geometry\n * @param labels\n */\nfunction sortLabels(geometry, labels) {\n  var yField = geometry.getXYFields()[1];\n  var result = [];\n  var sortedLabels = labels.sort(function (left, right) {\n    return left.get('data')[yField] - left.get('data')[yField];\n  });\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.shift());\n  }\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.pop());\n  }\n  result.push.apply(result, __spreadArray([], __read(sortedLabels), false));\n  return result;\n}\nfunction hasSome(dones, current, compare) {\n  return dones.some(function (done) {\n    return compare(done, current);\n  });\n}\n/**\n * 计算两个矩形之间的堆叠区域面积\n */\nfunction getOverlapArea(a, b, margin) {\n  if (margin === void 0) {\n    margin = 0;\n  }\n  var xOverlap = Math.max(0, Math.min(a.x + a.width + margin, b.x + b.width + margin) - Math.max(a.x - margin, b.x - margin));\n  var yOverlap = Math.max(0, Math.min(a.y + a.height + margin, b.y + b.height + margin) - Math.max(a.y - margin, b.y - margin));\n  return xOverlap * yOverlap;\n}\n/**\n * 判断新添加的 Label 是否和已存在的发生重叠\n * @param dones\n * @param current\n */\nfunction checkShapeOverlap(dones, current) {\n  return hasSome(dones, current, function (left, right) {\n    var leftText = findLabelTextShape(left);\n    var rightText = findLabelTextShape(right);\n    return getOverlapArea(leftText.getCanvasBBox(), rightText.getCanvasBBox(), 2) > 0;\n  });\n}\n/**\n * 适用于 point geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n * @param region\n * @param cfg\n */\nexport function pathAdjustPosition(items, labels, shapes, region, cfg) {\n  var _a, _b;\n  if (shapes.length === 0) {\n    return;\n  }\n  var element = (_a = shapes[0]) === null || _a === void 0 ? void 0 : _a.get('element');\n  var geometry = element === null || element === void 0 ? void 0 : element.geometry;\n  if (!geometry || ['path', 'line', 'area'].indexOf(geometry.type) < 0) {\n    return;\n  }\n  var _c = __read(geometry.getXYFields(), 2),\n    xField = _c[0],\n    yField = _c[1];\n  var groupedLabels = groupBy(labels, function (label) {\n    return label.get('data')[xField];\n  });\n  var dones = [];\n  var offset = cfg && cfg.offset || ((_b = items[0]) === null || _b === void 0 ? void 0 : _b.offset) || 12;\n  map(keys(groupedLabels).reverse(), function (xValue) {\n    var sortedCollections = sortLabels(geometry, groupedLabels[xValue]);\n    while (sortedCollections.length) {\n      var current = sortedCollections.shift();\n      var textShape = findLabelTextShape(current);\n      if (hasSome(dones, current, function (left, right) {\n        return left.get('data')[xField] === right.get('data')[xField] && left.get('data')[yField] === right.get('data')[yField];\n      })) {\n        // 重复位置，直接隐藏\n        textShape.set('visible', false);\n        continue;\n      }\n      var upFail = checkShapeOverlap(dones, current);\n      var downFail = false;\n      if (upFail) {\n        textShape.attr('y', textShape.attr('y') + 2 * offset);\n        downFail = checkShapeOverlap(dones, current);\n      }\n      if (downFail) {\n        textShape.set('visible', false);\n        continue;\n      }\n      dones.push(current);\n    }\n  });\n}","map":{"version":3,"sources":["../../../../../src/geometry/label/layout/path/adjust-position.ts"],"names":[],"mappings":"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","sourcesContent":["import { groupBy, keys, map } from '@antv/util';\nimport { IGroup, IShape, BBox } from '../../../../dependents';\nimport Geometry from '../../../base';\nimport Element from '../../../element';\nimport { LabelItem } from '../../interface';\nimport { findLabelTextShape } from '../../util';\n\n/**\n * point-adjust-position layout 的配置类型\n */\nexport interface PointAdjustPositionLayoutCfg {\n  offset?: number;\n}\n\n/**\n * 对同一组(相同 xField )的 Label 进行排序：第一个、最后一个、其他...\n * @param geometry\n * @param labels\n */\nfunction sortLabels(geometry: Geometry, labels: IGroup[]) {\n  const yField = geometry.getXYFields()[1];\n  const result: IGroup[] = [];\n  const sortedLabels = labels.sort((left, right) => left.get('data')[yField] - left.get('data')[yField]);\n\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.shift());\n  }\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.pop());\n  }\n  result.push(...sortedLabels);\n\n  return result;\n}\n\nfunction hasSome(dones: IGroup[], current: IGroup, compare: (left: IGroup, right: IGroup) => boolean): boolean {\n  return dones.some((done) => compare(done, current));\n}\n\n/**\n * 计算两个矩形之间的堆叠区域面积\n */\nfunction getOverlapArea(a: BBox, b: BBox, margin = 0) {\n  const xOverlap = Math.max(\n    0,\n    Math.min(a.x + a.width + margin, b.x + b.width + margin) - Math.max(a.x - margin, b.x - margin)\n  );\n  const yOverlap = Math.max(\n    0,\n    Math.min(a.y + a.height + margin, b.y + b.height + margin) - Math.max(a.y - margin, b.y - margin)\n  );\n\n  return xOverlap * yOverlap;\n}\n\n/**\n * 判断新添加的 Label 是否和已存在的发生重叠\n * @param dones\n * @param current\n */\nfunction checkShapeOverlap(dones: IGroup[], current: IGroup): boolean {\n  return hasSome(dones, current, (left, right) => {\n    const leftText = findLabelTextShape(left);\n    const rightText = findLabelTextShape(right);\n\n    return getOverlapArea(leftText.getCanvasBBox(), rightText.getCanvasBBox(), 2) > 0;\n  });\n}\n/**\n * 适用于 point geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n * @param region\n * @param cfg\n */\nexport function pathAdjustPosition(\n  items: LabelItem[],\n  labels: IGroup[],\n  shapes: IShape[] | IGroup[],\n  region: BBox,\n  cfg: PointAdjustPositionLayoutCfg\n): void {\n  if (shapes.length === 0) {\n    return;\n  }\n\n  const element: Element = shapes[0]?.get('element');\n  const geometry: Geometry = element?.geometry;\n  if (!geometry || ['path', 'line', 'area'].indexOf(geometry.type) < 0) {\n    return;\n  }\n  const [xField, yField] = geometry.getXYFields();\n  const groupedLabels = groupBy(labels, (label) => label.get('data')[xField]);\n  const dones: IGroup[] = [];\n  const offset = (cfg && cfg.offset) || items[0]?.offset || 12;\n\n  map(keys(groupedLabels).reverse(), (xValue) => {\n    const sortedCollections = sortLabels(geometry, groupedLabels[xValue]);\n    while (sortedCollections.length) {\n      const current = sortedCollections.shift();\n      const textShape = findLabelTextShape(current);\n      if (\n        hasSome(\n          dones,\n          current,\n          (left, right) =>\n            left.get('data')[xField] === right.get('data')[xField] &&\n            left.get('data')[yField] === right.get('data')[yField]\n        )\n      ) {\n        // 重复位置，直接隐藏\n        textShape.set('visible', false);\n        continue;\n      }\n      const upFail = checkShapeOverlap(dones, current);\n      let downFail: boolean = false;\n      if (upFail) {\n        textShape.attr('y', textShape.attr('y') + 2 * offset);\n        downFail = checkShapeOverlap(dones, current);\n      }\n      if (downFail) {\n        textShape.set('visible', false);\n        continue;\n      }\n      dones.push(current);\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}