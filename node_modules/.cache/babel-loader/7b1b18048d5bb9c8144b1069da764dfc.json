{"ast":null,"code":"import { __values } from \"tslib\";\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nregisterShape('point', 'image', {\n  draw: function (cfg, container) {\n    var e_1, _a;\n    var size = getStyle(cfg, false, false, 'r').r;\n    var points = this.parsePoints(cfg.points);\n    var pointPosition = points[0];\n    if (cfg.isStack) {\n      pointPosition = points[1];\n    } else if (points.length > 1) {\n      var group = container.addGroup();\n      try {\n        for (var points_1 = __values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {\n          var point = points_1_1.value;\n          group.addShape('image', {\n            attrs: {\n              x: point.x - size / 2,\n              y: point.y - size,\n              width: size,\n              height: size,\n              img: cfg.shape[1]\n            }\n          });\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (points_1_1 && !points_1_1.done && (_a = points_1.return)) _a.call(points_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return group;\n    }\n    return container.addShape('image', {\n      attrs: {\n        x: pointPosition.x - size / 2,\n        y: pointPosition.y - size,\n        width: size,\n        height: size,\n        img: cfg.shape[1]\n      }\n    });\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: color\n      }\n    };\n  }\n});","map":{"version":3,"sources":["../../../../src/geometry/shape/point/image.ts"],"names":[],"mappings":";AAGA,SAAS,aAAa,QAAQ,SAAS;AACvC,SAAS,QAAQ,QAAQ,mBAAmB;AAE5C,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE;EAC9B,IAAI,EAAA,UAAC,GAAc,EAAE,SAAiB,EAAA;;IAC5B,IAAG,IAAI,GAAK,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAA,CAArC;IACf,IAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC;IAC3C,IAAI,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC;IAC7B,IAAI,GAAG,CAAC,OAAO,EAAE;MACf,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC;KAC1B,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;MAC5B,IAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,EAAE;;QAClC,KAAoB,IAAA,QAAA,GAAA,QAAA,CAAA,MAAM,CAAA,EAAA,UAAA,GAAA,QAAA,CAAA,IAAA,EAAA,EAAA,CAAA,UAAA,CAAA,IAAA,EAAA,UAAA,GAAA,QAAA,CAAA,IAAA,EAAA,EAAE;UAAvB,IAAM,KAAK,GAAA,UAAA,CAAA,KAAA;UACd,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE;YACtB,KAAK,EAAE;cACL,CAAC,EAAG,KAAK,CAAC,CAAY,GAAG,IAAI,GAAG,CAAC;cACjC,CAAC,EAAG,KAAK,CAAC,CAAY,GAAG,IAAI;cAC7B,KAAK,EAAE,IAAI;cACX,MAAM,EAAE,IAAI;cACZ,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;YACjB;WACF,CAAC;QACH;;;;;;;;;;;;MAED,OAAO,KAAK;IACb;IAED,OAAO,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE;MACjC,KAAK,EAAE;QACL,CAAC,EAAG,aAAa,CAAC,CAAY,GAAG,IAAI,GAAG,CAAC;QACzC,CAAC,EAAG,aAAa,CAAC,CAAY,GAAG,IAAI;QACrC,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;QACZ,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;MACjB;KACF,CAAC;EACJ,CAAC;EACD,SAAS,EAAA,UAAC,SAAyB,EAAA;IACzB,IAAA,KAAK,GAAK,SAAS,CAAA,KAAd;IACb,OAAO;MACL,MAAM,EAAE,QAAQ;MAChB,KAAK,EAAE;QACL,CAAC,EAAE,GAAG;QACN,IAAI,EAAE;MACP;KACF;EACH;CACD,CAAC","sourcesContent":["import { IGroup } from '../../../dependents';\nimport { ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\n\nregisterShape('point', 'image', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const { r: size } = getStyle(cfg, false, false, 'r');\n    const points = this.parsePoints(cfg.points);\n    let pointPosition = points[0];\n    if (cfg.isStack) {\n      pointPosition = points[1];\n    } else if (points.length > 1) {\n      const group = container.addGroup();\n      for (const point of points) {\n        group.addShape('image', {\n          attrs: {\n            x: (point.x as number) - size / 2,\n            y: (point.y as number) - size,\n            width: size,\n            height: size,\n            img: cfg.shape[1],\n          },\n        });\n      }\n\n      return group;\n    }\n\n    return container.addShape('image', {\n      attrs: {\n        x: (pointPosition.x as number) - size / 2,\n        y: (pointPosition.y as number) - size,\n        width: size,\n        height: size,\n        img: cfg.shape[1],\n      },\n    });\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: color,\n      },\n    };\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}