{"ast":null,"code":"import { __assign, __extends, __read } from \"tslib\";\nimport { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 矩阵分面\n */\nvar Rect = /** @class */function (_super) {\n  __extends(Rect, _super);\n  function Rect() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Rect.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n  Rect.prototype.beforeEachView = function (view, facet) {\n    // do nothing\n  };\n  Rect.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'rect',\n      columnTitle: __assign({}, _super.prototype.getDefaultTitleCfg.call(this)),\n      rowTitle: __assign({}, _super.prototype.getDefaultTitleCfg.call(this))\n    });\n  };\n  Rect.prototype.render = function () {\n    _super.prototype.render.call(this);\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n  /**\n   * 生成矩阵分面的分面数据\n   * @param data\n   */\n  Rect.prototype.generateFacets = function (data) {\n    var _this = this;\n    var _a = __read(this.cfg.fields, 2),\n      columnField = _a[0],\n      rowField = _a[1];\n    var rst = [];\n    var columnValuesLength = 1;\n    var rowValuesLength = 1;\n    var columnValues = [''];\n    var rowValues = [''];\n    if (columnField) {\n      columnValues = this.getFieldValues(data, columnField);\n      columnValuesLength = columnValues.length;\n    }\n    if (rowField) {\n      rowValues = this.getFieldValues(data, rowField);\n      rowValuesLength = rowValues.length;\n    }\n    // 获取每个维度对应的数据配置片段\n    columnValues.forEach(function (xVal, xIndex) {\n      rowValues.forEach(function (yVal, yIndex) {\n        var conditions = [{\n          field: columnField,\n          value: xVal,\n          values: columnValues\n        }, {\n          field: rowField,\n          value: yVal,\n          values: rowValues\n        }];\n        var facetData = filter(data, _this.getFacetDataFilter(conditions));\n        var facet = {\n          type: _this.cfg.type,\n          data: facetData,\n          region: _this.getRegion(rowValuesLength, columnValuesLength, xIndex, yIndex),\n          columnValue: xVal,\n          rowValue: yVal,\n          columnField: columnField,\n          rowField: rowField,\n          columnIndex: xIndex,\n          rowIndex: yIndex,\n          columnValuesLength: columnValuesLength,\n          rowValuesLength: rowValuesLength\n        };\n        rst.push(facet);\n      });\n    });\n    return rst;\n  };\n  Rect.prototype.renderTitle = function () {\n    var _this = this;\n    each(this.facets, function (facet, facetIndex) {\n      var columnIndex = facet.columnIndex,\n        rowIndex = facet.rowIndex,\n        columnValuesLength = facet.columnValuesLength,\n        columnValue = facet.columnValue,\n        rowValue = facet.rowValue,\n        view = facet.view;\n      // top\n      if (rowIndex === 0) {\n        var formatter = get(_this.cfg.columnTitle, 'formatter');\n        var config = deepMix({\n          position: ['50%', '0%'],\n          content: formatter ? formatter(columnValue) : columnValue\n        }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.columnTitle);\n        view.annotation().text(config);\n      }\n      // right\n      if (columnIndex === columnValuesLength - 1) {\n        var formatter = get(_this.cfg.rowTitle, 'formatter');\n        var config = deepMix({\n          position: ['100%', '50%'],\n          content: formatter ? formatter(rowValue) : rowValue\n        }, getFactTitleConfig(DIRECTION.RIGHT), _this.cfg.rowTitle);\n        view.annotation().text(config);\n      }\n    });\n  };\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  Rect.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 非最后一行\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    } else if (facet.columnIndex !== Math.floor((facet.columnValuesLength - 1) / 2)) {\n      // 不是中间列\n      return __assign(__assign({}, option), {\n        title: null\n      });\n    }\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  Rect.prototype.getYAxisOption = function (y, axes, option, facet) {\n    if (facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    } else if (facet.rowIndex !== Math.floor((facet.rowValuesLength - 1) / 2)) {\n      return __assign(__assign({}, option), {\n        title: null\n      });\n    }\n    return option;\n  };\n  return Rect;\n}(Facet);\nexport default Rect;","map":{"version":3,"sources":["../../src/facet/rect.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { AxisCfg, Datum, RectCfg, RectData } from '../interface';\n\nimport View from '../chart/view';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 矩阵分面\n */\nexport default class Rect extends Facet<RectCfg, RectData> {\n  protected afterEachView(view: View, facet: RectData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: RectData) {\n    // do nothing\n  }\n\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'rect',\n      columnTitle: {\n        ...super.getDefaultTitleCfg(),\n      },\n      rowTitle: {\n        ...super.getDefaultTitleCfg(),\n      },\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  /**\n   * 生成矩阵分面的分面数据\n   * @param data\n   */\n  protected generateFacets(data: Datum[]): RectData[] {\n    const [columnField, rowField] = this.cfg.fields;\n\n    const rst = [];\n    let columnValuesLength = 1;\n    let rowValuesLength = 1;\n\n    let columnValues: string[] = [''];\n    let rowValues: string[] = [''];\n\n    if (columnField) {\n      columnValues = this.getFieldValues(data, columnField);\n      columnValuesLength = columnValues.length;\n    }\n    if (rowField) {\n      rowValues = this.getFieldValues(data, rowField);\n      rowValuesLength = rowValues.length;\n    }\n\n    // 获取每个维度对应的数据配置片段\n    columnValues.forEach((xVal, xIndex) => {\n      rowValues.forEach((yVal, yIndex) => {\n        const conditions = [\n          { field: columnField, value: xVal, values: columnValues },\n          { field: rowField, value: yVal, values: rowValues },\n        ];\n        const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n        const facet: RectData = {\n          type: this.cfg.type,\n          data: facetData,\n          region: this.getRegion(rowValuesLength, columnValuesLength, xIndex, yIndex),\n\n          columnValue: xVal,\n          rowValue: yVal,\n          columnField,\n          rowField,\n          columnIndex: xIndex,\n          rowIndex: yIndex,\n          columnValuesLength,\n          rowValuesLength,\n        };\n        rst.push(facet);\n      });\n    });\n\n    return rst;\n  }\n\n  private renderTitle(): void {\n    each(this.facets, (facet: RectData, facetIndex: number) => {\n      const { columnIndex, rowIndex, columnValuesLength, columnValue, rowValue, view } = facet;\n\n      // top\n      if (rowIndex === 0) {\n        const formatter = get(this.cfg.columnTitle, 'formatter');\n        const config = deepMix(\n          {\n            position: ['50%', '0%'] as [string, string],\n            content: formatter ? formatter(columnValue) : columnValue,\n          },\n          getFactTitleConfig(DIRECTION.TOP),\n          this.cfg.columnTitle\n        );\n\n        view.annotation().text(config);\n      }\n      // right\n      if (columnIndex === columnValuesLength - 1) {\n        const formatter = get(this.cfg.rowTitle, 'formatter');\n        const config = deepMix(\n          {\n            position: ['100%', '50%'] as [string, string],\n            content: formatter ? formatter(rowValue) : rowValue,\n          },\n          getFactTitleConfig(DIRECTION.RIGHT),\n          this.cfg.rowTitle\n        );\n\n        view.annotation().text(config);\n      }\n    });\n  }\n\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: RectData): object {\n    // 非最后一行\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    } else if (facet.columnIndex !== Math.floor((facet.columnValuesLength - 1) / 2)) {\n      // 不是中间列\n      return {\n        ...option,\n        title: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: RectData): object {\n    if (facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    } else if (facet.rowIndex !== Math.floor((facet.rowValuesLength - 1) / 2)) {\n      return {\n        ...option,\n        title: null,\n      };\n    }\n    return option;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}