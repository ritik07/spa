{"ast":null,"code":"import isArray from './is-array';\nimport isFunction from './is-function';\nimport groupBy from './group-by';\n/**\n * 将数据分组成 map\n * @param data\n * @param condition\n */\nexport default function groupToMap(data, condition) {\n  if (!condition) {\n    return {\n      0: data\n    };\n  }\n  if (!isFunction(condition)) {\n    // 如果是字符串，则按照 a*b 风格成数组\n    var paramscondition_1 = isArray(condition) ? condition : condition.replace(/\\s+/g, '').split('*');\n    condition = function (row) {\n      var unique = '_'; // 避免出现数字作为Key的情况，会进行按照数字的排序\n      // 根据字段列表的值，拼接成 key\n      for (var i = 0, l = paramscondition_1.length; i < l; i++) {\n        unique += row[paramscondition_1[i]] && row[paramscondition_1[i]].toString();\n      }\n      return unique;\n    };\n  }\n  return groupBy(data, condition);\n}","map":{"version":3,"sources":["../src/group-to-map.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,YAAY;AAChC,OAAO,UAAU,MAAM,eAAe;AACtC,OAAO,OAAO,MAAM,YAAY;AAEhC;;;;AAIG;AACH,eAAc,SAAU,UAAU,CAAC,IAAS,EAAE,SAAqD,EAAA;EACjG,IAAI,CAAC,SAAS,EAAE;IACd,OAAO;MACL,CAAC,EAAE;KACJ;EACF;EACD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;IAC1B;IACA,IAAM,iBAAe,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;IACjG,SAAS,GAAG,UAAU,GAAG,EAAA;MACvB,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC;MAElB;MACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAe,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACtD,MAAM,IAAI,GAAG,CAAC,iBAAe,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,iBAAe,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;MACxE;MACD,OAAO,MAAM;IACf,CAAC;EACF;EACD,OAAO,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC;AACjC","sourceRoot":"","sourcesContent":["import isArray from './is-array';\nimport isFunction from './is-function';\nimport groupBy from './group-by';\n/**\n * 将数据分组成 map\n * @param data\n * @param condition\n */\nexport default function groupToMap(data, condition) {\n    if (!condition) {\n        return {\n            0: data,\n        };\n    }\n    if (!isFunction(condition)) {\n        // 如果是字符串，则按照 a*b 风格成数组\n        var paramscondition_1 = isArray(condition) ? condition : condition.replace(/\\s+/g, '').split('*');\n        condition = function (row) {\n            var unique = '_'; // 避免出现数字作为Key的情况，会进行按照数字的排序\n            // 根据字段列表的值，拼接成 key\n            for (var i = 0, l = paramscondition_1.length; i < l; i++) {\n                unique += row[paramscondition_1[i]] && row[paramscondition_1[i]].toString();\n            }\n            return unique;\n        };\n    }\n    return groupBy(data, condition);\n}\n//# sourceMappingURL=group-to-map.js.map"]},"metadata":{},"sourceType":"module"}