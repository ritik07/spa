{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\n/**\n * @fileoverview line\n * @author dengfuping_develop@163.com\n */\nimport { Line as LineUtil } from '@antv/g-math';\nimport { each, isObject } from '@antv/util';\nimport { SVG_ATTR_MAP } from '../constant';\nimport ShapeBase from './base';\nvar Line = /** @class */function (_super) {\n  __extends(Line, _super);\n  function Line() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'line';\n    _this.canFill = false;\n    _this.canStroke = true;\n    return _this;\n  }\n  Line.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    return __assign(__assign({}, attrs), {\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n      startArrow: false,\n      endArrow: false\n    });\n  };\n  Line.prototype.createPath = function (context, targetAttrs) {\n    var attrs = this.attr();\n    var el = this.get('el');\n    each(targetAttrs || attrs, function (value, attr) {\n      if (attr === 'startArrow' || attr === 'endArrow') {\n        if (value) {\n          var id = isObject(value) ? context.addArrow(attrs, SVG_ATTR_MAP[attr]) : context.getDefaultArrow(attrs, SVG_ATTR_MAP[attr]);\n          el.setAttribute(SVG_ATTR_MAP[attr], \"url(#\" + id + \")\");\n        } else {\n          el.removeAttribute(SVG_ATTR_MAP[attr]);\n        }\n      } else if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n  };\n  /**\n   * Use math calculation to get length of line\n   * @return {number} length\n   */\n  Line.prototype.getTotalLength = function () {\n    var _a = this.attr(),\n      x1 = _a.x1,\n      y1 = _a.y1,\n      x2 = _a.x2,\n      y2 = _a.y2;\n    return LineUtil.length(x1, y1, x2, y2);\n  };\n  /**\n   * Use math calculation to get point according to ratio as same sa Canvas version\n   * @param {number} ratio\n   * @return {Point} point\n   */\n  Line.prototype.getPoint = function (ratio) {\n    var _a = this.attr(),\n      x1 = _a.x1,\n      y1 = _a.y1,\n      x2 = _a.x2,\n      y2 = _a.y2;\n    return LineUtil.pointAt(x1, y1, x2, y2, ratio);\n  };\n  return Line;\n}(ShapeBase);\nexport default Line;","map":{"version":3,"sources":["../../src/shape/line.ts"],"names":[],"mappings":";AAAA;;;AAGG;AACH,SAAS,IAAI,IAAI,QAAQ,QAAQ,cAAc;AAC/C,SAAS,IAAI,EAAE,QAAQ,QAAQ,YAAY;AAC3C,SAAS,YAAY,QAAQ,aAAa;AAC1C,OAAO,SAAS,MAAM,QAAQ;AAE9B,IAAA,IAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmB,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;EAAnB,SAAA,IAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IACE,KAAA,CAAA,IAAI,GAAW,MAAM;IACrB,KAAA,CAAA,OAAO,GAAY,KAAK;IACxB,KAAA,CAAA,SAAS,GAAY,IAAI;;EAoD3B;EAlDE,IAAA,CAAA,SAAA,CAAA,eAAe,GAAf,YAAA;IACE,IAAM,KAAK,GAAG,MAAA,CAAA,SAAA,CAAM,eAAe,CAAA,IAAA,CAAA,IAAA,CAAE;IACrC,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,EAAA;MACR,EAAE,EAAE,CAAC;MACL,EAAE,EAAE,CAAC;MACL,EAAE,EAAE,CAAC;MACL,EAAE,EAAE,CAAC;MACL,UAAU,EAAE,KAAK;MACjB,QAAQ,EAAE;IAAK,CAAA,CAAA;EAEnB,CAAC;EAED,IAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,OAAO,EAAE,WAAW,EAAA;IAC7B,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE;IACzB,IAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IACzB,IAAI,CAAC,WAAW,IAAI,KAAK,EAAE,UAAC,KAAK,EAAE,IAAI,EAAA;MACrC,IAAI,IAAI,KAAK,YAAY,IAAI,IAAI,KAAK,UAAU,EAAE;QAChD,IAAI,KAAK,EAAE;UACT,IAAM,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,GACtB,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,GAC3C,OAAO,CAAC,eAAe,CAAC,KAAK,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;UACtD,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,OAAA,GAAQ,EAAE,GAAA,GAAG,CAAC;SACnD,MAAM;UACL,EAAE,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACvC;OACF,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;QAC7B,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;MAC3C;IACH,CAAC,CAAC;EACJ,CAAC;EAED;;;AAGG;EACH,IAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACQ,IAAA,EAAA,GAAqB,IAAI,CAAC,IAAI,EAAE;MAA9B,EAAE,GAAA,EAAA,CAAA,EAAA;MAAE,EAAE,GAAA,EAAA,CAAA,EAAA;MAAE,EAAE,GAAA,EAAA,CAAA,EAAA;MAAE,EAAE,GAAA,EAAA,CAAA,EAAgB;IACtC,OAAO,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACxC,CAAC;EAED;;;;AAIG;EACH,IAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,KAAa,EAAA;IACd,IAAA,EAAA,GAAqB,IAAI,CAAC,IAAI,EAAE;MAA9B,EAAE,GAAA,EAAA,CAAA,EAAA;MAAE,EAAE,GAAA,EAAA,CAAA,EAAA;MAAE,EAAE,GAAA,EAAA,CAAA,EAAA;MAAE,EAAE,GAAA,EAAA,CAAA,EAAgB;IACtC,OAAO,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC;EAChD,CAAC;EACH,OAAA,IAAC;AAAD,CAAC,CAvDkB,SAAS,CAAA;AAyD5B,eAAe,IAAI","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\n/**\n * @fileoverview line\n * @author dengfuping_develop@163.com\n */\nimport { Line as LineUtil } from '@antv/g-math';\nimport { each, isObject } from '@antv/util';\nimport { SVG_ATTR_MAP } from '../constant';\nimport ShapeBase from './base';\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    function Line() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'line';\n        _this.canFill = false;\n        _this.canStroke = true;\n        return _this;\n    }\n    Line.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        return __assign(__assign({}, attrs), { x1: 0, y1: 0, x2: 0, y2: 0, startArrow: false, endArrow: false });\n    };\n    Line.prototype.createPath = function (context, targetAttrs) {\n        var attrs = this.attr();\n        var el = this.get('el');\n        each(targetAttrs || attrs, function (value, attr) {\n            if (attr === 'startArrow' || attr === 'endArrow') {\n                if (value) {\n                    var id = isObject(value)\n                        ? context.addArrow(attrs, SVG_ATTR_MAP[attr])\n                        : context.getDefaultArrow(attrs, SVG_ATTR_MAP[attr]);\n                    el.setAttribute(SVG_ATTR_MAP[attr], \"url(#\" + id + \")\");\n                }\n                else {\n                    el.removeAttribute(SVG_ATTR_MAP[attr]);\n                }\n            }\n            else if (SVG_ATTR_MAP[attr]) {\n                el.setAttribute(SVG_ATTR_MAP[attr], value);\n            }\n        });\n    };\n    /**\n     * Use math calculation to get length of line\n     * @return {number} length\n     */\n    Line.prototype.getTotalLength = function () {\n        var _a = this.attr(), x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;\n        return LineUtil.length(x1, y1, x2, y2);\n    };\n    /**\n     * Use math calculation to get point according to ratio as same sa Canvas version\n     * @param {number} ratio\n     * @return {Point} point\n     */\n    Line.prototype.getPoint = function (ratio) {\n        var _a = this.attr(), x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;\n        return LineUtil.pointAt(x1, y1, x2, y2, ratio);\n    };\n    return Line;\n}(ShapeBase));\nexport default Line;\n//# sourceMappingURL=line.js.map"]},"metadata":{},"sourceType":"module"}