{"ast":null,"code":"/**\n * view 中缓存 scale 的类\n */\nimport { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { createScaleByField, syncScale, getDefaultCategoryScaleRange } from '../../util/scale';\n/** @ignore */\nvar ScalePool = /** @class */function () {\n  function ScalePool() {\n    /** 所有的 scales */\n    this.scales = new Map();\n    /** 需要同步的 scale 分组， key: scaleKeyArray */\n    this.syncScales = new Map();\n  }\n  /**\n   * 创建 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  ScalePool.prototype.createScale = function (field, data, scaleDef, key) {\n    var finalScaleDef = scaleDef;\n    var cacheScaleMeta = this.getScaleMeta(key);\n    if (data.length === 0 && cacheScaleMeta) {\n      // 在更新过程中数据变为空，同时 key 对应的 scale 已存在则保持 scale 同类型\n      var cacheScale = cacheScaleMeta.scale;\n      var cacheScaleDef = {\n        type: cacheScale.type\n      };\n      if (cacheScale.isCategory) {\n        // 如果是分类类型，保持 values\n        cacheScaleDef.values = cacheScale.values;\n      }\n      finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n    }\n    var scale = createScaleByField(field, data, finalScaleDef);\n    // 缓存起来\n    this.cacheScale(scale, scaleDef, key);\n    return scale;\n  };\n  /**\n   * 同步 scale\n   */\n  ScalePool.prototype.sync = function (coordinate, theme) {\n    var _this = this;\n    // 对于 syncScales 中每一个 syncKey 下面的 scale 数组进行同步处理\n    this.syncScales.forEach(function (scaleKeys, syncKey) {\n      // min, max, values, ranges\n      var min = Number.MAX_SAFE_INTEGER;\n      var max = Number.MIN_SAFE_INTEGER;\n      var values = [];\n      // 1. 遍历求得最大最小值，values 等\n      each(scaleKeys, function (key) {\n        var scale = _this.getScale(key);\n        max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n        min = isNumber(scale.min) ? Math.min(min, scale.min) : min;\n        // 去重\n        each(scale.values, function (v) {\n          if (!values.includes(v)) {\n            values.push(v);\n          }\n        });\n      });\n      // 2. 同步\n      each(scaleKeys, function (key) {\n        var scale = _this.getScale(key);\n        if (scale.isContinuous) {\n          scale.change({\n            min: min,\n            max: max,\n            values: values\n          });\n        } else if (scale.isCategory) {\n          var range = scale.range;\n          var cacheScaleMeta = _this.getScaleMeta(key);\n          // 存在 value 值，且用户没有配置 range 配置 to fix https://github.com/antvis/G2/issues/2996\n          if (values && !get(cacheScaleMeta, ['scaleDef', 'range'])) {\n            // 更新 range\n            range = getDefaultCategoryScaleRange(deepMix({}, scale, {\n              values: values\n            }), coordinate, theme);\n          }\n          scale.change({\n            values: values,\n            range: range\n          });\n        }\n      });\n    });\n  };\n  /**\n   * 缓存一个 scale\n   * @param scale\n   * @param scaleDef\n   * @param key\n   */\n  ScalePool.prototype.cacheScale = function (scale, scaleDef, key) {\n    // 1. 缓存到 scales\n    var sm = this.getScaleMeta(key);\n    // 存在则更新，同时检测类型是否一致\n    if (sm && sm.scale.type === scale.type) {\n      syncScale(sm.scale, scale);\n      sm.scaleDef = scaleDef;\n      // 更新 scaleDef\n    } else {\n      sm = {\n        key: key,\n        scale: scale,\n        scaleDef: scaleDef\n      };\n      this.scales.set(key, sm);\n    }\n    // 2. 缓存到 syncScales，构造 Record<sync, string[]> 数据结构\n    var syncKey = this.getSyncKey(sm);\n    sm.syncKey = syncKey; // 设置 sync 同步的 key\n    // 因为存在更新 scale 机制，所以在缓存之前，先从原 syncScales 中去除 sync 的缓存引用\n    this.removeFromSyncScales(key);\n    // 存在 sync 标记才进行 sync\n    if (syncKey) {\n      // 不存在这个 syncKey，则创建一个空数组\n      var scaleKeys = this.syncScales.get(syncKey);\n      if (!scaleKeys) {\n        scaleKeys = [];\n        this.syncScales.set(syncKey, scaleKeys);\n      }\n      scaleKeys.push(key);\n    }\n  };\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  ScalePool.prototype.getScale = function (key) {\n    var scaleMeta = this.getScaleMeta(key);\n    if (!scaleMeta) {\n      var field = last(key.split('-'));\n      var scaleKeys = this.syncScales.get(field);\n      if (scaleKeys && scaleKeys.length) {\n        scaleMeta = this.getScaleMeta(scaleKeys[0]);\n      }\n    }\n    return scaleMeta && scaleMeta.scale;\n  };\n  /**\n   * 在 view 销毁的时候，删除 scale 实例，防止内存泄露\n   * @param key\n   */\n  ScalePool.prototype.deleteScale = function (key) {\n    var scaleMeta = this.getScaleMeta(key);\n    if (scaleMeta) {\n      var syncKey = scaleMeta.syncKey;\n      var scaleKeys = this.syncScales.get(syncKey);\n      // 移除同步的关系\n      if (scaleKeys && scaleKeys.length) {\n        var idx = scaleKeys.indexOf(key);\n        if (idx !== -1) {\n          scaleKeys.splice(idx, 1);\n        }\n      }\n    }\n    // 删除 scale 实例\n    this.scales.delete(key);\n  };\n  /**\n   * 清空\n   */\n  ScalePool.prototype.clear = function () {\n    this.scales.clear();\n    this.syncScales.clear();\n  };\n  /**\n   * 删除 sync scale 引用\n   * @param key\n   */\n  ScalePool.prototype.removeFromSyncScales = function (key) {\n    var _this = this;\n    this.syncScales.forEach(function (scaleKeys, syncKey) {\n      var idx = scaleKeys.indexOf(key);\n      if (idx !== -1) {\n        scaleKeys.splice(idx, 1);\n        // 删除空数组值\n        if (scaleKeys.length === 0) {\n          _this.syncScales.delete(syncKey);\n        }\n        return false; // 跳出循环\n      }\n    });\n  };\n  /**\n   * get sync key\n   * @param sm\n   */\n  ScalePool.prototype.getSyncKey = function (sm) {\n    var scale = sm.scale,\n      scaleDef = sm.scaleDef;\n    var field = scale.field;\n    var sync = get(scaleDef, ['sync']);\n    // 如果 sync = true，则直接使用字段名作为 syncKey\n    return sync === true ? field : sync === false ? undefined : sync;\n  };\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  ScalePool.prototype.getScaleMeta = function (key) {\n    return this.scales.get(key);\n  };\n  return ScalePool;\n}();\nexport { ScalePool };","map":{"version":3,"sources":["../../../src/chart/util/scale-pool.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * view 中缓存 scale 的类\n */\nimport { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { Scale, Coordinate } from '../../dependents';\nimport { Data, LooseObject, ScaleOption, ViewCfg } from '../../interface';\nimport { createScaleByField, syncScale, getDefaultCategoryScaleRange } from '../../util/scale';\n\n/** @ignore */\ninterface ScaleMeta {\n  readonly key: string;\n  readonly scale: Scale;\n  scaleDef: ScaleOption;\n  syncKey?: string;\n}\n\n/** @ignore */\nexport class ScalePool {\n  /** 所有的 scales */\n  private scales = new Map<string, ScaleMeta>();\n  /** 需要同步的 scale 分组， key: scaleKeyArray */\n  private syncScales = new Map<string, string[]>();\n\n  /**\n   * 创建 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  public createScale(field: string, data: Data, scaleDef: ScaleOption, key: string): Scale {\n    let finalScaleDef = scaleDef;\n\n    const cacheScaleMeta = this.getScaleMeta(key);\n    if (data.length === 0 && cacheScaleMeta) {\n      // 在更新过程中数据变为空，同时 key 对应的 scale 已存在则保持 scale 同类型\n      const cacheScale = cacheScaleMeta.scale;\n      const cacheScaleDef: LooseObject = {\n        type: cacheScale.type,\n      };\n      if (cacheScale.isCategory) {\n        // 如果是分类类型，保持 values\n        cacheScaleDef.values = cacheScale.values;\n      }\n      finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n    }\n\n    const scale = createScaleByField(field, data, finalScaleDef);\n\n    // 缓存起来\n    this.cacheScale(scale, scaleDef, key);\n\n    return scale;\n  }\n\n  /**\n   * 同步 scale\n   */\n  public sync(coordinate: Coordinate, theme: ViewCfg['theme']) {\n    // 对于 syncScales 中每一个 syncKey 下面的 scale 数组进行同步处理\n    this.syncScales.forEach((scaleKeys: string[], syncKey: string) => {\n      // min, max, values, ranges\n      let min = Number.MAX_SAFE_INTEGER;\n      let max = Number.MIN_SAFE_INTEGER;\n      const values = [];\n\n      // 1. 遍历求得最大最小值，values 等\n      each(scaleKeys, (key: string) => {\n        const scale = this.getScale(key);\n\n        max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n        min = isNumber(scale.min) ? Math.min(min, scale.min) : min;\n\n        // 去重\n        each(scale.values, (v: any) => {\n          if (!values.includes(v)) {\n            values.push(v);\n          }\n        });\n      });\n\n      // 2. 同步\n      each(scaleKeys, (key: string) => {\n        const scale = this.getScale(key);\n\n        if (scale.isContinuous) {\n          scale.change({\n            min,\n            max,\n            values,\n          });\n        } else if (scale.isCategory) {\n          let range = scale.range;\n          const cacheScaleMeta = this.getScaleMeta(key);\n\n          // 存在 value 值，且用户没有配置 range 配置 to fix https://github.com/antvis/G2/issues/2996\n          if (values && !get(cacheScaleMeta, ['scaleDef', 'range'])) {\n            // 更新 range\n            range = getDefaultCategoryScaleRange(\n              deepMix({}, scale, {\n                values,\n              }),\n              coordinate,\n              theme\n            );\n          }\n          scale.change({\n            values,\n            range,\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * 缓存一个 scale\n   * @param scale\n   * @param scaleDef\n   * @param key\n   */\n  private cacheScale(scale: Scale, scaleDef: ScaleOption, key: string) {\n    // 1. 缓存到 scales\n\n    let sm = this.getScaleMeta(key);\n    // 存在则更新，同时检测类型是否一致\n    if (sm && sm.scale.type === scale.type) {\n      syncScale(sm.scale, scale);\n      sm.scaleDef = scaleDef;\n      // 更新 scaleDef\n    } else {\n      sm = {\n        key,\n        scale,\n        scaleDef,\n      };\n\n      this.scales.set(key, sm);\n    }\n\n    // 2. 缓存到 syncScales，构造 Record<sync, string[]> 数据结构\n    const syncKey = this.getSyncKey(sm);\n    sm.syncKey = syncKey; // 设置 sync 同步的 key\n\n    // 因为存在更新 scale 机制，所以在缓存之前，先从原 syncScales 中去除 sync 的缓存引用\n    this.removeFromSyncScales(key);\n\n    // 存在 sync 标记才进行 sync\n    if (syncKey) {\n      // 不存在这个 syncKey，则创建一个空数组\n      let scaleKeys = this.syncScales.get(syncKey);\n      if (!scaleKeys) {\n        scaleKeys = [];\n        this.syncScales.set(syncKey, scaleKeys);\n      }\n      scaleKeys.push(key);\n    }\n  }\n\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  public getScale(key: string): Scale {\n    let scaleMeta = this.getScaleMeta(key);\n    if (!scaleMeta) {\n      const field = last(key.split('-'));\n      const scaleKeys = this.syncScales.get(field);\n      if (scaleKeys && scaleKeys.length) {\n        scaleMeta = this.getScaleMeta(scaleKeys[0]);\n      }\n    }\n    return scaleMeta && scaleMeta.scale;\n  }\n\n  /**\n   * 在 view 销毁的时候，删除 scale 实例，防止内存泄露\n   * @param key\n   */\n  public deleteScale(key: string) {\n    const scaleMeta = this.getScaleMeta(key);\n    if (scaleMeta) {\n      const { syncKey } = scaleMeta;\n\n      const scaleKeys = this.syncScales.get(syncKey);\n\n      // 移除同步的关系\n      if (scaleKeys && scaleKeys.length) {\n        const idx = scaleKeys.indexOf(key);\n\n        if (idx !== -1) {\n          scaleKeys.splice(idx, 1);\n        }\n      }\n    }\n\n    // 删除 scale 实例\n    this.scales.delete(key);\n  }\n\n  /**\n   * 清空\n   */\n  public clear() {\n    this.scales.clear();\n    this.syncScales.clear();\n  }\n\n  /**\n   * 删除 sync scale 引用\n   * @param key\n   */\n  private removeFromSyncScales(key: string) {\n    this.syncScales.forEach((scaleKeys: string[], syncKey: string) => {\n      const idx = scaleKeys.indexOf(key);\n\n      if (idx !== -1) {\n        scaleKeys.splice(idx, 1);\n\n        // 删除空数组值\n        if (scaleKeys.length === 0) {\n          this.syncScales.delete(syncKey);\n        }\n\n        return false; // 跳出循环\n      }\n    });\n  }\n\n  /**\n   * get sync key\n   * @param sm\n   */\n  private getSyncKey(sm: ScaleMeta): string {\n    const { scale, scaleDef } = sm;\n    const { field } = scale;\n    const sync = get(scaleDef, ['sync']);\n\n    // 如果 sync = true，则直接使用字段名作为 syncKey\n    return sync === true ? field : sync === false ? undefined : sync;\n  }\n\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  private getScaleMeta(key: string): ScaleMeta {\n    return this.scales.get(key);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}