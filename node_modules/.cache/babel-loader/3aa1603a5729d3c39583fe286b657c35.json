{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getDelegationObject, getScaleByField, isList, isSlider } from '../util';\n/**\n * 数据过滤。\n * @ignore\n */\nvar DataFilter = /** @class */function (_super) {\n  __extends(DataFilter, _super);\n  function DataFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DataFilter.prototype.filterView = function (view, field, filter) {\n    var _this = this;\n    // 只有存在这个 scale 时才生效\n    if (view.getScaleByField(field)) {\n      view.filter(field, filter);\n    }\n    if (view.views && view.views.length) {\n      each(view.views, function (subView) {\n        _this.filterView(subView, field, filter);\n      });\n    }\n  };\n  /**\n   * 过滤数据\n   */\n  DataFilter.prototype.filter = function () {\n    var delegateObject = getDelegationObject(this.context);\n    if (delegateObject) {\n      var view = this.context.view;\n      var component = delegateObject.component;\n      var field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          var unCheckedItems = component.getItemsByState('unchecked');\n          var scale_1 = getScaleByField(view, field);\n          var names_1 = unCheckedItems.map(function (item) {\n            return item.name;\n          });\n          if (names_1.length) {\n            this.filterView(view, field, function (value) {\n              var text = scale_1.getText(value);\n              return !names_1.includes(text);\n            });\n          } else {\n            this.filterView(view, field, null);\n          }\n          view.render(true);\n        }\n      } else if (isSlider(delegateObject)) {\n        var range = component.getValue();\n        var _a = __read(range, 2),\n          min_1 = _a[0],\n          max_1 = _a[1];\n        this.filterView(view, field, function (value) {\n          return value >= min_1 && value <= max_1;\n        });\n        view.render(true);\n      }\n    }\n  };\n  return DataFilter;\n}(Action);\nexport default DataFilter;","map":{"version":3,"sources":["../../../../src/interaction/action/data/filter.ts"],"names":[],"mappings":";AAAA,SAAS,IAAI,QAAQ,YAAY;AAEjC,OAAO,MAAM,MAAM,SAAS;AAC5B,SAAS,mBAAmB,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,QAAQ,SAAS;AAEhF;;;AAGG;AACH,IAAA,UAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAyB,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;EAAzB,SAAA,UAAA,GAAA;;EA+CA;EA9CU,UAAA,CAAA,SAAA,CAAA,UAAU,GAAlB,UAAmB,IAAU,EAAE,KAAK,EAAE,MAAM,EAAA;IAA5C,IAAA,KAAA,GAAA,IAAA;IACE;IACA,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;MAC/B,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC;IAC3B;IACD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;MACnC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,UAAC,OAAO,EAAA;QACvB,KAAI,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC;MACzC,CAAC,CAAC;IACH;EACH,CAAC;EACD;;AAEG;EACI,UAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,IAAM,cAAc,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC;IACxD,IAAI,cAAc,EAAE;MAClB,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI;MACtB,IAAA,SAAS,GAAK,cAAc,CAAA,SAAnB;MACjB,IAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC;MACpC;MACA,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;QAC1B,IAAI,KAAK,EAAE;UACT,IAAM,cAAc,GAAG,SAAS,CAAC,eAAe,CAAC,WAAW,CAAC;UAC7D,IAAM,OAAK,GAAG,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC;UAC1C,IAAM,OAAK,GAAa,cAAc,CAAC,GAAG,CAAC,UAAC,IAAI,EAAA;YAAK,OAAA,IAAI,CAAC,IAAI;UAAT,CAAS,CAAC;UAC/D,IAAI,OAAK,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,UAAC,KAAK,EAAA;cACjC,IAAM,IAAI,GAAG,OAAK,CAAC,OAAO,CAAC,KAAK,CAAC;cACjC,OAAO,CAAC,OAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;YAC9B,CAAC,CAAC;WACH,MAAM;YACL,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;UACnC;UACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAClB;OACF,MAAM,IAAI,QAAQ,CAAC,cAAc,CAAC,EAAE;QACnC,IAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,EAAE;QAC5B,IAAA,EAAA,GAAA,MAAA,CAAa,KAAK,EAAA,CAAA,CAAA;UAAjB,KAAG,GAAA,EAAA,CAAA,CAAA,CAAA;UAAE,KAAG,GAAA,EAAA,CAAA,CAAA,CAAS;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,UAAC,KAAK,EAAA;UACjC,OAAO,KAAK,IAAI,KAAG,IAAI,KAAK,IAAI,KAAG;QACrC,CAAC,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;MAClB;IACF;EACH,CAAC;EACH,OAAA,UAAC;AAAD,CAAC,CA/CwB,MAAM,CAAA;AAiD/B,eAAe,UAAU","sourcesContent":["import { each } from '@antv/util';\nimport { View } from 'src/chart';\nimport Action from '../base';\nimport { getDelegationObject, getScaleByField, isList, isSlider } from '../util';\n\n/**\n * 数据过滤。\n * @ignore\n */\nclass DataFilter extends Action {\n  private filterView(view: View, field, filter) {\n    // 只有存在这个 scale 时才生效\n    if (view.getScaleByField(field)) {\n      view.filter(field, filter);\n    }\n    if (view.views && view.views.length) {\n      each(view.views, (subView) => {\n        this.filterView(subView, field, filter);\n      });\n    }\n  }\n  /**\n   * 过滤数据\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    if (delegateObject) {\n      const view = this.context.view;\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names: string[] = unCheckedItems.map((item) => item.name);\n          if (names.length) {\n            this.filterView(view, field, (value) => {\n              const text = scale.getText(value);\n              return !names.includes(text);\n            });\n          } else {\n            this.filterView(view, field, null);\n          }\n          view.render(true);\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        this.filterView(view, field, (value) => {\n          return value >= min && value <= max;\n        });\n        view.render(true);\n      }\n    }\n  }\n}\n\nexport default DataFilter;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}