{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport { deepMix, each, isFunction } from '@antv/util';\n/**\n * Link Elements by color\n *\n * public 方法是对外可用的反馈交互。使用方式，如：element-link-by-color:link, element-link-by-color:unlink, element-link-by-color:clear\n */\nvar LinkByColor = /** @class */function (_super) {\n  __extends(LinkByColor, _super);\n  function LinkByColor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.cache = {};\n    return _this;\n  }\n  // 获取颜色对应的 scale\n  LinkByColor.prototype.getColorScale = function (view, element) {\n    var colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return null;\n    }\n    var scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  };\n  // 获取连接的 path\n  LinkByColor.prototype.getLinkPath = function (element, nextElement) {\n    var view = this.context.view;\n    var isTransposed = view.getCoordinate().isTransposed;\n    var bbox = element.shape.getCanvasBBox();\n    var nextBBox = nextElement.shape.getCanvasBBox();\n    var path = isTransposed ? [['M', bbox.minX, bbox.minY], ['L', nextBBox.minX, nextBBox.maxY], ['L', nextBBox.maxX, nextBBox.maxY], ['L', bbox.maxX, bbox.minY], ['Z']] : [['M', bbox.maxX, bbox.minY], ['L', nextBBox.minX, nextBBox.minY], ['L', nextBBox.minX, nextBBox.maxY], ['L', bbox.maxX, bbox.maxY], ['Z']];\n    return path;\n  };\n  // 添加连接的图形\n  LinkByColor.prototype.addLinkShape = function (group, element, nextElement, activeStyle) {\n    var style = {\n      opacity: 0.4,\n      fill: element.shape.attr('fill')\n    };\n    group.addShape({\n      type: 'path',\n      attrs: __assign(__assign({}, deepMix({}, style, isFunction(activeStyle) ? activeStyle(style, element) : activeStyle)), {\n        path: this.getLinkPath(element, nextElement)\n      })\n    });\n  };\n  // 使用图形连接\n  LinkByColor.prototype.linkByElement = function (element, activeStyle) {\n    var _this = this;\n    var view = this.context.view;\n    var scale = this.getColorScale(view, element);\n    if (!scale) {\n      return;\n    }\n    var value = getElementValue(element, scale.field);\n    if (!this.cache[value]) {\n      var elements_1 = getElementsByField(view, scale.field, value);\n      var linkGroup = this.linkGroup;\n      var group_1 = linkGroup.addGroup();\n      this.cache[value] = group_1; // 缓存\n      var count_1 = elements_1.length;\n      each(elements_1, function (el, index) {\n        if (index < count_1 - 1) {\n          var nextEl = elements_1[index + 1];\n          _this.addLinkShape(group_1, el, nextEl, activeStyle);\n        }\n      });\n    }\n  };\n  // 移除连接\n  LinkByColor.prototype.removeLink = function (element) {\n    var scale = this.getColorScale(this.context.view, element);\n    if (!scale) {\n      return;\n    }\n    var value = getElementValue(element, scale.field);\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  };\n  /**\n   * 连接 elements\n   *\n   * @usage\n   * registerInteraction('xxx', {\n   *   start: [\n   *    {\n   *      trigger: 'interval:mouseenter',\n   *      action: 'element-link-by-color:link',\n   *      arg: {\n   *        // style: { fill: 'red' }\n   *        style: (style, element) => ({ fill: 'red' })\n   *     },\n   *   },\n   *  ],\n   * });\n   */\n  LinkByColor.prototype.link = function (args) {\n    var context = this.context;\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        id: 'link-by-color-group',\n        capture: false\n      });\n    }\n    var element = getCurrentElement(context);\n    if (element) {\n      this.linkByElement(element, args === null || args === void 0 ? void 0 : args.style);\n    }\n  };\n  /**\n   * 取消连接 elements\n   */\n  LinkByColor.prototype.unlink = function () {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      this.removeLink(element);\n    }\n  };\n  /**\n   * 清除所有连接\n   */\n  LinkByColor.prototype.clear = function () {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n    this.cache = {};\n  };\n  /**\n   * 销毁\n   */\n  LinkByColor.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    if (this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  };\n  return LinkByColor;\n}(Action);\nexport default LinkByColor;","map":{"version":3,"sources":["../../../../src/interaction/action/element/link-by-color.ts"],"names":[],"mappings":";AAAA,OAAO,MAAM,MAAM,SAAS;AAC5B,SAAS,iBAAiB,EAAE,eAAe,EAAE,kBAAkB,QAAQ,SAAS;AAEhF,SAAS,OAAO,EAAE,IAAI,EAAE,UAAU,QAAQ,YAAY;AAMtD;;;;AAIG;AACH,IAAA,WAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA0B,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;EAA1B,SAAA,WAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IAEU,KAAA,CAAA,KAAK,GAAgB,CAAA,CAAE;;EA+IjC;EA9IE;EACQ,WAAA,CAAA,SAAA,CAAA,aAAa,GAArB,UAAsB,IAAI,EAAE,OAAO,EAAA;IACjC,IAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC;IACxD,IAAI,CAAC,SAAS,EAAE;MACd,OAAO,IAAI;IACZ;IACD,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,OAAO,KAAK;EACd,CAAC;EACD;EACQ,WAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,OAAgB,EAAE,WAAoB,EAAA;IACxD,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI;IACtB,IAAA,YAAY,GAAK,IAAI,CAAC,aAAa,EAAE,CAAA,YAAzB;IACpB,IAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE;IAC1C,IAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,aAAa,EAAE;IAClD,IAAM,IAAI,GAAG,YAAY,GACrB,CACE,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAC3B,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,EACnC,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,EACnC,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAC3B,CAAC,GAAG,CAAC,CACN,GACD,CACE,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAC3B,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,EACnC,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,EACnC,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAC3B,CAAC,GAAG,CAAC,CACN;IACL,OAAO,IAAI;EACb,CAAC;EACD;EACQ,WAAA,CAAA,SAAA,CAAA,YAAY,GAApB,UAAqB,KAAa,EAAE,OAAgB,EAAE,WAAoB,EAAE,WAA6B,EAAA;IACvG,IAAM,KAAK,GAAG;MACZ,OAAO,EAAE,GAAG;MACZ,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM;KAChC;IACD,KAAK,CAAC,QAAQ,CAAC;MACb,IAAI,EAAE,MAAM;MACZ,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,OAAO,CAAC,CAAA,CAAE,EAAE,KAAK,EAAE,UAAU,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,WAAW,CAAC,CAAA,EAAA;QAC1F,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW;MAAC,CAAA;KAE/C,CAAC;EACJ,CAAC;EACD;EACQ,WAAA,CAAA,SAAA,CAAA,aAAa,GAArB,UAAsB,OAAgB,EAAE,WAA6B,EAAA;IAArE,IAAA,KAAA,GAAA,IAAA;IACE,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI;IAC9B,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC;IAC/C,IAAI,CAAC,KAAK,EAAE;MACV;IACD;IACD,IAAM,KAAK,GAAG,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC;IACnD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;MACtB,IAAM,UAAQ,GAAG,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC;MAC7D,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS;MAChC,IAAM,OAAK,GAAG,SAAS,CAAC,QAAQ,EAAE;MAClC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,OAAK,CAAC,CAAC;MAC3B,IAAM,OAAK,GAAG,UAAQ,CAAC,MAAM;MAC7B,IAAI,CAAC,UAAQ,EAAE,UAAC,EAAE,EAAE,KAAK,EAAA;QACvB,IAAI,KAAK,GAAG,OAAK,GAAG,CAAC,EAAE;UACrB,IAAM,MAAM,GAAG,UAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;UAClC,KAAI,CAAC,YAAY,CAAC,OAAK,EAAE,EAAE,EAAE,MAAM,EAAE,WAAW,CAAC;QAClD;MACH,CAAC,CAAC;IACH;EACH,CAAC;EACD;EACQ,WAAA,CAAA,SAAA,CAAA,UAAU,GAAlB,UAAmB,OAAO,EAAA;IACxB,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;IAC5D,IAAI,CAAC,KAAK,EAAE;MACV;IACD;IACD,IAAM,KAAK,GAAG,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC;IACnD,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;MACrB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE;MAC1B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI;IACzB;EACH,CAAC;EAED;;;;;;;;;;;;;;;;AAgBG;EACI,WAAA,CAAA,SAAA,CAAA,IAAI,GAAX,UAAY,IAAiC,EAAA;IAC3C,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO;IAC5B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;MACnB;MACA,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;QACrD,EAAE,EAAE,qBAAqB;QACzB,OAAO,EAAE;OACV,CAAC;IACH;IACD,IAAM,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC;IAC1C,IAAI,OAAO,EAAE;MACX,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,KAAK,CAAC;IACzC;EACH,CAAC;EAED;;AAEG;EACI,WAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,IAAM,OAAO,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/C,IAAI,OAAO,EAAE;MACX,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IACzB;EACH,CAAC;EAED;;AAEG;EACI,WAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,YAAA;IACE,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;IACvB;IACD,IAAI,CAAC,KAAK,GAAG,CAAA,CAAE;EACjB,CAAC;EAED;;AAEG;EACH,WAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,MAAA,CAAA,SAAA,CAAM,OAAO,CAAA,IAAA,CAAA,IAAA,CAAE;IACf,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;IACxB;EACH,CAAC;EACH,OAAA,WAAC;AAAD,CAAC,CAjJyB,MAAM,CAAA;AAkJhC,eAAe,WAAW","sourcesContent":["import Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport Element from '../../../geometry/element/';\nimport { deepMix, each, isFunction } from '@antv/util';\nimport { LooseObject } from '../../../interface';\nimport { IGroup, ShapeAttrs } from '../../../dependents';\n\ntype LinkActiveStyle = ShapeAttrs | ((style: ShapeAttrs, Element: Element) => ShapeAttrs);\n\n/**\n * Link Elements by color\n *\n * public 方法是对外可用的反馈交互。使用方式，如：element-link-by-color:link, element-link-by-color:unlink, element-link-by-color:clear\n */\nclass LinkByColor extends Action {\n  private linkGroup: IGroup;\n  private cache: LooseObject = {};\n  // 获取颜色对应的 scale\n  private getColorScale(view, element) {\n    const colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return null;\n    }\n    const scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  }\n  // 获取连接的 path\n  private getLinkPath(element: Element, nextElement: Element) {\n    const view = this.context.view;\n    const { isTransposed } = view.getCoordinate();\n    const bbox = element.shape.getCanvasBBox();\n    const nextBBox = nextElement.shape.getCanvasBBox();\n    const path = isTransposed\n      ? [\n          ['M', bbox.minX, bbox.minY],\n          ['L', nextBBox.minX, nextBBox.maxY],\n          ['L', nextBBox.maxX, nextBBox.maxY],\n          ['L', bbox.maxX, bbox.minY],\n          ['Z'],\n        ]\n      : [\n          ['M', bbox.maxX, bbox.minY],\n          ['L', nextBBox.minX, nextBBox.minY],\n          ['L', nextBBox.minX, nextBBox.maxY],\n          ['L', bbox.maxX, bbox.maxY],\n          ['Z'],\n        ];\n    return path;\n  }\n  // 添加连接的图形\n  private addLinkShape(group: IGroup, element: Element, nextElement: Element, activeStyle?: LinkActiveStyle) {\n    const style = {\n      opacity: 0.4,\n      fill: element.shape.attr('fill'),\n    };\n    group.addShape({\n      type: 'path',\n      attrs: {\n        ...deepMix({}, style, isFunction(activeStyle) ? activeStyle(style, element) : activeStyle),\n        path: this.getLinkPath(element, nextElement),\n      },\n    });\n  }\n  // 使用图形连接\n  private linkByElement(element: Element, activeStyle?: LinkActiveStyle) {\n    const view = this.context.view;\n    const scale = this.getColorScale(view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (!this.cache[value]) {\n      const elements = getElementsByField(view, scale.field, value);\n      const linkGroup = this.linkGroup;\n      const group = linkGroup.addGroup();\n      this.cache[value] = group; // 缓存\n      const count = elements.length;\n      each(elements, (el, index) => {\n        if (index < count - 1) {\n          const nextEl = elements[index + 1];\n          this.addLinkShape(group, el, nextEl, activeStyle);\n        }\n      });\n    }\n  }\n  // 移除连接\n  private removeLink(element) {\n    const scale = this.getColorScale(this.context.view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  }\n\n  /**\n   * 连接 elements\n   *\n   * @usage\n   * registerInteraction('xxx', {\n   *   start: [\n   *    {\n   *      trigger: 'interval:mouseenter',\n   *      action: 'element-link-by-color:link',\n   *      arg: {\n   *        // style: { fill: 'red' }\n   *        style: (style, element) => ({ fill: 'red' })\n   *     },\n   *   },\n   *  ],\n   * });\n   */\n  public link(args?: { style: LinkActiveStyle }) {\n    const context = this.context;\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        id: 'link-by-color-group',\n        capture: false,\n      });\n    }\n    const element = getCurrentElement(context);\n    if (element) {\n      this.linkByElement(element, args?.style);\n    }\n  }\n\n  /**\n   * 取消连接 elements\n   */\n  public unlink() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      this.removeLink(element);\n    }\n  }\n\n  /**\n   * 清除所有连接\n   */\n  public clear() {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n    this.cache = {};\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    super.destroy();\n    if (this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  }\n}\nexport default LinkByColor;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}