{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { reduce, isNumber } from '@antv/util';\n/**\n * 获得中位数\n * @param array\n */\nexport function getMedian(array) {\n  var arr = __spreadArray([], __read(array), false);\n  // 先排序\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  var len = arr.length;\n  // median\n  // 0\n  if (len === 0) {\n    return 0;\n  }\n  // 奇数\n  if (len % 2 === 1) {\n    return arr[(len - 1) / 2];\n  }\n  // 偶数\n  return (arr[len / 2] + arr[len / 2 - 1]) / 2;\n}\n/**\n * 获得平均值\n * @param array\n */\nexport function getMean(array) {\n  var sum = reduce(array, function (r, num) {\n    return r += isNaN(num) || !isNumber(num) ? 0 : num;\n  }, 0);\n  return array.length === 0 ? 0 : sum / array.length;\n}","map":{"version":3,"sources":["../../src/util/stat.ts"],"names":[],"mappings":";AAAA,SAAS,MAAM,EAAE,QAAQ,QAAQ,YAAY;AAE7C;;;AAGG;AACH,OAAM,SAAU,SAAS,CAAC,KAAe,EAAA;EACvC,IAAM,GAAG,GAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAO,KAAK,CAAA,EAAA,KAAA,CAAC;EACtB;EACA,GAAG,CAAC,IAAI,CAAC,UAAC,CAAS,EAAE,CAAS,EAAA;IAC5B,OAAO,CAAC,GAAG,CAAC;EACd,CAAC,CAAC;EAEF,IAAM,GAAG,GAAG,GAAG,CAAC,MAAM;EAEtB;EACA;EACA,IAAI,GAAG,KAAK,CAAC,EAAE;IACb,OAAO,CAAC;EACT;EAED;EACA,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;IACjB,OAAO,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;EAC1B;EAED;EACA,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;AAC9C;AAEA;;;AAGG;AACH,OAAM,SAAU,OAAO,CAAC,KAAe,EAAA;EACrC,IAAM,GAAG,GAAG,MAAM,CAChB,KAAK,EACL,UAAC,CAAS,EAAE,GAAW,EAAA;IACrB,OAAQ,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG;EACrD,CAAC,EACD,CAAC,CACF;EAED,OAAO,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,MAAM;AACpD","sourcesContent":["import { reduce, isNumber } from '@antv/util';\n\n/**\n * 获得中位数\n * @param array\n */\nexport function getMedian(array: number[]) {\n  const arr = [...array];\n  // 先排序\n  arr.sort((a: number, b: number) => {\n    return a - b;\n  });\n\n  const len = arr.length;\n\n  // median\n  // 0\n  if (len === 0) {\n    return 0;\n  }\n\n  // 奇数\n  if (len % 2 === 1) {\n    return arr[(len - 1) / 2];\n  }\n\n  // 偶数\n  return (arr[len / 2] + arr[len / 2 - 1]) / 2;\n}\n\n/**\n * 获得平均值\n * @param array\n */\nexport function getMean(array: number[]) {\n  const sum = reduce(\n    array,\n    (r: number, num: number) => {\n      return (r += isNaN(num) || !isNumber(num) ? 0 : num);\n    },\n    0\n  );\n\n  return array.length === 0 ? 0 : sum / array.length;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}