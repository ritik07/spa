{"ast":null,"code":"import { each } from '@antv/util';\n/**\n * @ignore\n * Gets cpath\n * @param from\n * @param to\n * @returns\n */\nexport function getCPath(from, to) {\n  return ['C', from.x * 1 / 2 + to.x * 1 / 2, from.y, from.x * 1 / 2 + to.x * 1 / 2, to.y, to.x, to.y];\n}\n/**\n * @ignore\n * Gets qpath\n * @param to\n * @param center\n * @returns\n */\nexport function getQPath(to, center) {\n  var points = [];\n  points.push({\n    x: center.x,\n    y: center.y\n  });\n  points.push(to);\n  var sub = ['Q'];\n  each(points, function (point) {\n    sub.push(point.x, point.y);\n  });\n  return sub;\n}","map":{"version":3,"sources":["../../../../src/geometry/shape/edge/util.ts"],"names":[],"mappings":"AAAA,SAAS,IAAI,QAAQ,YAAY;AAGjC;;;;;;AAMG;AACH,OAAM,SAAU,QAAQ,CAAC,IAAW,EAAE,EAAS,EAAA;EAC7C,OAAO,CAAC,GAAG,EAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAI,CAAC,GAAI,EAAE,CAAC,CAAC,GAAG,CAAC,GAAI,CAAC,EAAE,IAAI,CAAC,CAAC,EAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAI,CAAC,GAAI,EAAE,CAAC,CAAC,GAAG,CAAC,GAAI,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC9G;AAEA;;;;;;AAMG;AACH,OAAM,SAAU,QAAQ,CAAC,EAAS,EAAE,MAAa,EAAA;EAC/C,IAAM,MAAM,GAAG,EAAE;EACjB,MAAM,CAAC,IAAI,CAAC;IACV,CAAC,EAAE,MAAM,CAAC,CAAC;IACX,CAAC,EAAE,MAAM,CAAC;GACX,CAAC;EACF,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;EAEf,IAAM,GAAG,GAAG,CAAC,GAAG,CAAC;EACjB,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK,EAAA;IACjB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;EAC5B,CAAC,CAAC;EAEF,OAAO,GAAG;AACZ","sourcesContent":["import { each } from '@antv/util';\nimport { Point } from '../../../interface';\n\n/**\n * @ignore\n * Gets cpath\n * @param from\n * @param to\n * @returns\n */\nexport function getCPath(from: Point, to: Point) {\n  return ['C', (from.x * 1) / 2 + (to.x * 1) / 2, from.y, (from.x * 1) / 2 + (to.x * 1) / 2, to.y, to.x, to.y];\n}\n\n/**\n * @ignore\n * Gets qpath\n * @param to\n * @param center\n * @returns\n */\nexport function getQPath(to: Point, center: Point) {\n  const points = [];\n  points.push({\n    x: center.x,\n    y: center.y,\n  });\n  points.push(to);\n\n  const sub = ['Q'];\n  each(points, (point) => {\n    sub.push(point.x, point.y);\n  });\n\n  return sub;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}