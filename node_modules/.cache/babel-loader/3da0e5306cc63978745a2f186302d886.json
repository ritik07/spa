{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get, isArray, isEmpty, isEqual, isFunction, isString } from '@antv/util';\n// 暂未发包\n// @ts-ignore\nimport { propagationDelegate } from '@antv/component';\nimport { doAnimate } from '../../animate';\nimport Base from '../../base';\nimport { getReplaceAttrs } from '../../util/graphics';\nimport { GEOMETRY_LIFE_CIRCLE } from '../../constant';\nimport { BACKGROUND_SHAPE } from '../shape/constant';\n/**\n * Element 图形元素。\n * 定义：在 G2 中，我们会将数据通过图形语法映射成不同的图形，比如点图，数据集中的每条数据会对应一个点，柱状图每条数据对应一个柱子，线图则是一组数据对应一条折线，Element 即一条/一组数据对应的图形元素，它代表一条数据或者一个数据集，在图形层面，它可以是单个 Shape 也可以是多个 Shape，我们称之为图形元素。\n */\nvar Element = /** @class */function (_super) {\n  __extends(Element, _super);\n  function Element(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /** 保存 shape 对应的 label */\n    _this.labelShape = [];\n    // 存储当前开启的状态\n    _this.states = [];\n    var shapeFactory = cfg.shapeFactory,\n      container = cfg.container,\n      offscreenGroup = cfg.offscreenGroup,\n      elementIndex = cfg.elementIndex,\n      _a = cfg.visible,\n      visible = _a === void 0 ? true : _a;\n    _this.shapeFactory = shapeFactory;\n    _this.container = container;\n    _this.offscreenGroup = offscreenGroup;\n    _this.visible = visible;\n    _this.elementIndex = elementIndex;\n    return _this;\n  }\n  /**\n   * 绘制图形。\n   * @param model 绘制数据。\n   * @param isUpdate 可选，是否是更新发生后的绘制。\n   */\n  Element.prototype.draw = function (model, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    this.model = model;\n    this.data = model.data; // 存储原始数据\n    this.shapeType = this.getShapeType(model);\n    // 绘制图形\n    this.drawShape(model, isUpdate);\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 更新图形。\n   * @param model 更新的绘制数据。\n   */\n  Element.prototype.update = function (model) {\n    var _a = this,\n      shapeFactory = _a.shapeFactory,\n      shape = _a.shape;\n    if (!shape) {\n      return;\n    }\n    // 更新数据\n    this.model = model;\n    this.data = model.data;\n    this.shapeType = this.getShapeType(model);\n    // step 1: 更新 shape 携带的信息\n    this.setShapeInfo(shape, model);\n    // step 2: 使用虚拟 Group 重新绘制 shape，然后更新当前 shape\n    var offscreenGroup = this.getOffscreenGroup();\n    var newShape = shapeFactory.drawShape(this.shapeType, model, offscreenGroup);\n    // @ts-ignore\n    newShape.cfg.data = this.data;\n    // @ts-ignore\n    newShape.cfg.origin = model;\n    // label 需要使用\n    newShape.cfg.element = this;\n    // step 3: 同步 shape 样式\n    this.syncShapeStyle(shape, newShape, this.getStates(), this.getAnimateCfg('update'));\n  };\n  /**\n   * 销毁 element 实例。\n   */\n  Element.prototype.destroy = function () {\n    var _a = this,\n      shapeFactory = _a.shapeFactory,\n      shape = _a.shape;\n    if (shape) {\n      var animateCfg = this.getAnimateCfg('leave');\n      if (animateCfg) {\n        // 指定了动画配置则执行销毁动画\n        doAnimate(shape, animateCfg, {\n          coordinate: shapeFactory.coordinate,\n          toAttrs: __assign({}, shape.attr())\n        });\n      } else {\n        // 否则直接销毁\n        shape.remove(true);\n      }\n    }\n    // reset\n    this.states = [];\n    this.shapeFactory = undefined;\n    this.container = undefined;\n    this.shape = undefined;\n    this.animate = undefined;\n    this.geometry = undefined;\n    this.labelShape = [];\n    this.model = undefined;\n    this.data = undefined;\n    this.offscreenGroup = undefined;\n    this.statesStyle = undefined;\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 显示或者隐藏 element。\n   * @param visible 是否可见。\n   */\n  Element.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n    if (visible) {\n      if (this.shape) {\n        this.shape.show();\n      }\n      if (this.labelShape) {\n        this.labelShape.forEach(function (label) {\n          label.show();\n        });\n      }\n    } else {\n      if (this.shape) {\n        this.shape.hide();\n      }\n      if (this.labelShape) {\n        this.labelShape.forEach(function (label) {\n          label.hide();\n        });\n      }\n    }\n  };\n  /**\n   * 设置 Element 的状态。\n   *\n   * 目前 Element 开放三种状态：\n   * 1. active\n   * 2. selected\n   * 3. inactive\n   *\n   * 这三种状态相互独立，可以进行叠加。\n   *\n   * 这三种状态的样式可在 [[Theme]] 主题中或者通过 `geometry.state()` 接口进行配置。\n   *\n   * ```ts\n   * // 激活 active 状态\n   * setState('active', true);\n   * ```\n   *\n   * @param stateName 状态名\n   * @param stateStatus 是否开启状态\n   */\n  Element.prototype.setState = function (stateName, stateStatus) {\n    var _a = this,\n      states = _a.states,\n      shapeFactory = _a.shapeFactory,\n      model = _a.model,\n      shape = _a.shape,\n      shapeType = _a.shapeType;\n    var index = states.indexOf(stateName);\n    if (stateStatus) {\n      // 开启状态\n      if (index > -1) {\n        // 该状态已经开启，则返回\n        return;\n      }\n      states.push(stateName);\n      if (stateName === 'active' || stateName === 'selected') {\n        shape === null || shape === void 0 ? void 0 : shape.toFront();\n      }\n    } else {\n      if (index === -1) {\n        // 关闭状态，但是状态未设置过\n        return;\n      }\n      states.splice(index, 1);\n      if (stateName === 'active' || stateName === 'selected') {\n        var _b = this.geometry,\n          sortZIndex = _b.sortZIndex,\n          zIndexReversed = _b.zIndexReversed;\n        var idx = zIndexReversed ? this.geometry.elements.length - this.elementIndex : this.elementIndex;\n        sortZIndex ? shape.setZIndex(idx) : shape.set('zIndex', idx);\n      }\n    }\n    // 使用虚拟 group 重新绘制 shape，然后对这个 shape 应用状态样式后，更新当前 shape。\n    var offscreenShape = shapeFactory.drawShape(shapeType, model, this.getOffscreenGroup());\n    if (states.length) {\n      // 应用当前状态\n      this.syncShapeStyle(shape, offscreenShape, states, null);\n    } else {\n      // 如果没有状态，则需要恢复至原始状态\n      this.syncShapeStyle(shape, offscreenShape, ['reset'], null);\n    }\n    offscreenShape.remove(true); // 销毁，减少内存占用\n    var eventObject = {\n      state: stateName,\n      stateStatus: stateStatus,\n      element: this,\n      target: this.container\n    };\n    this.container.emit('statechange', eventObject);\n    // @ts-ignore\n    propagationDelegate(this.shape, 'statechange', eventObject);\n  };\n  /**\n   * 清空状量态，恢复至初始状态。\n   */\n  Element.prototype.clearStates = function () {\n    var _this = this;\n    var states = this.states;\n    each(states, function (state) {\n      _this.setState(state, false);\n    });\n    this.states = [];\n  };\n  /**\n   * 查询当前 Element 上是否已设置 `stateName` 对应的状态。\n   * @param stateName 状态名称。\n   * @returns true 表示存在，false 表示不存在。\n   */\n  Element.prototype.hasState = function (stateName) {\n    return this.states.includes(stateName);\n  };\n  /**\n   * 获取当前 Element 上所有的状态。\n   * @returns 当前 Element 上所有的状态数组。\n   */\n  Element.prototype.getStates = function () {\n    return this.states;\n  };\n  /**\n   * 获取 Element 对应的原始数据。\n   * @returns 原始数据。\n   */\n  Element.prototype.getData = function () {\n    return this.data;\n  };\n  /**\n   * 获取 Element 对应的图形绘制数据。\n   * @returns 图形绘制数据。\n   */\n  Element.prototype.getModel = function () {\n    return this.model;\n  };\n  /**\n   * 返回 Element 元素整体的 bbox，包含文本及文本连线（有的话）。\n   * @returns 整体包围盒。\n   */\n  Element.prototype.getBBox = function () {\n    var _a = this,\n      shape = _a.shape,\n      labelShape = _a.labelShape;\n    var bbox = {\n      x: 0,\n      y: 0,\n      minX: 0,\n      minY: 0,\n      maxX: 0,\n      maxY: 0,\n      width: 0,\n      height: 0\n    };\n    if (shape) {\n      bbox = shape.getCanvasBBox();\n    }\n    if (labelShape) {\n      labelShape.forEach(function (label) {\n        var labelBBox = label.getCanvasBBox();\n        bbox.x = Math.min(labelBBox.x, bbox.x);\n        bbox.y = Math.min(labelBBox.y, bbox.y);\n        bbox.minX = Math.min(labelBBox.minX, bbox.minX);\n        bbox.minY = Math.min(labelBBox.minY, bbox.minY);\n        bbox.maxX = Math.max(labelBBox.maxX, bbox.maxX);\n        bbox.maxY = Math.max(labelBBox.maxY, bbox.maxY);\n      });\n    }\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    return bbox;\n  };\n  Element.prototype.getStatesStyle = function () {\n    if (!this.statesStyle) {\n      var _a = this,\n        shapeType = _a.shapeType,\n        geometry = _a.geometry,\n        shapeFactory = _a.shapeFactory;\n      var stateOption = geometry.stateOption;\n      var defaultShapeType = shapeFactory.defaultShapeType;\n      var stateTheme = shapeFactory.theme[shapeType] || shapeFactory.theme[defaultShapeType];\n      this.statesStyle = deepMix({}, stateTheme, stateOption);\n    }\n    return this.statesStyle;\n  };\n  // 从主题中获取对应状态量的样式\n  Element.prototype.getStateStyle = function (stateName, shapeKey) {\n    var statesStyle = this.getStatesStyle();\n    var stateCfg = get(statesStyle, [stateName, 'style'], {});\n    var shapeStyle = stateCfg[shapeKey] || stateCfg;\n    if (isFunction(shapeStyle)) {\n      return shapeStyle(this);\n    }\n    return shapeStyle;\n  };\n  // 获取动画配置\n  Element.prototype.getAnimateCfg = function (animateType) {\n    var _this = this;\n    var animate = this.animate;\n    if (animate) {\n      var cfg_1 = animate[animateType];\n      if (cfg_1) {\n        // 增加动画的回调函数，如果外部传入了，则先执行外部，然后发射 geometry 的 animate 事件\n        return __assign(__assign({}, cfg_1), {\n          callback: function () {\n            var _a;\n            isFunction(cfg_1.callback) && cfg_1.callback();\n            (_a = _this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.AFTER_DRAW_ANIMATE);\n          }\n        });\n      }\n      return cfg_1;\n    }\n    return null;\n  };\n  // 绘制图形\n  Element.prototype.drawShape = function (model, isUpdate) {\n    var _a;\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    var _b = this,\n      shapeFactory = _b.shapeFactory,\n      container = _b.container,\n      shapeType = _b.shapeType;\n    // 自定义 shape 有可能返回空 shape\n    this.shape = shapeFactory.drawShape(shapeType, model, container);\n    if (this.shape) {\n      this.setShapeInfo(this.shape, model); // 存储绘图数据\n      // @ts-ignore\n      var name_1 = this.shape.cfg.name;\n      // 附加 element 的 name, name 现在支持数组了，很好用了\n      if (!name_1) {\n        // 这个地方如果用户添加了 name, 则附加 name ，否则就添加自己的 name\n        // @ts-ignore\n        this.shape.cfg.name = ['element', this.shapeFactory.geometryType];\n      } else if (isString(name_1)) {\n        // @ts-ignore\n        this.shape.cfg.name = ['element', name_1];\n      }\n      // 执行入场动画\n      var animateType = isUpdate ? 'enter' : 'appear';\n      var animateCfg = this.getAnimateCfg(animateType);\n      if (animateCfg) {\n        // 开始执行动画的生命周期\n        (_a = this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n        doAnimate(this.shape, animateCfg, {\n          coordinate: shapeFactory.coordinate,\n          toAttrs: __assign({}, this.shape.attr())\n        });\n      }\n    }\n  };\n  // 获取虚拟 Group\n  Element.prototype.getOffscreenGroup = function () {\n    if (!this.offscreenGroup) {\n      var GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n      this.offscreenGroup = new GroupCtor({});\n    }\n    return this.offscreenGroup;\n  };\n  // 设置 shape 上需要携带的信息\n  Element.prototype.setShapeInfo = function (shape, data) {\n    var _this = this;\n    // @ts-ignore\n    shape.cfg.origin = data;\n    // @ts-ignore\n    shape.cfg.element = this;\n    if (shape.isGroup()) {\n      var children = shape.get('children');\n      children.forEach(function (child) {\n        _this.setShapeInfo(child, data);\n      });\n    }\n  };\n  // 更新当前 shape 的样式\n  Element.prototype.syncShapeStyle = function (sourceShape, targetShape, states, animateCfg, index) {\n    var _this = this;\n    var _a;\n    if (states === void 0) {\n      states = [];\n    }\n    if (index === void 0) {\n      index = 0;\n    }\n    if (!sourceShape || !targetShape) {\n      return;\n    }\n    // 所有的 shape 都需要同步 clip\n    var clip = sourceShape.get('clipShape');\n    var newClip = targetShape.get('clipShape');\n    this.syncShapeStyle(clip, newClip, states, animateCfg);\n    if (sourceShape.isGroup()) {\n      var children = sourceShape.get('children');\n      var newChildren = targetShape.get('children');\n      for (var i = 0; i < children.length; i++) {\n        this.syncShapeStyle(children[i], newChildren[i], states, animateCfg, index + i);\n      }\n    } else {\n      if (!isEmpty(states) && !isEqual(states, ['reset'])) {\n        var name_2 = sourceShape.get('name');\n        if (isArray(name_2)) {\n          // 会附加 element 的 name\n          name_2 = name_2[1];\n        }\n        each(states, function (state) {\n          // background shape 不进行状态样式设置\n          if (targetShape.get('name') !== BACKGROUND_SHAPE) {\n            var style = _this.getStateStyle(state, name_2 || index); // 如果用户没有设置 name，则默认根据索引值\n            targetShape.attr(style);\n          }\n        });\n      }\n      var newAttrs = getReplaceAttrs(sourceShape, targetShape);\n      if (this.animate) {\n        if (animateCfg) {\n          (_a = this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n          // 需要进行动画\n          doAnimate(sourceShape, animateCfg, {\n            coordinate: this.shapeFactory.coordinate,\n            toAttrs: newAttrs,\n            shapeModel: this.model\n          });\n        } else if (!isEmpty(states)) {\n          sourceShape.stopAnimate();\n          sourceShape.animate(newAttrs, {\n            duration: 300\n          });\n        } else {\n          sourceShape.attr(newAttrs);\n        }\n      } else {\n        sourceShape.attr(newAttrs);\n      }\n    }\n  };\n  Element.prototype.getShapeType = function (model) {\n    var shape = get(model, 'shape');\n    return isArray(shape) ? shape[0] : shape;\n  };\n  return Element;\n}(Base);\nexport default Element;","map":{"version":3,"sources":["../../../src/geometry/element/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, each, get, isArray, isEmpty, isEqual, isFunction, isString } from '@antv/util';\n// 暂未发包\n// @ts-ignore\nimport { propagationDelegate } from '@antv/component';\nimport { doAnimate } from '../../animate';\nimport Base from '../../base';\nimport { BBox, IGroup, IShape } from '../../dependents';\nimport { AnimateOption, Datum, ShapeFactory, ShapeInfo, StateCfg } from '../../interface';\nimport { getReplaceAttrs } from '../../util/graphics';\nimport Geometry from '../base';\nimport { GEOMETRY_LIFE_CIRCLE } from '../../constant';\nimport { BACKGROUND_SHAPE } from '../shape/constant';\n\n/** Element 构造函数传入参数类型 */\ninterface ElementCfg {\n  /** 用于创建各种 shape 的工厂对象 */\n  shapeFactory: ShapeFactory;\n  /** shape 容器 */\n  container: IGroup;\n  /** element 的索引 */\n  elementIndex?: number;\n  /** 虚拟 group，用户可以不传入 */\n  offscreenGroup?: IGroup;\n  /** 是否可见 */\n  visible?: boolean;\n}\n\n/**\n * Element 图形元素。\n * 定义：在 G2 中，我们会将数据通过图形语法映射成不同的图形，比如点图，数据集中的每条数据会对应一个点，柱状图每条数据对应一个柱子，线图则是一组数据对应一条折线，Element 即一条/一组数据对应的图形元素，它代表一条数据或者一个数据集，在图形层面，它可以是单个 Shape 也可以是多个 Shape，我们称之为图形元素。\n */\nexport default class Element extends Base {\n  /** 用于创建各种 shape 的工厂对象 */\n  public shapeFactory: ShapeFactory;\n  /** shape 容器 */\n  public container: IGroup;\n  /** element 索引 */\n  public elementIndex: number;\n  /** 最后创建的图形对象 */\n  public shape: IShape | IGroup;\n  /** shape 的动画配置 */\n  public animate: AnimateOption | boolean;\n\n  // 非构造函数属性，需要外部赋值\n  /** element 对应的 Geometry 实例 */\n  public geometry: Geometry;\n  /** 保存 shape 对应的 label */\n  public labelShape: IGroup[] = [];\n\n  /** 绘制的 shape 类型 */\n  private shapeType: string;\n\n  /** shape 绘制需要的数据 */\n  private model: ShapeInfo;\n  /** 原始数据 */\n  private data: Datum;\n  // 存储当前开启的状态\n  private states: string[] = [];\n  private statesStyle;\n  // 虚拟 Group\n  private offscreenGroup: IGroup;\n\n  constructor(cfg: ElementCfg) {\n    super(cfg);\n\n    const { shapeFactory, container, offscreenGroup, elementIndex, visible = true } = cfg;\n    this.shapeFactory = shapeFactory;\n    this.container = container;\n    this.offscreenGroup = offscreenGroup;\n    this.visible = visible;\n    this.elementIndex = elementIndex;\n  }\n\n  /**\n   * 绘制图形。\n   * @param model 绘制数据。\n   * @param isUpdate 可选，是否是更新发生后的绘制。\n   */\n  public draw(model: ShapeInfo, isUpdate: boolean = false) {\n    this.model = model;\n    this.data = model.data; // 存储原始数据\n    this.shapeType = this.getShapeType(model);\n\n    // 绘制图形\n    this.drawShape(model, isUpdate);\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  }\n\n  /**\n   * 更新图形。\n   * @param model 更新的绘制数据。\n   */\n  public update(model: ShapeInfo) {\n    const { shapeFactory, shape } = this;\n    if (!shape) {\n      return;\n    }\n\n    // 更新数据\n    this.model = model;\n    this.data = model.data;\n    this.shapeType = this.getShapeType(model);\n\n    // step 1: 更新 shape 携带的信息\n    this.setShapeInfo(shape, model);\n\n    // step 2: 使用虚拟 Group 重新绘制 shape，然后更新当前 shape\n    const offscreenGroup = this.getOffscreenGroup();\n    const newShape = shapeFactory.drawShape(this.shapeType, model, offscreenGroup);\n    // @ts-ignore\n    newShape.cfg.data = this.data;\n    // @ts-ignore\n    newShape.cfg.origin = model;\n    // label 需要使用\n    newShape.cfg.element = this;\n\n    // step 3: 同步 shape 样式\n    this.syncShapeStyle(shape, newShape, this.getStates(), this.getAnimateCfg('update'));\n  }\n\n  /**\n   * 销毁 element 实例。\n   */\n  public destroy() {\n    const { shapeFactory, shape } = this;\n\n    if (shape) {\n      const animateCfg = this.getAnimateCfg('leave');\n      if (animateCfg) {\n        // 指定了动画配置则执行销毁动画\n        doAnimate(shape, animateCfg, {\n          coordinate: shapeFactory.coordinate,\n          toAttrs: {\n            ...shape.attr(),\n          },\n        });\n      } else {\n        // 否则直接销毁\n        shape.remove(true);\n      }\n    }\n\n    // reset\n    this.states = [];\n    this.shapeFactory = undefined;\n    this.container = undefined;\n    this.shape = undefined;\n    this.animate = undefined;\n    this.geometry = undefined;\n    this.labelShape = [];\n    this.model = undefined;\n    this.data = undefined;\n    this.offscreenGroup = undefined;\n    this.statesStyle = undefined;\n\n    super.destroy();\n  }\n\n  /**\n   * 显示或者隐藏 element。\n   * @param visible 是否可见。\n   */\n  public changeVisible(visible: boolean) {\n    super.changeVisible(visible);\n\n    if (visible) {\n      if (this.shape) {\n        this.shape.show();\n      }\n      if (this.labelShape) {\n        this.labelShape.forEach((label: IGroup) => {\n          label.show();\n        });\n      }\n    } else {\n      if (this.shape) {\n        this.shape.hide();\n      }\n      if (this.labelShape) {\n        this.labelShape.forEach((label: IGroup) => {\n          label.hide();\n        });\n      }\n    }\n  }\n\n  /**\n   * 设置 Element 的状态。\n   *\n   * 目前 Element 开放三种状态：\n   * 1. active\n   * 2. selected\n   * 3. inactive\n   *\n   * 这三种状态相互独立，可以进行叠加。\n   *\n   * 这三种状态的样式可在 [[Theme]] 主题中或者通过 `geometry.state()` 接口进行配置。\n   *\n   * ```ts\n   * // 激活 active 状态\n   * setState('active', true);\n   * ```\n   *\n   * @param stateName 状态名\n   * @param stateStatus 是否开启状态\n   */\n  public setState(stateName: string, stateStatus: boolean) {\n    const { states, shapeFactory, model, shape, shapeType } = this;\n\n    const index = states.indexOf(stateName);\n    if (stateStatus) {\n      // 开启状态\n      if (index > -1) {\n        // 该状态已经开启，则返回\n        return;\n      }\n      states.push(stateName);\n      if (stateName === 'active' || stateName === 'selected') {\n        shape?.toFront();\n      }\n    } else {\n      if (index === -1) {\n        // 关闭状态，但是状态未设置过\n        return;\n      }\n      states.splice(index, 1);\n      if (stateName === 'active' || stateName === 'selected') {\n        const { sortZIndex, zIndexReversed } = this.geometry;\n        const idx = zIndexReversed ? this.geometry.elements.length - this.elementIndex : this.elementIndex;\n        sortZIndex ? shape.setZIndex(idx) : shape.set('zIndex', idx);\n      }\n    }\n\n    // 使用虚拟 group 重新绘制 shape，然后对这个 shape 应用状态样式后，更新当前 shape。\n    const offscreenShape = shapeFactory.drawShape(shapeType, model, this.getOffscreenGroup());\n    if (states.length) {\n      // 应用当前状态\n      this.syncShapeStyle(shape, offscreenShape, states, null);\n    } else {\n      // 如果没有状态，则需要恢复至原始状态\n      this.syncShapeStyle(shape, offscreenShape, ['reset'], null);\n    }\n\n    offscreenShape.remove(true); // 销毁，减少内存占用\n\n    const eventObject = {\n      state: stateName,\n      stateStatus,\n      element: this,\n      target: this.container,\n    };\n    this.container.emit('statechange', eventObject);\n    // @ts-ignore\n    propagationDelegate(this.shape, 'statechange', eventObject);\n  }\n\n  /**\n   * 清空状量态，恢复至初始状态。\n   */\n  public clearStates() {\n    const states = this.states;\n\n    each(states, (state) => {\n      this.setState(state, false);\n    });\n\n    this.states = [];\n  }\n\n  /**\n   * 查询当前 Element 上是否已设置 `stateName` 对应的状态。\n   * @param stateName 状态名称。\n   * @returns true 表示存在，false 表示不存在。\n   */\n  public hasState(stateName: string): boolean {\n    return this.states.includes(stateName);\n  }\n\n  /**\n   * 获取当前 Element 上所有的状态。\n   * @returns 当前 Element 上所有的状态数组。\n   */\n  public getStates(): string[] {\n    return this.states;\n  }\n\n  /**\n   * 获取 Element 对应的原始数据。\n   * @returns 原始数据。\n   */\n  public getData(): Datum {\n    return this.data;\n  }\n\n  /**\n   * 获取 Element 对应的图形绘制数据。\n   * @returns 图形绘制数据。\n   */\n  public getModel(): ShapeInfo {\n    return this.model;\n  }\n\n  /**\n   * 返回 Element 元素整体的 bbox，包含文本及文本连线（有的话）。\n   * @returns 整体包围盒。\n   */\n  public getBBox(): BBox {\n    const { shape, labelShape } = this;\n    let bbox = {\n      x: 0,\n      y: 0,\n      minX: 0,\n      minY: 0,\n      maxX: 0,\n      maxY: 0,\n      width: 0,\n      height: 0,\n    };\n    if (shape) {\n      bbox = shape.getCanvasBBox();\n    }\n    if (labelShape) {\n      labelShape.forEach((label: IGroup) => {\n        const labelBBox = label.getCanvasBBox();\n        bbox.x = Math.min(labelBBox.x, bbox.x);\n        bbox.y = Math.min(labelBBox.y, bbox.y);\n        bbox.minX = Math.min(labelBBox.minX, bbox.minX);\n        bbox.minY = Math.min(labelBBox.minY, bbox.minY);\n        bbox.maxX = Math.max(labelBBox.maxX, bbox.maxX);\n        bbox.maxY = Math.max(labelBBox.maxY, bbox.maxY);\n      });\n    }\n\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n\n    return bbox;\n  }\n\n  private getStatesStyle() {\n    if (!this.statesStyle) {\n      const { shapeType, geometry, shapeFactory } = this;\n      const stateOption = geometry.stateOption;\n      const defaultShapeType = shapeFactory.defaultShapeType;\n      const stateTheme = shapeFactory.theme[shapeType] || shapeFactory.theme[defaultShapeType];\n      this.statesStyle = deepMix({}, stateTheme, stateOption);\n    }\n\n    return this.statesStyle;\n  }\n\n  // 从主题中获取对应状态量的样式\n  private getStateStyle(stateName: string, shapeKey?: string): StateCfg {\n    const statesStyle = this.getStatesStyle();\n    const stateCfg = get(statesStyle, [stateName, 'style'], {});\n    const shapeStyle = stateCfg[shapeKey] || stateCfg;\n    if (isFunction(shapeStyle)) {\n      return shapeStyle(this);\n    }\n\n    return shapeStyle;\n  }\n\n  // 获取动画配置\n  private getAnimateCfg(animateType: string) {\n    const animate = this.animate;\n    if (animate) {\n      const cfg = animate[animateType];\n\n      if (cfg) {\n        // 增加动画的回调函数，如果外部传入了，则先执行外部，然后发射 geometry 的 animate 事件\n        return {\n          ...cfg,\n          callback: () => {\n            isFunction(cfg.callback) && cfg.callback();\n            this.geometry?.emit(GEOMETRY_LIFE_CIRCLE.AFTER_DRAW_ANIMATE);\n          },\n        };\n      }\n      return cfg;\n    }\n\n    return null;\n  }\n\n  // 绘制图形\n  private drawShape(model: ShapeInfo, isUpdate: boolean = false) {\n    const { shapeFactory, container, shapeType } = this;\n\n    // 自定义 shape 有可能返回空 shape\n    this.shape = shapeFactory.drawShape(shapeType, model, container);\n\n    if (this.shape) {\n      this.setShapeInfo(this.shape, model); // 存储绘图数据\n      // @ts-ignore\n      const name = this.shape.cfg.name;\n      // 附加 element 的 name, name 现在支持数组了，很好用了\n      if (!name) {\n        // 这个地方如果用户添加了 name, 则附加 name ，否则就添加自己的 name\n        // @ts-ignore\n        this.shape.cfg.name = ['element', this.shapeFactory.geometryType];\n      } else if (isString(name)) {\n        // @ts-ignore\n        this.shape.cfg.name = ['element', name];\n      }\n      // 执行入场动画\n      const animateType = isUpdate ? 'enter' : 'appear';\n      const animateCfg = this.getAnimateCfg(animateType);\n      if (animateCfg) {\n        // 开始执行动画的生命周期\n        this.geometry?.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n\n        doAnimate(this.shape, animateCfg, {\n          coordinate: shapeFactory.coordinate,\n          toAttrs: {\n            ...this.shape.attr(),\n          },\n        });\n      }\n    }\n  }\n\n  // 获取虚拟 Group\n  private getOffscreenGroup() {\n    if (!this.offscreenGroup) {\n      const GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n      this.offscreenGroup = new GroupCtor({});\n    }\n\n    return this.offscreenGroup;\n  }\n\n  // 设置 shape 上需要携带的信息\n  private setShapeInfo(shape: IShape | IGroup, data: ShapeInfo) {\n    // @ts-ignore\n    shape.cfg.origin = data;\n    // @ts-ignore\n    shape.cfg.element = this;\n    if (shape.isGroup()) {\n      const children = shape.get('children');\n      children.forEach((child) => {\n        this.setShapeInfo(child, data);\n      });\n    }\n  }\n\n  // 更新当前 shape 的样式\n  private syncShapeStyle(\n    sourceShape: IGroup | IShape,\n    targetShape: IGroup | IShape,\n    states: string[] = [],\n    animateCfg,\n    index: number = 0\n  ) {\n    if (!sourceShape || !targetShape) {\n      return;\n    }\n    // 所有的 shape 都需要同步 clip\n    const clip = sourceShape.get('clipShape');\n    const newClip = targetShape.get('clipShape');\n\n    this.syncShapeStyle(clip, newClip, states, animateCfg);\n\n    if (sourceShape.isGroup()) {\n      const children = sourceShape.get('children');\n      const newChildren = targetShape.get('children');\n      for (let i = 0; i < children.length; i++) {\n        this.syncShapeStyle(children[i], newChildren[i], states, animateCfg, index + i);\n      }\n    } else {\n      if (!isEmpty(states) && !isEqual(states, ['reset'])) {\n        let name = sourceShape.get('name');\n        if (isArray(name)) {\n          // 会附加 element 的 name\n          name = name[1];\n        }\n\n        each(states, (state) => {\n          // background shape 不进行状态样式设置\n          if (targetShape.get('name') !== BACKGROUND_SHAPE) {\n            const style = this.getStateStyle(state, name || index); // 如果用户没有设置 name，则默认根据索引值\n            targetShape.attr(style);\n          }\n        });\n      }\n      const newAttrs = getReplaceAttrs(sourceShape as IShape, targetShape as IShape);\n\n      if (this.animate) {\n        if (animateCfg) {\n          this.geometry?.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n          // 需要进行动画\n          doAnimate(sourceShape, animateCfg, {\n            coordinate: this.shapeFactory.coordinate,\n            toAttrs: newAttrs,\n            shapeModel: this.model,\n          });\n        } else if (!isEmpty(states)) {\n          sourceShape.stopAnimate();\n          sourceShape.animate(newAttrs, {\n            duration: 300,\n          });\n        } else {\n          sourceShape.attr(newAttrs);\n        }\n      } else {\n        sourceShape.attr(newAttrs);\n      }\n    }\n  }\n\n  private getShapeType(model: ShapeInfo) {\n    const shape = get(model, 'shape');\n    return isArray(shape) ? shape[0] : shape;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}