{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport Geometry from './base';\n/** 引入 Path 对应的 ShapeFactory */\nimport './shape/polygon';\n/**\n * Polygon 几何标记。\n * 常用于绘制色块图、日历图等。\n */\nvar Polygon = /** @class */function (_super) {\n  __extends(Polygon, _super);\n  function Polygon() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'polygon';\n    _this.shapeType = 'polygon';\n    _this.generatePoints = true;\n    return _this;\n  }\n  /**\n   * 获取 Shape 的关键点数据。\n   * @param obj\n   * @returns\n   */\n  Polygon.prototype.createShapePointsCfg = function (obj) {\n    var cfg = _super.prototype.createShapePointsCfg.call(this, obj);\n    var x = cfg.x;\n    var y = cfg.y;\n    var temp;\n    // x y 都是数组时，不做处理\n    if (!(isArray(x) && isArray(y))) {\n      var xScale = this.getXScale();\n      var yScale = this.getYScale();\n      var xCount = xScale.values.length;\n      var yCount = yScale.values.length;\n      var xOffset = 0.5 * 1 / xCount;\n      var yOffset = 0.5 * 1 / yCount;\n      if (xScale.isCategory && yScale.isCategory) {\n        // 如果x,y都是分类\n        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];\n        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];\n      } else if (isArray(x)) {\n        // x 是数组\n        temp = x;\n        x = [temp[0], temp[0], temp[1], temp[1]];\n        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];\n      } else if (isArray(y)) {\n        // y 是数组\n        temp = y;\n        y = [temp[0], temp[1], temp[1], temp[0]];\n        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];\n      }\n      cfg.x = x;\n      cfg.y = y;\n    }\n    return cfg;\n  };\n  return Polygon;\n}(Geometry);\nexport default Polygon;","map":{"version":3,"sources":["../../src/geometry/polygon.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray } from '@antv/util';\nimport { Datum } from '../interface';\nimport Geometry from './base';\n/** 引入 Path 对应的 ShapeFactory */\nimport './shape/polygon';\n\n/**\n * Polygon 几何标记。\n * 常用于绘制色块图、日历图等。\n */\nexport default class Polygon extends Geometry {\n  public readonly type: string = 'polygon';\n  public readonly shapeType: string = 'polygon';\n  protected generatePoints: boolean = true;\n\n  /**\n   * 获取 Shape 的关键点数据。\n   * @param obj\n   * @returns\n   */\n  protected createShapePointsCfg(obj: Datum) {\n    const cfg: any = super.createShapePointsCfg(obj);\n    let x = cfg.x;\n    let y = cfg.y;\n    let temp;\n    // x y 都是数组时，不做处理\n    if (!(isArray(x) && isArray(y))) {\n      const xScale = this.getXScale();\n      const yScale = this.getYScale();\n      const xCount = xScale.values.length;\n      const yCount = yScale.values.length;\n      const xOffset = (0.5 * 1) / xCount;\n      const yOffset = (0.5 * 1) / yCount;\n\n      if (xScale.isCategory && yScale.isCategory) {\n        // 如果x,y都是分类\n        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];\n        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];\n      } else if (isArray(x)) {\n        // x 是数组\n        temp = x;\n        x = [temp[0], temp[0], temp[1], temp[1]];\n        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];\n      } else if (isArray(y)) {\n        // y 是数组\n        temp = y;\n        y = [temp[0], temp[1], temp[1], temp[0]];\n        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];\n      }\n      cfg.x = x;\n      cfg.y = y;\n    }\n    return cfg;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}