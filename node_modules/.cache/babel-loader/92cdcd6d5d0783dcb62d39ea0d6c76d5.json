{"ast":null,"code":"var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nvar twoDigitsOptional = \"\\\\d\\\\d?\";\nvar twoDigits = \"\\\\d\\\\d\";\nvar threeDigits = \"\\\\d{3}\";\nvar fourDigits = \"\\\\d{4}\";\nvar word = \"[^\\\\s]+\";\nvar literal = /\\[([^]*?)\\]/gm;\nfunction shorten(arr, sLen) {\n  var newArr = [];\n  for (var i = 0, len = arr.length; i < len; i++) {\n    newArr.push(arr[i].substr(0, sLen));\n  }\n  return newArr;\n}\nvar monthUpdate = function (arrName) {\n  return function (v, i18n) {\n    var lowerCaseArr = i18n[arrName].map(function (v) {\n      return v.toLowerCase();\n    });\n    var index = lowerCaseArr.indexOf(v.toLowerCase());\n    if (index > -1) {\n      return index;\n    }\n    return null;\n  };\n};\nfunction assign(origObj) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n    var obj = args_1[_a];\n    for (var key in obj) {\n      // @ts-ignore ex\n      origObj[key] = obj[key];\n    }\n  }\n  return origObj;\n}\nvar dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nvar monthNamesShort = shorten(monthNames, 3);\nvar dayNamesShort = shorten(dayNames, 3);\nvar defaultI18n = {\n  dayNamesShort: dayNamesShort,\n  dayNames: dayNames,\n  monthNamesShort: monthNamesShort,\n  monthNames: monthNames,\n  amPm: [\"am\", \"pm\"],\n  DoFn: function (dayOfMonth) {\n    return dayOfMonth + [\"th\", \"st\", \"nd\", \"rd\"][dayOfMonth % 10 > 3 ? 0 : (dayOfMonth - dayOfMonth % 10 !== 10 ? 1 : 0) * dayOfMonth % 10];\n  }\n};\nvar globalI18n = assign({}, defaultI18n);\nvar setGlobalDateI18n = function (i18n) {\n  return globalI18n = assign(globalI18n, i18n);\n};\nvar regexEscape = function (str) {\n  return str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n};\nvar pad = function (val, len) {\n  if (len === void 0) {\n    len = 2;\n  }\n  val = String(val);\n  while (val.length < len) {\n    val = \"0\" + val;\n  }\n  return val;\n};\nvar formatFlags = {\n  D: function (dateObj) {\n    return String(dateObj.getDate());\n  },\n  DD: function (dateObj) {\n    return pad(dateObj.getDate());\n  },\n  Do: function (dateObj, i18n) {\n    return i18n.DoFn(dateObj.getDate());\n  },\n  d: function (dateObj) {\n    return String(dateObj.getDay());\n  },\n  dd: function (dateObj) {\n    return pad(dateObj.getDay());\n  },\n  ddd: function (dateObj, i18n) {\n    return i18n.dayNamesShort[dateObj.getDay()];\n  },\n  dddd: function (dateObj, i18n) {\n    return i18n.dayNames[dateObj.getDay()];\n  },\n  M: function (dateObj) {\n    return String(dateObj.getMonth() + 1);\n  },\n  MM: function (dateObj) {\n    return pad(dateObj.getMonth() + 1);\n  },\n  MMM: function (dateObj, i18n) {\n    return i18n.monthNamesShort[dateObj.getMonth()];\n  },\n  MMMM: function (dateObj, i18n) {\n    return i18n.monthNames[dateObj.getMonth()];\n  },\n  YY: function (dateObj) {\n    return pad(String(dateObj.getFullYear()), 4).substr(2);\n  },\n  YYYY: function (dateObj) {\n    return pad(dateObj.getFullYear(), 4);\n  },\n  h: function (dateObj) {\n    return String(dateObj.getHours() % 12 || 12);\n  },\n  hh: function (dateObj) {\n    return pad(dateObj.getHours() % 12 || 12);\n  },\n  H: function (dateObj) {\n    return String(dateObj.getHours());\n  },\n  HH: function (dateObj) {\n    return pad(dateObj.getHours());\n  },\n  m: function (dateObj) {\n    return String(dateObj.getMinutes());\n  },\n  mm: function (dateObj) {\n    return pad(dateObj.getMinutes());\n  },\n  s: function (dateObj) {\n    return String(dateObj.getSeconds());\n  },\n  ss: function (dateObj) {\n    return pad(dateObj.getSeconds());\n  },\n  S: function (dateObj) {\n    return String(Math.round(dateObj.getMilliseconds() / 100));\n  },\n  SS: function (dateObj) {\n    return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n  },\n  SSS: function (dateObj) {\n    return pad(dateObj.getMilliseconds(), 3);\n  },\n  a: function (dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n  },\n  A: function (dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();\n  },\n  ZZ: function (dateObj) {\n    var offset = dateObj.getTimezoneOffset();\n    return (offset > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(offset) / 60) * 100 + Math.abs(offset) % 60, 4);\n  },\n  Z: function (dateObj) {\n    var offset = dateObj.getTimezoneOffset();\n    return (offset > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(offset) / 60), 2) + \":\" + pad(Math.abs(offset) % 60, 2);\n  }\n};\nvar monthParse = function (v) {\n  return +v - 1;\n};\nvar emptyDigits = [null, twoDigitsOptional];\nvar emptyWord = [null, word];\nvar amPm = [\"isPm\", word, function (v, i18n) {\n  var val = v.toLowerCase();\n  if (val === i18n.amPm[0]) {\n    return 0;\n  } else if (val === i18n.amPm[1]) {\n    return 1;\n  }\n  return null;\n}];\nvar timezoneOffset = [\"timezoneOffset\", \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\", function (v) {\n  var parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n  if (parts) {\n    var minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n    return parts[0] === \"+\" ? minutes : -minutes;\n  }\n  return 0;\n}];\nvar parseFlags = {\n  D: [\"day\", twoDigitsOptional],\n  DD: [\"day\", twoDigits],\n  Do: [\"day\", twoDigitsOptional + word, function (v) {\n    return parseInt(v, 10);\n  }],\n  M: [\"month\", twoDigitsOptional, monthParse],\n  MM: [\"month\", twoDigits, monthParse],\n  YY: [\"year\", twoDigits, function (v) {\n    var now = new Date();\n    var cent = +(\"\" + now.getFullYear()).substr(0, 2);\n    return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n  }],\n  h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n  hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n  H: [\"hour\", twoDigitsOptional],\n  HH: [\"hour\", twoDigits],\n  m: [\"minute\", twoDigitsOptional],\n  mm: [\"minute\", twoDigits],\n  s: [\"second\", twoDigitsOptional],\n  ss: [\"second\", twoDigits],\n  YYYY: [\"year\", fourDigits],\n  S: [\"millisecond\", \"\\\\d\", function (v) {\n    return +v * 100;\n  }],\n  SS: [\"millisecond\", twoDigits, function (v) {\n    return +v * 10;\n  }],\n  SSS: [\"millisecond\", threeDigits],\n  d: emptyDigits,\n  dd: emptyDigits,\n  ddd: emptyWord,\n  dddd: emptyWord,\n  MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n  MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n  a: amPm,\n  A: amPm,\n  ZZ: timezoneOffset,\n  Z: timezoneOffset\n};\n// Some common format strings\nvar globalMasks = {\n  default: \"ddd MMM DD YYYY HH:mm:ss\",\n  shortDate: \"M/D/YY\",\n  mediumDate: \"MMM D, YYYY\",\n  longDate: \"MMMM D, YYYY\",\n  fullDate: \"dddd, MMMM D, YYYY\",\n  isoDate: \"YYYY-MM-DD\",\n  isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n  shortTime: \"HH:mm\",\n  mediumTime: \"HH:mm:ss\",\n  longTime: \"HH:mm:ss.SSS\"\n};\nvar setGlobalDateMasks = function (masks) {\n  return assign(globalMasks, masks);\n};\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\nvar format = function (dateObj, mask, i18n) {\n  if (mask === void 0) {\n    mask = globalMasks[\"default\"];\n  }\n  if (i18n === void 0) {\n    i18n = {};\n  }\n  if (typeof dateObj === \"number\") {\n    dateObj = new Date(dateObj);\n  }\n  if (Object.prototype.toString.call(dateObj) !== \"[object Date]\" || isNaN(dateObj.getTime())) {\n    throw new Error(\"Invalid Date pass to format\");\n  }\n  mask = globalMasks[mask] || mask;\n  var literals = [];\n  // Make literals inactive by replacing them with @@@\n  mask = mask.replace(literal, function ($0, $1) {\n    literals.push($1);\n    return \"@@@\";\n  });\n  var combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n  // Apply formatting rules\n  mask = mask.replace(token, function ($0) {\n    return formatFlags[$0](dateObj, combinedI18nSettings);\n  });\n  // Inline literal values back into the formatted value\n  return mask.replace(/@@@/g, function () {\n    return literals.shift();\n  });\n};\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\nfunction parse(dateStr, format, i18n) {\n  if (i18n === void 0) {\n    i18n = {};\n  }\n  if (typeof format !== \"string\") {\n    throw new Error(\"Invalid format in fecha parse\");\n  }\n  // Check to see if the format is actually a mask\n  format = globalMasks[format] || format;\n  // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n  if (dateStr.length > 1000) {\n    return null;\n  }\n  // Default to the beginning of the year.\n  var today = new Date();\n  var dateInfo = {\n    year: today.getFullYear(),\n    month: 0,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n    isPm: null,\n    timezoneOffset: null\n  };\n  var parseInfo = [];\n  var literals = [];\n  // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n  var newFormat = format.replace(literal, function ($0, $1) {\n    literals.push(regexEscape($1));\n    return \"@@@\";\n  });\n  var specifiedFields = {};\n  var requiredFields = {};\n  // Change every token that we find into the correct regex\n  newFormat = regexEscape(newFormat).replace(token, function ($0) {\n    var info = parseFlags[$0];\n    var field = info[0],\n      regex = info[1],\n      requiredField = info[3];\n    // Check if the person has specified the same field twice. This will lead to confusing results.\n    if (specifiedFields[field]) {\n      throw new Error(\"Invalid format. \" + field + \" specified twice in format\");\n    }\n    specifiedFields[field] = true;\n    // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n    if (requiredField) {\n      requiredFields[requiredField] = true;\n    }\n    parseInfo.push(info);\n    return \"(\" + regex + \")\";\n  });\n  // Check all the required fields are present\n  Object.keys(requiredFields).forEach(function (field) {\n    if (!specifiedFields[field]) {\n      throw new Error(\"Invalid format. \" + field + \" is required in specified format\");\n    }\n  });\n  // Add back all the literals after\n  newFormat = newFormat.replace(/@@@/g, function () {\n    return literals.shift();\n  });\n  // Check if the date string matches the format. If it doesn't return null\n  var matches = dateStr.match(new RegExp(newFormat, \"i\"));\n  if (!matches) {\n    return null;\n  }\n  var combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n  // For each match, call the parser function for that date part\n  for (var i = 1; i < matches.length; i++) {\n    var _a = parseInfo[i - 1],\n      field = _a[0],\n      parser = _a[2];\n    var value = parser ? parser(matches[i], combinedI18nSettings) : +matches[i];\n    // If the parser can't make sense of the value, return null\n    if (value == null) {\n      return null;\n    }\n    dateInfo[field] = value;\n  }\n  if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n  var dateTZ;\n  if (dateInfo.timezoneOffset == null) {\n    dateTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);\n    var validateFields = [[\"month\", \"getMonth\"], [\"day\", \"getDate\"], [\"hour\", \"getHours\"], [\"minute\", \"getMinutes\"], [\"second\", \"getSeconds\"]];\n    for (var i = 0, len = validateFields.length; i < len; i++) {\n      // Check to make sure the date field is within the allowed range. Javascript dates allows values\n      // outside the allowed range. If the values don't match the value was invalid\n      if (specifiedFields[validateFields[i][0]] && dateInfo[validateFields[i][0]] !== dateTZ[validateFields[i][1]]()) {\n        return null;\n      }\n    }\n  } else {\n    dateTZ = new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));\n    // We can't validate dates in another timezone unfortunately. Do a basic check instead\n    if (dateInfo.month > 11 || dateInfo.month < 0 || dateInfo.day > 31 || dateInfo.day < 1 || dateInfo.hour > 23 || dateInfo.hour < 0 || dateInfo.minute > 59 || dateInfo.minute < 0 || dateInfo.second > 59 || dateInfo.second < 0) {\n      return null;\n    }\n  }\n  // Don't allow invalid dates\n  return dateTZ;\n}\nvar fecha = {\n  format: format,\n  parse: parse,\n  defaultI18n: defaultI18n,\n  setGlobalDateI18n: setGlobalDateI18n,\n  setGlobalDateMasks: setGlobalDateMasks\n};\nexport default fecha;\nexport { assign, format, parse, defaultI18n, setGlobalDateI18n, setGlobalDateMasks };","map":{"version":3,"sources":["../src/fecha.ts"],"names":[],"mappings":"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","sourcesContent":["const token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nconst twoDigitsOptional = \"\\\\d\\\\d?\";\nconst twoDigits = \"\\\\d\\\\d\";\nconst threeDigits = \"\\\\d{3}\";\nconst fourDigits = \"\\\\d{4}\";\nconst word = \"[^\\\\s]+\";\nconst literal = /\\[([^]*?)\\]/gm;\n\ntype DateInfo = {\n  year: number;\n  month: number;\n  day: number;\n  hour: number;\n  minute: number;\n  second: number;\n  millisecond: number;\n  isPm: number | null;\n  timezoneOffset: number | null;\n};\n\nexport type I18nSettings = {\n  amPm: [string, string];\n  dayNames: Days;\n  dayNamesShort: Days;\n  monthNames: Months;\n  monthNamesShort: Months;\n  DoFn(dayOfMonth: number): string;\n};\n\nexport type I18nSettingsOptional = Partial<I18nSettings>;\n\nexport type Days = [string, string, string, string, string, string, string];\nexport type Months = [\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string\n];\n\nfunction shorten<T extends string[]>(arr: T, sLen: number): string[] {\n  const newArr: string[] = [];\n  for (let i = 0, len = arr.length; i < len; i++) {\n    newArr.push(arr[i].substr(0, sLen));\n  }\n  return newArr;\n}\n\nconst monthUpdate = (\n  arrName: \"monthNames\" | \"monthNamesShort\" | \"dayNames\" | \"dayNamesShort\"\n) => (v: string, i18n: I18nSettings): number | null => {\n  const lowerCaseArr = i18n[arrName].map(v => v.toLowerCase());\n  const index = lowerCaseArr.indexOf(v.toLowerCase());\n  if (index > -1) {\n    return index;\n  }\n  return null;\n};\n\nexport function assign<A>(a: A): A;\nexport function assign<A, B>(a: A, b: B): A & B;\nexport function assign<A, B, C>(a: A, b: B, c: C): A & B & C;\nexport function assign<A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;\nexport function assign(origObj: any, ...args: any[]): any {\n  for (const obj of args) {\n    for (const key in obj) {\n      // @ts-ignore ex\n      origObj[key] = obj[key];\n    }\n  }\n  return origObj;\n}\n\nconst dayNames: Days = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n];\nconst monthNames: Months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nconst monthNamesShort: Months = shorten(monthNames, 3) as Months;\nconst dayNamesShort: Days = shorten(dayNames, 3) as Days;\n\nconst defaultI18n: I18nSettings = {\n  dayNamesShort,\n  dayNames,\n  monthNamesShort,\n  monthNames,\n  amPm: [\"am\", \"pm\"],\n  DoFn(dayOfMonth: number) {\n    return (\n      dayOfMonth +\n      [\"th\", \"st\", \"nd\", \"rd\"][\n        dayOfMonth % 10 > 3\n          ? 0\n          : ((dayOfMonth - (dayOfMonth % 10) !== 10 ? 1 : 0) * dayOfMonth) % 10\n      ]\n    );\n  }\n};\nlet globalI18n = assign({}, defaultI18n);\nconst setGlobalDateI18n = (i18n: I18nSettingsOptional): I18nSettings =>\n  (globalI18n = assign(globalI18n, i18n));\n\nconst regexEscape = (str: string): string =>\n  str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n\nconst pad = (val: string | number, len = 2): string => {\n  val = String(val);\n  while (val.length < len) {\n    val = \"0\" + val;\n  }\n  return val;\n};\n\nconst formatFlags: Record<\n  string,\n  (dateObj: Date, i18n: I18nSettings) => string\n> = {\n  D: (dateObj: Date): string => String(dateObj.getDate()),\n  DD: (dateObj: Date): string => pad(dateObj.getDate()),\n  Do: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.DoFn(dateObj.getDate()),\n  d: (dateObj: Date): string => String(dateObj.getDay()),\n  dd: (dateObj: Date): string => pad(dateObj.getDay()),\n  ddd: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.dayNamesShort[dateObj.getDay()],\n  dddd: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.dayNames[dateObj.getDay()],\n  M: (dateObj: Date): string => String(dateObj.getMonth() + 1),\n  MM: (dateObj: Date): string => pad(dateObj.getMonth() + 1),\n  MMM: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.monthNamesShort[dateObj.getMonth()],\n  MMMM: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.monthNames[dateObj.getMonth()],\n  YY: (dateObj: Date): string =>\n    pad(String(dateObj.getFullYear()), 4).substr(2),\n  YYYY: (dateObj: Date): string => pad(dateObj.getFullYear(), 4),\n  h: (dateObj: Date): string => String(dateObj.getHours() % 12 || 12),\n  hh: (dateObj: Date): string => pad(dateObj.getHours() % 12 || 12),\n  H: (dateObj: Date): string => String(dateObj.getHours()),\n  HH: (dateObj: Date): string => pad(dateObj.getHours()),\n  m: (dateObj: Date): string => String(dateObj.getMinutes()),\n  mm: (dateObj: Date): string => pad(dateObj.getMinutes()),\n  s: (dateObj: Date): string => String(dateObj.getSeconds()),\n  ss: (dateObj: Date): string => pad(dateObj.getSeconds()),\n  S: (dateObj: Date): string =>\n    String(Math.round(dateObj.getMilliseconds() / 100)),\n  SS: (dateObj: Date): string =>\n    pad(Math.round(dateObj.getMilliseconds() / 10), 2),\n  SSS: (dateObj: Date): string => pad(dateObj.getMilliseconds(), 3),\n  a: (dateObj: Date, i18n: I18nSettings): string =>\n    dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1],\n  A: (dateObj: Date, i18n: I18nSettings): string =>\n    dateObj.getHours() < 12\n      ? i18n.amPm[0].toUpperCase()\n      : i18n.amPm[1].toUpperCase(),\n  ZZ(dateObj: Date): string {\n    const offset = dateObj.getTimezoneOffset();\n    return (\n      (offset > 0 ? \"-\" : \"+\") +\n      pad(Math.floor(Math.abs(offset) / 60) * 100 + (Math.abs(offset) % 60), 4)\n    );\n  },\n  Z(dateObj: Date): string {\n    const offset = dateObj.getTimezoneOffset();\n    return (\n      (offset > 0 ? \"-\" : \"+\") +\n      pad(Math.floor(Math.abs(offset) / 60), 2) +\n      \":\" +\n      pad(Math.abs(offset) % 60, 2)\n    );\n  }\n};\n\ntype ParseInfo = [\n  keyof DateInfo,\n  string,\n  ((v: string, i18n: I18nSettings) => number | null)?,\n  string?\n];\nconst monthParse = (v: string): number => +v - 1;\nconst emptyDigits: ParseInfo = [null, twoDigitsOptional];\nconst emptyWord: ParseInfo = [null, word];\nconst amPm: ParseInfo = [\n  \"isPm\",\n  word,\n  (v: string, i18n: I18nSettings): number | null => {\n    const val = v.toLowerCase();\n    if (val === i18n.amPm[0]) {\n      return 0;\n    } else if (val === i18n.amPm[1]) {\n      return 1;\n    }\n    return null;\n  }\n];\nconst timezoneOffset: ParseInfo = [\n  \"timezoneOffset\",\n  \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n  (v: string): number | null => {\n    const parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n\n    if (parts) {\n      const minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n      return parts[0] === \"+\" ? minutes : -minutes;\n    }\n\n    return 0;\n  }\n];\nconst parseFlags: Record<string, ParseInfo> = {\n  D: [\"day\", twoDigitsOptional],\n  DD: [\"day\", twoDigits],\n  Do: [\"day\", twoDigitsOptional + word, (v: string): number => parseInt(v, 10)],\n  M: [\"month\", twoDigitsOptional, monthParse],\n  MM: [\"month\", twoDigits, monthParse],\n  YY: [\n    \"year\",\n    twoDigits,\n    (v: string): number => {\n      const now = new Date();\n      const cent = +(\"\" + now.getFullYear()).substr(0, 2);\n      return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n    }\n  ],\n  h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n  hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n  H: [\"hour\", twoDigitsOptional],\n  HH: [\"hour\", twoDigits],\n  m: [\"minute\", twoDigitsOptional],\n  mm: [\"minute\", twoDigits],\n  s: [\"second\", twoDigitsOptional],\n  ss: [\"second\", twoDigits],\n  YYYY: [\"year\", fourDigits],\n  S: [\"millisecond\", \"\\\\d\", (v: string): number => +v * 100],\n  SS: [\"millisecond\", twoDigits, (v: string): number => +v * 10],\n  SSS: [\"millisecond\", threeDigits],\n  d: emptyDigits,\n  dd: emptyDigits,\n  ddd: emptyWord,\n  dddd: emptyWord,\n  MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n  MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n  a: amPm,\n  A: amPm,\n  ZZ: timezoneOffset,\n  Z: timezoneOffset\n};\n\n// Some common format strings\nconst globalMasks: { [key: string]: string } = {\n  default: \"ddd MMM DD YYYY HH:mm:ss\",\n  shortDate: \"M/D/YY\",\n  mediumDate: \"MMM D, YYYY\",\n  longDate: \"MMMM D, YYYY\",\n  fullDate: \"dddd, MMMM D, YYYY\",\n  isoDate: \"YYYY-MM-DD\",\n  isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n  shortTime: \"HH:mm\",\n  mediumTime: \"HH:mm:ss\",\n  longTime: \"HH:mm:ss.SSS\"\n};\nconst setGlobalDateMasks = (masks: {\n  [key: string]: string;\n}): { [key: string]: string } => assign(globalMasks, masks);\n\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\nconst format = (\n  dateObj: Date,\n  mask: string = globalMasks[\"default\"],\n  i18n: I18nSettingsOptional = {}\n): string => {\n  if (typeof dateObj === \"number\") {\n    dateObj = new Date(dateObj);\n  }\n\n  if (\n    Object.prototype.toString.call(dateObj) !== \"[object Date]\" ||\n    isNaN(dateObj.getTime())\n  ) {\n    throw new Error(\"Invalid Date pass to format\");\n  }\n\n  mask = globalMasks[mask] || mask;\n\n  const literals: string[] = [];\n\n  // Make literals inactive by replacing them with @@@\n  mask = mask.replace(literal, function($0, $1) {\n    literals.push($1);\n    return \"@@@\";\n  });\n\n  const combinedI18nSettings: I18nSettings = assign(\n    assign({}, globalI18n),\n    i18n\n  );\n  // Apply formatting rules\n  mask = mask.replace(token, $0 =>\n    formatFlags[$0](dateObj, combinedI18nSettings)\n  );\n  // Inline literal values back into the formatted value\n  return mask.replace(/@@@/g, () => literals.shift());\n};\n\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\nfunction parse(\n  dateStr: string,\n  format: string,\n  i18n: I18nSettingsOptional = {}\n): Date | null {\n  if (typeof format !== \"string\") {\n    throw new Error(\"Invalid format in fecha parse\");\n  }\n\n  // Check to see if the format is actually a mask\n  format = globalMasks[format] || format;\n\n  // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n  if (dateStr.length > 1000) {\n    return null;\n  }\n\n  // Default to the beginning of the year.\n  const today = new Date();\n  const dateInfo: DateInfo = {\n    year: today.getFullYear(),\n    month: 0,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n    isPm: null,\n    timezoneOffset: null\n  };\n  const parseInfo: ParseInfo[] = [];\n  const literals: string[] = [];\n\n  // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n  let newFormat = format.replace(literal, ($0, $1) => {\n    literals.push(regexEscape($1));\n    return \"@@@\";\n  });\n  const specifiedFields: { [field: string]: boolean } = {};\n  const requiredFields: { [field: string]: boolean } = {};\n\n  // Change every token that we find into the correct regex\n  newFormat = regexEscape(newFormat).replace(token, $0 => {\n    const info = parseFlags[$0];\n    const [field, regex, , requiredField] = info;\n\n    // Check if the person has specified the same field twice. This will lead to confusing results.\n    if (specifiedFields[field]) {\n      throw new Error(`Invalid format. ${field} specified twice in format`);\n    }\n\n    specifiedFields[field] = true;\n\n    // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n    if (requiredField) {\n      requiredFields[requiredField] = true;\n    }\n\n    parseInfo.push(info);\n    return \"(\" + regex + \")\";\n  });\n\n  // Check all the required fields are present\n  Object.keys(requiredFields).forEach(field => {\n    if (!specifiedFields[field]) {\n      throw new Error(\n        `Invalid format. ${field} is required in specified format`\n      );\n    }\n  });\n\n  // Add back all the literals after\n  newFormat = newFormat.replace(/@@@/g, () => literals.shift());\n\n  // Check if the date string matches the format. If it doesn't return null\n  const matches = dateStr.match(new RegExp(newFormat, \"i\"));\n  if (!matches) {\n    return null;\n  }\n\n  const combinedI18nSettings: I18nSettings = assign(\n    assign({}, globalI18n),\n    i18n\n  );\n\n  // For each match, call the parser function for that date part\n  for (let i = 1; i < matches.length; i++) {\n    const [field, , parser] = parseInfo[i - 1];\n    const value = parser\n      ? parser(matches[i], combinedI18nSettings)\n      : +matches[i];\n\n    // If the parser can't make sense of the value, return null\n    if (value == null) {\n      return null;\n    }\n\n    dateInfo[field] = value;\n  }\n\n  if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n\n  let dateTZ: Date;\n  if (dateInfo.timezoneOffset == null) {\n    dateTZ = new Date(\n      dateInfo.year,\n      dateInfo.month,\n      dateInfo.day,\n      dateInfo.hour,\n      dateInfo.minute,\n      dateInfo.second,\n      dateInfo.millisecond\n    );\n    const validateFields: [\n      \"month\" | \"day\" | \"hour\" | \"minute\" | \"second\",\n      \"getMonth\" | \"getDate\" | \"getHours\" | \"getMinutes\" | \"getSeconds\"\n    ][] = [\n      [\"month\", \"getMonth\"],\n      [\"day\", \"getDate\"],\n      [\"hour\", \"getHours\"],\n      [\"minute\", \"getMinutes\"],\n      [\"second\", \"getSeconds\"]\n    ];\n    for (let i = 0, len = validateFields.length; i < len; i++) {\n      // Check to make sure the date field is within the allowed range. Javascript dates allows values\n      // outside the allowed range. If the values don't match the value was invalid\n      if (\n        specifiedFields[validateFields[i][0]] &&\n        dateInfo[validateFields[i][0]] !== dateTZ[validateFields[i][1]]()\n      ) {\n        return null;\n      }\n    }\n  } else {\n    dateTZ = new Date(\n      Date.UTC(\n        dateInfo.year,\n        dateInfo.month,\n        dateInfo.day,\n        dateInfo.hour,\n        dateInfo.minute - dateInfo.timezoneOffset,\n        dateInfo.second,\n        dateInfo.millisecond\n      )\n    );\n\n    // We can't validate dates in another timezone unfortunately. Do a basic check instead\n    if (\n      dateInfo.month > 11 ||\n      dateInfo.month < 0 ||\n      dateInfo.day > 31 ||\n      dateInfo.day < 1 ||\n      dateInfo.hour > 23 ||\n      dateInfo.hour < 0 ||\n      dateInfo.minute > 59 ||\n      dateInfo.minute < 0 ||\n      dateInfo.second > 59 ||\n      dateInfo.second < 0\n    ) {\n      return null;\n    }\n  }\n\n  // Don't allow invalid dates\n\n  return dateTZ;\n}\nexport default {\n  format,\n  parse,\n  defaultI18n,\n  setGlobalDateI18n,\n  setGlobalDateMasks\n};\nexport { format, parse, defaultI18n, setGlobalDateI18n, setGlobalDateMasks };\n"]},"metadata":{},"sourceType":"module"}