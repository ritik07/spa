{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { get } from '@antv/util';\nimport { getXDimensionLength } from '../util/coordinate';\nimport Geometry from './base';\n/** 引入对应的 ShapeFactory */\nimport './shape/interval';\nimport { getDefaultSize } from './util/shape-size';\nimport { getMaxScale } from '../util/scale';\n/**\n * Interval 几何标记。\n * 用于绘制柱状图、饼图、条形图、玫瑰图等。\n */\nvar Interval = /** @class */function (_super) {\n  __extends(Interval, _super);\n  function Interval(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.type = 'interval';\n    _this.shapeType = 'interval';\n    _this.generatePoints = true;\n    var background = cfg.background;\n    _this.background = background;\n    return _this;\n  }\n  /**\n   * 获取每条数据的 Shape 绘制信息\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n  Interval.prototype.createShapePointsCfg = function (obj) {\n    var cfg = _super.prototype.createShapePointsCfg.call(this, obj);\n    // 计算每个 shape 的 size\n    var size;\n    var sizeAttr = this.getAttribute('size');\n    if (sizeAttr) {\n      size = this.getAttributeValues(sizeAttr, obj)[0];\n      // 归一化\n      var coordinate = this.coordinate;\n      var coordinateWidth = getXDimensionLength(coordinate);\n      size = size / coordinateWidth;\n    } else {\n      if (!this.defaultSize) {\n        this.defaultSize = getDefaultSize(this);\n      }\n      size = this.defaultSize;\n    }\n    cfg.size = size;\n    return cfg;\n  };\n  /**\n   * 调整 y 轴的 scale 范围。\n   * 对于 Y 轴为数值轴柱状图，默认从 0 开始 生长。\n   */\n  Interval.prototype.adjustScale = function () {\n    _super.prototype.adjustScale.call(this);\n    var yScale = this.getYScale();\n    // 特殊逻辑：饼图需要填充满整个空间\n    if (this.coordinate.type === 'theta') {\n      yScale.change({\n        nice: false,\n        min: 0,\n        // 发生过 stack 调整，yScale 的 max 被调整过，this.updateStackRange()\n        max: getMaxScale(yScale)\n      });\n    } else {\n      // 柱状图数值轴默认从 0 开始\n      var scaleDefs = this.scaleDefs;\n      var field = yScale.field,\n        min = yScale.min,\n        max = yScale.max,\n        type = yScale.type;\n      if (type !== 'time') {\n        // time 类型不做调整\n        // 柱状图的 Y 轴要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (min > 0 && !get(scaleDefs, [field, 'min'])) {\n          yScale.change({\n            min: 0\n          });\n        }\n        // 柱当柱状图全为负值时也需要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (max <= 0 && !get(scaleDefs, [field, 'max'])) {\n          yScale.change({\n            max: 0\n          });\n        }\n      }\n    }\n  };\n  /**\n   * @override\n   */\n  Interval.prototype.getDrawCfg = function (mappingData) {\n    var shapeCfg = _super.prototype.getDrawCfg.call(this, mappingData);\n    shapeCfg.background = this.background;\n    return shapeCfg;\n  };\n  return Interval;\n}(Geometry);\nexport default Interval;","map":{"version":3,"sources":["../../src/geometry/interval.ts"],"names":[],"mappings":"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","sourcesContent":["import { get } from '@antv/util';\nimport { Datum, MappingDatum, ShapeInfo, LooseObject } from '../interface';\nimport { ShapeAttrs } from '../dependents';\nimport { getXDimensionLength } from '../util/coordinate';\nimport Geometry, { GeometryCfg } from './base';\n/** 引入对应的 ShapeFactory */\nimport './shape/interval';\nimport { getDefaultSize } from './util/shape-size';\nimport { getMaxScale } from '../util/scale';\n\n/** Path 构造函数参数类型 */\nexport interface IntervalCfg extends GeometryCfg {\n  /** shape 背景，只对 Interval Geometry 生效，目前只对 interval-rect shape 生效。 */\n  background?: { style?: ShapeAttrs };\n}\n\n/**\n * Interval 几何标记。\n * 用于绘制柱状图、饼图、条形图、玫瑰图等。\n */\nexport default class Interval extends Geometry {\n  public readonly type: string = 'interval';\n  public readonly shapeType: string = 'interval';\n  /** shape 背景。目前只对 interval-rect shape 生效。 */\n  protected background?: { style?: ShapeAttrs };\n  protected generatePoints: boolean = true;\n\n  constructor(cfg: IntervalCfg) {\n    super(cfg);\n\n    const { background } = cfg;\n    this.background = background;\n  }\n\n  /**\n   * 获取每条数据的 Shape 绘制信息\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n  protected createShapePointsCfg(obj: Datum) {\n    const cfg = super.createShapePointsCfg(obj);\n\n    // 计算每个 shape 的 size\n    let size;\n    const sizeAttr = this.getAttribute('size');\n    if (sizeAttr) {\n      size = this.getAttributeValues(sizeAttr, obj)[0];\n      // 归一化\n      const coordinate = this.coordinate;\n      const coordinateWidth = getXDimensionLength(coordinate);\n      size = size / coordinateWidth;\n    } else {\n      if (!this.defaultSize) {\n        this.defaultSize = getDefaultSize(this);\n      }\n      size = this.defaultSize;\n    }\n    cfg.size = size;\n\n    return cfg;\n  }\n\n  /**\n   * 调整 y 轴的 scale 范围。\n   * 对于 Y 轴为数值轴柱状图，默认从 0 开始 生长。\n   */\n  protected adjustScale() {\n    super.adjustScale();\n    const yScale = this.getYScale();\n    // 特殊逻辑：饼图需要填充满整个空间\n    if (this.coordinate.type === 'theta') {\n      yScale.change({\n        nice: false,\n        min: 0,\n        // 发生过 stack 调整，yScale 的 max 被调整过，this.updateStackRange()\n        max: getMaxScale(yScale),\n      });\n    } else {\n      // 柱状图数值轴默认从 0 开始\n      const scaleDefs = this.scaleDefs;\n      const { field, min, max, type } = yScale;\n      if (type !== 'time') {\n        // time 类型不做调整\n        // 柱状图的 Y 轴要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (min > 0 && !get(scaleDefs, [field, 'min'])) {\n          yScale.change({\n            min: 0,\n          });\n        }\n        // 柱当柱状图全为负值时也需要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (max <= 0 && !get(scaleDefs, [field, 'max'])) {\n          yScale.change({\n            max: 0,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected getDrawCfg(mappingData: MappingDatum): ShapeInfo {\n    const shapeCfg = super.getDrawCfg(mappingData);\n    shapeCfg.background = this.background;\n\n    return shapeCfg;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}