{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport Adjust from './adjust';\nvar Cache = _.Cache;\nvar Stack = /** @class */function (_super) {\n  __extends(Stack, _super);\n  function Stack(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    var _a = cfg.adjustNames,\n      adjustNames = _a === void 0 ? ['y'] : _a,\n      _b = cfg.height,\n      height = _b === void 0 ? NaN : _b,\n      _c = cfg.size,\n      size = _c === void 0 ? 10 : _c,\n      _d = cfg.reverseOrder,\n      reverseOrder = _d === void 0 ? false : _d;\n    _this.adjustNames = adjustNames;\n    _this.height = height;\n    _this.size = size;\n    _this.reverseOrder = reverseOrder;\n    return _this;\n  }\n  /**\n   * 方法入参是经过数据分组、数据数字化之后的二维数组\n   * @param groupDataArray 分组之后的数据\n   */\n  Stack.prototype.process = function (groupDataArray) {\n    var _a = this,\n      yField = _a.yField,\n      reverseOrder = _a.reverseOrder;\n    // 如果有指定 y 字段，那么按照 y 字段来 stack\n    // 否则，按照高度均分\n    var d = yField ? this.processStack(groupDataArray) : this.processOneDimStack(groupDataArray);\n    return reverseOrder ? this.reverse(d) : d;\n  };\n  Stack.prototype.reverse = function (groupedDataArray) {\n    return groupedDataArray.slice(0).reverse();\n  };\n  Stack.prototype.processStack = function (groupDataArray) {\n    var _a = this,\n      xField = _a.xField,\n      yField = _a.yField,\n      reverseOrder = _a.reverseOrder;\n    // 层叠顺序翻转\n    var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n    // 用来缓存，正数和负数的堆叠问题\n    var positive = new Cache();\n    var negative = new Cache();\n    return groupedDataArray.map(function (dataArray) {\n      return dataArray.map(function (data) {\n        var _a;\n        var x = _.get(data, xField, 0);\n        var y = _.get(data, [yField]);\n        var xKey = x.toString();\n        // todo 是否应该取 _origin？因为 y 可能取到的值不正确，比如先 symmetric，再 stack！\n        y = _.isArray(y) ? y[1] : y;\n        if (!_.isNil(y)) {\n          var cache = y >= 0 ? positive : negative;\n          if (!cache.has(xKey)) {\n            cache.set(xKey, 0);\n          }\n          var xValue = cache.get(xKey);\n          var newXValue = y + xValue;\n          // 存起来\n          cache.set(xKey, newXValue);\n          return __assign(__assign({}, data), (_a = {}, _a[yField] = [xValue, newXValue], _a));\n        }\n        // 没有修改，则直接返回\n        return data;\n      });\n    });\n  };\n  Stack.prototype.processOneDimStack = function (groupDataArray) {\n    var _this = this;\n    var _a = this,\n      xField = _a.xField,\n      height = _a.height,\n      reverseOrder = _a.reverseOrder;\n    var yField = 'y';\n    // 如果层叠的顺序翻转\n    var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n    // 缓存累加数据\n    var cache = new Cache();\n    return groupedDataArray.map(function (dataArray) {\n      return dataArray.map(function (data) {\n        var _a;\n        var size = _this.size;\n        var xValue = data[xField];\n        // todo 没有看到这个 stack 计算原理\n        var stackHeight = size * 2 / height;\n        if (!cache.has(xValue)) {\n          cache.set(xValue, stackHeight / 2); // 初始值大小\n        }\n\n        var stackValue = cache.get(xValue);\n        // 增加一层 stackHeight\n        cache.set(xValue, stackValue + stackHeight);\n        return __assign(__assign({}, data), (_a = {}, _a[yField] = stackValue, _a));\n      });\n    });\n  };\n  return Stack;\n}(Adjust);\nexport default Stack;","map":{"version":3,"sources":["../../src/adjusts/stack.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport Adjust from './adjust';\nvar Cache = _.Cache;\nvar Stack = /** @class */ (function (_super) {\n    __extends(Stack, _super);\n    function Stack(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        var _a = cfg.adjustNames, adjustNames = _a === void 0 ? ['y'] : _a, _b = cfg.height, height = _b === void 0 ? NaN : _b, _c = cfg.size, size = _c === void 0 ? 10 : _c, _d = cfg.reverseOrder, reverseOrder = _d === void 0 ? false : _d;\n        _this.adjustNames = adjustNames;\n        _this.height = height;\n        _this.size = size;\n        _this.reverseOrder = reverseOrder;\n        return _this;\n    }\n    /**\n     * 方法入参是经过数据分组、数据数字化之后的二维数组\n     * @param groupDataArray 分组之后的数据\n     */\n    Stack.prototype.process = function (groupDataArray) {\n        var _a = this, yField = _a.yField, reverseOrder = _a.reverseOrder;\n        // 如果有指定 y 字段，那么按照 y 字段来 stack\n        // 否则，按照高度均分\n        var d = yField ? this.processStack(groupDataArray) : this.processOneDimStack(groupDataArray);\n        return reverseOrder ? this.reverse(d) : d;\n    };\n    Stack.prototype.reverse = function (groupedDataArray) {\n        return groupedDataArray.slice(0).reverse();\n    };\n    Stack.prototype.processStack = function (groupDataArray) {\n        var _a = this, xField = _a.xField, yField = _a.yField, reverseOrder = _a.reverseOrder;\n        // 层叠顺序翻转\n        var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n        // 用来缓存，正数和负数的堆叠问题\n        var positive = new Cache();\n        var negative = new Cache();\n        return groupedDataArray.map(function (dataArray) {\n            return dataArray.map(function (data) {\n                var _a;\n                var x = _.get(data, xField, 0);\n                var y = _.get(data, [yField]);\n                var xKey = x.toString();\n                // todo 是否应该取 _origin？因为 y 可能取到的值不正确，比如先 symmetric，再 stack！\n                y = _.isArray(y) ? y[1] : y;\n                if (!_.isNil(y)) {\n                    var cache = y >= 0 ? positive : negative;\n                    if (!cache.has(xKey)) {\n                        cache.set(xKey, 0);\n                    }\n                    var xValue = cache.get(xKey);\n                    var newXValue = y + xValue;\n                    // 存起来\n                    cache.set(xKey, newXValue);\n                    return __assign(__assign({}, data), (_a = {}, _a[yField] = [xValue, newXValue], _a));\n                }\n                // 没有修改，则直接返回\n                return data;\n            });\n        });\n    };\n    Stack.prototype.processOneDimStack = function (groupDataArray) {\n        var _this = this;\n        var _a = this, xField = _a.xField, height = _a.height, reverseOrder = _a.reverseOrder;\n        var yField = 'y';\n        // 如果层叠的顺序翻转\n        var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n        // 缓存累加数据\n        var cache = new Cache();\n        return groupedDataArray.map(function (dataArray) {\n            return dataArray.map(function (data) {\n                var _a;\n                var size = _this.size;\n                var xValue = data[xField];\n                // todo 没有看到这个 stack 计算原理\n                var stackHeight = (size * 2) / height;\n                if (!cache.has(xValue)) {\n                    cache.set(xValue, stackHeight / 2); // 初始值大小\n                }\n                var stackValue = cache.get(xValue);\n                // 增加一层 stackHeight\n                cache.set(xValue, stackValue + stackHeight);\n                return __assign(__assign({}, data), (_a = {}, _a[yField] = stackValue, _a));\n            });\n        });\n    };\n    return Stack;\n}(Adjust));\nexport default Stack;\n//# sourceMappingURL=stack.js.map"]},"metadata":{},"sourceType":"module"}