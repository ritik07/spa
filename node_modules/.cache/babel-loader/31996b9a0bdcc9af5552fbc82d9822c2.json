{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport { isNil, isString, deepMix, each, hasKey } from '@antv/util';\nimport { clearDom, createBBox, hasClass } from '../util/util';\nimport Component from './component';\nvar HtmlComponent = /** @class */function (_super) {\n  __extends(HtmlComponent, _super);\n  function HtmlComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  HtmlComponent.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      container: null,\n      containerTpl: '<div></div>',\n      updateAutoRender: true,\n      containerClassName: '',\n      parent: null\n    });\n  };\n  HtmlComponent.prototype.getContainer = function () {\n    return this.get('container');\n  };\n  /**\n   * 显示组件\n   */\n  HtmlComponent.prototype.show = function () {\n    var container = this.get('container');\n    container.style.display = '';\n    this.set('visible', true);\n  };\n  /**\n   * 隐藏组件\n   */\n  HtmlComponent.prototype.hide = function () {\n    var container = this.get('container');\n    container.style.display = 'none';\n    this.set('visible', false);\n  };\n  /**\n   * 是否允许捕捉事件\n   * @param capture 事件捕捉\n   */\n  HtmlComponent.prototype.setCapture = function (capture) {\n    var container = this.getContainer();\n    var value = capture ? 'auto' : 'none';\n    container.style.pointerEvents = value;\n    this.set('capture', capture);\n  };\n  HtmlComponent.prototype.getBBox = function () {\n    var container = this.getContainer();\n    var x = parseFloat(container.style.left) || 0;\n    var y = parseFloat(container.style.top) || 0;\n    return createBBox(x, y, container.clientWidth, container.clientHeight);\n  };\n  HtmlComponent.prototype.clear = function () {\n    var container = this.get('container');\n    clearDom(container);\n  };\n  HtmlComponent.prototype.destroy = function () {\n    this.removeEvent();\n    this.removeDom();\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 复写 init，主要是初始化 DOM 和事件\n   */\n  HtmlComponent.prototype.init = function () {\n    _super.prototype.init.call(this);\n    this.initContainer();\n    this.initDom();\n    this.resetStyles(); // 初始化样式\n    this.applyStyles(); // 应用样式\n    this.initEvent();\n    this.initCapture();\n    this.initVisible();\n  };\n  HtmlComponent.prototype.initCapture = function () {\n    this.setCapture(this.get('capture'));\n  };\n  HtmlComponent.prototype.initVisible = function () {\n    if (!this.get('visible')) {\n      // 设置初始显示状态\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n  HtmlComponent.prototype.initDom = function () {};\n  HtmlComponent.prototype.initContainer = function () {\n    var container = this.get('container');\n    if (isNil(container)) {\n      // 未指定 container 则创建\n      container = this.createDom();\n      var parent_1 = this.get('parent');\n      if (isString(parent_1)) {\n        parent_1 = document.getElementById(parent_1);\n        this.set('parent', parent_1);\n      }\n      parent_1.appendChild(container);\n      if (this.get('containerId')) {\n        container.setAttribute('id', this.get('containerId'));\n      }\n      this.set('container', container);\n    } else if (isString(container)) {\n      // 用户传入的 id, 作为 container\n      container = document.getElementById(container);\n      this.set('container', container);\n    } // else container 是 DOM\n    if (!this.get('parent')) {\n      this.set('parent', container.parentNode);\n    }\n  };\n  // 样式需要进行合并，不能单纯的替换，否则使用非常不方便\n  HtmlComponent.prototype.resetStyles = function () {\n    var style = this.get('domStyles');\n    var defaultStyles = this.get('defaultStyles');\n    if (!style) {\n      style = defaultStyles;\n    } else {\n      style = deepMix({}, defaultStyles, style);\n    }\n    this.set('domStyles', style);\n  };\n  // 应用所有的样式\n  HtmlComponent.prototype.applyStyles = function () {\n    var domStyles = this.get('domStyles');\n    if (!domStyles) {\n      return;\n    }\n    var container = this.getContainer();\n    this.applyChildrenStyles(container, domStyles);\n    var containerClassName = this.get('containerClassName');\n    if (containerClassName && hasClass(container, containerClassName)) {\n      var containerCss = domStyles[containerClassName];\n      modifyCSS(container, containerCss);\n    }\n  };\n  HtmlComponent.prototype.applyChildrenStyles = function (element, styles) {\n    each(styles, function (style, name) {\n      var elements = element.getElementsByClassName(name);\n      each(elements, function (el) {\n        modifyCSS(el, style);\n      });\n    });\n  };\n  // 应用到单个 DOM\n  HtmlComponent.prototype.applyStyle = function (cssName, dom) {\n    var domStyles = this.get('domStyles');\n    modifyCSS(dom, domStyles[cssName]);\n  };\n  /**\n   * @protected\n   */\n  HtmlComponent.prototype.createDom = function () {\n    var containerTpl = this.get('containerTpl');\n    return createDom(containerTpl);\n  };\n  /**\n   * @protected\n   * 初始化事件\n   */\n  HtmlComponent.prototype.initEvent = function () {};\n  /**\n   * @protected\n   * 清理 DOM\n   */\n  HtmlComponent.prototype.removeDom = function () {\n    var container = this.get('container');\n    // 节点不一定有parentNode\n    container && container.parentNode && container.parentNode.removeChild(container);\n  };\n  /**\n   * @protected\n   * 清理事件\n   */\n  HtmlComponent.prototype.removeEvent = function () {};\n  HtmlComponent.prototype.updateInner = function (cfg) {\n    // 更新样式\n    if (hasKey(cfg, 'domStyles')) {\n      this.resetStyles();\n      this.applyStyles();\n    }\n    // 只要属性发生变化，都调整一些位置\n    this.resetPosition();\n  };\n  HtmlComponent.prototype.resetPosition = function () {};\n  ;\n  return HtmlComponent;\n}(Component);\nexport default HtmlComponent;","map":{"version":3,"sources":["../../src/abstract/html-component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport { isNil, isString, deepMix, each, hasKey } from '@antv/util';\nimport { clearDom, createBBox, hasClass } from '../util/util';\nimport Component from './component';\nvar HtmlComponent = /** @class */ (function (_super) {\n    __extends(HtmlComponent, _super);\n    function HtmlComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    HtmlComponent.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { container: null, containerTpl: '<div></div>', updateAutoRender: true, containerClassName: '', parent: null });\n    };\n    HtmlComponent.prototype.getContainer = function () {\n        return this.get('container');\n    };\n    /**\n     * 显示组件\n     */\n    HtmlComponent.prototype.show = function () {\n        var container = this.get('container');\n        container.style.display = '';\n        this.set('visible', true);\n    };\n    /**\n     * 隐藏组件\n     */\n    HtmlComponent.prototype.hide = function () {\n        var container = this.get('container');\n        container.style.display = 'none';\n        this.set('visible', false);\n    };\n    /**\n     * 是否允许捕捉事件\n     * @param capture 事件捕捉\n     */\n    HtmlComponent.prototype.setCapture = function (capture) {\n        var container = this.getContainer();\n        var value = capture ? 'auto' : 'none';\n        container.style.pointerEvents = value;\n        this.set('capture', capture);\n    };\n    HtmlComponent.prototype.getBBox = function () {\n        var container = this.getContainer();\n        var x = parseFloat(container.style.left) || 0;\n        var y = parseFloat(container.style.top) || 0;\n        return createBBox(x, y, container.clientWidth, container.clientHeight);\n    };\n    HtmlComponent.prototype.clear = function () {\n        var container = this.get('container');\n        clearDom(container);\n    };\n    HtmlComponent.prototype.destroy = function () {\n        this.removeEvent();\n        this.removeDom();\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * 复写 init，主要是初始化 DOM 和事件\n     */\n    HtmlComponent.prototype.init = function () {\n        _super.prototype.init.call(this);\n        this.initContainer();\n        this.initDom();\n        this.resetStyles(); // 初始化样式\n        this.applyStyles(); // 应用样式\n        this.initEvent();\n        this.initCapture();\n        this.initVisible();\n    };\n    HtmlComponent.prototype.initCapture = function () {\n        this.setCapture(this.get('capture'));\n    };\n    HtmlComponent.prototype.initVisible = function () {\n        if (!this.get('visible')) {\n            // 设置初始显示状态\n            this.hide();\n        }\n        else {\n            this.show();\n        }\n    };\n    HtmlComponent.prototype.initDom = function () {\n    };\n    HtmlComponent.prototype.initContainer = function () {\n        var container = this.get('container');\n        if (isNil(container)) {\n            // 未指定 container 则创建\n            container = this.createDom();\n            var parent_1 = this.get('parent');\n            if (isString(parent_1)) {\n                parent_1 = document.getElementById(parent_1);\n                this.set('parent', parent_1);\n            }\n            parent_1.appendChild(container);\n            if (this.get('containerId')) {\n                container.setAttribute('id', this.get('containerId'));\n            }\n            this.set('container', container);\n        }\n        else if (isString(container)) {\n            // 用户传入的 id, 作为 container\n            container = document.getElementById(container);\n            this.set('container', container);\n        } // else container 是 DOM\n        if (!this.get('parent')) {\n            this.set('parent', container.parentNode);\n        }\n    };\n    // 样式需要进行合并，不能单纯的替换，否则使用非常不方便\n    HtmlComponent.prototype.resetStyles = function () {\n        var style = this.get('domStyles');\n        var defaultStyles = this.get('defaultStyles');\n        if (!style) {\n            style = defaultStyles;\n        }\n        else {\n            style = deepMix({}, defaultStyles, style);\n        }\n        this.set('domStyles', style);\n    };\n    // 应用所有的样式\n    HtmlComponent.prototype.applyStyles = function () {\n        var domStyles = this.get('domStyles');\n        if (!domStyles) {\n            return;\n        }\n        var container = this.getContainer();\n        this.applyChildrenStyles(container, domStyles);\n        var containerClassName = this.get('containerClassName');\n        if (containerClassName && hasClass(container, containerClassName)) {\n            var containerCss = domStyles[containerClassName];\n            modifyCSS(container, containerCss);\n        }\n    };\n    HtmlComponent.prototype.applyChildrenStyles = function (element, styles) {\n        each(styles, function (style, name) {\n            var elements = element.getElementsByClassName(name);\n            each(elements, function (el) {\n                modifyCSS(el, style);\n            });\n        });\n    };\n    // 应用到单个 DOM\n    HtmlComponent.prototype.applyStyle = function (cssName, dom) {\n        var domStyles = this.get('domStyles');\n        modifyCSS(dom, domStyles[cssName]);\n    };\n    /**\n     * @protected\n     */\n    HtmlComponent.prototype.createDom = function () {\n        var containerTpl = this.get('containerTpl');\n        return createDom(containerTpl);\n    };\n    /**\n     * @protected\n     * 初始化事件\n     */\n    HtmlComponent.prototype.initEvent = function () { };\n    /**\n     * @protected\n     * 清理 DOM\n     */\n    HtmlComponent.prototype.removeDom = function () {\n        var container = this.get('container');\n        // 节点不一定有parentNode\n        container && container.parentNode && container.parentNode.removeChild(container);\n    };\n    /**\n     * @protected\n     * 清理事件\n     */\n    HtmlComponent.prototype.removeEvent = function () { };\n    HtmlComponent.prototype.updateInner = function (cfg) {\n        // 更新样式\n        if (hasKey(cfg, 'domStyles')) {\n            this.resetStyles();\n            this.applyStyles();\n        }\n        // 只要属性发生变化，都调整一些位置\n        this.resetPosition();\n    };\n    HtmlComponent.prototype.resetPosition = function () { };\n    ;\n    return HtmlComponent;\n}(Component));\nexport default HtmlComponent;\n//# sourceMappingURL=html-component.js.map"]},"metadata":{},"sourceType":"module"}