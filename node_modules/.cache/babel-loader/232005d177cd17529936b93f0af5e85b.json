{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractGroup } from '@antv/g-base';\nimport { each } from '@antv/util';\nimport * as Shape from './shape';\nimport { drawChildren, refreshElement } from './util/draw';\nimport { setClip, setTransform } from './util/svg';\nimport { SVG_ATTR_MAP } from './constant';\nimport { createSVGElement } from './util/dom';\nvar Group = /** @class */function (_super) {\n  __extends(Group, _super);\n  function Group() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  // SVG 中分组对应实体标签 <g>\n  Group.prototype.isEntityGroup = function () {\n    return true;\n  };\n  Group.prototype.createDom = function () {\n    var element = createSVGElement('g');\n    this.set('el', element);\n    var parent = this.getParent();\n    if (parent) {\n      var parentNode = parent.get('el');\n      if (parentNode) {\n        parentNode.appendChild(element);\n      } else {\n        // parentNode maybe null for group\n        parentNode = parent.createDom();\n        parent.set('el', parentNode);\n        parentNode.appendChild(element);\n      }\n    }\n    return element;\n  };\n  // 覆盖基类的 afterAttrsChange 方法\n  Group.prototype.afterAttrsChange = function (targetAttrs) {\n    _super.prototype.afterAttrsChange.call(this, targetAttrs);\n    var canvas = this.get('canvas');\n    // 只有挂载到画布下，才对元素进行实际渲染\n    if (canvas && canvas.get('autoDraw')) {\n      var context = canvas.get('context');\n      this.createPath(context, targetAttrs);\n    }\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  Group.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n  Group.prototype.getShapeBase = function () {\n    return Shape;\n  };\n  Group.prototype.getGroupBase = function () {\n    return Group;\n  };\n  Group.prototype.draw = function (context) {\n    var children = this.getChildren();\n    var el = this.get('el');\n    if (this.get('destroyed')) {\n      if (el) {\n        el.parentNode.removeChild(el);\n      }\n    } else {\n      if (!el) {\n        this.createDom();\n      }\n      setClip(this, context);\n      this.createPath(context);\n      if (children.length) {\n        drawChildren(context, children);\n      }\n    }\n  };\n  /**\n   * 绘制分组的路径\n   * @param {Defs} context 上下文\n   * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n   */\n  Group.prototype.createPath = function (context, targetAttrs) {\n    var attrs = this.attr();\n    var el = this.get('el');\n    each(targetAttrs || attrs, function (value, attr) {\n      if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n    setTransform(this);\n  };\n  return Group;\n}(AbstractGroup);\nexport default Group;","map":{"version":3,"sources":["../src/group.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { AbstractGroup } from '@antv/g-base';\nimport { each } from '@antv/util';\nimport * as Shape from './shape';\nimport { drawChildren, refreshElement } from './util/draw';\nimport { setClip, setTransform } from './util/svg';\nimport { SVG_ATTR_MAP } from './constant';\nimport { createSVGElement } from './util/dom';\nvar Group = /** @class */ (function (_super) {\n    __extends(Group, _super);\n    function Group() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // SVG 中分组对应实体标签 <g>\n    Group.prototype.isEntityGroup = function () {\n        return true;\n    };\n    Group.prototype.createDom = function () {\n        var element = createSVGElement('g');\n        this.set('el', element);\n        var parent = this.getParent();\n        if (parent) {\n            var parentNode = parent.get('el');\n            if (parentNode) {\n                parentNode.appendChild(element);\n            }\n            else {\n                // parentNode maybe null for group\n                parentNode = parent.createDom();\n                parent.set('el', parentNode);\n                parentNode.appendChild(element);\n            }\n        }\n        return element;\n    };\n    // 覆盖基类的 afterAttrsChange 方法\n    Group.prototype.afterAttrsChange = function (targetAttrs) {\n        _super.prototype.afterAttrsChange.call(this, targetAttrs);\n        var canvas = this.get('canvas');\n        // 只有挂载到画布下，才对元素进行实际渲染\n        if (canvas && canvas.get('autoDraw')) {\n            var context = canvas.get('context');\n            this.createPath(context, targetAttrs);\n        }\n    };\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    Group.prototype.onCanvasChange = function (changeType) {\n        refreshElement(this, changeType);\n    };\n    Group.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    Group.prototype.getGroupBase = function () {\n        return Group;\n    };\n    Group.prototype.draw = function (context) {\n        var children = this.getChildren();\n        var el = this.get('el');\n        if (this.get('destroyed')) {\n            if (el) {\n                el.parentNode.removeChild(el);\n            }\n        }\n        else {\n            if (!el) {\n                this.createDom();\n            }\n            setClip(this, context);\n            this.createPath(context);\n            if (children.length) {\n                drawChildren(context, children);\n            }\n        }\n    };\n    /**\n     * 绘制分组的路径\n     * @param {Defs} context 上下文\n     * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n     */\n    Group.prototype.createPath = function (context, targetAttrs) {\n        var attrs = this.attr();\n        var el = this.get('el');\n        each(targetAttrs || attrs, function (value, attr) {\n            if (SVG_ATTR_MAP[attr]) {\n                el.setAttribute(SVG_ATTR_MAP[attr], value);\n            }\n        });\n        setTransform(this);\n    };\n    return Group;\n}(AbstractGroup));\nexport default Group;\n//# sourceMappingURL=group.js.map"]},"metadata":{},"sourceType":"module"}