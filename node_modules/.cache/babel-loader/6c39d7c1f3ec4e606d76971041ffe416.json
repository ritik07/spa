{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getCurrentElement, isElementChange } from '../util';\nimport StateBase from './state-base';\n/**\n * 单状态量的 Action 基类\n * @class\n * @ignore\n */\nvar ElementSingleState = /** @class */function (_super) {\n  __extends(ElementSingleState, _super);\n  function ElementSingleState() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ElementSingleState.prototype.setStateEnable = function (enable) {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      // 在同一个 element 内部移动，忽视 label 和 shape 之间\n      if (!isElementChange(this.context)) {\n        return;\n      }\n      // 仅支持单个状态量的元素，只能由 element 触发\n      if (enable) {\n        this.clear();\n        this.setElementState(element, true);\n      } else if (this.hasState(element)) {\n        this.setElementState(element, false);\n      }\n    }\n  };\n  /**\n   * 切换选中，只允许选中一个\n   */\n  ElementSingleState.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      var hasState = this.hasState(element); // 提前获取状态\n      if (!hasState) {\n        this.clear();\n      }\n      this.setElementState(element, !hasState);\n    }\n  };\n  /**\n   * 取消当前时间影响的状态\n   */\n  ElementSingleState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n  return ElementSingleState;\n}(StateBase);\nexport default ElementSingleState;","map":{"version":3,"sources":["../../../../src/interaction/action/element/single-state.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAiB,EAAE,eAAe,QAAQ,SAAS;AAC5D,OAAO,SAAS,MAAM,cAAc;AAEpC;;;;AAIG;AACH,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiC,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;EAAjC,SAAA,kBAAA,GAAA;;EAsCA;EArCY,kBAAA,CAAA,SAAA,CAAA,cAAc,GAAxB,UAAyB,MAAe,EAAA;IACtC,IAAM,OAAO,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/C,IAAI,OAAO,EAAE;MACX;MACA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QAClC;MACD;MACD;MACA,IAAI,MAAM,EAAE;QACV,IAAI,CAAC,KAAK,EAAE;QACZ,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC;OACpC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACjC,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC;MACrC;IACF;EACH,CAAC;EAED;;AAEG;EACI,kBAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,IAAM,OAAO,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/C,IAAI,OAAO,EAAE;MACX,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;MACzC,IAAI,CAAC,QAAQ,EAAE;QACb,IAAI,CAAC,KAAK,EAAE;MACb;MACD,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;IACzC;EACH,CAAC;EAED;;AAEG;EACI,kBAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,YAAA;IACE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;EAC5B,CAAC;EACH,OAAA,kBAAC;AAAD,CAAC,CAtCgC,SAAS,CAAA;AAwC1C,eAAe,kBAAkB","sourcesContent":["import { getCurrentElement, isElementChange } from '../util';\nimport StateBase from './state-base';\n\n/**\n * 单状态量的 Action 基类\n * @class\n * @ignore\n */\nclass ElementSingleState extends StateBase {\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // 在同一个 element 内部移动，忽视 label 和 shape 之间\n      if (!isElementChange(this.context)) {\n        return;\n      }\n      // 仅支持单个状态量的元素，只能由 element 触发\n      if (enable) {\n        this.clear();\n        this.setElementState(element, true);\n      } else if (this.hasState(element)) {\n        this.setElementState(element, false);\n      }\n    }\n  }\n\n  /**\n   * 切换选中，只允许选中一个\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = this.hasState(element); // 提前获取状态\n      if (!hasState) {\n        this.clear();\n      }\n      this.setElementState(element, !hasState);\n    }\n  }\n\n  /**\n   * 取消当前时间影响的状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n}\n\nexport default ElementSingleState;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}