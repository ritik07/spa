{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nvar STATUS_UNACTIVE = 'inactive';\nvar STATUS_ACTIVE = 'active';\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nvar ListHighlight = /** @class */function (_super) {\n  __extends(ListHighlight, _super);\n  function ListHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_ACTIVE;\n    _this.ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n    return _this;\n  }\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  ListHighlight.prototype.setItemsState = function (list, name, enable) {\n    this.setHighlightBy(list, function (item) {\n      return item.name === name;\n    }, enable);\n  };\n  // 单个 item 设置状态\n  ListHighlight.prototype.setItemState = function (list, item, enable) {\n    var items = list.getItems();\n    this.setHighlightBy(list, function (el) {\n      return el === item;\n    }, enable);\n  };\n  // 根据条件设置 highlight\n  ListHighlight.prototype.setHighlightBy = function (list, callback, enable) {\n    var items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      var activeItems = list.getItemsByState(STATUS_ACTIVE);\n      var allCancel_1 = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, function (item) {\n        if (!callback(item)) {\n          allCancel_1 = false;\n          return false;\n        }\n      });\n      if (allCancel_1) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, function (item) {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  };\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  ListHighlight.prototype.highlight = function () {\n    this.setState();\n  };\n  // 需要全部清理 active 和 unactive\n  ListHighlight.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  };\n  return ListHighlight;\n}(ListState);\nexport default ListHighlight;","map":{"version":3,"sources":["../../../../src/interaction/action/component/list-highlight.ts"],"names":[],"mappings":";AAAA,SAAS,IAAI,QAAQ,YAAY;AAEjC,SAAS,SAAS,QAAQ,uBAAuB;AACjD,OAAO,SAAS,MAAM,cAAc;AACpC,IAAM,eAAe,GAAG,UAAU;AAClC,IAAM,aAAa,GAAG,QAAQ;AAG9B;;;;AAIG;AACH,IAAA,aAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA4B,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;EAA5B,SAAA,aAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IACY,KAAA,CAAA,SAAS,GAAW,aAAa;IACjC,KAAA,CAAA,gBAAgB,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;;EA2E9C;EA1EE;EACU,aAAA,CAAA,SAAA,CAAA,aAAa,GAAvB,UAAwB,IAAW,EAAE,IAAY,EAAE,MAAe,EAAA;IAChE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,UAAC,IAAI,EAAA;MAAK,OAAA,IAAI,CAAC,IAAI,KAAK,IAAI;IAAlB,CAAkB,EAAE,MAAM,CAAC;EACjE,CAAC;EAED;EACU,aAAA,CAAA,SAAA,CAAA,YAAY,GAAtB,UAAuB,IAAW,EAAE,IAAc,EAAE,MAAe,EAAA;IACjE,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;IAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,UAAC,EAAE,EAAA;MAAK,OAAA,EAAE,KAAK,IAAI;IAAX,CAAW,EAAE,MAAM,CAAC;EACxD,CAAC;EAED;EACQ,aAAA,CAAA,SAAA,CAAA,cAAc,GAAtB,UAAuB,IAAW,EAAE,QAAuB,EAAE,MAAe,EAAA;IAC1E,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;IAC7B,IAAI,MAAM,EAAE;MACV;MACA,IAAI,CAAC,KAAK,EAAE,UAAC,IAAI,EAAA;QACf,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;UAClB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE;YACxC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,eAAe,EAAE,KAAK,CAAC;UAChD;UACD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC;SAC7C,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,CAAC,EAAE;UAC9C,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,eAAe,EAAE,IAAI,CAAC;QAC/C;MACH,CAAC,CAAC;KACH,MAAM;MACL,IAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC;MACvD,IAAI,WAAS,GAAG,IAAI;MACpB;MACA,IAAI,CAAC,WAAW,EAAE,UAAC,IAAI,EAAA;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;UACnB,WAAS,GAAG,KAAK;UACjB,OAAO,KAAK;QACb;MACH,CAAC,CAAC;MACF,IAAI,WAAS,EAAE;QACb,IAAI,CAAC,KAAK,EAAE;OACb,MAAM;QACL;QACA;QACA,IAAI,CAAC,KAAK,EAAE,UAAC,IAAI,EAAA;UACf,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;YAClB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,CAAC,EAAE;cACtC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC;YAC9C;YACD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,eAAe,EAAE,IAAI,CAAC;UAC/C;QACH,CAAC,CAAC;MACH;IACF;EACH,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,YAAA;IACE,IAAI,CAAC,QAAQ,EAAE;EACjB,CAAC;EAED;EACO,aAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,YAAA;IACE,IAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE;IAC7C,IAAI,WAAW,EAAE;MACf,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC;KAC5B,MAAM;MACL;MACA,IAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE;MAC5C,IAAI,CAAC,UAAU,EAAE,UAAC,SAAS,EAAA;QACzB,SAAS,CAAC,eAAe,CAAC,aAAa,CAAC;QACxC,SAAS,CAAC,eAAe,CAAC,eAAe,CAAC;MAC5C,CAAC,CAAC;IACH;EACH,CAAC;EACH,OAAA,aAAC;AAAD,CAAC,CA7E2B,SAAS,CAAA;AA+ErC,eAAe,aAAa","sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nconst STATUS_UNACTIVE = 'inactive';\nconst STATUS_ACTIVE = 'active';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nclass ListHighlight extends ListState {\n  protected stateName: string = STATUS_ACTIVE;\n  protected ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    this.setHighlightBy(list, (item) => item.name === name, enable);\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    const items = list.getItems();\n    this.setHighlightBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 highlight\n  private setHighlightBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      const activeItems = list.getItemsByState(STATUS_ACTIVE);\n      let allCancel = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, (item) => {\n        if (!callback(item)) {\n          allCancel = false;\n          return false;\n        }\n      });\n      if (allCancel) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, (item) => {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  public highlight() {\n    this.setState();\n  }\n\n  // 需要全部清理 active 和 unactive\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  }\n}\n\nexport default ListHighlight;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}