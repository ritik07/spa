{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isDate, isNil, isNumber, isString } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Linear from './linear';\n/**\n * 时间度量\n * @class\n */\nvar Time = /** @class */function (_super) {\n  __extends(Time, _super);\n  function Time() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'time';\n    return _this;\n  }\n  /**\n   * @override\n   */\n  Time.prototype.getText = function (value, index) {\n    var numberValue = this.translate(value);\n    var formatter = this.formatter;\n    return formatter ? formatter(numberValue, index) : timeFormat(numberValue, this.mask);\n  };\n  /**\n   * @override\n   */\n  Time.prototype.scale = function (value) {\n    var v = value;\n    if (isString(v) || isDate(v)) {\n      v = this.translate(v);\n    }\n    return _super.prototype.scale.call(this, v);\n  };\n  /**\n   * 将时间转换成数字\n   * @override\n   */\n  Time.prototype.translate = function (v) {\n    return toTimeStamp(v);\n  };\n  Time.prototype.initCfg = function () {\n    this.tickMethod = 'time-pretty';\n    this.mask = 'YYYY-MM-DD';\n    this.tickCount = 7;\n    this.nice = false;\n  };\n  Time.prototype.setDomain = function () {\n    var values = this.values;\n    // 是否设置了 min, max，而不是直接取 this.min, this.max\n    var minConfig = this.getConfig('min');\n    var maxConfig = this.getConfig('max');\n    // 如果设置了 min,max 则转换成时间戳\n    if (!isNil(minConfig) || !isNumber(minConfig)) {\n      this.min = this.translate(this.min);\n    }\n    if (!isNil(maxConfig) || !isNumber(maxConfig)) {\n      this.max = this.translate(this.max);\n    }\n    // 没有设置 min, max 时\n    if (values && values.length) {\n      // 重新计算最大最小值\n      var timeStamps_1 = [];\n      var min_1 = Infinity; // 最小值\n      var secondMin_1 = min_1; // 次小值\n      var max_1 = 0;\n      // 使用一个循环，计算min,max,secondMin\n      each(values, function (v) {\n        var timeStamp = toTimeStamp(v);\n        if (isNaN(timeStamp)) {\n          throw new TypeError(\"Invalid Time: \" + v + \" in time scale!\");\n        }\n        if (min_1 > timeStamp) {\n          secondMin_1 = min_1;\n          min_1 = timeStamp;\n        } else if (secondMin_1 > timeStamp) {\n          secondMin_1 = timeStamp;\n        }\n        if (max_1 < timeStamp) {\n          max_1 = timeStamp;\n        }\n        timeStamps_1.push(timeStamp);\n      });\n      // 存在多个值时，设置最小间距\n      if (values.length > 1) {\n        this.minTickInterval = secondMin_1 - min_1;\n      }\n      if (isNil(minConfig)) {\n        this.min = min_1;\n      }\n      if (isNil(maxConfig)) {\n        this.max = max_1;\n      }\n    }\n  };\n  return Time;\n}(Linear);\nexport default Time;","map":{"version":3,"sources":["../../src/continuous/time.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { each, isDate, isNil, isNumber, isString } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Linear from './linear';\n/**\n * 时间度量\n * @class\n */\nvar Time = /** @class */ (function (_super) {\n    __extends(Time, _super);\n    function Time() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'time';\n        return _this;\n    }\n    /**\n     * @override\n     */\n    Time.prototype.getText = function (value, index) {\n        var numberValue = this.translate(value);\n        var formatter = this.formatter;\n        return formatter ? formatter(numberValue, index) : timeFormat(numberValue, this.mask);\n    };\n    /**\n     * @override\n     */\n    Time.prototype.scale = function (value) {\n        var v = value;\n        if (isString(v) || isDate(v)) {\n            v = this.translate(v);\n        }\n        return _super.prototype.scale.call(this, v);\n    };\n    /**\n     * 将时间转换成数字\n     * @override\n     */\n    Time.prototype.translate = function (v) {\n        return toTimeStamp(v);\n    };\n    Time.prototype.initCfg = function () {\n        this.tickMethod = 'time-pretty';\n        this.mask = 'YYYY-MM-DD';\n        this.tickCount = 7;\n        this.nice = false;\n    };\n    Time.prototype.setDomain = function () {\n        var values = this.values;\n        // 是否设置了 min, max，而不是直接取 this.min, this.max\n        var minConfig = this.getConfig('min');\n        var maxConfig = this.getConfig('max');\n        // 如果设置了 min,max 则转换成时间戳\n        if (!isNil(minConfig) || !isNumber(minConfig)) {\n            this.min = this.translate(this.min);\n        }\n        if (!isNil(maxConfig) || !isNumber(maxConfig)) {\n            this.max = this.translate(this.max);\n        }\n        // 没有设置 min, max 时\n        if (values && values.length) {\n            // 重新计算最大最小值\n            var timeStamps_1 = [];\n            var min_1 = Infinity; // 最小值\n            var secondMin_1 = min_1; // 次小值\n            var max_1 = 0;\n            // 使用一个循环，计算min,max,secondMin\n            each(values, function (v) {\n                var timeStamp = toTimeStamp(v);\n                if (isNaN(timeStamp)) {\n                    throw new TypeError(\"Invalid Time: \" + v + \" in time scale!\");\n                }\n                if (min_1 > timeStamp) {\n                    secondMin_1 = min_1;\n                    min_1 = timeStamp;\n                }\n                else if (secondMin_1 > timeStamp) {\n                    secondMin_1 = timeStamp;\n                }\n                if (max_1 < timeStamp) {\n                    max_1 = timeStamp;\n                }\n                timeStamps_1.push(timeStamp);\n            });\n            // 存在多个值时，设置最小间距\n            if (values.length > 1) {\n                this.minTickInterval = secondMin_1 - min_1;\n            }\n            if (isNil(minConfig)) {\n                this.min = min_1;\n            }\n            if (isNil(maxConfig)) {\n                this.max = max_1;\n            }\n        }\n    };\n    return Time;\n}(Linear));\nexport default Time;\n//# sourceMappingURL=time.js.map"]},"metadata":{},"sourceType":"module"}