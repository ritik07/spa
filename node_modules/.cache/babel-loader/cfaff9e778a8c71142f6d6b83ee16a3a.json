{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Container from './container';\nvar AbstractGroup = /** @class */function (_super) {\n  __extends(AbstractGroup, _super);\n  function AbstractGroup() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  AbstractGroup.prototype.isGroup = function () {\n    return true;\n  };\n  AbstractGroup.prototype.isEntityGroup = function () {\n    return false;\n  };\n  AbstractGroup.prototype.clone = function () {\n    var clone = _super.prototype.clone.call(this);\n    // 获取构造函数\n    var children = this.getChildren();\n    for (var i = 0; i < children.length; i++) {\n      var child = children[i];\n      clone.add(child.clone());\n    }\n    return clone;\n  };\n  return AbstractGroup;\n}(Container);\nexport default AbstractGroup;","map":{"version":3,"sources":["../../src/abstract/group.ts"],"names":[],"mappings":";AACA,OAAO,SAAS,MAAM,aAAa;AAEnC,IAAA,aAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAqC,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;EAArC,SAAA,aAAA,GAAA;;EAmBA;EAlBE,aAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,OAAO,IAAI;EACb,CAAC;EAED,aAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACE,OAAO,KAAK;EACd,CAAC;EAED,aAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IACE,IAAM,KAAK,GAAG,MAAA,CAAA,SAAA,CAAM,KAAK,CAAA,IAAA,CAAA,IAAA,CAAE;IAC3B;IACA,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE;IACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACxC,IAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC;MACzB,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACzB;IACD,OAAO,KAAK;EACd,CAAC;EACH,OAAA,aAAC;AAAD,CAAC,CAnBoC,SAAS,CAAA;AAqB9C,eAAe,aAAa","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport Container from './container';\nvar AbstractGroup = /** @class */ (function (_super) {\n    __extends(AbstractGroup, _super);\n    function AbstractGroup() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AbstractGroup.prototype.isGroup = function () {\n        return true;\n    };\n    AbstractGroup.prototype.isEntityGroup = function () {\n        return false;\n    };\n    AbstractGroup.prototype.clone = function () {\n        var clone = _super.prototype.clone.call(this);\n        // 获取构造函数\n        var children = this.getChildren();\n        for (var i = 0; i < children.length; i++) {\n            var child = children[i];\n            clone.add(child.clone());\n        }\n        return clone;\n    };\n    return AbstractGroup;\n}(Container));\nexport default AbstractGroup;\n//# sourceMappingURL=group.js.map"]},"metadata":{},"sourceType":"module"}