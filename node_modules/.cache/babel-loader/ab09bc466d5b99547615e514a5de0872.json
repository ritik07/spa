{"ast":null,"code":"/**\n * @fileoverview 事件处理器\n * @author dxq613@gmail.com\n */\nimport GraphEvent from './graph-event';\nimport { each, isParent } from '../util/util';\nvar CLICK_OFFSET = 40;\nvar LEFT_BTN_CODE = 0;\nvar DELEGATION_SPLIT = ':';\nvar EVENTS = ['mousedown', 'mouseup', 'dblclick', 'mouseout', 'mouseover', 'mousemove', 'mouseleave', 'mouseenter', 'touchstart', 'touchmove', 'touchend', 'dragenter', 'dragover', 'dragleave', 'drop', 'contextmenu', 'mousewheel'];\n// 是否有委托事件监听\nfunction hasDelegation(events, type) {\n  for (var key in events) {\n    if (events.hasOwnProperty(key) && key.indexOf(DELEGATION_SPLIT + type) >= 0) {\n      return true;\n    }\n  }\n  return false;\n}\n// 触发目标事件，目标只能是 shape 或 canvas\nfunction emitTargetEvent(target, type, eventObj) {\n  eventObj.name = type;\n  eventObj.target = target;\n  eventObj.currentTarget = target;\n  eventObj.delegateTarget = target;\n  target.emit(type, eventObj);\n}\n// 事件冒泡, enter 和 leave 需要对 fromShape 和 toShape 进行判同\nfunction bubbleEvent(container, type, eventObj) {\n  if (eventObj.bubbles) {\n    var relativeShape = void 0;\n    var isOverEvent = false;\n    if (type === 'mouseenter') {\n      relativeShape = eventObj.fromShape;\n      isOverEvent = true;\n    } else if (type === 'mouseleave') {\n      isOverEvent = true;\n      relativeShape = eventObj.toShape;\n    }\n    // canvas 上的 mouseenter， mouseleave 事件，仅当进入或者移出 canvas 时触发\n    if (container.isCanvas() && isOverEvent) {\n      return;\n    }\n    // 如果相关图形同当前图形在同一个容器内，不触发事件\n    if (relativeShape && isParent(container, relativeShape)) {\n      // 阻止继续向上冒泡\n      eventObj.bubbles = false;\n      return;\n    }\n    // 事件名称可能在委托过程中被修改，因此事件冒泡时需要重新设置事件名称\n    eventObj.name = type;\n    eventObj.currentTarget = container;\n    eventObj.delegateTarget = container;\n    container.emit(type, eventObj);\n  }\n}\nvar EventController = /** @class */function () {\n  function EventController(cfg) {\n    var _this = this;\n    // 正在被拖拽的图形\n    this.draggingShape = null;\n    this.dragging = false;\n    // 当前鼠标/touch所在位置的图形\n    this.currentShape = null;\n    this.mousedownShape = null;\n    this.mousedownPoint = null;\n    // 统一处理所有的回调\n    this._eventCallback = function (ev) {\n      var type = ev.type;\n      _this._triggerEvent(type, ev);\n    };\n    // 在 document 处理拖拽到画布外的事件，处理从图形上移除画布未被捕捉的问题\n    this._onDocumentMove = function (ev) {\n      var canvas = _this.canvas;\n      var el = canvas.get('el');\n      if (el !== ev.target) {\n        // 不在 canvas 上移动\n        if (_this.dragging || _this.currentShape) {\n          var pointInfo = _this._getPointInfo(ev);\n          // 还在拖拽过程中\n          if (_this.dragging) {\n            _this._emitEvent('drag', ev, pointInfo, _this.draggingShape);\n          }\n          // 说明从某个图形直接移动到了画布外面，\n          // 修复了 mouseleave 的 bug 后不再出现这种情况\n          // if (this.currentShape) {\n          //   this._emitEvent('mouseleave', ev, pointInfo, this.currentShape, this.currentShape, null);\n          //   this.currentShape = null;\n          // }\n        }\n      }\n    };\n    // 在 document 上处理拖拽到外面，释放鼠标时触发 dragend\n    this._onDocumentMouseUp = function (ev) {\n      var canvas = _this.canvas;\n      var el = canvas.get('el');\n      if (el !== ev.target) {\n        // 不在 canvas 上移动\n        if (_this.dragging) {\n          var pointInfo = _this._getPointInfo(ev);\n          if (_this.draggingShape) {\n            // 如果存在拖拽的图形，则也触发 drop 事件\n            _this._emitEvent('drop', ev, pointInfo, null);\n          }\n          _this._emitEvent('dragend', ev, pointInfo, _this.draggingShape);\n          _this._afterDrag(_this.draggingShape, pointInfo, ev);\n        }\n      }\n    };\n    this.canvas = cfg.canvas;\n  }\n  EventController.prototype.init = function () {\n    this._bindEvents();\n  };\n  // 注册事件\n  EventController.prototype._bindEvents = function () {\n    var _this = this;\n    var el = this.canvas.get('el');\n    each(EVENTS, function (eventName) {\n      el.addEventListener(eventName, _this._eventCallback);\n    });\n    if (document) {\n      // 处理移动到外面没有触发 shape mouse leave 的事件\n      // 处理拖拽到外部的问题\n      document.addEventListener('mousemove', this._onDocumentMove);\n      // 处理拖拽过程中在外部释放鼠标的问题\n      document.addEventListener('mouseup', this._onDocumentMouseUp);\n    }\n  };\n  // 清理事件\n  EventController.prototype._clearEvents = function () {\n    var _this = this;\n    var el = this.canvas.get('el');\n    each(EVENTS, function (eventName) {\n      el.removeEventListener(eventName, _this._eventCallback);\n    });\n    if (document) {\n      document.removeEventListener('mousemove', this._onDocumentMove);\n      document.removeEventListener('mouseup', this._onDocumentMouseUp);\n    }\n  };\n  EventController.prototype._getEventObj = function (type, event, point, target, fromShape, toShape) {\n    var eventObj = new GraphEvent(type, event);\n    eventObj.fromShape = fromShape;\n    eventObj.toShape = toShape;\n    eventObj.x = point.x;\n    eventObj.y = point.y;\n    eventObj.clientX = point.clientX;\n    eventObj.clientY = point.clientY;\n    eventObj.propagationPath.push(target);\n    // 事件的x,y应该是基于画布左上角的，与canvas的matrix无关\n    return eventObj;\n  };\n  // 根据点获取图形，提取成独立方法，便于后续优化\n  EventController.prototype._getShape = function (point, ev) {\n    return this.canvas.getShape(point.x, point.y, ev);\n  };\n  // 获取事件的当前点的信息\n  EventController.prototype._getPointInfo = function (ev) {\n    var canvas = this.canvas;\n    var clientPoint = canvas.getClientByEvent(ev);\n    var point = canvas.getPointByEvent(ev);\n    return {\n      x: point.x,\n      y: point.y,\n      clientX: clientPoint.x,\n      clientY: clientPoint.y\n    };\n  };\n  // 触发事件\n  EventController.prototype._triggerEvent = function (type, ev) {\n    var pointInfo = this._getPointInfo(ev);\n    // 每次都获取图形有一定成本，后期可以考虑进行缓存策略\n    var shape = this._getShape(pointInfo, ev);\n    var method = this[\"_on\" + type];\n    var leaveCanvas = false;\n    if (method) {\n      method.call(this, pointInfo, shape, ev);\n    } else {\n      var preShape = this.currentShape;\n      // 如果进入、移出画布时存在图形，则要分别触发事件\n      if (type === 'mouseenter' || type === 'dragenter' || type === 'mouseover') {\n        this._emitEvent(type, ev, pointInfo, null, null, shape); // 先进入画布\n        if (shape) {\n          this._emitEvent(type, ev, pointInfo, shape, null, shape); // 再触发图形的事件\n        }\n\n        if (type === 'mouseenter' && this.draggingShape) {\n          // 如果正在拖拽图形, 则触发 dragleave\n          this._emitEvent('dragenter', ev, pointInfo, null);\n        }\n      } else if (type === 'mouseleave' || type === 'dragleave' || type === 'mouseout') {\n        leaveCanvas = true;\n        if (preShape) {\n          this._emitEvent(type, ev, pointInfo, preShape, preShape, null); // 先触发图形的事件\n        }\n\n        this._emitEvent(type, ev, pointInfo, null, preShape, null); // 再触发离开画布事件\n        if (type === 'mouseleave' && this.draggingShape) {\n          this._emitEvent('dragleave', ev, pointInfo, null);\n        }\n      } else {\n        this._emitEvent(type, ev, pointInfo, shape, null, null); // 一般事件中不需要考虑 from, to\n      }\n    }\n\n    if (!leaveCanvas) {\n      this.currentShape = shape;\n    }\n    // 当鼠标从画布移动到 shape 或者从 preShape 移动到 shape 时，应用 shape 上的鼠标样式\n    if (shape && !shape.get('destroyed')) {\n      var canvas = this.canvas;\n      var el = canvas.get('el');\n      el.style.cursor = shape.attr('cursor') || canvas.get('cursor');\n    }\n  };\n  // 记录下点击的位置、图形，便于拖拽事件、click 事件的判定\n  EventController.prototype._onmousedown = function (pointInfo, shape, event) {\n    // 只有鼠标左键的 mousedown 事件才会设置 mousedownShape 等属性，避免鼠标右键的 mousedown 事件引起其他事件发生\n    if (event.button === LEFT_BTN_CODE) {\n      this.mousedownShape = shape;\n      this.mousedownPoint = pointInfo;\n      this.mousedownTimeStamp = event.timeStamp;\n    }\n    this._emitEvent('mousedown', event, pointInfo, shape, null, null); // mousedown 不考虑fromShape, toShape\n  };\n  // mouseleave 和 mouseenter 都是成对存在的\n  // mouseenter 和 mouseover 同时触发\n  EventController.prototype._emitMouseoverEvents = function (event, pointInfo, fromShape, toShape) {\n    var el = this.canvas.get('el');\n    if (fromShape !== toShape) {\n      if (fromShape) {\n        this._emitEvent('mouseout', event, pointInfo, fromShape, fromShape, toShape);\n        this._emitEvent('mouseleave', event, pointInfo, fromShape, fromShape, toShape);\n        // 当鼠标从 fromShape 移动到画布上时，重置鼠标样式\n        if (!toShape || toShape.get('destroyed')) {\n          el.style.cursor = this.canvas.get('cursor');\n        }\n      }\n      if (toShape) {\n        this._emitEvent('mouseover', event, pointInfo, toShape, fromShape, toShape);\n        this._emitEvent('mouseenter', event, pointInfo, toShape, fromShape, toShape);\n      }\n    }\n  };\n  // dragover 不等同于 mouseover，而等同于 mousemove\n  EventController.prototype._emitDragoverEvents = function (event, pointInfo, fromShape, toShape, isCanvasEmit) {\n    if (toShape) {\n      if (toShape !== fromShape) {\n        if (fromShape) {\n          this._emitEvent('dragleave', event, pointInfo, fromShape, fromShape, toShape);\n        }\n        this._emitEvent('dragenter', event, pointInfo, toShape, fromShape, toShape);\n      }\n      if (!isCanvasEmit) {\n        this._emitEvent('dragover', event, pointInfo, toShape);\n      }\n    } else if (fromShape) {\n      // TODO: 此处判断有问题，当 drag 图形时，也会触发一次 dragleave 事件，因为此时 toShape 为 null，这不是所期望的\n      // 经过空白区域\n      this._emitEvent('dragleave', event, pointInfo, fromShape, fromShape, toShape);\n    }\n    if (isCanvasEmit) {\n      this._emitEvent('dragover', event, pointInfo, toShape);\n    }\n  };\n  // drag 完成后，需要做一些清理工作\n  EventController.prototype._afterDrag = function (draggingShape, pointInfo, event) {\n    if (draggingShape) {\n      draggingShape.set('capture', true); // 恢复可以拾取\n      this.draggingShape = null;\n    }\n    this.dragging = false;\n    // drag 完成后，有可能 draggingShape 已经移动到了当前位置，所以不能直接取当前图形\n    var shape = this._getShape(pointInfo, event);\n    // 拖拽完成后，进行 enter，leave 的判定\n    if (shape !== draggingShape) {\n      this._emitMouseoverEvents(event, pointInfo, draggingShape, shape);\n    }\n    this.currentShape = shape; // 更新当前 shape，如果不处理当前图形的 mouseleave 事件可能会出问题\n  };\n  // 按键抬起时，会终止拖拽、触发点击\n  EventController.prototype._onmouseup = function (pointInfo, shape, event) {\n    // eevent.button === 0 表示鼠标左键事件，此处加上判断主要是为了避免右键鼠标会触发 mouseup 和 click 事件\n    // ref: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n    if (event.button === LEFT_BTN_CODE) {\n      var draggingShape = this.draggingShape;\n      if (this.dragging) {\n        // 存在可以拖拽的图形，同时拖拽到其他图形上时触发 drag 事件\n        if (draggingShape) {\n          this._emitEvent('drop', event, pointInfo, shape);\n        }\n        this._emitEvent('dragend', event, pointInfo, draggingShape);\n        this._afterDrag(draggingShape, pointInfo, event);\n      } else {\n        this._emitEvent('mouseup', event, pointInfo, shape); // 先触发 mouseup 再触发 click\n        if (shape === this.mousedownShape) {\n          this._emitEvent('click', event, pointInfo, shape);\n        }\n        this.mousedownShape = null;\n        this.mousedownPoint = null;\n      }\n    }\n  };\n  // 当触发浏览器的 dragover 事件时，不会再触发 mousemove ，所以这时候的 dragenter, dragleave 事件需要重新处理\n  EventController.prototype._ondragover = function (pointInfo, shape, event) {\n    event.preventDefault(); // 如果不对 dragover 进行 preventDefault，则不会在 canvas 上触发 drop 事件\n    var preShape = this.currentShape;\n    this._emitDragoverEvents(event, pointInfo, preShape, shape, true);\n  };\n  // 大量的图形事件，都通过 mousemove 模拟\n  EventController.prototype._onmousemove = function (pointInfo, shape, event) {\n    var canvas = this.canvas;\n    var preShape = this.currentShape;\n    var draggingShape = this.draggingShape;\n    // 正在拖拽时\n    if (this.dragging) {\n      // 正在拖拽中\n      if (draggingShape) {\n        // 如果拖拽了 shape 会触发 dragenter, dragleave, dragover 和 drag 事件\n        this._emitDragoverEvents(event, pointInfo, preShape, shape, false);\n      }\n      // 如果存在 draggingShape 则会在 draggingShape 上触发 drag 事件，冒泡到 canvas 上\n      // 否则在 canvas 上触发 drag 事件\n      this._emitEvent('drag', event, pointInfo, draggingShape);\n    } else {\n      var mousedownPoint = this.mousedownPoint;\n      if (mousedownPoint) {\n        // 当鼠标点击下去，同时移动时，进行 drag 判定\n        var mousedownShape = this.mousedownShape;\n        var now = event.timeStamp;\n        var timeWindow = now - this.mousedownTimeStamp;\n        var dx = mousedownPoint.clientX - pointInfo.clientX;\n        var dy = mousedownPoint.clientY - pointInfo.clientY;\n        var dist = dx * dx + dy * dy;\n        if (timeWindow > 120 || dist > CLICK_OFFSET) {\n          if (mousedownShape && mousedownShape.get('draggable')) {\n            // 设置了 draggable 的 shape 才能触发 drag 相关的事件\n            draggingShape = this.mousedownShape; // 拖动鼠标点下时的 shape\n            draggingShape.set('capture', false); // 禁止继续拾取，否则无法进行 dragover,dragenter,dragleave,drop的判定\n            this.draggingShape = draggingShape;\n            this.dragging = true;\n            this._emitEvent('dragstart', event, pointInfo, draggingShape);\n            // 清理按下鼠标时缓存的值\n            this.mousedownShape = null;\n            this.mousedownPoint = null;\n          } else if (!mousedownShape && canvas.get('draggable')) {\n            // 设置了 draggable 的 canvas 才能触发 drag 相关的事件\n            this.dragging = true;\n            this._emitEvent('dragstart', event, pointInfo, null);\n            // 清理按下鼠标时缓存的值\n            this.mousedownShape = null;\n            this.mousedownPoint = null;\n          } else {\n            this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n            this._emitEvent('mousemove', event, pointInfo, shape);\n          }\n        } else {\n          this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n          this._emitEvent('mousemove', event, pointInfo, shape);\n        }\n      } else {\n        // 没有按键按下时，则直接触发 mouse over 相关的各种事件\n        this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n        // 始终触发移动\n        this._emitEvent('mousemove', event, pointInfo, shape);\n      }\n    }\n  };\n  // 触发事件\n  EventController.prototype._emitEvent = function (type, event, pointInfo, shape, fromShape, toShape) {\n    var eventObj = this._getEventObj(type, event, pointInfo, shape, fromShape, toShape);\n    // 存在 shape 触发，则进行冒泡处理\n    if (shape) {\n      eventObj.shape = shape;\n      // 触发 shape 上的事件\n      emitTargetEvent(shape, type, eventObj);\n      var parent_1 = shape.getParent();\n      // 执行冒泡\n      while (parent_1) {\n        // 委托事件要先触发\n        parent_1.emitDelegation(type, eventObj);\n        // 事件冒泡停止，不能妨碍委托事件\n        if (!eventObj.propagationStopped) {\n          bubbleEvent(parent_1, type, eventObj);\n        }\n        eventObj.propagationPath.push(parent_1);\n        parent_1 = parent_1.getParent();\n      }\n    } else {\n      // 如果没有 shape 直接在 canvas 上触发\n      var canvas = this.canvas;\n      // 直接触发 canvas 上的事件\n      emitTargetEvent(canvas, type, eventObj);\n    }\n  };\n  EventController.prototype.destroy = function () {\n    // 清理事件\n    this._clearEvents();\n    // 清理缓存的对象\n    this.canvas = null;\n    this.currentShape = null;\n    this.draggingShape = null;\n    this.mousedownPoint = null;\n    this.mousedownShape = null;\n    this.mousedownTimeStamp = null;\n  };\n  return EventController;\n}();\nexport default EventController;","map":{"version":3,"sources":["../../src/event/event-contoller.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileoverview 事件处理器\n * @author dxq613@gmail.com\n */\nimport GraphEvent from './graph-event';\nimport { each, isParent } from '../util/util';\nvar CLICK_OFFSET = 40;\nvar LEFT_BTN_CODE = 0;\nvar DELEGATION_SPLIT = ':';\nvar EVENTS = [\n    'mousedown',\n    'mouseup',\n    'dblclick',\n    'mouseout',\n    'mouseover',\n    'mousemove',\n    'mouseleave',\n    'mouseenter',\n    'touchstart',\n    'touchmove',\n    'touchend',\n    'dragenter',\n    'dragover',\n    'dragleave',\n    'drop',\n    'contextmenu',\n    'mousewheel',\n];\n// 是否有委托事件监听\nfunction hasDelegation(events, type) {\n    for (var key in events) {\n        if (events.hasOwnProperty(key) && key.indexOf(DELEGATION_SPLIT + type) >= 0) {\n            return true;\n        }\n    }\n    return false;\n}\n// 触发目标事件，目标只能是 shape 或 canvas\nfunction emitTargetEvent(target, type, eventObj) {\n    eventObj.name = type;\n    eventObj.target = target;\n    eventObj.currentTarget = target;\n    eventObj.delegateTarget = target;\n    target.emit(type, eventObj);\n}\n// 事件冒泡, enter 和 leave 需要对 fromShape 和 toShape 进行判同\nfunction bubbleEvent(container, type, eventObj) {\n    if (eventObj.bubbles) {\n        var relativeShape = void 0;\n        var isOverEvent = false;\n        if (type === 'mouseenter') {\n            relativeShape = eventObj.fromShape;\n            isOverEvent = true;\n        }\n        else if (type === 'mouseleave') {\n            isOverEvent = true;\n            relativeShape = eventObj.toShape;\n        }\n        // canvas 上的 mouseenter， mouseleave 事件，仅当进入或者移出 canvas 时触发\n        if (container.isCanvas() && isOverEvent) {\n            return;\n        }\n        // 如果相关图形同当前图形在同一个容器内，不触发事件\n        if (relativeShape && isParent(container, relativeShape)) {\n            // 阻止继续向上冒泡\n            eventObj.bubbles = false;\n            return;\n        }\n        // 事件名称可能在委托过程中被修改，因此事件冒泡时需要重新设置事件名称\n        eventObj.name = type;\n        eventObj.currentTarget = container;\n        eventObj.delegateTarget = container;\n        container.emit(type, eventObj);\n    }\n}\nvar EventController = /** @class */ (function () {\n    function EventController(cfg) {\n        var _this = this;\n        // 正在被拖拽的图形\n        this.draggingShape = null;\n        this.dragging = false;\n        // 当前鼠标/touch所在位置的图形\n        this.currentShape = null;\n        this.mousedownShape = null;\n        this.mousedownPoint = null;\n        // 统一处理所有的回调\n        this._eventCallback = function (ev) {\n            var type = ev.type;\n            _this._triggerEvent(type, ev);\n        };\n        // 在 document 处理拖拽到画布外的事件，处理从图形上移除画布未被捕捉的问题\n        this._onDocumentMove = function (ev) {\n            var canvas = _this.canvas;\n            var el = canvas.get('el');\n            if (el !== ev.target) {\n                // 不在 canvas 上移动\n                if (_this.dragging || _this.currentShape) {\n                    var pointInfo = _this._getPointInfo(ev);\n                    // 还在拖拽过程中\n                    if (_this.dragging) {\n                        _this._emitEvent('drag', ev, pointInfo, _this.draggingShape);\n                    }\n                    // 说明从某个图形直接移动到了画布外面，\n                    // 修复了 mouseleave 的 bug 后不再出现这种情况\n                    // if (this.currentShape) {\n                    //   this._emitEvent('mouseleave', ev, pointInfo, this.currentShape, this.currentShape, null);\n                    //   this.currentShape = null;\n                    // }\n                }\n            }\n        };\n        // 在 document 上处理拖拽到外面，释放鼠标时触发 dragend\n        this._onDocumentMouseUp = function (ev) {\n            var canvas = _this.canvas;\n            var el = canvas.get('el');\n            if (el !== ev.target) {\n                // 不在 canvas 上移动\n                if (_this.dragging) {\n                    var pointInfo = _this._getPointInfo(ev);\n                    if (_this.draggingShape) {\n                        // 如果存在拖拽的图形，则也触发 drop 事件\n                        _this._emitEvent('drop', ev, pointInfo, null);\n                    }\n                    _this._emitEvent('dragend', ev, pointInfo, _this.draggingShape);\n                    _this._afterDrag(_this.draggingShape, pointInfo, ev);\n                }\n            }\n        };\n        this.canvas = cfg.canvas;\n    }\n    EventController.prototype.init = function () {\n        this._bindEvents();\n    };\n    // 注册事件\n    EventController.prototype._bindEvents = function () {\n        var _this = this;\n        var el = this.canvas.get('el');\n        each(EVENTS, function (eventName) {\n            el.addEventListener(eventName, _this._eventCallback);\n        });\n        if (document) {\n            // 处理移动到外面没有触发 shape mouse leave 的事件\n            // 处理拖拽到外部的问题\n            document.addEventListener('mousemove', this._onDocumentMove);\n            // 处理拖拽过程中在外部释放鼠标的问题\n            document.addEventListener('mouseup', this._onDocumentMouseUp);\n        }\n    };\n    // 清理事件\n    EventController.prototype._clearEvents = function () {\n        var _this = this;\n        var el = this.canvas.get('el');\n        each(EVENTS, function (eventName) {\n            el.removeEventListener(eventName, _this._eventCallback);\n        });\n        if (document) {\n            document.removeEventListener('mousemove', this._onDocumentMove);\n            document.removeEventListener('mouseup', this._onDocumentMouseUp);\n        }\n    };\n    EventController.prototype._getEventObj = function (type, event, point, target, fromShape, toShape) {\n        var eventObj = new GraphEvent(type, event);\n        eventObj.fromShape = fromShape;\n        eventObj.toShape = toShape;\n        eventObj.x = point.x;\n        eventObj.y = point.y;\n        eventObj.clientX = point.clientX;\n        eventObj.clientY = point.clientY;\n        eventObj.propagationPath.push(target);\n        // 事件的x,y应该是基于画布左上角的，与canvas的matrix无关\n        return eventObj;\n    };\n    // 根据点获取图形，提取成独立方法，便于后续优化\n    EventController.prototype._getShape = function (point, ev) {\n        return this.canvas.getShape(point.x, point.y, ev);\n    };\n    // 获取事件的当前点的信息\n    EventController.prototype._getPointInfo = function (ev) {\n        var canvas = this.canvas;\n        var clientPoint = canvas.getClientByEvent(ev);\n        var point = canvas.getPointByEvent(ev);\n        return {\n            x: point.x,\n            y: point.y,\n            clientX: clientPoint.x,\n            clientY: clientPoint.y,\n        };\n    };\n    // 触发事件\n    EventController.prototype._triggerEvent = function (type, ev) {\n        var pointInfo = this._getPointInfo(ev);\n        // 每次都获取图形有一定成本，后期可以考虑进行缓存策略\n        var shape = this._getShape(pointInfo, ev);\n        var method = this[\"_on\" + type];\n        var leaveCanvas = false;\n        if (method) {\n            method.call(this, pointInfo, shape, ev);\n        }\n        else {\n            var preShape = this.currentShape;\n            // 如果进入、移出画布时存在图形，则要分别触发事件\n            if (type === 'mouseenter' || type === 'dragenter' || type === 'mouseover') {\n                this._emitEvent(type, ev, pointInfo, null, null, shape); // 先进入画布\n                if (shape) {\n                    this._emitEvent(type, ev, pointInfo, shape, null, shape); // 再触发图形的事件\n                }\n                if (type === 'mouseenter' && this.draggingShape) {\n                    // 如果正在拖拽图形, 则触发 dragleave\n                    this._emitEvent('dragenter', ev, pointInfo, null);\n                }\n            }\n            else if (type === 'mouseleave' || type === 'dragleave' || type === 'mouseout') {\n                leaveCanvas = true;\n                if (preShape) {\n                    this._emitEvent(type, ev, pointInfo, preShape, preShape, null); // 先触发图形的事件\n                }\n                this._emitEvent(type, ev, pointInfo, null, preShape, null); // 再触发离开画布事件\n                if (type === 'mouseleave' && this.draggingShape) {\n                    this._emitEvent('dragleave', ev, pointInfo, null);\n                }\n            }\n            else {\n                this._emitEvent(type, ev, pointInfo, shape, null, null); // 一般事件中不需要考虑 from, to\n            }\n        }\n        if (!leaveCanvas) {\n            this.currentShape = shape;\n        }\n        // 当鼠标从画布移动到 shape 或者从 preShape 移动到 shape 时，应用 shape 上的鼠标样式\n        if (shape && !shape.get('destroyed')) {\n            var canvas = this.canvas;\n            var el = canvas.get('el');\n            el.style.cursor = shape.attr('cursor') || canvas.get('cursor');\n        }\n    };\n    // 记录下点击的位置、图形，便于拖拽事件、click 事件的判定\n    EventController.prototype._onmousedown = function (pointInfo, shape, event) {\n        // 只有鼠标左键的 mousedown 事件才会设置 mousedownShape 等属性，避免鼠标右键的 mousedown 事件引起其他事件发生\n        if (event.button === LEFT_BTN_CODE) {\n            this.mousedownShape = shape;\n            this.mousedownPoint = pointInfo;\n            this.mousedownTimeStamp = event.timeStamp;\n        }\n        this._emitEvent('mousedown', event, pointInfo, shape, null, null); // mousedown 不考虑fromShape, toShape\n    };\n    // mouseleave 和 mouseenter 都是成对存在的\n    // mouseenter 和 mouseover 同时触发\n    EventController.prototype._emitMouseoverEvents = function (event, pointInfo, fromShape, toShape) {\n        var el = this.canvas.get('el');\n        if (fromShape !== toShape) {\n            if (fromShape) {\n                this._emitEvent('mouseout', event, pointInfo, fromShape, fromShape, toShape);\n                this._emitEvent('mouseleave', event, pointInfo, fromShape, fromShape, toShape);\n                // 当鼠标从 fromShape 移动到画布上时，重置鼠标样式\n                if (!toShape || toShape.get('destroyed')) {\n                    el.style.cursor = this.canvas.get('cursor');\n                }\n            }\n            if (toShape) {\n                this._emitEvent('mouseover', event, pointInfo, toShape, fromShape, toShape);\n                this._emitEvent('mouseenter', event, pointInfo, toShape, fromShape, toShape);\n            }\n        }\n    };\n    // dragover 不等同于 mouseover，而等同于 mousemove\n    EventController.prototype._emitDragoverEvents = function (event, pointInfo, fromShape, toShape, isCanvasEmit) {\n        if (toShape) {\n            if (toShape !== fromShape) {\n                if (fromShape) {\n                    this._emitEvent('dragleave', event, pointInfo, fromShape, fromShape, toShape);\n                }\n                this._emitEvent('dragenter', event, pointInfo, toShape, fromShape, toShape);\n            }\n            if (!isCanvasEmit) {\n                this._emitEvent('dragover', event, pointInfo, toShape);\n            }\n        }\n        else if (fromShape) {\n            // TODO: 此处判断有问题，当 drag 图形时，也会触发一次 dragleave 事件，因为此时 toShape 为 null，这不是所期望的\n            // 经过空白区域\n            this._emitEvent('dragleave', event, pointInfo, fromShape, fromShape, toShape);\n        }\n        if (isCanvasEmit) {\n            this._emitEvent('dragover', event, pointInfo, toShape);\n        }\n    };\n    // drag 完成后，需要做一些清理工作\n    EventController.prototype._afterDrag = function (draggingShape, pointInfo, event) {\n        if (draggingShape) {\n            draggingShape.set('capture', true); // 恢复可以拾取\n            this.draggingShape = null;\n        }\n        this.dragging = false;\n        // drag 完成后，有可能 draggingShape 已经移动到了当前位置，所以不能直接取当前图形\n        var shape = this._getShape(pointInfo, event);\n        // 拖拽完成后，进行 enter，leave 的判定\n        if (shape !== draggingShape) {\n            this._emitMouseoverEvents(event, pointInfo, draggingShape, shape);\n        }\n        this.currentShape = shape; // 更新当前 shape，如果不处理当前图形的 mouseleave 事件可能会出问题\n    };\n    // 按键抬起时，会终止拖拽、触发点击\n    EventController.prototype._onmouseup = function (pointInfo, shape, event) {\n        // eevent.button === 0 表示鼠标左键事件，此处加上判断主要是为了避免右键鼠标会触发 mouseup 和 click 事件\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n        if (event.button === LEFT_BTN_CODE) {\n            var draggingShape = this.draggingShape;\n            if (this.dragging) {\n                // 存在可以拖拽的图形，同时拖拽到其他图形上时触发 drag 事件\n                if (draggingShape) {\n                    this._emitEvent('drop', event, pointInfo, shape);\n                }\n                this._emitEvent('dragend', event, pointInfo, draggingShape);\n                this._afterDrag(draggingShape, pointInfo, event);\n            }\n            else {\n                this._emitEvent('mouseup', event, pointInfo, shape); // 先触发 mouseup 再触发 click\n                if (shape === this.mousedownShape) {\n                    this._emitEvent('click', event, pointInfo, shape);\n                }\n                this.mousedownShape = null;\n                this.mousedownPoint = null;\n            }\n        }\n    };\n    // 当触发浏览器的 dragover 事件时，不会再触发 mousemove ，所以这时候的 dragenter, dragleave 事件需要重新处理\n    EventController.prototype._ondragover = function (pointInfo, shape, event) {\n        event.preventDefault(); // 如果不对 dragover 进行 preventDefault，则不会在 canvas 上触发 drop 事件\n        var preShape = this.currentShape;\n        this._emitDragoverEvents(event, pointInfo, preShape, shape, true);\n    };\n    // 大量的图形事件，都通过 mousemove 模拟\n    EventController.prototype._onmousemove = function (pointInfo, shape, event) {\n        var canvas = this.canvas;\n        var preShape = this.currentShape;\n        var draggingShape = this.draggingShape;\n        // 正在拖拽时\n        if (this.dragging) {\n            // 正在拖拽中\n            if (draggingShape) {\n                // 如果拖拽了 shape 会触发 dragenter, dragleave, dragover 和 drag 事件\n                this._emitDragoverEvents(event, pointInfo, preShape, shape, false);\n            }\n            // 如果存在 draggingShape 则会在 draggingShape 上触发 drag 事件，冒泡到 canvas 上\n            // 否则在 canvas 上触发 drag 事件\n            this._emitEvent('drag', event, pointInfo, draggingShape);\n        }\n        else {\n            var mousedownPoint = this.mousedownPoint;\n            if (mousedownPoint) {\n                // 当鼠标点击下去，同时移动时，进行 drag 判定\n                var mousedownShape = this.mousedownShape;\n                var now = event.timeStamp;\n                var timeWindow = now - this.mousedownTimeStamp;\n                var dx = mousedownPoint.clientX - pointInfo.clientX;\n                var dy = mousedownPoint.clientY - pointInfo.clientY;\n                var dist = dx * dx + dy * dy;\n                if (timeWindow > 120 || dist > CLICK_OFFSET) {\n                    if (mousedownShape && mousedownShape.get('draggable')) {\n                        // 设置了 draggable 的 shape 才能触发 drag 相关的事件\n                        draggingShape = this.mousedownShape; // 拖动鼠标点下时的 shape\n                        draggingShape.set('capture', false); // 禁止继续拾取，否则无法进行 dragover,dragenter,dragleave,drop的判定\n                        this.draggingShape = draggingShape;\n                        this.dragging = true;\n                        this._emitEvent('dragstart', event, pointInfo, draggingShape);\n                        // 清理按下鼠标时缓存的值\n                        this.mousedownShape = null;\n                        this.mousedownPoint = null;\n                    }\n                    else if (!mousedownShape && canvas.get('draggable')) {\n                        // 设置了 draggable 的 canvas 才能触发 drag 相关的事件\n                        this.dragging = true;\n                        this._emitEvent('dragstart', event, pointInfo, null);\n                        // 清理按下鼠标时缓存的值\n                        this.mousedownShape = null;\n                        this.mousedownPoint = null;\n                    }\n                    else {\n                        this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n                        this._emitEvent('mousemove', event, pointInfo, shape);\n                    }\n                }\n                else {\n                    this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n                    this._emitEvent('mousemove', event, pointInfo, shape);\n                }\n            }\n            else {\n                // 没有按键按下时，则直接触发 mouse over 相关的各种事件\n                this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n                // 始终触发移动\n                this._emitEvent('mousemove', event, pointInfo, shape);\n            }\n        }\n    };\n    // 触发事件\n    EventController.prototype._emitEvent = function (type, event, pointInfo, shape, fromShape, toShape) {\n        var eventObj = this._getEventObj(type, event, pointInfo, shape, fromShape, toShape);\n        // 存在 shape 触发，则进行冒泡处理\n        if (shape) {\n            eventObj.shape = shape;\n            // 触发 shape 上的事件\n            emitTargetEvent(shape, type, eventObj);\n            var parent_1 = shape.getParent();\n            // 执行冒泡\n            while (parent_1) {\n                // 委托事件要先触发\n                parent_1.emitDelegation(type, eventObj);\n                // 事件冒泡停止，不能妨碍委托事件\n                if (!eventObj.propagationStopped) {\n                    bubbleEvent(parent_1, type, eventObj);\n                }\n                eventObj.propagationPath.push(parent_1);\n                parent_1 = parent_1.getParent();\n            }\n        }\n        else {\n            // 如果没有 shape 直接在 canvas 上触发\n            var canvas = this.canvas;\n            // 直接触发 canvas 上的事件\n            emitTargetEvent(canvas, type, eventObj);\n        }\n    };\n    EventController.prototype.destroy = function () {\n        // 清理事件\n        this._clearEvents();\n        // 清理缓存的对象\n        this.canvas = null;\n        this.currentShape = null;\n        this.draggingShape = null;\n        this.mousedownPoint = null;\n        this.mousedownShape = null;\n        this.mousedownTimeStamp = null;\n    };\n    return EventController;\n}());\nexport default EventController;\n//# sourceMappingURL=event-contoller.js.map"]},"metadata":{},"sourceType":"module"}