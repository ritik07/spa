{"ast":null,"code":"/**\n * @fileoverview 圆\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { distance } from '../util/util';\nvar Circle = /** @class */function (_super) {\n  __extends(Circle, _super);\n  function Circle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Circle.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    return __assign(__assign({}, attrs), {\n      x: 0,\n      y: 0,\n      r: 0\n    });\n  };\n  Circle.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    var attrs = this.attr();\n    var cx = attrs.x;\n    var cy = attrs.y;\n    var r = attrs.r;\n    var halfLineWidth = lineWidth / 2;\n    var absDistance = distance(cx, cy, x, y);\n    // 直接用距离，如果同时存在边和填充时，可以减少两次计算\n    if (isFill && isStroke) {\n      return absDistance <= r + halfLineWidth;\n    }\n    if (isFill) {\n      return absDistance <= r;\n    }\n    if (isStroke) {\n      return absDistance >= r - halfLineWidth && absDistance <= r + halfLineWidth;\n    }\n    return false;\n  };\n  Circle.prototype.createPath = function (context) {\n    var attrs = this.attr();\n    var cx = attrs.x;\n    var cy = attrs.y;\n    var r = attrs.r;\n    context.beginPath();\n    context.arc(cx, cy, r, 0, Math.PI * 2, false);\n    context.closePath();\n  };\n  return Circle;\n}(ShapeBase);\nexport default Circle;","map":{"version":3,"sources":["../../src/shape/circle.ts"],"names":[],"mappings":"AAAA;;;AAGG;;AAEH,OAAO,SAAS,MAAM,QAAQ;AAC9B,SAAS,QAAQ,QAAQ,cAAc;AAEvC,IAAA,MAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAqB,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;EAArB,SAAA,MAAA,GAAA;;EAwCA;EAvCE,MAAA,CAAA,SAAA,CAAA,eAAe,GAAf,YAAA;IACE,IAAM,KAAK,GAAG,MAAA,CAAA,SAAA,CAAM,eAAe,CAAA,IAAA,CAAA,IAAA,CAAE;IACrC,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,EAAA;MACR,CAAC,EAAE,CAAC;MACJ,CAAC,EAAE,CAAC;MACJ,CAAC,EAAE;IAAC,CAAA,CAAA;EAER,CAAC;EAED,MAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UAAiB,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAA;IAChD,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE;IACzB,IAAM,EAAE,GAAG,KAAK,CAAC,CAAC;IAClB,IAAM,EAAE,GAAG,KAAK,CAAC,CAAC;IAClB,IAAM,CAAC,GAAG,KAAK,CAAC,CAAC;IACjB,IAAM,aAAa,GAAG,SAAS,GAAG,CAAC;IACnC,IAAM,WAAW,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAC1C;IACA,IAAI,MAAM,IAAI,QAAQ,EAAE;MACtB,OAAO,WAAW,IAAI,CAAC,GAAG,aAAa;IACxC;IACD,IAAI,MAAM,EAAE;MACV,OAAO,WAAW,IAAI,CAAC;IACxB;IACD,IAAI,QAAQ,EAAE;MACZ,OAAO,WAAW,IAAI,CAAC,GAAG,aAAa,IAAI,WAAW,IAAI,CAAC,GAAG,aAAa;IAC5E;IACD,OAAO,KAAK;EACd,CAAC;EAED,MAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,OAAO,EAAA;IAChB,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE;IACzB,IAAM,EAAE,GAAG,KAAK,CAAC,CAAC;IAClB,IAAM,EAAE,GAAG,KAAK,CAAC,CAAC;IAClB,IAAM,CAAC,GAAG,KAAK,CAAC,CAAC;IACjB,OAAO,CAAC,SAAS,EAAE;IACnB,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC;IAC7C,OAAO,CAAC,SAAS,EAAE;EACrB,CAAC;EACH,OAAA,MAAC;AAAD,CAAC,CAxCoB,SAAS,CAAA;AA0C9B,eAAe,MAAM","sourceRoot":"","sourcesContent":["/**\n * @fileoverview 圆\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { distance } from '../util/util';\nvar Circle = /** @class */ (function (_super) {\n    __extends(Circle, _super);\n    function Circle() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Circle.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        return __assign(__assign({}, attrs), { x: 0, y: 0, r: 0 });\n    };\n    Circle.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n        var attrs = this.attr();\n        var cx = attrs.x;\n        var cy = attrs.y;\n        var r = attrs.r;\n        var halfLineWidth = lineWidth / 2;\n        var absDistance = distance(cx, cy, x, y);\n        // 直接用距离，如果同时存在边和填充时，可以减少两次计算\n        if (isFill && isStroke) {\n            return absDistance <= r + halfLineWidth;\n        }\n        if (isFill) {\n            return absDistance <= r;\n        }\n        if (isStroke) {\n            return absDistance >= r - halfLineWidth && absDistance <= r + halfLineWidth;\n        }\n        return false;\n    };\n    Circle.prototype.createPath = function (context) {\n        var attrs = this.attr();\n        var cx = attrs.x;\n        var cy = attrs.y;\n        var r = attrs.r;\n        context.beginPath();\n        context.arc(cx, cy, r, 0, Math.PI * 2, false);\n        context.closePath();\n    };\n    return Circle;\n}(ShapeBase));\nexport default Circle;\n//# sourceMappingURL=circle.js.map"]},"metadata":{},"sourceType":"module"}