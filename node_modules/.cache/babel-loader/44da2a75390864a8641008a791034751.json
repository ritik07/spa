{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { GAP } from '../constant';\nimport Adjust from './adjust';\nfunction randomNumber(min, max) {\n  return (max - min) * Math.random() + min;\n}\nvar Jitter = /** @class */function (_super) {\n  __extends(Jitter, _super);\n  function Jitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Jitter.prototype.process = function (groupDataArray) {\n    var groupedDataArray = _.clone(groupDataArray);\n    // 之前分组之后的数据，然后有合并回去（和分组前可以理解成是一样的）\n    var mergeData = _.flatten(groupedDataArray);\n    // 返回值\n    this.adjustData(groupedDataArray, mergeData);\n    return groupedDataArray;\n  };\n  /**\n   * 当前数据分组（index）中，按照维度 dim 进行 jitter 调整\n   * @param dim\n   * @param values\n   * @param dataArray\n   */\n  Jitter.prototype.adjustDim = function (dim, values, dataArray) {\n    var _this = this;\n    // 在每一个分组中，将数据再按照 dim 分组，用于散列\n    var groupDataArray = this.groupData(dataArray, dim);\n    return _.each(groupDataArray, function (data, dimValue) {\n      return _this.adjustGroup(data, dim, parseFloat(dimValue), values);\n    });\n  };\n  // 随机出来的字段值\n  Jitter.prototype.getAdjustOffset = function (range) {\n    var pre = range.pre,\n      next = range.next;\n    // 随机的范围\n    var margin = (next - pre) * GAP;\n    return randomNumber(pre + margin, next - margin);\n  };\n  // adjust group data\n  Jitter.prototype.adjustGroup = function (group, dim, dimValue, values) {\n    var _this = this;\n    // 调整范围\n    var range = this.getAdjustRange(dim, dimValue, values);\n    _.each(group, function (data) {\n      data[dim] = _this.getAdjustOffset(range); // 获取调整的位置\n    });\n\n    return group;\n  };\n  return Jitter;\n}(Adjust);\nexport default Jitter;","map":{"version":3,"sources":["../../src/adjusts/jitter.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,CAAC,MAAM,YAAY;AAC/B,SAAS,GAAG,QAAQ,aAAa;AAEjC,OAAO,MAAM,MAAM,UAAU;AAE7B,SAAS,YAAY,CAAC,GAAW,EAAE,GAAW,EAAA;EAC5C,OAAO,CAAC,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG;AAC1C;AAEA,IAAA,MAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoC,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;EAApC,SAAA,MAAA,GAAA;;EA6CA;EA5CS,MAAA,CAAA,SAAA,CAAA,OAAO,GAAd,UAAe,cAAwB,EAAA;IACrC,IAAM,gBAAgB,GAAG,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC;IAEhD;IACA,IAAM,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAW;IAEvD;IACA,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,SAAS,CAAC;IAE5C,OAAO,gBAAgB;EACzB,CAAC;EAED;;;;;AAKG;EACO,MAAA,CAAA,SAAA,CAAA,SAAS,GAAnB,UAAoB,GAAW,EAAE,MAAgB,EAAE,SAAiB,EAAA;IAApE,IAAA,KAAA,GAAA,IAAA;IACE;IACA,IAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,GAAG,CAAC;IACrD,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,UAAC,IAAY,EAAE,QAAgB,EAAA;MAC3D,OAAO,KAAI,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClE,CAAC,CAAC;EACJ,CAAC;EAED;EACQ,MAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,UAAwB,KAAY,EAAA;IAC1B,IAAA,GAAG,GAAW,KAAK,CAAA,GAAhB;MAAE,IAAI,GAAK,KAAK,CAAA,IAAV;IACjB;IACA,IAAM,MAAM,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,GAAG;IACjC,OAAO,YAAY,CAAC,GAAG,GAAG,MAAM,EAAE,IAAI,GAAG,MAAM,CAAC;EAClD,CAAC;EAED;EACQ,MAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UAAoB,KAAa,EAAE,GAAW,EAAE,QAAgB,EAAE,MAAgB,EAAA;IAAlF,IAAA,KAAA,GAAA,IAAA;IACE;IACA,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC;IAExD,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,UAAC,IAAU,EAAA;MACvB,IAAI,CAAC,GAAG,CAAC,GAAG,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC;;IACF,OAAO,KAAK;EACd,CAAC;EACH,OAAA,MAAC;AAAD,CAAC,CA7CmC,MAAM,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { GAP } from '../constant';\nimport Adjust from './adjust';\nfunction randomNumber(min, max) {\n    return (max - min) * Math.random() + min;\n}\nvar Jitter = /** @class */ (function (_super) {\n    __extends(Jitter, _super);\n    function Jitter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Jitter.prototype.process = function (groupDataArray) {\n        var groupedDataArray = _.clone(groupDataArray);\n        // 之前分组之后的数据，然后有合并回去（和分组前可以理解成是一样的）\n        var mergeData = _.flatten(groupedDataArray);\n        // 返回值\n        this.adjustData(groupedDataArray, mergeData);\n        return groupedDataArray;\n    };\n    /**\n     * 当前数据分组（index）中，按照维度 dim 进行 jitter 调整\n     * @param dim\n     * @param values\n     * @param dataArray\n     */\n    Jitter.prototype.adjustDim = function (dim, values, dataArray) {\n        var _this = this;\n        // 在每一个分组中，将数据再按照 dim 分组，用于散列\n        var groupDataArray = this.groupData(dataArray, dim);\n        return _.each(groupDataArray, function (data, dimValue) {\n            return _this.adjustGroup(data, dim, parseFloat(dimValue), values);\n        });\n    };\n    // 随机出来的字段值\n    Jitter.prototype.getAdjustOffset = function (range) {\n        var pre = range.pre, next = range.next;\n        // 随机的范围\n        var margin = (next - pre) * GAP;\n        return randomNumber(pre + margin, next - margin);\n    };\n    // adjust group data\n    Jitter.prototype.adjustGroup = function (group, dim, dimValue, values) {\n        var _this = this;\n        // 调整范围\n        var range = this.getAdjustRange(dim, dimValue, values);\n        _.each(group, function (data) {\n            data[dim] = _this.getAdjustOffset(range); // 获取调整的位置\n        });\n        return group;\n    };\n    return Jitter;\n}(Adjust));\nexport default Jitter;\n//# sourceMappingURL=jitter.js.map"]},"metadata":{},"sourceType":"module"}