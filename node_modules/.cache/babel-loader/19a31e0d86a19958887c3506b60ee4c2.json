{"ast":null,"code":"import { isDate, isString, last } from '@antv/util';\nimport fecha from 'fecha';\nimport * as fecha1 from 'fecha';\nimport bisector from './bisector';\nvar FORMAT_METHOD = 'format';\nexport function timeFormat(time, mask) {\n  var method = fecha1[FORMAT_METHOD] || fecha[FORMAT_METHOD];\n  return method(time, mask);\n}\n/**\n * 转换成时间戳\n * @param value 时间值\n */\nexport function toTimeStamp(value) {\n  if (isString(value)) {\n    if (value.indexOf('T') > 0) {\n      value = new Date(value).getTime();\n    } else {\n      // new Date('2010/01/10') 和 new Date('2010-01-10') 的差别在于:\n      // 如果仅有年月日时，前者是带有时区的: Fri Jan 10 2020 02:40:13 GMT+0800 (中国标准时间)\n      // 后者会格式化成 Sun Jan 10 2010 08:00:00 GMT+0800 (中国标准时间)\n      value = new Date(value.replace(/-/gi, '/')).getTime();\n    }\n  }\n  if (isDate(value)) {\n    value = value.getTime();\n  }\n  return value;\n}\nvar SECOND = 1000;\nvar MINUTE = 60 * SECOND;\nvar HOUR = 60 * MINUTE;\nvar DAY = 24 * HOUR;\nvar MONTH = DAY * 31;\nvar YEAR = DAY * 365;\nexport { SECOND, MINUTE, HOUR, DAY, MONTH, YEAR };\nvar intervals = [['HH:mm:ss', SECOND], ['HH:mm:ss', SECOND * 10], ['HH:mm:ss', SECOND * 30], ['HH:mm', MINUTE], ['HH:mm', MINUTE * 10], ['HH:mm', MINUTE * 30], ['HH', HOUR], ['HH', HOUR * 6], ['HH', HOUR * 12], ['YYYY-MM-DD', DAY], ['YYYY-MM-DD', DAY * 4], ['YYYY-WW', DAY * 7], ['YYYY-MM', MONTH], ['YYYY-MM', MONTH * 4], ['YYYY-MM', MONTH * 6], ['YYYY', DAY * 380]];\nexport function getTickInterval(min, max, tickCount) {\n  var target = (max - min) / tickCount;\n  var idx = bisector(function (o) {\n    return o[1];\n  })(intervals, target) - 1;\n  var interval = intervals[idx];\n  if (idx < 0) {\n    interval = intervals[0];\n  } else if (idx >= intervals.length) {\n    interval = last(intervals);\n  }\n  return interval;\n}","map":{"version":3,"sources":["../../src/util/time.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isDate, isString, last } from '@antv/util';\nimport fecha from 'fecha';\nimport * as fecha1 from 'fecha';\nimport bisector from './bisector';\nvar FORMAT_METHOD = 'format';\nexport function timeFormat(time, mask) {\n    var method = fecha1[FORMAT_METHOD] || fecha[FORMAT_METHOD];\n    return method(time, mask);\n}\n/**\n * 转换成时间戳\n * @param value 时间值\n */\nexport function toTimeStamp(value) {\n    if (isString(value)) {\n        if (value.indexOf('T') > 0) {\n            value = new Date(value).getTime();\n        }\n        else {\n            // new Date('2010/01/10') 和 new Date('2010-01-10') 的差别在于:\n            // 如果仅有年月日时，前者是带有时区的: Fri Jan 10 2020 02:40:13 GMT+0800 (中国标准时间)\n            // 后者会格式化成 Sun Jan 10 2010 08:00:00 GMT+0800 (中国标准时间)\n            value = new Date(value.replace(/-/gi, '/')).getTime();\n        }\n    }\n    if (isDate(value)) {\n        value = value.getTime();\n    }\n    return value;\n}\nvar SECOND = 1000;\nvar MINUTE = 60 * SECOND;\nvar HOUR = 60 * MINUTE;\nvar DAY = 24 * HOUR;\nvar MONTH = DAY * 31;\nvar YEAR = DAY * 365;\nexport { SECOND, MINUTE, HOUR, DAY, MONTH, YEAR };\nvar intervals = [\n    ['HH:mm:ss', SECOND],\n    ['HH:mm:ss', SECOND * 10],\n    ['HH:mm:ss', SECOND * 30],\n    ['HH:mm', MINUTE],\n    ['HH:mm', MINUTE * 10],\n    ['HH:mm', MINUTE * 30],\n    ['HH', HOUR],\n    ['HH', HOUR * 6],\n    ['HH', HOUR * 12],\n    ['YYYY-MM-DD', DAY],\n    ['YYYY-MM-DD', DAY * 4],\n    ['YYYY-WW', DAY * 7],\n    ['YYYY-MM', MONTH],\n    ['YYYY-MM', MONTH * 4],\n    ['YYYY-MM', MONTH * 6],\n    ['YYYY', DAY * 380],\n];\nexport function getTickInterval(min, max, tickCount) {\n    var target = (max - min) / tickCount;\n    var idx = bisector(function (o) { return o[1]; })(intervals, target) - 1;\n    var interval = intervals[idx];\n    if (idx < 0) {\n        interval = intervals[0];\n    }\n    else if (idx >= intervals.length) {\n        interval = last(intervals);\n    }\n    return interval;\n}\n//# sourceMappingURL=time.js.map"]},"metadata":{},"sourceType":"module"}