{"ast":null,"code":"import inLine from './line';\nexport default function inPolyline(points, lineWidth, x, y, isClose) {\n  var count = points.length;\n  if (count < 2) {\n    return false;\n  }\n  for (var i = 0; i < count - 1; i++) {\n    var x1 = points[i][0];\n    var y1 = points[i][1];\n    var x2 = points[i + 1][0];\n    var y2 = points[i + 1][1];\n    if (inLine(x1, y1, x2, y2, lineWidth, x, y)) {\n      return true;\n    }\n  }\n  // 如果封闭，则计算起始点和结束点的边\n  if (isClose) {\n    var first = points[0];\n    var last = points[count - 1];\n    if (inLine(first[0], first[1], last[0], last[1], lineWidth, x, y)) {\n      return true;\n    }\n  }\n  return false;\n}","map":{"version":3,"sources":["../../../src/util/in-stroke/polyline.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ;AAE3B,eAAc,SAAU,UAAU,CAAC,MAAa,EAAE,SAAiB,EAAE,CAAS,EAAE,CAAS,EAAE,OAAgB,EAAA;EACzG,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM;EAC3B,IAAI,KAAK,GAAG,CAAC,EAAE;IACb,OAAO,KAAK;EACb;EACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IAClC,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3B,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE3B,IAAI,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;MAC3C,OAAO,IAAI;IACZ;EACF;EAED;EACA,IAAI,OAAO,EAAE;IACX,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAM,IAAI,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;IAC9B,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;MACjE,OAAO,IAAI;IACZ;EACF;EAED,OAAO,KAAK;AACd","sourceRoot":"","sourcesContent":["import inLine from './line';\nexport default function inPolyline(points, lineWidth, x, y, isClose) {\n    var count = points.length;\n    if (count < 2) {\n        return false;\n    }\n    for (var i = 0; i < count - 1; i++) {\n        var x1 = points[i][0];\n        var y1 = points[i][1];\n        var x2 = points[i + 1][0];\n        var y2 = points[i + 1][1];\n        if (inLine(x1, y1, x2, y2, lineWidth, x, y)) {\n            return true;\n        }\n    }\n    // 如果封闭，则计算起始点和结束点的边\n    if (isClose) {\n        var first = points[0];\n        var last = points[count - 1];\n        if (inLine(first[0], first[1], last[0], last[1], lineWidth, x, y)) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=polyline.js.map"]},"metadata":{},"sourceType":"module"}