{"ast":null,"code":"import { each, isArray, isString } from '@antv/util';\nvar regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/ig;\nvar regexDot = /[^\\s\\,]+/ig;\nfunction parsePath(p) {\n  var path = p || [];\n  if (isArray(path)) {\n    return path;\n  }\n  if (isString(path)) {\n    path = path.match(regexTags);\n    each(path, function (item, index) {\n      // @ts-ignore\n      item = item.match(regexDot);\n      if (item[0].length > 1) {\n        var tag = item[0].charAt(0);\n        // @ts-ignore\n        item.splice(1, 0, item[0].substr(1));\n        // @ts-ignore\n        item[0] = tag;\n      }\n      // @ts-ignore\n      each(item, function (sub, i) {\n        if (!isNaN(sub)) {\n          // @ts-ignore\n          item[i] = +sub;\n        }\n      });\n      // @ts-ignore\n      path[index] = item;\n    });\n    return path;\n  }\n}\nexport default parsePath;","map":{"version":3,"sources":["../src/parse-path.ts"],"names":[],"mappings":"AAAA,SAAS,IAAI,EAAE,OAAO,EAAE,QAAQ,QAAQ,YAAY;AAEpD,IAAM,SAAS,GAAG,gCAAgC;AAClD,IAAM,QAAQ,GAAG,YAAY;AAE7B,SAAS,SAAS,CAAC,CAAS,EAAA;EAC1B,IAAI,IAAI,GAAG,CAAC,IAAI,EAAuB;EACvC,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;IACjB,OAAO,IAAI;EACZ;EAED,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;IAClB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IAC5B,IAAI,CAAC,IAAI,EAAE,UAAC,IAAI,EAAE,KAAK,EAAA;MACrB;MACA,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;MAC3B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;QACtB,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7B;QACA,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACpC;QACA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG;MACd;MACD;MACA,IAAI,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE,CAAC,EAAA;QACzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;UACf;UACA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG;QACf;MACH,CAAC,CAAC;MACF;MACA,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI;IACpB,CAAC,CAAC;IACF,OAAO,IAAI;EACZ;AACH;AAEA,eAAe,SAAS","sourceRoot":"","sourcesContent":["import { each, isArray, isString } from '@antv/util';\nvar regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/ig;\nvar regexDot = /[^\\s\\,]+/ig;\nfunction parsePath(p) {\n    var path = p || [];\n    if (isArray(path)) {\n        return path;\n    }\n    if (isString(path)) {\n        path = path.match(regexTags);\n        each(path, function (item, index) {\n            // @ts-ignore\n            item = item.match(regexDot);\n            if (item[0].length > 1) {\n                var tag = item[0].charAt(0);\n                // @ts-ignore\n                item.splice(1, 0, item[0].substr(1));\n                // @ts-ignore\n                item[0] = tag;\n            }\n            // @ts-ignore\n            each(item, function (sub, i) {\n                if (!isNaN(sub)) {\n                    // @ts-ignore\n                    item[i] = +sub;\n                }\n            });\n            // @ts-ignore\n            path[index] = item;\n        });\n        return path;\n    }\n}\nexport default parsePath;\n//# sourceMappingURL=parse-path.js.map"]},"metadata":{},"sourceType":"module"}