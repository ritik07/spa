{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { registerShape } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getRectPath } from './util';\n/** 描边柱状图 */\nregisterShape('interval', 'hollow-rect', {\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, true, false);\n    var group = container;\n    var backgroundCfg = cfg === null || cfg === void 0 ? void 0 : cfg.background;\n    if (backgroundCfg) {\n      group = container.addGroup();\n      var backgroundStyle = getBackgroundRectStyle(cfg);\n      var backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points), this.coordinate);\n      group.addShape('path', {\n        attrs: __assign(__assign({}, backgroundStyle), {\n          path: backgroundPath\n        }),\n        zIndex: -1,\n        name: BACKGROUND_SHAPE\n      });\n    }\n    var path = this.parsePath(getRectPath(cfg.points));\n    var shape = group.addShape('path', {\n      attrs: __assign(__assign({}, style), {\n        path: path\n      }),\n      name: 'interval'\n    });\n    return backgroundCfg ? group : shape;\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color,\n      isInPolar = markerCfg.isInPolar;\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null\n        }\n      };\n    }\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        stroke: color,\n        fill: null\n      }\n    };\n  }\n});","map":{"version":3,"sources":["../../../../src/geometry/shape/interval/hollow-rect.ts"],"names":[],"mappings":";AAGA,SAAS,aAAa,QAAQ,SAAS;AACvC,SAAS,gBAAgB,QAAQ,aAAa;AAC9C,SAAS,sBAAsB,EAAE,QAAQ,QAAQ,mBAAmB;AACpE,SAAS,qBAAqB,EAAE,WAAW,QAAQ,QAAQ;AAE3D;AACA,aAAa,CAAC,UAAU,EAAE,aAAa,EAAE;EACvC,IAAI,EAAA,UAAC,GAAc,EAAE,SAAiB,EAAA;IACpC,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC;IACxC,IAAI,KAAK,GAAG,SAAS;IACrB,IAAM,aAAa,GAAG,GAAG,KAAA,IAAA,IAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,UAAU;IACrC,IAAI,aAAa,EAAE;MACjB,KAAK,GAAG,SAAS,CAAC,QAAQ,EAAE;MAC5B,IAAM,eAAe,GAAG,sBAAsB,CAAC,GAAG,CAAC;MACnD,IAAM,cAAc,GAAG,qBAAqB,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAY,EAAE,IAAI,CAAC,UAAU,CAAC;MAC3G,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;QACrB,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,eAAe,CAAA,EAAA;UAClB,IAAI,EAAE;QAAc,CAAA,CACrB;QACD,MAAM,EAAE,CAAC,CAAC;QACV,IAAI,EAAE;OACP,CAAC;IACH;IAED,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,MAAiB,CAAC,CAAC;IAC/D,IAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;MACnC,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,KAAK,CAAA,EAAA;QACR,IAAI,EAAA;MAAA,CAAA,CACL;MACD,IAAI,EAAE;KACP,CAAC;IAEF,OAAO,aAAa,GAAG,KAAK,GAAG,KAAK;EACtC,CAAC;EACD,SAAS,EAAA,UAAC,SAAyB,EAAA;IACzB,IAAA,KAAK,GAAgB,SAAS,CAAA,KAAzB;MAAE,SAAS,GAAK,SAAS,CAAA,SAAd;IACxB,IAAI,SAAS,EAAE;MACb,OAAO;QACL,MAAM,EAAE,QAAQ;QAChB,KAAK,EAAE;UACL,CAAC,EAAE,GAAG;UACN,MAAM,EAAE,KAAK;UACb,IAAI,EAAE;QACP;OACF;IACF;IAED,OAAO;MACL,MAAM,EAAE,QAAQ;MAChB,KAAK,EAAE;QACL,CAAC,EAAE,CAAC;QACJ,MAAM,EAAE,KAAK;QACb,IAAI,EAAE;MACP;KACF;EACH;CACD,CAAC","sourcesContent":["import { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getRectPath } from './util';\n\n/** 描边柱状图 */\nregisterShape('interval', 'hollow-rect', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, true, false);\n    let group = container;\n    const backgroundCfg = cfg?.background;\n    if (backgroundCfg) {\n      group = container.addGroup();\n      const backgroundStyle = getBackgroundRectStyle(cfg);\n      const backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points) as Point[], this.coordinate);\n      group.addShape('path', {\n        attrs: {\n          ...backgroundStyle,\n          path: backgroundPath,\n        },\n        zIndex: -1,\n        name: BACKGROUND_SHAPE,\n      });\n    }\n\n    const path = this.parsePath(getRectPath(cfg.points as Point[]));\n    const shape = group.addShape('path', {\n      attrs: {\n        ...style,\n        path,\n      },\n      name: 'interval',\n    });\n\n    return backgroundCfg ? group : shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color, isInPolar } = markerCfg;\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null,\n        },\n      };\n    }\n\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        stroke: color,\n        fill: null,\n      },\n    };\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}