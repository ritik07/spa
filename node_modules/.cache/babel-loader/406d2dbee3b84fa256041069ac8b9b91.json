{"ast":null,"code":"import { ext } from '@antv/matrix-util';\n/**\n * @ignore\n * 沿着 x 方向放大的动画\n * @param shape\n * @param animateCfg\n * @param shapeModel\n */\nexport function scaleInX(shape, animateCfg, cfg) {\n  var box = shape.getBBox();\n  var mappingData = shape.get('origin').mappingData;\n  var points = mappingData.points;\n  // x 数值如果为负值，那么应该从右往左生长\n  var x = points[0].y - points[1].y > 0 ? box.maxX : box.minX;\n  var y = (box.minY + box.maxY) / 2;\n  shape.applyToMatrix([x, y, 1]);\n  var matrix = ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 0.01, 1], ['t', x, y]]);\n  shape.setMatrix(matrix);\n  shape.animate({\n    matrix: ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 100, 1], ['t', x, y]])\n  }, animateCfg);\n}\n/**\n * @ignore\n * 沿着 y 方向放大的动画\n * @param shape\n * @param animateCfg\n * @param shapeModel\n */\nexport function scaleInY(shape, animateCfg, cfg) {\n  var box = shape.getBBox();\n  var mappingData = shape.get('origin').mappingData;\n  var x = (box.minX + box.maxX) / 2;\n  var points = mappingData.points;\n  // 数值如果为负值，那么应该从上往下生长，通过 shape 的关键点进行判断\n  var y = points[0].y - points[1].y <= 0 ? box.maxY : box.minY;\n  shape.applyToMatrix([x, y, 1]);\n  var matrix = ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 1, 0.01], ['t', x, y]]);\n  shape.setMatrix(matrix);\n  shape.animate({\n    matrix: ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 1, 100], ['t', x, y]])\n  }, animateCfg);\n}","map":{"version":3,"sources":["../../../src/animate/animation/scale-in.ts"],"names":[],"mappings":"AAAA,SAAS,GAAG,QAAQ,mBAAmB;AAKvC;;;;;;AAMG;AACH,OAAM,SAAU,QAAQ,CAAC,KAAsB,EAAE,UAAuB,EAAE,GAAoB,EAAA;EAC5F,IAAM,GAAG,GAAG,KAAK,CAAC,OAAO,EAAE;EACnB,IAAA,WAAW,GAAK,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA,WAAxB;EACnB,IAAM,MAAM,GAAG,WAAW,CAAC,MAAiB;EAC5C;EACA,IAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI;EAC7D,IAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC;EAEnC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAE9B,IAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,CAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACb,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,EACd,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ,CAAC;EACF,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC;EAEvB,KAAK,CAAC,OAAO,CACX;IACE,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,CACvC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACb,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,EACb,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ;GACF,EACD,UAAU,CACX;AACH;AAEA;;;;;;AAMG;AACH,OAAM,SAAU,QAAQ,CAAC,KAAsB,EAAE,UAAuB,EAAE,GAAoB,EAAA;EAC5F,IAAM,GAAG,GAAG,KAAK,CAAC,OAAO,EAAE;EACnB,IAAA,WAAW,GAAK,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA,WAAxB;EACnB,IAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC;EACnC,IAAM,MAAM,GAAG,WAAW,CAAC,MAAiB;EAC5C;EACA,IAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI;EAE9D,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9B,IAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,CAC9C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACb,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,EACd,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ,CAAC;EACF,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC;EAEvB,KAAK,CAAC,OAAO,CACX;IACE,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,CACvC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACb,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EACb,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ;GACF,EACD,UAAU,CACX;AACH","sourcesContent":["import { ext } from '@antv/matrix-util';\nimport { IGroup, IShape } from '../../dependents';\nimport { GAnimateCfg, Point } from '../../interface';\nimport { AnimateExtraCfg } from '../interface';\n\n/**\n * @ignore\n * 沿着 x 方向放大的动画\n * @param shape\n * @param animateCfg\n * @param shapeModel\n */\nexport function scaleInX(shape: IShape | IGroup, animateCfg: GAnimateCfg, cfg: AnimateExtraCfg) {\n  const box = shape.getBBox();\n  const { mappingData } = shape.get('origin');\n  const points = mappingData.points as Point[];\n  // x 数值如果为负值，那么应该从右往左生长\n  const x = points[0].y - points[1].y > 0 ? box.maxX : box.minX;\n  const y = (box.minY + box.maxY) / 2;\n\n  shape.applyToMatrix([x, y, 1]);\n\n  const matrix = ext.transform(shape.getMatrix(), [\n    ['t', -x, -y],\n    ['s', 0.01, 1],\n    ['t', x, y],\n  ]);\n  shape.setMatrix(matrix);\n\n  shape.animate(\n    {\n      matrix: ext.transform(shape.getMatrix(), [\n        ['t', -x, -y],\n        ['s', 100, 1],\n        ['t', x, y],\n      ]),\n    },\n    animateCfg\n  );\n}\n\n/**\n * @ignore\n * 沿着 y 方向放大的动画\n * @param shape\n * @param animateCfg\n * @param shapeModel\n */\nexport function scaleInY(shape: IShape | IGroup, animateCfg: GAnimateCfg, cfg: AnimateExtraCfg) {\n  const box = shape.getBBox();\n  const { mappingData } = shape.get('origin');\n  const x = (box.minX + box.maxX) / 2;\n  const points = mappingData.points as Point[];\n  // 数值如果为负值，那么应该从上往下生长，通过 shape 的关键点进行判断\n  const y = points[0].y - points[1].y <= 0 ? box.maxY : box.minY;\n\n  shape.applyToMatrix([x, y, 1]);\n  const matrix = ext.transform(shape.getMatrix(), [\n    ['t', -x, -y],\n    ['s', 1, 0.01],\n    ['t', x, y],\n  ]);\n  shape.setMatrix(matrix);\n\n  shape.animate(\n    {\n      matrix: ext.transform(shape.getMatrix(), [\n        ['t', -x, -y],\n        ['s', 1, 100],\n        ['t', x, y],\n      ]),\n    },\n    animateCfg\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}