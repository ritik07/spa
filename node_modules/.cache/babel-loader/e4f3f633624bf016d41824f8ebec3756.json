{"ast":null,"code":"import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\nimport polyline from './polyline';\nfunction getAllPoints(points) {\n  var tmp = points.slice(0);\n  if (points.length) {\n    tmp.push(points[0]);\n  }\n  return tmp;\n}\nexport default {\n  /**\n   * 计算多边形的包围盒\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 包围盒\n   */\n  box: function (points) {\n    return polyline.box(points);\n  },\n  /**\n   * 计算多边形的长度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 多边形边的长度\n   */\n  length: function (points) {\n    return lengthOfSegment(getAllPoints(points));\n  },\n  /**\n   * 根据比例获取多边形的点\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多边形的长度上的比例\n   * @return {object} 根据比例值计算出来的点\n   */\n  pointAt: function (points, t) {\n    return pointAtSegments(getAllPoints(points), t);\n  },\n  /**\n   * 指定点到多边形的距离\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} x 指定点的 x\n   * @param {number} y 指定点的 y\n   * @return {number} 点到多边形的距离\n   */\n  pointDistance: function (points, x, y) {\n    return distanceAtSegment(getAllPoints(points), x, y);\n  },\n  /**\n   * 根据比例获取多边形的切线角度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多边形的长度上的比例\n   * @return {object} 根据比例值计算出来的角度\n   */\n  tangentAngle: function (points, t) {\n    return angleAtSegments(getAllPoints(points), t);\n  }\n};","map":{"version":3,"sources":["../src/polygon.ts"],"names":[],"mappings":"AAAA,SAAS,eAAe,EAAE,eAAe,EAAE,iBAAiB,EAAE,eAAe,QAAQ,YAAY;AACjG,OAAO,QAAQ,MAAM,YAAY;AAGjC,SAAS,YAAY,CAAC,MAAoB,EAAA;EACxC,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;EAC3B,IAAI,MAAM,CAAC,MAAM,EAAE;IACjB,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EACpB;EACD,OAAO,GAAG;AACZ;AAEA,eAAe;EACb;;;;AAIG;EACH,GAAG,EAAH,UAAI,MAAoB,EAAA;IACtB,OAAO,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;EAC7B,CAAC;EACD;;;;AAIG;EACH,MAAM,EAAN,UAAO,MAAoB,EAAA;IACzB,OAAO,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;EAC9C,CAAC;EACD;;;;;AAKG;EACH,OAAO,EAAP,UAAQ,MAAoB,EAAE,CAAS,EAAA;IACrC,OAAO,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;EACjD,CAAC;EACD;;;;;;AAMG;EACH,aAAa,EAAb,UAAc,MAAoB,EAAE,CAAS,EAAE,CAAS,EAAA;IACtD,OAAO,iBAAiB,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACtD,CAAC;EACD;;;;;AAKG;EACH,YAAY,EAAZ,UAAa,MAAoB,EAAE,CAAS,EAAA;IAC1C,OAAO,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;EACjD;CACD","sourceRoot":"","sourcesContent":["import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\nimport polyline from './polyline';\nfunction getAllPoints(points) {\n    var tmp = points.slice(0);\n    if (points.length) {\n        tmp.push(points[0]);\n    }\n    return tmp;\n}\nexport default {\n    /**\n     * 计算多边形的包围盒\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @return {object} 包围盒\n     */\n    box: function (points) {\n        return polyline.box(points);\n    },\n    /**\n     * 计算多边形的长度\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @return {object} 多边形边的长度\n     */\n    length: function (points) {\n        return lengthOfSegment(getAllPoints(points));\n    },\n    /**\n     * 根据比例获取多边形的点\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} t 在多边形的长度上的比例\n     * @return {object} 根据比例值计算出来的点\n     */\n    pointAt: function (points, t) {\n        return pointAtSegments(getAllPoints(points), t);\n    },\n    /**\n     * 指定点到多边形的距离\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} x 指定点的 x\n     * @param {number} y 指定点的 y\n     * @return {number} 点到多边形的距离\n     */\n    pointDistance: function (points, x, y) {\n        return distanceAtSegment(getAllPoints(points), x, y);\n    },\n    /**\n     * 根据比例获取多边形的切线角度\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} t 在多边形的长度上的比例\n     * @return {object} 根据比例值计算出来的角度\n     */\n    tangentAngle: function (points, t) {\n        return angleAtSegments(getAllPoints(points), t);\n    },\n};\n//# sourceMappingURL=polygon.js.map"]},"metadata":{},"sourceType":"module"}