{"ast":null,"code":"import { __assign, __extends, __read } from \"tslib\";\nimport { deepMix, get, isObject, size, clamp, isNil, noop, throttle, isEmpty, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { Slider as SliderComponent } from '../../dependents';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween } from '../../util/helper';\nimport { Controller } from './base';\n/**\n * @ignore\n * slider Controller\n */\nvar Slider = /** @class */function (_super) {\n  __extends(Slider, _super);\n  function Slider(view) {\n    var _this = _super.call(this, view) || this;\n    _this.onChangeFn = noop;\n    /**\n     * 清除测量\n     */\n    _this.resetMeasure = function () {\n      _this.clear();\n    };\n    /**\n     * 滑块滑动的时候出发\n     * @param v\n     */\n    _this.onValueChange = function (v) {\n      var _a = __read(v, 2),\n        min = _a[0],\n        max = _a[1];\n      _this.start = min;\n      _this.end = max;\n      _this.changeViewData(min, max);\n    };\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    _this.onChangeFn = throttle(_this.onValueChange, 20, {\n      leading: true\n    });\n    _this.width = 0;\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, _this.resetMeasure);\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, _this.resetMeasure);\n    return _this;\n  }\n  Object.defineProperty(Slider.prototype, \"name\", {\n    get: function () {\n      return 'slider';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Slider.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  };\n  /**\n   * 初始化\n   */\n  Slider.prototype.init = function () {};\n  /**\n   * 渲染\n   */\n  Slider.prototype.render = function () {\n    this.option = this.view.getOptions().slider;\n    var _a = this.getSliderCfg(),\n      start = _a.start,\n      end = _a.end;\n    if (isNil(this.start)) {\n      this.start = start;\n      this.end = end;\n    }\n    var viewData = this.view.getOptions().data;\n    if (this.option && !isEmpty(viewData)) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider();\n        // 监听事件，绑定交互\n        this.slider.component.on('sliderchange', this.onChangeFn);\n      }\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {\n        // do nothing\n      }\n    }\n  };\n  /**\n   * 布局\n   */\n  Slider.prototype.layout = function () {\n    var _this = this;\n    if (this.option && !this.width) {\n      this.measureSlider();\n      setTimeout(function () {\n        // 初始状态下的 view 数据过滤\n        if (!_this.view.destroyed) {\n          _this.changeViewData(_this.start, _this.end);\n        }\n      }, 0);\n    }\n    if (this.slider) {\n      var width = this.view.coordinateBBox.width;\n      // 获取组件的 layout bbox\n      var padding = this.slider.component.get('padding');\n      var _a = __read(padding, 4),\n        paddingTop = _a[0],\n        paddingRight = _a[1],\n        paddingBottom = _a[2],\n        paddingLeft = _a[3];\n      var bboxObject = this.slider.component.getLayoutBBox();\n      var bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(padding);\n      var _b = this.getMinMaxText(this.start, this.end),\n        minText = _b.minText,\n        maxText = _b.maxText;\n      var _c = __read(directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM), 2),\n        x1 = _c[0],\n        y1 = _c[1];\n      var _d = __read(directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM), 2),\n        x2 = _d[0],\n        y2 = _d[1];\n      // 默认放在 bottom\n      this.slider.component.update(__assign(__assign({}, this.getSliderCfg()), {\n        x: x2 + paddingLeft,\n        y: y1 + paddingTop,\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText: minText,\n        maxText: maxText\n      }));\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, DIRECTION.BOTTOM);\n    }\n  };\n  /**\n   * 更新\n   */\n  Slider.prototype.update = function () {\n    // 逻辑和 render 保持一致\n    this.render();\n  };\n  /**\n   * 创建 slider 组件\n   */\n  Slider.prototype.createSlider = function () {\n    var cfg = this.getSliderCfg();\n    // 添加 slider 组件\n    var component = new SliderComponent(__assign({\n      container: this.container\n    }, cfg));\n    component.init();\n    return {\n      component: component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.SLIDER\n    };\n  };\n  /**\n   * 更新配置\n   */\n  Slider.prototype.updateSlider = function () {\n    var cfg = this.getSliderCfg();\n    if (this.width) {\n      var _a = this.getMinMaxText(this.start, this.end),\n        minText = _a.minText,\n        maxText = _a.maxText;\n      cfg = __assign(__assign({}, cfg), {\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText: minText,\n        maxText: maxText\n      });\n    }\n    this.slider.component.update(cfg);\n    return this.slider;\n  };\n  /**\n   * 进行测量操作\n   */\n  Slider.prototype.measureSlider = function () {\n    var width = this.getSliderCfg().width;\n    this.width = width;\n  };\n  /**\n   * 生成 slider 配置\n   */\n  Slider.prototype.getSliderCfg = function () {\n    var cfg = {\n      height: 16,\n      start: 0,\n      end: 1,\n      minText: '',\n      maxText: '',\n      x: 0,\n      y: 0,\n      width: this.view.coordinateBBox.width\n    };\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      var trendCfg = __assign({\n        data: this.getData()\n      }, get(this.option, 'trendCfg', {}));\n      // 因为有样式，所以深层覆盖\n      cfg = deepMix({}, cfg, this.getThemeOptions(), this.option);\n      // trendCfg 因为有数据数组，所以使用浅替换\n      cfg = __assign(__assign({}, cfg), {\n        trendCfg: trendCfg\n      });\n    }\n    cfg.start = clamp(Math.min(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    cfg.end = clamp(Math.max(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    return cfg;\n  };\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n  Slider.prototype.getData = function () {\n    var data = this.view.getOptions().data;\n    var _a = __read(this.view.getYScales(), 1),\n      yScale = _a[0];\n    var groupScales = this.view.getGroupScales();\n    if (groupScales.length) {\n      var _b = groupScales[0],\n        field_1 = _b.field,\n        ticks_1 = _b.ticks;\n      return data.reduce(function (pre, cur) {\n        if (cur[field_1] === ticks_1[0]) {\n          pre.push(cur[yScale.field]);\n        }\n        return pre;\n      }, []);\n    }\n    return data.map(function (datum) {\n      return datum[yScale.field] || 0;\n    });\n  };\n  /**\n   * 获取 slider 的主题配置\n   */\n  Slider.prototype.getThemeOptions = function () {\n    var theme = this.view.getTheme();\n    return get(theme, ['components', 'slider', 'common'], {});\n  };\n  /**\n   * 根据 start/end 和当前数据计算出当前的 minText/maxText\n   * @param min\n   * @param max\n   */\n  Slider.prototype.getMinMaxText = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var isHorizontal = true;\n    var values = valuesOfKey(data, xScale.field);\n    // 如果是 xScale 数值类型，则进行排序\n    if (xScale.isLinear) {\n      values = values.sort();\n    }\n    var xValues = isHorizontal ? values : values.reverse();\n    var dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return {}; // fix: 需要兼容，否则调用方直接取值会报错\n    }\n\n    var xTickCount = size(xValues);\n    var minIndex = Math.round(min * (xTickCount - 1));\n    var maxIndex = Math.round(max * (xTickCount - 1));\n    var minText = get(xValues, [minIndex]);\n    var maxText = get(xValues, [maxIndex]);\n    var formatter = this.getSliderCfg().formatter;\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n    return {\n      minText: minText,\n      maxText: maxText\n    };\n  };\n  /**\n   * 更新 view 过滤数据\n   * @param min\n   * @param max\n   */\n  Slider.prototype.changeViewData = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return;\n    }\n    var isHorizontal = true;\n    var values = valuesOfKey(data, xScale.field);\n    // 如果是 xScale 数值类型，则进行排序\n    var xScaleValues = this.view.getXScale().isLinear ? values.sort(function (a, b) {\n      return Number(a) - Number(b);\n    }) : values;\n    var xValues = isHorizontal ? xScaleValues : xScaleValues.reverse();\n    var xTickCount = size(xValues);\n    var minIndex = Math.round(min * (xTickCount - 1));\n    var maxIndex = Math.round(max * (xTickCount - 1));\n    // 增加 x 轴的过滤器\n    this.view.filter(xScale.field, function (value, datum) {\n      var idx = xValues.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n    this.view.render(true);\n  };\n  /**\n   * 覆写父类方法\n   */\n  Slider.prototype.getComponents = function () {\n    return this.slider ? [this.slider] : [];\n  };\n  /**\n   * 覆盖父类\n   */\n  Slider.prototype.clear = function () {\n    if (this.slider) {\n      this.slider.component.destroy();\n      this.slider = undefined;\n    }\n    this.width = 0;\n    this.start = undefined;\n    this.end = undefined;\n  };\n  return Slider;\n}(Controller);\nexport default Slider;","map":{"version":3,"sources":["../../../src/chart/controller/slider.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, get, isObject, size, clamp, isNil, noop, throttle, isEmpty, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { IGroup, Slider as SliderComponent } from '../../dependents';\nimport { ComponentOption, Datum, Padding } from '../../interface';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween } from '../../util/helper';\nimport { Writeable } from '../../util/types';\nimport View from '../view';\nimport { Controller } from './base';\nimport { SliderOption, SliderCfg } from '../../interface';\n\n/**\n * @ignore\n * slider Controller\n */\nexport default class Slider extends Controller<SliderOption> {\n  private slider: ComponentOption;\n  private container: IGroup;\n\n  private width: number;\n  private start: number;\n  private end: number;\n\n  private onChangeFn: (evt: {}) => void = noop;\n\n  constructor(view: View) {\n    super(view);\n\n    this.container = this.view.getLayer(LAYER.FORE).addGroup();\n    this.onChangeFn = throttle(this.onValueChange, 20, {\n      leading: true,\n    }) as (evt: {}) => void;\n\n    this.width = 0;\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  }\n\n  get name(): string {\n    return 'slider';\n  }\n\n  public destroy() {\n    super.destroy();\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {}\n\n  /**\n   * 渲染\n   */\n  public render() {\n    this.option = this.view.getOptions().slider;\n    const { start, end } = this.getSliderCfg();\n    if (isNil(this.start)) {\n      this.start = start;\n      this.end = end;\n    }\n\n    const { data: viewData } = this.view.getOptions();\n    if (this.option && !isEmpty(viewData)) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider();\n        // 监听事件，绑定交互\n        this.slider.component.on('sliderchange', this.onChangeFn);\n      }\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {\n        // do nothing\n      }\n    }\n  }\n\n  /**\n   * 布局\n   */\n  public layout() {\n    if (this.option && !this.width) {\n      this.measureSlider();\n      setTimeout(() => {\n        // 初始状态下的 view 数据过滤\n        if (!this.view.destroyed) {\n          this.changeViewData(this.start, this.end);\n        }\n      }, 0);\n    }\n    if (this.slider) {\n      const width = this.view.coordinateBBox.width;\n      // 获取组件的 layout bbox\n      const padding: Padding = this.slider.component.get('padding') as Padding;\n      const [paddingTop, paddingRight, paddingBottom, paddingLeft] = padding;\n      const bboxObject = this.slider.component.getLayoutBBox();\n      const bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(\n        padding\n      );\n      const { minText, maxText } = this.getMinMaxText(this.start, this.end);\n\n      const [x1, y1] = directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM);\n      const [x2, y2] = directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM);\n\n      // 默认放在 bottom\n      this.slider.component.update({\n        ...this.getSliderCfg(),\n        x: x2 + paddingLeft,\n        y: y1 + paddingTop,\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText,\n        maxText,\n      });\n\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, DIRECTION.BOTTOM);\n    }\n  }\n\n  /**\n   * 更新\n   */\n  public update() {\n    // 逻辑和 render 保持一致\n    this.render();\n  }\n\n  /**\n   * 创建 slider 组件\n   */\n  private createSlider(): ComponentOption {\n    const cfg: any = this.getSliderCfg();\n    // 添加 slider 组件\n    const component = new SliderComponent({\n      container: this.container,\n      ...cfg,\n    });\n\n    component.init();\n\n    return {\n      component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.SLIDER,\n    };\n  }\n\n  /**\n   * 更新配置\n   */\n  private updateSlider() {\n    let cfg = this.getSliderCfg();\n    if (this.width) {\n      const { minText, maxText } = this.getMinMaxText(this.start, this.end);\n      cfg = { ...cfg, width: this.width, start: this.start, end: this.end, minText, maxText };\n    }\n\n    this.slider.component.update(cfg);\n\n    return this.slider;\n  }\n\n  /**\n   * 进行测量操作\n   */\n  private measureSlider() {\n    const { width } = this.getSliderCfg();\n\n    this.width = width;\n  }\n\n  /**\n   * 清除测量\n   */\n  private resetMeasure = () => {\n    this.clear();\n  };\n\n  /**\n   * 生成 slider 配置\n   */\n  private getSliderCfg() {\n    let cfg: Writeable<SliderCfg> & { x: number; y: number; width: number; minText: string; maxText: string } = {\n      height: 16,\n      start: 0,\n      end: 1,\n      minText: '',\n      maxText: '',\n      x: 0,\n      y: 0,\n      width: this.view.coordinateBBox.width,\n    };\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      const trendCfg = {\n        data: this.getData(),\n        ...get(this.option, 'trendCfg', {}),\n      };\n\n      // 因为有样式，所以深层覆盖\n      cfg = deepMix({}, cfg, this.getThemeOptions(), this.option);\n\n      // trendCfg 因为有数据数组，所以使用浅替换\n      cfg = { ...cfg, trendCfg };\n    }\n\n    cfg.start = clamp(Math.min(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    cfg.end = clamp(Math.max(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n\n    return cfg;\n  }\n\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n  private getData(): number[] {\n    const data = this.view.getOptions().data;\n    const [yScale] = this.view.getYScales();\n    const groupScales = this.view.getGroupScales();\n    if (groupScales.length) {\n      const { field, ticks } = groupScales[0];\n      return data.reduce((pre, cur) => {\n        if (cur[field] === ticks[0]) {\n          pre.push(cur[yScale.field] as number);\n        }\n        return pre;\n      }, []) as number[];\n    }\n\n    return data.map((datum) => datum[yScale.field] || 0);\n  }\n\n  /**\n   * 获取 slider 的主题配置\n   */\n  private getThemeOptions() {\n    const theme = this.view.getTheme();\n    return get(theme, ['components', 'slider', 'common'], {});\n  }\n\n  /**\n   * 滑块滑动的时候出发\n   * @param v\n   */\n  private onValueChange = (v: any) => {\n    const [min, max] = v;\n\n    this.start = min;\n    this.end = max;\n\n    this.changeViewData(min, max);\n  };\n\n  /**\n   * 根据 start/end 和当前数据计算出当前的 minText/maxText\n   * @param min\n   * @param max\n   */\n  private getMinMaxText(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const isHorizontal = true;\n    let values = valuesOfKey(data, xScale.field);\n\n    // 如果是 xScale 数值类型，则进行排序\n    if (xScale.isLinear) {\n      values = values.sort();\n    }\n\n    const xValues = isHorizontal ? values : values.reverse();\n    const dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return {}; // fix: 需要兼容，否则调用方直接取值会报错\n    }\n\n    const xTickCount = size(xValues);\n\n    const minIndex = Math.round(min * (xTickCount - 1));\n    const maxIndex = Math.round(max * (xTickCount - 1));\n\n    let minText = get(xValues, [minIndex]);\n    let maxText = get(xValues, [maxIndex]);\n\n    const formatter = this.getSliderCfg().formatter as SliderCfg['formatter'];\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n\n    return {\n      minText,\n      maxText,\n    };\n  }\n\n  /**\n   * 更新 view 过滤数据\n   * @param min\n   * @param max\n   */\n  private changeViewData(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return;\n    }\n    const isHorizontal = true;\n    const values = valuesOfKey(data, xScale.field);\n\n    // 如果是 xScale 数值类型，则进行排序\n    const xScaleValues = this.view.getXScale().isLinear ? values.sort((a, b) => Number(a) - Number(b)) : values;\n\n    const xValues = isHorizontal ? xScaleValues : xScaleValues.reverse();\n    const xTickCount = size(xValues);\n\n    const minIndex = Math.round(min * (xTickCount - 1));\n    const maxIndex = Math.round(max * (xTickCount - 1));\n\n    // 增加 x 轴的过滤器\n    this.view.filter(xScale.field, (value: any, datum: Datum) => {\n      const idx: number = xValues.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n    this.view.render(true);\n  }\n\n  /**\n   * 覆写父类方法\n   */\n  public getComponents() {\n    return this.slider ? [this.slider] : [];\n  }\n\n  /**\n   * 覆盖父类\n   */\n  public clear() {\n    if (this.slider) {\n      this.slider.component.destroy();\n      this.slider = undefined;\n    }\n    this.width = 0;\n    this.start = undefined;\n    this.end = undefined;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}