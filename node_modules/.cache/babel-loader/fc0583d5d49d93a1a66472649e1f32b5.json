{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getDelegationObject, getElements, getElementValue, getScaleByField, isList, isSlider, isMask, getMaskedElements } from '../util';\n/**\n * 元素过滤的 Action，控制元素的显示隐藏\n * @ignore\n */\nvar ElementFilter = /** @class */function (_super) {\n  __extends(ElementFilter, _super);\n  function ElementFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 过滤\n   */\n  ElementFilter.prototype.filter = function () {\n    var delegateObject = getDelegationObject(this.context);\n    var view = this.context.view;\n    var elements = getElements(view);\n    if (isMask(this.context)) {\n      var maskElements_1 = getMaskedElements(this.context, 10);\n      if (maskElements_1) {\n        each(elements, function (el) {\n          if (maskElements_1.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    } else if (delegateObject) {\n      var component = delegateObject.component;\n      var field_1 = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field_1) {\n          var unCheckedItems = component.getItemsByState('unchecked');\n          var scale_1 = getScaleByField(view, field_1);\n          var names_1 = unCheckedItems.map(function (item) {\n            return item.name;\n          });\n          // 直接控制显示、隐藏\n          each(elements, function (el) {\n            var value = getElementValue(el, field_1);\n            var text = scale_1.getText(value);\n            if (names_1.indexOf(text) >= 0) {\n              el.hide();\n            } else {\n              el.show();\n            }\n          });\n        }\n      } else if (isSlider(delegateObject)) {\n        var range = component.getValue();\n        var _a = __read(range, 2),\n          min_1 = _a[0],\n          max_1 = _a[1];\n        each(elements, function (el) {\n          var value = getElementValue(el, field_1);\n          if (value >= min_1 && value <= max_1) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    }\n  };\n  /**\n   * 清除过滤\n   */\n  ElementFilter.prototype.clear = function () {\n    var elements = getElements(this.context.view);\n    each(elements, function (el) {\n      el.show();\n    });\n  };\n  /**\n   * 恢复发生的过滤，保持同 data-filter 命名的一致\n   */\n  ElementFilter.prototype.reset = function () {\n    this.clear();\n  };\n  return ElementFilter;\n}(Action);\nexport default ElementFilter;","map":{"version":3,"sources":["../../../../src/interaction/action/element/filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport Action from '../base';\nimport {\n  getDelegationObject,\n  getElements,\n  getElementValue,\n  getScaleByField,\n  isList,\n  isSlider,\n  isMask,\n  getMaskedElements,\n} from '../util';\n/**\n * 元素过滤的 Action，控制元素的显示隐藏\n * @ignore\n */\nclass ElementFilter extends Action {\n  /**\n   * 过滤\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    const view = this.context.view;\n    const elements = getElements(view);\n    if (isMask(this.context)) {\n      const maskElements = getMaskedElements(this.context, 10);\n      if (maskElements) {\n        each(elements, (el) => {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    } else if (delegateObject) {\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names = unCheckedItems.map((item) => item.name);\n          // 直接控制显示、隐藏\n          each(elements, (el) => {\n            const value = getElementValue(el, field);\n            const text = scale.getText(value);\n            if (names.indexOf(text) >= 0) {\n              el.hide();\n            } else {\n              el.show();\n            }\n          });\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        each(elements, (el) => {\n          const value = getElementValue(el, field);\n          if (value >= min && value <= max) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * 清除过滤\n   */\n  public clear() {\n    const elements = getElements(this.context.view);\n    each(elements, (el) => {\n      el.show();\n    });\n  }\n\n  /**\n   * 恢复发生的过滤，保持同 data-filter 命名的一致\n   */\n  public reset() {\n    this.clear();\n  }\n}\n\nexport default ElementFilter;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}