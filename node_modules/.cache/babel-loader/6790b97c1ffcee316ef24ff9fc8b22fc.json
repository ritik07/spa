{"ast":null,"code":"import { each, pick } from '@antv/util';\nimport { getCoordinateBBox } from '../../../util/coordinate';\nimport { getEllipsisText } from '../../../util/text';\nimport { translate } from '../../../util/transform';\n/**\n * @ignore\n * 将 label 限制在 Plot 范围内，将超出 Plot 范围的 label 可选择进行隐藏或者移动位置\n * @param labels\n * @param cfg\n */\nexport function limitInPlot(items, labels, shapes, region, cfg) {\n  if (labels.length <= 0) {\n    return;\n  }\n  var direction = (cfg === null || cfg === void 0 ? void 0 : cfg.direction) || ['top', 'right', 'bottom', 'left'];\n  var action = (cfg === null || cfg === void 0 ? void 0 : cfg.action) || 'translate';\n  var margin = (cfg === null || cfg === void 0 ? void 0 : cfg.margin) || 0;\n  var coordinate = labels[0].get('coordinate');\n  if (!coordinate) {\n    return;\n  }\n  var _a = getCoordinateBBox(coordinate, margin),\n    regionMinX = _a.minX,\n    regionMinY = _a.minY,\n    regionMaxX = _a.maxX,\n    regionMaxY = _a.maxY;\n  each(labels, function (label) {\n    var _a = label.getCanvasBBox(),\n      minX = _a.minX,\n      minY = _a.minY,\n      maxX = _a.maxX,\n      maxY = _a.maxY,\n      x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height;\n    var finalX = x;\n    var finalY = y;\n    if (direction.indexOf('left') >= 0 && (minX < regionMinX || maxX < regionMinX)) {\n      // 超出左侧\n      finalX = regionMinX;\n    }\n    if (direction.indexOf('top') >= 0 && (minY < regionMinY || maxY < regionMinY)) {\n      // 超出顶部\n      finalY = regionMinY;\n    }\n    if (direction.indexOf('right') >= 0) {\n      if (minX > regionMaxX) {\n        // 整体超出右侧\n        finalX = regionMaxX - width;\n      } else if (maxX > regionMaxX) {\n        // 超出右侧\n        finalX = finalX - (maxX - regionMaxX);\n      }\n    }\n    if (direction.indexOf('bottom') >= 0) {\n      if (minY > regionMaxY) {\n        // 整体超出底部\n        finalY = regionMaxY - height;\n      } else if (maxY > regionMaxY) {\n        // 超出底部\n        finalY = finalY - (maxY - regionMaxY);\n      }\n    }\n    if (finalX !== x || finalY !== y) {\n      var translateX_1 = finalX - x;\n      if (action === 'translate') {\n        translate(label, translateX_1, finalY - y);\n      } else if (action === 'ellipsis') {\n        var textShapes = label.findAll(function (shape) {\n          return shape.get('type') === 'text';\n        });\n        textShapes.forEach(function (textShape) {\n          var style = pick(textShape.attr(), ['fontSize', 'fontFamily', 'fontWeight', 'fontStyle', 'fontVariant']);\n          var textBox = textShape.getCanvasBBox();\n          var text = getEllipsisText(textShape.attr('text'), textBox.width - Math.abs(translateX_1), style);\n          textShape.attr('text', text);\n        });\n      } else {\n        label.hide();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["../../../../src/geometry/label/layout/limit-in-plot.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, pick } from '@antv/util';\nimport { BBox, IGroup, IShape } from '../../../dependents';\nimport { getCoordinateBBox } from '../../../util/coordinate';\nimport { getEllipsisText } from '../../../util/text';\nimport { translate } from '../../../util/transform';\nimport { LabelItem } from '../interface';\n\n/** limitInPlot layout 的可选配置 */\nexport interface LimitInPlotLayoutCfg {\n  /** 需要限制哪些方向上不能超过 Plot 范围，默认四个方向上都限制 */\n  direction?: ('top' | 'right' | 'bottom' | 'left')[];\n  /** 可以允许的 margin */\n  margin?: number;\n  /** 超过限制后的动作，默认 translate 移动位置; ellipsis 对 text 进行省略展示 */\n  action?: 'hide' | 'translate' | 'ellipsis';\n}\n\n/**\n * @ignore\n * 将 label 限制在 Plot 范围内，将超出 Plot 范围的 label 可选择进行隐藏或者移动位置\n * @param labels\n * @param cfg\n */\nexport function limitInPlot(\n  items: LabelItem[],\n  labels: IGroup[],\n  shapes: IShape[] | IGroup[],\n  region: BBox,\n  cfg?: LimitInPlotLayoutCfg\n) {\n  if (labels.length <= 0) {\n    return;\n  }\n  const direction = cfg?.direction || ['top', 'right', 'bottom', 'left'];\n  const action = cfg?.action || 'translate';\n  const margin = cfg?.margin || 0;\n  const coordinate = labels[0].get('coordinate');\n  if (!coordinate) {\n    return;\n  }\n  const {\n    minX: regionMinX,\n    minY: regionMinY,\n    maxX: regionMaxX,\n    maxY: regionMaxY,\n  } = getCoordinateBBox(coordinate, margin);\n\n  each(labels, (label: IGroup) => {\n    const { minX, minY, maxX, maxY, x, y, width, height } = label.getCanvasBBox();\n\n    let finalX = x;\n    let finalY = y;\n    if (direction.indexOf('left') >= 0 && (minX < regionMinX || maxX < regionMinX)) {\n      // 超出左侧\n      finalX = regionMinX;\n    }\n    if (direction.indexOf('top') >= 0 && (minY < regionMinY || maxY < regionMinY)) {\n      // 超出顶部\n      finalY = regionMinY;\n    }\n\n    if (direction.indexOf('right') >= 0) {\n      if (minX > regionMaxX) {\n        // 整体超出右侧\n        finalX = regionMaxX - width;\n      } else if (maxX > regionMaxX) {\n        // 超出右侧\n        finalX = finalX - (maxX - regionMaxX);\n      }\n    }\n\n    if (direction.indexOf('bottom') >= 0) {\n      if (minY > regionMaxY) {\n        // 整体超出底部\n        finalY = regionMaxY - height;\n      } else if (maxY > regionMaxY) {\n        // 超出底部\n        finalY = finalY - (maxY - regionMaxY);\n      }\n    }\n\n    if (finalX !== x || finalY !== y) {\n      const translateX = finalX - x;\n      if (action === 'translate') {\n        translate(label, translateX, finalY - y);\n      } else if (action === 'ellipsis') {\n        const textShapes = label.findAll((shape) => shape.get('type') === 'text');\n        textShapes.forEach((textShape) => {\n          const style = pick(textShape.attr(), ['fontSize', 'fontFamily', 'fontWeight', 'fontStyle', 'fontVariant']);\n          const textBox = textShape.getCanvasBBox();\n          const text = getEllipsisText(textShape.attr('text'), textBox.width - Math.abs(translateX), style);\n          textShape.attr('text', text);\n        });\n      } else {\n        label.hide();\n      }\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}