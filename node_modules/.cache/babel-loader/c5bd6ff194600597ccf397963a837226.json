{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { max, min } from '@antv/util';\nimport Element from './element';\nimport { isFunction, isObject, each, removeFromArray, upperFirst, isAllowCapture } from '../util/util';\nvar SHAPE_MAP = {};\nvar INDEX = '_INDEX';\n/**\n * 设置 canvas\n * @param {IElement} element 元素\n * @param {ICanvas}  canvas  画布\n */\nfunction setCanvas(element, canvas) {\n  element.set('canvas', canvas);\n  if (element.isGroup()) {\n    var children = element.get('children');\n    if (children.length) {\n      children.forEach(function (child) {\n        setCanvas(child, canvas);\n      });\n    }\n  }\n}\n/**\n * 设置 timeline\n * @param {IElement} element  元素\n * @param {Timeline} timeline 时间轴\n */\nfunction setTimeline(element, timeline) {\n  element.set('timeline', timeline);\n  if (element.isGroup()) {\n    var children = element.get('children');\n    if (children.length) {\n      children.forEach(function (child) {\n        setTimeline(child, timeline);\n      });\n    }\n  }\n}\nfunction contains(container, element) {\n  var children = container.getChildren();\n  return children.indexOf(element) >= 0;\n}\nfunction removeChild(container, element, destroy) {\n  if (destroy === void 0) {\n    destroy = true;\n  }\n  // 不再调用 element.remove() 方法，会出现循环调用\n  if (destroy) {\n    element.destroy();\n  } else {\n    element.set('parent', null);\n    element.set('canvas', null);\n  }\n  removeFromArray(container.getChildren(), element);\n}\nfunction getComparer(compare) {\n  return function (left, right) {\n    var result = compare(left, right);\n    return result === 0 ? left[INDEX] - right[INDEX] : result;\n  };\n}\nvar Container = /** @class */function (_super) {\n  __extends(Container, _super);\n  function Container() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Container.prototype.isCanvas = function () {\n    return false;\n  };\n  // 根据子节点确定 BBox\n  Container.prototype.getBBox = function () {\n    // 所有的值可能在画布的可视区外\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var minY = Infinity;\n    var maxY = -Infinity;\n    var xArr = [];\n    var yArr = [];\n    // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n    var children = this.getChildren().filter(function (child) {\n      return child.get('visible') && (!child.isGroup() || child.isGroup() && child.getChildren().length > 0);\n    });\n    if (children.length > 0) {\n      each(children, function (child) {\n        var box = child.getBBox();\n        xArr.push(box.minX, box.maxX);\n        yArr.push(box.minY, box.maxY);\n      });\n      minX = min(xArr);\n      maxX = max(xArr);\n      minY = min(yArr);\n      maxY = max(yArr);\n    } else {\n      minX = 0;\n      maxX = 0;\n      minY = 0;\n      maxY = 0;\n    }\n    var box = {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n    return box;\n  };\n  // 获取画布的包围盒\n  Container.prototype.getCanvasBBox = function () {\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var minY = Infinity;\n    var maxY = -Infinity;\n    var xArr = [];\n    var yArr = [];\n    // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n    var children = this.getChildren().filter(function (child) {\n      return child.get('visible') && (!child.isGroup() || child.isGroup() && child.getChildren().length > 0);\n    });\n    if (children.length > 0) {\n      each(children, function (child) {\n        var box = child.getCanvasBBox();\n        xArr.push(box.minX, box.maxX);\n        yArr.push(box.minY, box.maxY);\n      });\n      minX = min(xArr);\n      maxX = max(xArr);\n      minY = min(yArr);\n      maxY = max(yArr);\n    } else {\n      minX = 0;\n      maxX = 0;\n      minY = 0;\n      maxY = 0;\n    }\n    var box = {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n    return box;\n  };\n  Container.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    cfg['children'] = [];\n    return cfg;\n  };\n  Container.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n    if (name === 'matrix') {\n      var totalMatrix = this.getTotalMatrix();\n      this._applyChildrenMarix(totalMatrix);\n    }\n  };\n  // 不但应用到自己身上还要应用于子元素\n  Container.prototype.applyMatrix = function (matrix) {\n    var preTotalMatrix = this.getTotalMatrix();\n    _super.prototype.applyMatrix.call(this, matrix);\n    var totalMatrix = this.getTotalMatrix();\n    // totalMatrix 没有发生变化时，这里仅考虑两者都为 null 时\n    // 不继续向下传递矩阵\n    if (totalMatrix === preTotalMatrix) {\n      return;\n    }\n    this._applyChildrenMarix(totalMatrix);\n  };\n  // 在子元素上设置矩阵\n  Container.prototype._applyChildrenMarix = function (totalMatrix) {\n    var children = this.getChildren();\n    each(children, function (child) {\n      child.applyMatrix(totalMatrix);\n    });\n  };\n  // 兼容老版本的接口\n  Container.prototype.addShape = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var type = args[0];\n    var cfg = args[1];\n    if (isObject(type)) {\n      cfg = type;\n    } else {\n      cfg['type'] = type;\n    }\n    var shapeType = SHAPE_MAP[cfg.type];\n    if (!shapeType) {\n      shapeType = upperFirst(cfg.type);\n      SHAPE_MAP[cfg.type] = shapeType;\n    }\n    var ShapeBase = this.getShapeBase();\n    var shape = new ShapeBase[shapeType](cfg);\n    this.add(shape);\n    return shape;\n  };\n  Container.prototype.addGroup = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var groupClass = args[0],\n      cfg = args[1];\n    var group;\n    if (isFunction(groupClass)) {\n      if (cfg) {\n        group = new groupClass(cfg);\n      } else {\n        group = new groupClass({\n          // canvas,\n          parent: this\n        });\n      }\n    } else {\n      var tmpCfg = groupClass || {};\n      var TmpGroupClass = this.getGroupBase();\n      group = new TmpGroupClass(tmpCfg);\n    }\n    this.add(group);\n    return group;\n  };\n  Container.prototype.getCanvas = function () {\n    var canvas;\n    if (this.isCanvas()) {\n      canvas = this;\n    } else {\n      canvas = this.get('canvas');\n    }\n    return canvas;\n  };\n  Container.prototype.getShape = function (x, y, ev) {\n    // 如果不支持拾取，则直接返回\n    if (!isAllowCapture(this)) {\n      return null;\n    }\n    var children = this.getChildren();\n    var shape;\n    // 如果容器是 group\n    if (!this.isCanvas()) {\n      var v = [x, y, 1];\n      // 将 x, y 转换成对应于 group 的局部坐标\n      v = this.invertFromMatrix(v);\n      if (!this.isClipped(v[0], v[1])) {\n        shape = this._findShape(children, v[0], v[1], ev);\n      }\n    } else {\n      shape = this._findShape(children, x, y, ev);\n    }\n    return shape;\n  };\n  Container.prototype._findShape = function (children, x, y, ev) {\n    var shape = null;\n    for (var i = children.length - 1; i >= 0; i--) {\n      var child = children[i];\n      if (isAllowCapture(child)) {\n        if (child.isGroup()) {\n          shape = child.getShape(x, y, ev);\n        } else if (child.isHit(x, y)) {\n          shape = child;\n        }\n      }\n      if (shape) {\n        break;\n      }\n    }\n    return shape;\n  };\n  Container.prototype.add = function (element) {\n    var canvas = this.getCanvas();\n    var children = this.getChildren();\n    var timeline = this.get('timeline');\n    var preParent = element.getParent();\n    if (preParent) {\n      removeChild(preParent, element, false);\n    }\n    element.set('parent', this);\n    if (canvas) {\n      setCanvas(element, canvas);\n    }\n    if (timeline) {\n      setTimeline(element, timeline);\n    }\n    children.push(element);\n    element.onCanvasChange('add');\n    this._applyElementMatrix(element);\n  };\n  // 将当前容器的矩阵应用到子元素\n  Container.prototype._applyElementMatrix = function (element) {\n    var totalMatrix = this.getTotalMatrix();\n    // 添加图形或者分组时，需要把当前图元的矩阵设置进去\n    if (totalMatrix) {\n      element.applyMatrix(totalMatrix);\n    }\n  };\n  Container.prototype.getChildren = function () {\n    return this.get('children');\n  };\n  Container.prototype.sort = function () {\n    var children = this.getChildren();\n    // 稳定排序\n    each(children, function (child, index) {\n      child[INDEX] = index;\n      return child;\n    });\n    children.sort(getComparer(function (obj1, obj2) {\n      return obj1.get('zIndex') - obj2.get('zIndex');\n    }));\n    this.onCanvasChange('sort');\n  };\n  Container.prototype.clear = function () {\n    this.set('clearing', true);\n    if (this.destroyed) {\n      return;\n    }\n    var children = this.getChildren();\n    for (var i = children.length - 1; i >= 0; i--) {\n      children[i].destroy(); // 销毁子元素\n    }\n\n    this.set('children', []);\n    this.onCanvasChange('clear');\n    this.set('clearing', false);\n  };\n  Container.prototype.destroy = function () {\n    if (this.get('destroyed')) {\n      return;\n    }\n    this.clear();\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 获取第一个子元素\n   * @return {IElement} 第一个元素\n   */\n  Container.prototype.getFirst = function () {\n    return this.getChildByIndex(0);\n  };\n  /**\n   * 获取最后一个子元素\n   * @return {IElement} 元素\n   */\n  Container.prototype.getLast = function () {\n    var children = this.getChildren();\n    return this.getChildByIndex(children.length - 1);\n  };\n  /**\n   * 根据索引获取子元素\n   * @return {IElement} 第一个元素\n   */\n  Container.prototype.getChildByIndex = function (index) {\n    var children = this.getChildren();\n    return children[index];\n  };\n  /**\n   * 子元素的数量\n   * @return {number} 子元素数量\n   */\n  Container.prototype.getCount = function () {\n    var children = this.getChildren();\n    return children.length;\n  };\n  /**\n   * 是否包含对应元素\n   * @param {IElement} element 元素\n   * @return {boolean}\n   */\n  Container.prototype.contain = function (element) {\n    var children = this.getChildren();\n    return children.indexOf(element) > -1;\n  };\n  /**\n   * 移除对应子元素\n   * @param {IElement} element 子元素\n   * @param {boolean} destroy 是否销毁子元素，默认为 true\n   */\n  Container.prototype.removeChild = function (element, destroy) {\n    if (destroy === void 0) {\n      destroy = true;\n    }\n    if (this.contain(element)) {\n      element.remove(destroy);\n    }\n  };\n  /**\n   * 查找所有匹配的元素\n   * @param  {ElementFilterFn}   fn  匹配函数\n   * @return {IElement[]} 元素数组\n   */\n  Container.prototype.findAll = function (fn) {\n    var rst = [];\n    var children = this.getChildren();\n    each(children, function (element) {\n      if (fn(element)) {\n        rst.push(element);\n      }\n      if (element.isGroup()) {\n        rst = rst.concat(element.findAll(fn));\n      }\n    });\n    return rst;\n  };\n  /**\n   * 查找元素，找到第一个返回\n   * @param  {ElementFilterFn} fn    匹配函数\n   * @return {IElement|null} 元素，可以为空\n   */\n  Container.prototype.find = function (fn) {\n    var rst = null;\n    var children = this.getChildren();\n    each(children, function (element) {\n      if (fn(element)) {\n        rst = element;\n      } else if (element.isGroup()) {\n        rst = element.find(fn);\n      }\n      if (rst) {\n        return false;\n      }\n    });\n    return rst;\n  };\n  /**\n   * 根据 ID 查找元素\n   * @param {string} id 元素 id\n   * @return {IElement|null} 元素\n   */\n  Container.prototype.findById = function (id) {\n    return this.find(function (element) {\n      return element.get('id') === id;\n    });\n  };\n  /**\n   * 该方法即将废弃，不建议使用\n   * 根据 className 查找元素\n   * TODO: 该方式定义暂时只给 G6 3.3 以后的版本使用，待 G6 中的 findByClassName 方法移除后，G 也需要同步移除\n   * @param {string} className 元素 className\n   * @return {IElement | null} 元素\n   */\n  Container.prototype.findByClassName = function (className) {\n    return this.find(function (element) {\n      return element.get('className') === className;\n    });\n  };\n  /**\n   * 根据 name 查找元素列表\n   * @param {string}      name 元素名称\n   * @return {IElement[]} 元素\n   */\n  Container.prototype.findAllByName = function (name) {\n    return this.findAll(function (element) {\n      return element.get('name') === name;\n    });\n  };\n  return Container;\n}(Element);\nexport default Container;","map":{"version":3,"sources":["../../src/abstract/container.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { max, min } from '@antv/util';\nimport Element from './element';\nimport { isFunction, isObject, each, removeFromArray, upperFirst, isAllowCapture } from '../util/util';\nvar SHAPE_MAP = {};\nvar INDEX = '_INDEX';\n/**\n * 设置 canvas\n * @param {IElement} element 元素\n * @param {ICanvas}  canvas  画布\n */\nfunction setCanvas(element, canvas) {\n    element.set('canvas', canvas);\n    if (element.isGroup()) {\n        var children = element.get('children');\n        if (children.length) {\n            children.forEach(function (child) {\n                setCanvas(child, canvas);\n            });\n        }\n    }\n}\n/**\n * 设置 timeline\n * @param {IElement} element  元素\n * @param {Timeline} timeline 时间轴\n */\nfunction setTimeline(element, timeline) {\n    element.set('timeline', timeline);\n    if (element.isGroup()) {\n        var children = element.get('children');\n        if (children.length) {\n            children.forEach(function (child) {\n                setTimeline(child, timeline);\n            });\n        }\n    }\n}\nfunction contains(container, element) {\n    var children = container.getChildren();\n    return children.indexOf(element) >= 0;\n}\nfunction removeChild(container, element, destroy) {\n    if (destroy === void 0) { destroy = true; }\n    // 不再调用 element.remove() 方法，会出现循环调用\n    if (destroy) {\n        element.destroy();\n    }\n    else {\n        element.set('parent', null);\n        element.set('canvas', null);\n    }\n    removeFromArray(container.getChildren(), element);\n}\nfunction getComparer(compare) {\n    return function (left, right) {\n        var result = compare(left, right);\n        return result === 0 ? left[INDEX] - right[INDEX] : result;\n    };\n}\nvar Container = /** @class */ (function (_super) {\n    __extends(Container, _super);\n    function Container() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Container.prototype.isCanvas = function () {\n        return false;\n    };\n    // 根据子节点确定 BBox\n    Container.prototype.getBBox = function () {\n        // 所有的值可能在画布的可视区外\n        var minX = Infinity;\n        var maxX = -Infinity;\n        var minY = Infinity;\n        var maxY = -Infinity;\n        var xArr = [];\n        var yArr = [];\n        // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n        var children = this.getChildren().filter(function (child) {\n            return child.get('visible') && (!child.isGroup() || (child.isGroup() && child.getChildren().length > 0));\n        });\n        if (children.length > 0) {\n            each(children, function (child) {\n                var box = child.getBBox();\n                xArr.push(box.minX, box.maxX);\n                yArr.push(box.minY, box.maxY);\n            });\n            minX = min(xArr);\n            maxX = max(xArr);\n            minY = min(yArr);\n            maxY = max(yArr);\n        }\n        else {\n            minX = 0;\n            maxX = 0;\n            minY = 0;\n            maxY = 0;\n        }\n        var box = {\n            x: minX,\n            y: minY,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n        return box;\n    };\n    // 获取画布的包围盒\n    Container.prototype.getCanvasBBox = function () {\n        var minX = Infinity;\n        var maxX = -Infinity;\n        var minY = Infinity;\n        var maxY = -Infinity;\n        var xArr = [];\n        var yArr = [];\n        // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n        var children = this.getChildren().filter(function (child) {\n            return child.get('visible') && (!child.isGroup() || (child.isGroup() && child.getChildren().length > 0));\n        });\n        if (children.length > 0) {\n            each(children, function (child) {\n                var box = child.getCanvasBBox();\n                xArr.push(box.minX, box.maxX);\n                yArr.push(box.minY, box.maxY);\n            });\n            minX = min(xArr);\n            maxX = max(xArr);\n            minY = min(yArr);\n            maxY = max(yArr);\n        }\n        else {\n            minX = 0;\n            maxX = 0;\n            minY = 0;\n            maxY = 0;\n        }\n        var box = {\n            x: minX,\n            y: minY,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n        return box;\n    };\n    Container.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        cfg['children'] = [];\n        return cfg;\n    };\n    Container.prototype.onAttrChange = function (name, value, originValue) {\n        _super.prototype.onAttrChange.call(this, name, value, originValue);\n        if (name === 'matrix') {\n            var totalMatrix = this.getTotalMatrix();\n            this._applyChildrenMarix(totalMatrix);\n        }\n    };\n    // 不但应用到自己身上还要应用于子元素\n    Container.prototype.applyMatrix = function (matrix) {\n        var preTotalMatrix = this.getTotalMatrix();\n        _super.prototype.applyMatrix.call(this, matrix);\n        var totalMatrix = this.getTotalMatrix();\n        // totalMatrix 没有发生变化时，这里仅考虑两者都为 null 时\n        // 不继续向下传递矩阵\n        if (totalMatrix === preTotalMatrix) {\n            return;\n        }\n        this._applyChildrenMarix(totalMatrix);\n    };\n    // 在子元素上设置矩阵\n    Container.prototype._applyChildrenMarix = function (totalMatrix) {\n        var children = this.getChildren();\n        each(children, function (child) {\n            child.applyMatrix(totalMatrix);\n        });\n    };\n    // 兼容老版本的接口\n    Container.prototype.addShape = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var type = args[0];\n        var cfg = args[1];\n        if (isObject(type)) {\n            cfg = type;\n        }\n        else {\n            cfg['type'] = type;\n        }\n        var shapeType = SHAPE_MAP[cfg.type];\n        if (!shapeType) {\n            shapeType = upperFirst(cfg.type);\n            SHAPE_MAP[cfg.type] = shapeType;\n        }\n        var ShapeBase = this.getShapeBase();\n        var shape = new ShapeBase[shapeType](cfg);\n        this.add(shape);\n        return shape;\n    };\n    Container.prototype.addGroup = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var groupClass = args[0], cfg = args[1];\n        var group;\n        if (isFunction(groupClass)) {\n            if (cfg) {\n                group = new groupClass(cfg);\n            }\n            else {\n                group = new groupClass({\n                    // canvas,\n                    parent: this,\n                });\n            }\n        }\n        else {\n            var tmpCfg = groupClass || {};\n            var TmpGroupClass = this.getGroupBase();\n            group = new TmpGroupClass(tmpCfg);\n        }\n        this.add(group);\n        return group;\n    };\n    Container.prototype.getCanvas = function () {\n        var canvas;\n        if (this.isCanvas()) {\n            canvas = this;\n        }\n        else {\n            canvas = this.get('canvas');\n        }\n        return canvas;\n    };\n    Container.prototype.getShape = function (x, y, ev) {\n        // 如果不支持拾取，则直接返回\n        if (!isAllowCapture(this)) {\n            return null;\n        }\n        var children = this.getChildren();\n        var shape;\n        // 如果容器是 group\n        if (!this.isCanvas()) {\n            var v = [x, y, 1];\n            // 将 x, y 转换成对应于 group 的局部坐标\n            v = this.invertFromMatrix(v);\n            if (!this.isClipped(v[0], v[1])) {\n                shape = this._findShape(children, v[0], v[1], ev);\n            }\n        }\n        else {\n            shape = this._findShape(children, x, y, ev);\n        }\n        return shape;\n    };\n    Container.prototype._findShape = function (children, x, y, ev) {\n        var shape = null;\n        for (var i = children.length - 1; i >= 0; i--) {\n            var child = children[i];\n            if (isAllowCapture(child)) {\n                if (child.isGroup()) {\n                    shape = child.getShape(x, y, ev);\n                }\n                else if (child.isHit(x, y)) {\n                    shape = child;\n                }\n            }\n            if (shape) {\n                break;\n            }\n        }\n        return shape;\n    };\n    Container.prototype.add = function (element) {\n        var canvas = this.getCanvas();\n        var children = this.getChildren();\n        var timeline = this.get('timeline');\n        var preParent = element.getParent();\n        if (preParent) {\n            removeChild(preParent, element, false);\n        }\n        element.set('parent', this);\n        if (canvas) {\n            setCanvas(element, canvas);\n        }\n        if (timeline) {\n            setTimeline(element, timeline);\n        }\n        children.push(element);\n        element.onCanvasChange('add');\n        this._applyElementMatrix(element);\n    };\n    // 将当前容器的矩阵应用到子元素\n    Container.prototype._applyElementMatrix = function (element) {\n        var totalMatrix = this.getTotalMatrix();\n        // 添加图形或者分组时，需要把当前图元的矩阵设置进去\n        if (totalMatrix) {\n            element.applyMatrix(totalMatrix);\n        }\n    };\n    Container.prototype.getChildren = function () {\n        return this.get('children');\n    };\n    Container.prototype.sort = function () {\n        var children = this.getChildren();\n        // 稳定排序\n        each(children, function (child, index) {\n            child[INDEX] = index;\n            return child;\n        });\n        children.sort(getComparer(function (obj1, obj2) {\n            return obj1.get('zIndex') - obj2.get('zIndex');\n        }));\n        this.onCanvasChange('sort');\n    };\n    Container.prototype.clear = function () {\n        this.set('clearing', true);\n        if (this.destroyed) {\n            return;\n        }\n        var children = this.getChildren();\n        for (var i = children.length - 1; i >= 0; i--) {\n            children[i].destroy(); // 销毁子元素\n        }\n        this.set('children', []);\n        this.onCanvasChange('clear');\n        this.set('clearing', false);\n    };\n    Container.prototype.destroy = function () {\n        if (this.get('destroyed')) {\n            return;\n        }\n        this.clear();\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * 获取第一个子元素\n     * @return {IElement} 第一个元素\n     */\n    Container.prototype.getFirst = function () {\n        return this.getChildByIndex(0);\n    };\n    /**\n     * 获取最后一个子元素\n     * @return {IElement} 元素\n     */\n    Container.prototype.getLast = function () {\n        var children = this.getChildren();\n        return this.getChildByIndex(children.length - 1);\n    };\n    /**\n     * 根据索引获取子元素\n     * @return {IElement} 第一个元素\n     */\n    Container.prototype.getChildByIndex = function (index) {\n        var children = this.getChildren();\n        return children[index];\n    };\n    /**\n     * 子元素的数量\n     * @return {number} 子元素数量\n     */\n    Container.prototype.getCount = function () {\n        var children = this.getChildren();\n        return children.length;\n    };\n    /**\n     * 是否包含对应元素\n     * @param {IElement} element 元素\n     * @return {boolean}\n     */\n    Container.prototype.contain = function (element) {\n        var children = this.getChildren();\n        return children.indexOf(element) > -1;\n    };\n    /**\n     * 移除对应子元素\n     * @param {IElement} element 子元素\n     * @param {boolean} destroy 是否销毁子元素，默认为 true\n     */\n    Container.prototype.removeChild = function (element, destroy) {\n        if (destroy === void 0) { destroy = true; }\n        if (this.contain(element)) {\n            element.remove(destroy);\n        }\n    };\n    /**\n     * 查找所有匹配的元素\n     * @param  {ElementFilterFn}   fn  匹配函数\n     * @return {IElement[]} 元素数组\n     */\n    Container.prototype.findAll = function (fn) {\n        var rst = [];\n        var children = this.getChildren();\n        each(children, function (element) {\n            if (fn(element)) {\n                rst.push(element);\n            }\n            if (element.isGroup()) {\n                rst = rst.concat(element.findAll(fn));\n            }\n        });\n        return rst;\n    };\n    /**\n     * 查找元素，找到第一个返回\n     * @param  {ElementFilterFn} fn    匹配函数\n     * @return {IElement|null} 元素，可以为空\n     */\n    Container.prototype.find = function (fn) {\n        var rst = null;\n        var children = this.getChildren();\n        each(children, function (element) {\n            if (fn(element)) {\n                rst = element;\n            }\n            else if (element.isGroup()) {\n                rst = element.find(fn);\n            }\n            if (rst) {\n                return false;\n            }\n        });\n        return rst;\n    };\n    /**\n     * 根据 ID 查找元素\n     * @param {string} id 元素 id\n     * @return {IElement|null} 元素\n     */\n    Container.prototype.findById = function (id) {\n        return this.find(function (element) {\n            return element.get('id') === id;\n        });\n    };\n    /**\n     * 该方法即将废弃，不建议使用\n     * 根据 className 查找元素\n     * TODO: 该方式定义暂时只给 G6 3.3 以后的版本使用，待 G6 中的 findByClassName 方法移除后，G 也需要同步移除\n     * @param {string} className 元素 className\n     * @return {IElement | null} 元素\n     */\n    Container.prototype.findByClassName = function (className) {\n        return this.find(function (element) {\n            return element.get('className') === className;\n        });\n    };\n    /**\n     * 根据 name 查找元素列表\n     * @param {string}      name 元素名称\n     * @return {IElement[]} 元素\n     */\n    Container.prototype.findAllByName = function (name) {\n        return this.findAll(function (element) {\n            return element.get('name') === name;\n        });\n    };\n    return Container;\n}(Element));\nexport default Container;\n//# sourceMappingURL=container.js.map"]},"metadata":{},"sourceType":"module"}