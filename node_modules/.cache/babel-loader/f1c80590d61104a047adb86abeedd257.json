{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getAnglePoint, getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 镜像分面\n */\nvar Circle = /** @class */function (_super) {\n  __extends(Circle, _super);\n  function Circle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Circle.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'circle',\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n  Circle.prototype.render = function () {\n    _super.prototype.render.call(this);\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n  /**\n   * 根据总数和当前索引，计算分面的 region\n   * @param count\n   * @param index\n   */\n  Circle.prototype.getRegion = function (count, index) {\n    var r = 1 / 2; // 画布半径\n    // 画布圆心\n    var center = {\n      x: 0.5,\n      y: 0.5\n    };\n    // 每隔分面间隔的弧度\n    var avgAngle = Math.PI * 2 / count;\n    // 当前分面所在的弧度\n    var angle = -1 * Math.PI / 2 + avgAngle * index;\n    // TODO 没看懂\n    var facetR = r / (1 + 1 / Math.sin(avgAngle / 2));\n    // 分面的中心点\n    var middle = getAnglePoint(center, r - facetR, angle);\n    var startAngle = Math.PI * 5 / 4; // 右上角\n    var endAngle = Math.PI * 1 / 4; // 左下角\n    return {\n      start: getAnglePoint(middle, facetR, startAngle),\n      end: getAnglePoint(middle, facetR, endAngle)\n    };\n  };\n  Circle.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n  Circle.prototype.beforeEachView = function (view, facet) {};\n  Circle.prototype.generateFacets = function (data) {\n    var _this = this;\n    var _a = this.cfg,\n      fields = _a.fields,\n      type = _a.type;\n    var _b = __read(fields, 1),\n      field = _b[0];\n    if (!field) {\n      throw new Error('No `fields` specified!');\n    }\n    var values = this.getFieldValues(data, field);\n    var count = values.length;\n    var rst = [];\n    values.forEach(function (value, index) {\n      var conditions = [{\n        field: field,\n        value: value,\n        values: values\n      }];\n      var facetData = filter(data, _this.getFacetDataFilter(conditions));\n      var facet = {\n        type: type,\n        data: facetData,\n        region: _this.getRegion(count, index),\n        columnValue: value,\n        columnField: field,\n        columnIndex: index,\n        columnValuesLength: count,\n        rowValue: null,\n        rowField: null,\n        rowIndex: 0,\n        rowValuesLength: 1\n      };\n      rst.push(facet);\n    });\n    return rst;\n  };\n  Circle.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 不做任何处理\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  Circle.prototype.getYAxisOption = function (y, axes, option, facet) {\n    // 不做任何处理\n    return option;\n  };\n  /**\n   * facet title\n   */\n  Circle.prototype.renderTitle = function () {\n    var _this = this;\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n        view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n  return Circle;\n}(Facet);\nexport default Circle;","map":{"version":3,"sources":["../../src/facet/circle.ts"],"names":[],"mappings":";AAAA,SAAS,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,QAAQ,YAAY;AAIvD,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,aAAa,EAAE,kBAAkB,QAAQ,eAAe;AACjE,SAAS,KAAK,QAAQ,SAAS;AAE/B;;;AAGG;AACH,IAAA,MAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoC,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;EAApC,SAAA,MAAA,GAAA;;EA0HA;EAzHY,MAAA,CAAA,SAAA,CAAA,aAAa,GAAvB,YAAA;IACE,OAAO,OAAO,CAAC,CAAA,CAAE,EAAE,MAAA,CAAA,SAAA,CAAM,aAAa,CAAA,IAAA,CAAA,IAAA,CAAE,EAAE;MACxC,IAAI,EAAE,QAAQ;MACd,SAAS,EAAE,IAAI;MACf,KAAK,EAAE,MAAA,CAAA,SAAA,CAAM,kBAAkB,CAAA,IAAA,CAAA,IAAA;KAChC,CAAC;EACJ,CAAC;EAEM,MAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,MAAA,CAAA,SAAA,CAAM,MAAM,CAAA,IAAA,CAAA,IAAA,CAAE;IAEd,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE;MACtB,IAAI,CAAC,WAAW,EAAE;IACnB;EACH,CAAC;EAED;;;;AAIG;EACO,MAAA,CAAA,SAAA,CAAA,SAAS,GAAnB,UAAoB,KAAa,EAAE,KAAa,EAAA;IAC9C,IAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjB;IACA,IAAM,MAAM,GAAG;MAAE,CAAC,EAAE,GAAG;MAAE,CAAC,EAAE;IAAG,CAAE;IACjC;IACA,IAAM,QAAQ,GAAI,IAAI,CAAC,EAAE,GAAG,CAAC,GAAI,KAAK;IAEtC;IACA,IAAM,KAAK,GAAI,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAI,CAAC,GAAG,QAAQ,GAAG,KAAK;IACnD;IACA,IAAM,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;IACnD;IACA,IAAM,MAAM,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,KAAK,CAAC;IACvD,IAAM,UAAU,GAAI,IAAI,CAAC,EAAE,GAAG,CAAC,GAAI,CAAC,CAAC,CAAC;IACtC,IAAM,QAAQ,GAAI,IAAI,CAAC,EAAE,GAAG,CAAC,GAAI,CAAC,CAAC,CAAC;IAEpC,OAAO;MACL,KAAK,EAAE,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC;MAChD,GAAG,EAAE,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ;KAC5C;EACH,CAAC;EAES,MAAA,CAAA,SAAA,CAAA,aAAa,GAAvB,UAAwB,IAAU,EAAE,KAAiB,EAAA;IACnD,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC;EAC/B,CAAC;EAES,MAAA,CAAA,SAAA,CAAA,cAAc,GAAxB,UAAyB,IAAU,EAAE,KAAiB,EAAA,CAAG,CAAC;EAEhD,MAAA,CAAA,SAAA,CAAA,cAAc,GAAxB,UAAyB,IAAa,EAAA;IAAtC,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,EAAA,GAAmB,IAAI,CAAC,GAAG;MAAzB,MAAM,GAAA,EAAA,CAAA,MAAA;MAAE,IAAI,GAAA,EAAA,CAAA,IAAa;IAC3B,IAAA,EAAA,GAAA,MAAA,CAAU,MAAM,EAAA,CAAA,CAAA;MAAf,KAAK,GAAA,EAAA,CAAA,CAAA,CAAU;IACtB,IAAI,CAAC,KAAK,EAAE;MACV,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC;IAC1C;IAED,IAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC;IAC/C,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM;IAE3B,IAAM,GAAG,GAAG,EAAE;IACd,MAAM,CAAC,OAAO,CAAC,UAAC,KAAU,EAAE,KAAa,EAAA;MACvC,IAAM,UAAU,GAAG,CAAC;QAAE,KAAK,EAAA,KAAA;QAAE,KAAK,EAAA,KAAA;QAAE,MAAM,EAAA;MAAA,CAAE,CAAC;MAC7C,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,EAAE,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;MAEnE,IAAM,KAAK,GAAe;QACxB,IAAI,EAAA,IAAA;QACJ,IAAI,EAAE,SAAS;QACf,MAAM,EAAE,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC;QAEpC,WAAW,EAAE,KAAK;QAClB,WAAW,EAAE,KAAK;QAClB,WAAW,EAAE,KAAK;QAClB,kBAAkB,EAAE,KAAK;QAEzB,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,CAAC;QACX,eAAe,EAAE;OAClB;MACD,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;IACjB,CAAC,CAAC;IACF,OAAO,GAAG;EACZ,CAAC;EAES,MAAA,CAAA,SAAA,CAAA,cAAc,GAAxB,UAAyB,CAAS,EAAE,IAAS,EAAE,MAAe,EAAE,KAAiB,EAAA;IAC/E;IACA,OAAO,MAAM;EACf,CAAC;EAED;;;;;;AAMG;EACO,MAAA,CAAA,SAAA,CAAA,cAAc,GAAxB,UAAyB,CAAS,EAAE,IAAS,EAAE,MAAe,EAAE,KAAiB,EAAA;IAC/E;IACA,OAAO,MAAM;EACf,CAAC;EAED;;AAEG;EACK,MAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,KAAiB,EAAA;MAC1B,IAAA,WAAW,GAAW,KAAK,CAAA,WAAhB;QAAE,IAAI,GAAK,KAAK,CAAA,IAAV;MACzB,IAAM,SAAS,GAAG,GAAG,CAAC,KAAI,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC;MAElD,IAAM,MAAM,GAAG,OAAO,CACpB;QACE,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,CAAqB;QAC3C,OAAO,EAAE,SAAS,GAAG,SAAS,CAAC,WAAW,CAAC,GAAG;OAC/C,EACD,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,EACjC,KAAI,CAAC,GAAG,CAAC,KAAK,CACf;MAED,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;IAChC,CAAC,CAAC;EACJ,CAAC;EACH,OAAA,MAAC;AAAD,CAAC,CA1HmC,KAAK,CAAA","sourcesContent":["import { deepMix, each, filter, get } from '@antv/util';\nimport { AxisCfg, CircleCfg, CircleData, Datum } from '../interface';\n\nimport View from '../chart/view';\nimport { DIRECTION } from '../constant';\nimport { getAnglePoint, getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class Circle extends Facet<CircleCfg, CircleData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'circle',\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  /**\n   * 根据总数和当前索引，计算分面的 region\n   * @param count\n   * @param index\n   */\n  protected getRegion(count: number, index: number) {\n    const r = 1 / 2; // 画布半径\n    // 画布圆心\n    const center = { x: 0.5, y: 0.5 };\n    // 每隔分面间隔的弧度\n    const avgAngle = (Math.PI * 2) / count;\n\n    // 当前分面所在的弧度\n    const angle = (-1 * Math.PI) / 2 + avgAngle * index;\n    // TODO 没看懂\n    const facetR = r / (1 + 1 / Math.sin(avgAngle / 2));\n    // 分面的中心点\n    const middle = getAnglePoint(center, r - facetR, angle);\n    const startAngle = (Math.PI * 5) / 4; // 右上角\n    const endAngle = (Math.PI * 1) / 4; // 左下角\n\n    return {\n      start: getAnglePoint(middle, facetR, startAngle),\n      end: getAnglePoint(middle, facetR, endAngle),\n    };\n  }\n\n  protected afterEachView(view: View, facet: CircleData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: CircleData) {}\n\n  protected generateFacets(data: Datum[]): CircleData[] {\n    const { fields, type } = this.cfg;\n    const [field] = fields;\n    if (!field) {\n      throw new Error('No `fields` specified!');\n    }\n\n    const values = this.getFieldValues(data, field);\n    const count = values.length;\n\n    const rst = [];\n    values.forEach((value: any, index: number) => {\n      const conditions = [{ field, value, values }];\n      const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n      const facet: CircleData = {\n        type,\n        data: facetData,\n        region: this.getRegion(count, index),\n\n        columnValue: value,\n        columnField: field,\n        columnIndex: index,\n        columnValuesLength: count,\n\n        rowValue: null,\n        rowField: null,\n        rowIndex: 0,\n        rowValuesLength: 1,\n      };\n      rst.push(facet);\n    });\n    return rst;\n  }\n\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: CircleData): object {\n    // 不做任何处理\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: CircleData): object {\n    // 不做任何处理\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: CircleData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}