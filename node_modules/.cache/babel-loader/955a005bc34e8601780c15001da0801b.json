{"ast":null,"code":"import { head, indexOf, size, last } from '@antv/util';\nimport { prettyNumber } from './pretty-number';\nexport var DEFAULT_Q = [1, 5, 2, 2.5, 4, 3];\nexport var ALL_Q = [1, 5, 2, 2.5, 4, 3, 1.5, 7, 6, 8, 9];\nvar eps = Number.EPSILON * 100;\nfunction mod(n, m) {\n  return (n % m + m) % m;\n}\nfunction round(n) {\n  return Math.round(n * 1e12) / 1e12;\n}\nfunction simplicity(q, Q, j, lmin, lmax, lstep) {\n  var n = size(Q);\n  var i = indexOf(Q, q);\n  var v = 0;\n  var m = mod(lmin, lstep);\n  if ((m < eps || lstep - m < eps) && lmin <= 0 && lmax >= 0) {\n    v = 1;\n  }\n  return 1 - i / (n - 1) - j + v;\n}\nfunction simplicityMax(q, Q, j) {\n  var n = size(Q);\n  var i = indexOf(Q, q);\n  var v = 1;\n  return 1 - i / (n - 1) - j + v;\n}\nfunction density(k, m, dMin, dMax, lMin, lMax) {\n  var r = (k - 1) / (lMax - lMin);\n  var rt = (m - 1) / (Math.max(lMax, dMax) - Math.min(dMin, lMin));\n  return 2 - Math.max(r / rt, rt / r);\n}\nfunction densityMax(k, m) {\n  if (k >= m) {\n    return 2 - (k - 1) / (m - 1);\n  }\n  return 1;\n}\nfunction coverage(dMin, dMax, lMin, lMax) {\n  var range = dMax - dMin;\n  return 1 - 0.5 * (Math.pow(dMax - lMax, 2) + Math.pow(dMin - lMin, 2)) / Math.pow(0.1 * range, 2);\n}\nfunction coverageMax(dMin, dMax, span) {\n  var range = dMax - dMin;\n  if (span > range) {\n    var half = (span - range) / 2;\n    return 1 - Math.pow(half, 2) / Math.pow(0.1 * range, 2);\n  }\n  return 1;\n}\nfunction legibility() {\n  return 1;\n}\n/**\n * An Extension of Wilkinson's Algorithm for Position Tick Labels on Axes\n * https://www.yuque.com/preview/yuque/0/2019/pdf/185317/1546999150858-45c3b9c2-4e86-4223-bf1a-8a732e8195ed.pdf\n * @param dMin 最小值\n * @param dMax 最大值\n * @param m tick个数\n * @param onlyLoose 是否允许扩展min、max，不绝对强制，例如[3, 97]\n * @param Q nice numbers集合\n * @param w 四个优化组件的权重\n */\nexport default function extended(dMin, dMax, n, onlyLoose, Q, w) {\n  if (n === void 0) {\n    n = 5;\n  }\n  if (onlyLoose === void 0) {\n    onlyLoose = true;\n  }\n  if (Q === void 0) {\n    Q = DEFAULT_Q;\n  }\n  if (w === void 0) {\n    w = [0.25, 0.2, 0.5, 0.05];\n  }\n  // 处理小于 0 和小数的 tickCount\n  var m = n < 0 ? 0 : Math.round(n);\n  // nan 也会导致异常\n  if (Number.isNaN(dMin) || Number.isNaN(dMax) || typeof dMin !== 'number' || typeof dMax !== 'number' || !m) {\n    return {\n      min: 0,\n      max: 0,\n      ticks: []\n    };\n  }\n  // js 极大值极小值问题，差值小于 1e-15 会导致计算出错\n  if (dMax - dMin < 1e-15 || m === 1) {\n    return {\n      min: dMin,\n      max: dMax,\n      ticks: [dMin]\n    };\n  }\n  // js 超大值问题\n  if (dMax - dMin > 1e148) {\n    var count = n || 5;\n    var step_1 = (dMax - dMin) / count;\n    return {\n      min: dMin,\n      max: dMax,\n      ticks: Array(count).fill(null).map(function (_, idx) {\n        return prettyNumber(dMin + step_1 * idx);\n      })\n    };\n  }\n  var best = {\n    score: -2,\n    lmin: 0,\n    lmax: 0,\n    lstep: 0\n  };\n  var j = 1;\n  while (j < Infinity) {\n    for (var i = 0; i < Q.length; i += 1) {\n      var q = Q[i];\n      var sm = simplicityMax(q, Q, j);\n      if (w[0] * sm + w[1] + w[2] + w[3] < best.score) {\n        j = Infinity;\n        break;\n      }\n      var k = 2;\n      while (k < Infinity) {\n        var dm = densityMax(k, m);\n        if (w[0] * sm + w[1] + w[2] * dm + w[3] < best.score) {\n          break;\n        }\n        var delta = (dMax - dMin) / (k + 1) / j / q;\n        var z = Math.ceil(Math.log10(delta));\n        while (z < Infinity) {\n          var step = j * q * Math.pow(10, z);\n          var cm = coverageMax(dMin, dMax, step * (k - 1));\n          if (w[0] * sm + w[1] * cm + w[2] * dm + w[3] < best.score) {\n            break;\n          }\n          var minStart = Math.floor(dMax / step) * j - (k - 1) * j;\n          var maxStart = Math.ceil(dMin / step) * j;\n          if (minStart <= maxStart) {\n            var count = maxStart - minStart;\n            for (var i_1 = 0; i_1 <= count; i_1 += 1) {\n              var start = minStart + i_1;\n              var lMin = start * (step / j);\n              var lMax = lMin + step * (k - 1);\n              var lStep = step;\n              var s = simplicity(q, Q, j, lMin, lMax, lStep);\n              var c = coverage(dMin, dMax, lMin, lMax);\n              var g = density(k, m, dMin, dMax, lMin, lMax);\n              var l = legibility();\n              var score = w[0] * s + w[1] * c + w[2] * g + w[3] * l;\n              if (score > best.score && (!onlyLoose || lMin <= dMin && lMax >= dMax)) {\n                best.lmin = lMin;\n                best.lmax = lMax;\n                best.lstep = lStep;\n                best.score = score;\n              }\n            }\n          }\n          z += 1;\n        }\n        k += 1;\n      }\n    }\n    j += 1;\n  }\n  // 处理精度问题，保证这三个数没有精度问题\n  var lmax = prettyNumber(best.lmax);\n  var lmin = prettyNumber(best.lmin);\n  var lstep = prettyNumber(best.lstep);\n  // 加 round 是为处理 extended(0.94, 1, 5)\n  // 保证生成的 tickCount 没有精度问题\n  var tickCount = Math.floor(round((lmax - lmin) / lstep)) + 1;\n  var ticks = new Array(tickCount);\n  // 少用乘法：防止出现 -1.2 + 1.2 * 3 = 2.3999999999999995 的情况\n  ticks[0] = prettyNumber(lmin);\n  for (var i = 1; i < tickCount; i++) {\n    ticks[i] = prettyNumber(ticks[i - 1] + lstep);\n  }\n  return {\n    min: Math.min(dMin, head(ticks)),\n    max: Math.max(dMax, last(ticks)),\n    ticks: ticks\n  };\n}","map":{"version":3,"sources":["../../src/util/extended.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { head, indexOf, size, last } from '@antv/util';\nimport { prettyNumber } from './pretty-number';\nexport var DEFAULT_Q = [1, 5, 2, 2.5, 4, 3];\nexport var ALL_Q = [1, 5, 2, 2.5, 4, 3, 1.5, 7, 6, 8, 9];\nvar eps = Number.EPSILON * 100;\nfunction mod(n, m) {\n    return ((n % m) + m) % m;\n}\nfunction round(n) {\n    return Math.round(n * 1e12) / 1e12;\n}\nfunction simplicity(q, Q, j, lmin, lmax, lstep) {\n    var n = size(Q);\n    var i = indexOf(Q, q);\n    var v = 0;\n    var m = mod(lmin, lstep);\n    if ((m < eps || lstep - m < eps) && lmin <= 0 && lmax >= 0) {\n        v = 1;\n    }\n    return 1 - i / (n - 1) - j + v;\n}\nfunction simplicityMax(q, Q, j) {\n    var n = size(Q);\n    var i = indexOf(Q, q);\n    var v = 1;\n    return 1 - i / (n - 1) - j + v;\n}\nfunction density(k, m, dMin, dMax, lMin, lMax) {\n    var r = (k - 1) / (lMax - lMin);\n    var rt = (m - 1) / (Math.max(lMax, dMax) - Math.min(dMin, lMin));\n    return 2 - Math.max(r / rt, rt / r);\n}\nfunction densityMax(k, m) {\n    if (k >= m) {\n        return 2 - (k - 1) / (m - 1);\n    }\n    return 1;\n}\nfunction coverage(dMin, dMax, lMin, lMax) {\n    var range = dMax - dMin;\n    return 1 - (0.5 * (Math.pow((dMax - lMax), 2) + Math.pow((dMin - lMin), 2))) / Math.pow((0.1 * range), 2);\n}\nfunction coverageMax(dMin, dMax, span) {\n    var range = dMax - dMin;\n    if (span > range) {\n        var half = (span - range) / 2;\n        return 1 - Math.pow(half, 2) / Math.pow((0.1 * range), 2);\n    }\n    return 1;\n}\nfunction legibility() {\n    return 1;\n}\n/**\n * An Extension of Wilkinson's Algorithm for Position Tick Labels on Axes\n * https://www.yuque.com/preview/yuque/0/2019/pdf/185317/1546999150858-45c3b9c2-4e86-4223-bf1a-8a732e8195ed.pdf\n * @param dMin 最小值\n * @param dMax 最大值\n * @param m tick个数\n * @param onlyLoose 是否允许扩展min、max，不绝对强制，例如[3, 97]\n * @param Q nice numbers集合\n * @param w 四个优化组件的权重\n */\nexport default function extended(dMin, dMax, n, onlyLoose, Q, w) {\n    if (n === void 0) { n = 5; }\n    if (onlyLoose === void 0) { onlyLoose = true; }\n    if (Q === void 0) { Q = DEFAULT_Q; }\n    if (w === void 0) { w = [0.25, 0.2, 0.5, 0.05]; }\n    // 处理小于 0 和小数的 tickCount\n    var m = n < 0 ? 0 : Math.round(n);\n    // nan 也会导致异常\n    if (Number.isNaN(dMin) || Number.isNaN(dMax) || typeof dMin !== 'number' || typeof dMax !== 'number' || !m) {\n        return {\n            min: 0,\n            max: 0,\n            ticks: [],\n        };\n    }\n    // js 极大值极小值问题，差值小于 1e-15 会导致计算出错\n    if (dMax - dMin < 1e-15 || m === 1) {\n        return {\n            min: dMin,\n            max: dMax,\n            ticks: [dMin],\n        };\n    }\n    // js 超大值问题\n    if (dMax - dMin > 1e148) {\n        var count = n || 5;\n        var step_1 = (dMax - dMin) / count;\n        return {\n            min: dMin,\n            max: dMax,\n            ticks: Array(count).fill(null).map(function (_, idx) {\n                return prettyNumber(dMin + step_1 * idx);\n            }),\n        };\n    }\n    var best = {\n        score: -2,\n        lmin: 0,\n        lmax: 0,\n        lstep: 0,\n    };\n    var j = 1;\n    while (j < Infinity) {\n        for (var i = 0; i < Q.length; i += 1) {\n            var q = Q[i];\n            var sm = simplicityMax(q, Q, j);\n            if (w[0] * sm + w[1] + w[2] + w[3] < best.score) {\n                j = Infinity;\n                break;\n            }\n            var k = 2;\n            while (k < Infinity) {\n                var dm = densityMax(k, m);\n                if (w[0] * sm + w[1] + w[2] * dm + w[3] < best.score) {\n                    break;\n                }\n                var delta = (dMax - dMin) / (k + 1) / j / q;\n                var z = Math.ceil(Math.log10(delta));\n                while (z < Infinity) {\n                    var step = j * q * Math.pow(10, z);\n                    var cm = coverageMax(dMin, dMax, step * (k - 1));\n                    if (w[0] * sm + w[1] * cm + w[2] * dm + w[3] < best.score) {\n                        break;\n                    }\n                    var minStart = Math.floor(dMax / step) * j - (k - 1) * j;\n                    var maxStart = Math.ceil(dMin / step) * j;\n                    if (minStart <= maxStart) {\n                        var count = maxStart - minStart;\n                        for (var i_1 = 0; i_1 <= count; i_1 += 1) {\n                            var start = minStart + i_1;\n                            var lMin = start * (step / j);\n                            var lMax = lMin + step * (k - 1);\n                            var lStep = step;\n                            var s = simplicity(q, Q, j, lMin, lMax, lStep);\n                            var c = coverage(dMin, dMax, lMin, lMax);\n                            var g = density(k, m, dMin, dMax, lMin, lMax);\n                            var l = legibility();\n                            var score = w[0] * s + w[1] * c + w[2] * g + w[3] * l;\n                            if (score > best.score && (!onlyLoose || (lMin <= dMin && lMax >= dMax))) {\n                                best.lmin = lMin;\n                                best.lmax = lMax;\n                                best.lstep = lStep;\n                                best.score = score;\n                            }\n                        }\n                    }\n                    z += 1;\n                }\n                k += 1;\n            }\n        }\n        j += 1;\n    }\n    // 处理精度问题，保证这三个数没有精度问题\n    var lmax = prettyNumber(best.lmax);\n    var lmin = prettyNumber(best.lmin);\n    var lstep = prettyNumber(best.lstep);\n    // 加 round 是为处理 extended(0.94, 1, 5)\n    // 保证生成的 tickCount 没有精度问题\n    var tickCount = Math.floor(round((lmax - lmin) / lstep)) + 1;\n    var ticks = new Array(tickCount);\n    // 少用乘法：防止出现 -1.2 + 1.2 * 3 = 2.3999999999999995 的情况\n    ticks[0] = prettyNumber(lmin);\n    for (var i = 1; i < tickCount; i++) {\n        ticks[i] = prettyNumber(ticks[i - 1] + lstep);\n    }\n    return {\n        min: Math.min(dMin, head(ticks)),\n        max: Math.max(dMax, last(ticks)),\n        ticks: ticks,\n    };\n}\n//# sourceMappingURL=extended.js.map"]},"metadata":{},"sourceType":"module"}