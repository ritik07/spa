{"ast":null,"code":"import { deepMix, get, isBoolean } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getName } from './scale';\nimport { vec2 } from '@antv/matrix-util';\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is rect\n * @param direction\n * @returns axis coordinate region\n */\nexport function getLineAxisRelativeRegion(direction) {\n  var start;\n  var end;\n  switch (direction) {\n    case DIRECTION.TOP:\n      start = {\n        x: 0,\n        y: 1\n      };\n      end = {\n        x: 1,\n        y: 1\n      };\n      break;\n    case DIRECTION.RIGHT:\n      start = {\n        x: 1,\n        y: 0\n      };\n      end = {\n        x: 1,\n        y: 1\n      };\n      break;\n    case DIRECTION.BOTTOM:\n      start = {\n        x: 0,\n        y: 0\n      };\n      end = {\n        x: 1,\n        y: 0\n      };\n      break;\n    case DIRECTION.LEFT:\n      start = {\n        x: 0,\n        y: 0\n      };\n      end = {\n        x: 0,\n        y: 1\n      };\n      break;\n    default:\n      start = end = {\n        x: 0,\n        y: 0\n      };\n  }\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is polar\n * @param coordinate\n * @returns axis coordinate region\n */\nexport function getCircleAxisRelativeRegion(coordinate) {\n  var start;\n  var end;\n  if (coordinate.isTransposed) {\n    start = {\n      x: 0,\n      y: 0\n    };\n    end = {\n      x: 1,\n      y: 0\n    };\n  } else {\n    start = {\n      x: 0,\n      y: 0\n    };\n    end = {\n      x: 0,\n      y: 1\n    };\n  }\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\n * @ignore\n * get the axis region from coordinate\n * @param coordinate\n * @param direction\n * @returns the axis region (start point, end point)\n */\nexport function getAxisRegion(coordinate, direction) {\n  var region = {\n    start: {\n      x: 0,\n      y: 0\n    },\n    end: {\n      x: 0,\n      y: 0\n    }\n  };\n  if (coordinate.isRect) {\n    region = getLineAxisRelativeRegion(direction);\n  } else if (coordinate.isPolar) {\n    region = getCircleAxisRelativeRegion(coordinate);\n  }\n  var start = region.start,\n    end = region.end;\n  return {\n    start: coordinate.convert(start),\n    end: coordinate.convert(end)\n  };\n}\n/**\n * @ignore\n * get axis factor\n * @param coordinate\n * @param direction\n * @returns factor\n */\nexport function getAxisFactor(coordinate, direction) {\n  // rect coordinate, by direction\n  if (coordinate.isRect) {\n    return coordinate.isTransposed ? [DIRECTION.RIGHT, DIRECTION.BOTTOM].includes(direction) ? 1 : -1 : [DIRECTION.BOTTOM, DIRECTION.RIGHT].includes(direction) ? -1 : 1;\n  }\n  // polar y axis, by angle\n  if (coordinate.isPolar) {\n    var startAngle = coordinate.x.start;\n    return startAngle < 0 ? -1 : 1;\n  }\n  return 1;\n}\n/**\n * @ignore\n * whether the axis isVertical\n * @param region\n * @returns isVertical\n */\nexport function isVertical(region) {\n  var start = region.start,\n    end = region.end;\n  return start.x === end.x;\n}\n/**\n * @ignore\n * get factor by region (real position)\n * @param region\n * @param center\n * @returns factor\n */\nexport function getAxisFactorByRegion(region, center) {\n  var start = region.start,\n    end = region.end;\n  var isAxisVertical = isVertical(region);\n  // 垂直\n  if (isAxisVertical) {\n    // 左方,从下到上、右方,从上到下\n    if ((start.y - end.y) * (center.x - start.x) > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  } else {\n    // 下方,从左到右、上方,从右到做\n    if ((end.x - start.x) * (start.y - center.y) > 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n/**\n * @ignore\n * get the axis cfg from theme, will mix the common cfg of legend theme\n *\n * @param theme view theme object\n * @param direction axis direction\n * @returns axis theme cfg\n */\nexport function getAxisThemeCfg(theme, direction) {\n  var axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix({}, get(axisTheme, ['common'], {}), deepMix({}, get(axisTheme, [direction], {})));\n}\n/**\n * get the options of axis title，mix the cfg from theme, avoid common themeCfg not work\n * @param theme\n * @param direction\n * @param axisOptions\n * @returns axis title options\n */\nexport function getAxisTitleOptions(theme, direction, axisOptions) {\n  var axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix({}, get(axisTheme, ['common', 'title'], {}), deepMix({}, get(axisTheme, [direction, 'title'], {})), axisOptions);\n}\n/**\n * @ignore\n * get circle axis center and radius\n * @param coordinate\n */\nexport function getCircleAxisCenterRadius(coordinate) {\n  // @ts-ignore\n  var x = coordinate.x,\n    y = coordinate.y,\n    center = coordinate.circleCenter;\n  var isReflectY = y.start > y.end;\n  var start = coordinate.isTransposed ? coordinate.convert({\n    x: isReflectY ? 0 : 1,\n    y: 0\n  }) : coordinate.convert({\n    x: 0,\n    y: isReflectY ? 0 : 1\n  });\n  var startVector = [start.x - center.x, start.y - center.y];\n  var normalVector = [1, 0];\n  var startAngle = start.y > center.y ? vec2.angle(startVector, normalVector) : vec2.angle(startVector, normalVector) * -1;\n  var endAngle = startAngle + (x.end - x.start);\n  var radius = Math.sqrt(Math.pow(start.x - center.x, 2) + Math.pow(start.y - center.y, 2));\n  return {\n    center: center,\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  };\n}\n/**\n * @ignore\n * 从配置中获取单个字段的 axis 配置\n * @param axes\n * @param field\n * @returns the axis option of field\n */\nexport function getAxisOption(axes, field) {\n  if (isBoolean(axes)) {\n    return axes === false ? false : {};\n  }\n  return get(axes, [field]);\n}\n/**\n * @ignore\n * 如果配置了 position，则使用配置\n * @param axisOption\n * @param def\n */\nexport function getAxisDirection(axisOption, def) {\n  return get(axisOption, 'position', def);\n}\n/**\n * 获取 axis 的 title 文本\n * @param scale\n * @param axisOption\n */\nexport function getAxisTitleText(scale, axisOption) {\n  return get(axisOption, ['title', 'text'], getName(scale));\n}","map":{"version":3,"sources":["../../src/util/axis.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, get, isBoolean } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { Coordinate, Scale } from '../dependents';\nimport { AxisCfg, AxisOption, Point, Region } from '../interface';\nimport { getName } from './scale';\nimport { vec2 } from '@antv/matrix-util';\n\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is rect\n * @param direction\n * @returns axis coordinate region\n */\nexport function getLineAxisRelativeRegion(direction: DIRECTION): Region {\n  let start;\n  let end;\n\n  switch (direction) {\n    case DIRECTION.TOP:\n      start = { x: 0, y: 1 };\n      end = { x: 1, y: 1 };\n      break;\n    case DIRECTION.RIGHT:\n      start = { x: 1, y: 0 };\n      end = { x: 1, y: 1 };\n      break;\n    case DIRECTION.BOTTOM:\n      start = { x: 0, y: 0 };\n      end = { x: 1, y: 0 };\n      break;\n    case DIRECTION.LEFT:\n      start = { x: 0, y: 0 };\n      end = { x: 0, y: 1 };\n      break;\n    default:\n      start = end = { x: 0, y: 0 };\n  }\n\n  return { start, end };\n}\n\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is polar\n * @param coordinate\n * @returns axis coordinate region\n */\nexport function getCircleAxisRelativeRegion(coordinate: Coordinate) {\n  let start;\n  let end;\n  if (coordinate.isTransposed) {\n    start = {\n      x: 0,\n      y: 0,\n    };\n    end = {\n      x: 1,\n      y: 0,\n    };\n  } else {\n    start = {\n      x: 0,\n      y: 0,\n    };\n    end = {\n      x: 0,\n      y: 1,\n    };\n  }\n\n  return { start, end };\n}\n\n/**\n * @ignore\n * get the axis region from coordinate\n * @param coordinate\n * @param direction\n * @returns the axis region (start point, end point)\n */\nexport function getAxisRegion(coordinate: Coordinate, direction: DIRECTION): Region {\n  let region = { start: { x: 0, y: 0 }, end: { x: 0, y: 0 } };\n  if (coordinate.isRect) {\n    region = getLineAxisRelativeRegion(direction);\n  } else if (coordinate.isPolar) {\n    region = getCircleAxisRelativeRegion(coordinate);\n  }\n\n  const { start, end } = region;\n  return {\n    start: coordinate.convert(start),\n    end: coordinate.convert(end),\n  };\n}\n\n/**\n * @ignore\n * get axis factor\n * @param coordinate\n * @param direction\n * @returns factor\n */\nexport function getAxisFactor(coordinate: Coordinate, direction: DIRECTION): number {\n  // rect coordinate, by direction\n  if (coordinate.isRect) {\n    return coordinate.isTransposed\n      ? [DIRECTION.RIGHT, DIRECTION.BOTTOM].includes(direction)\n        ? 1\n        : -1\n      : [DIRECTION.BOTTOM, DIRECTION.RIGHT].includes(direction)\n      ? -1\n      : 1;\n  }\n\n  // polar y axis, by angle\n  if (coordinate.isPolar) {\n    const startAngle = coordinate.x.start;\n    return startAngle < 0 ? -1 : 1;\n  }\n\n  return 1;\n}\n\n/**\n * @ignore\n * whether the axis isVertical\n * @param region\n * @returns isVertical\n */\nexport function isVertical(region: Region): boolean {\n  const { start, end } = region;\n\n  return start.x === end.x;\n}\n\n/**\n * @ignore\n * get factor by region (real position)\n * @param region\n * @param center\n * @returns factor\n */\nexport function getAxisFactorByRegion(region: Region, center: Point): number {\n  const { start, end } = region;\n\n  const isAxisVertical = isVertical(region);\n\n  // 垂直\n  if (isAxisVertical) {\n    // 左方,从下到上、右方,从上到下\n    if ((start.y - end.y) * (center.x - start.x) > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  } else {\n    // 下方,从左到右、上方,从右到做\n    if ((end.x - start.x) * (start.y - center.y) > 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\n/**\n * @ignore\n * get the axis cfg from theme, will mix the common cfg of legend theme\n *\n * @param theme view theme object\n * @param direction axis direction\n * @returns axis theme cfg\n */\nexport function getAxisThemeCfg(theme: object, direction: string): object {\n  const axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix({}, get(axisTheme, ['common'], {}), deepMix({}, get(axisTheme, [direction], {})));\n}\n\n/**\n * get the options of axis title，mix the cfg from theme, avoid common themeCfg not work\n * @param theme\n * @param direction\n * @param axisOptions\n * @returns axis title options\n */\nexport function getAxisTitleOptions(theme: object, direction: string, axisOptions?: object): object {\n  const axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix(\n    {},\n    get(axisTheme, ['common', 'title'], {}),\n    deepMix({}, get(axisTheme, [direction, 'title'], {})),\n    axisOptions\n  );\n}\n\n/**\n * @ignore\n * get circle axis center and radius\n * @param coordinate\n */\nexport function getCircleAxisCenterRadius(coordinate: Coordinate) {\n  // @ts-ignore\n  const { x, y, circleCenter: center } = coordinate;\n  const isReflectY = y.start > y.end;\n  const start = coordinate.isTransposed\n    ? coordinate.convert({\n        x: isReflectY ? 0 : 1,\n        y: 0,\n      })\n    : coordinate.convert({\n        x: 0,\n        y: isReflectY ? 0 : 1,\n      });\n\n  const startVector: [number, number] = [start.x - center.x, start.y - center.y];\n  const normalVector: [number, number] = [1, 0];\n  const startAngle =\n    start.y > center.y ? vec2.angle(startVector, normalVector) : vec2.angle(startVector, normalVector) * -1;\n  const endAngle = startAngle + (x.end - x.start);\n  const radius = Math.sqrt((start.x - center.x) ** 2 + (start.y - center.y) ** 2);\n\n  return {\n    center,\n    radius,\n    startAngle,\n    endAngle,\n  };\n}\n\n/**\n * @ignore\n * 从配置中获取单个字段的 axis 配置\n * @param axes\n * @param field\n * @returns the axis option of field\n */\nexport function getAxisOption(axes: Record<string, AxisOption> | boolean, field: string) {\n  if (isBoolean(axes)) {\n    return axes === false ? false : {};\n  }\n  return get(axes, [field]);\n}\n\n/**\n * @ignore\n * 如果配置了 position，则使用配置\n * @param axisOption\n * @param def\n */\nexport function getAxisDirection(axisOption: AxisOption, def: DIRECTION): DIRECTION {\n  return get(axisOption, 'position', def);\n}\n\n/**\n * 获取 axis 的 title 文本\n * @param scale\n * @param axisOption\n */\nexport function getAxisTitleText(scale: Scale, axisOption: AxisCfg): string {\n  return get(axisOption, ['title', 'text'], getName(scale));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}