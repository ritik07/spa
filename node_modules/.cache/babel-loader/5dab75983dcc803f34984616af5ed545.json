{"ast":null,"code":"import { __assign, __extends, __read, __rest, __values } from \"tslib\";\nimport { contains, deepMix, each, get, isArray, isFunction, isNil, isString, keys, upperFirst, find, includes } from '@antv/util';\nimport { Annotation as AnnotationComponent } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate/';\nimport { COMPONENT_TYPE, DIRECTION, GEOMETRY_LIFE_CIRCLE, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { getAngleByPoint, getDistanceToCenter } from '../../util/coordinate';\nimport { omit } from '../../util/helper';\nimport { getNormalizedValue } from '../../util/annotation';\nimport { Controller } from './base';\n/** 需要在图形绘制完成后才渲染的辅助组件类型列表 */\nvar ANNOTATIONS_AFTER_RENDER = ['regionFilter', 'shape'];\n/**\n * Annotation controller, 主要作用:\n * 1. 创建 Annotation: line、text、arc ...\n * 2. 生命周期: init、layout、render、clear、destroy\n */\nvar Annotation = /** @class */function (_super) {\n  __extends(Annotation, _super);\n  function Annotation(view) {\n    var _this = _super.call(this, view) || this;\n    /* 组件更新的 cache，组件配置 object : 组件 */\n    _this.cache = new Map();\n    _this.foregroundContainer = _this.view.getLayer(LAYER.FORE).addGroup();\n    _this.backgroundContainer = _this.view.getLayer(LAYER.BG).addGroup();\n    _this.option = [];\n    return _this;\n  }\n  Object.defineProperty(Annotation.prototype, \"name\", {\n    get: function () {\n      return 'annotation';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Annotation.prototype.init = function () {};\n  /**\n   * 因为 annotation 需要依赖坐标系信息，所以 render 阶段为空方法，实际的创建逻辑都在 layout 中\n   */\n  Annotation.prototype.layout = function () {\n    this.update();\n  };\n  // 因为 Annotation 不参与布局，但是渲染的位置依赖于坐标系，所以可以将绘制阶段延迟到 layout() 进行\n  Annotation.prototype.render = function () {};\n  /**\n   * 更新\n   */\n  Annotation.prototype.update = function () {\n    var _this = this;\n    // 1. 先处理需要在图形渲染之后的辅助组件 需要在 Geometry 完成之后，拿到图形信息\n    this.onAfterRender(function () {\n      var updated = new Map();\n      // 先看是否有 regionFilter/shape 要更新\n      each(_this.option, function (option) {\n        if (includes(ANNOTATIONS_AFTER_RENDER, option.type)) {\n          var co = _this.updateOrCreate(option);\n          // 存储已经处理过的\n          if (co) {\n            updated.set(_this.getCacheKey(option), co);\n          }\n        }\n      });\n      // 处理完成之后，更新 cache\n      // 处理完成之后，销毁删除的\n      _this.cache = _this.syncCache(updated);\n    });\n    // 2. 处理非 regionFilter\n    var updateCache = new Map();\n    each(this.option, function (option) {\n      if (!includes(ANNOTATIONS_AFTER_RENDER, option.type)) {\n        var co = _this.updateOrCreate(option);\n        // 存储已经处理过的\n        if (co) {\n          updateCache.set(_this.getCacheKey(option), co);\n        }\n      }\n    });\n    this.cache = this.syncCache(updateCache);\n  };\n  /**\n   * 清空\n   * @param includeOption 是否清空 option 配置项\n   */\n  Annotation.prototype.clear = function (includeOption) {\n    if (includeOption === void 0) {\n      includeOption = false;\n    }\n    _super.prototype.clear.call(this);\n    this.clearComponents();\n    this.foregroundContainer.clear();\n    this.backgroundContainer.clear();\n    // clear all option\n    if (includeOption) {\n      this.option = [];\n    }\n  };\n  Annotation.prototype.destroy = function () {\n    this.clear(true);\n    this.foregroundContainer.remove(true);\n    this.backgroundContainer.remove(true);\n  };\n  /**\n   * 复写基类的方法\n   */\n  Annotation.prototype.getComponents = function () {\n    var co = [];\n    this.cache.forEach(function (value) {\n      co.push(value);\n    });\n    return co;\n  };\n  /**\n   * 清除当前的组件\n   */\n  Annotation.prototype.clearComponents = function () {\n    this.getComponents().forEach(function (co) {\n      co.component.destroy();\n    });\n    this.cache.clear();\n  };\n  /**\n   * region filter 比较特殊的渲染时机\n   * @param doWhat\n   */\n  Annotation.prototype.onAfterRender = function (doWhat) {\n    var done = false;\n    if (this.view.getOptions().animate) {\n      this.view.geometries.forEach(function (g) {\n        // 如果 geometry 开启，则监听\n        if (g.animateOption) {\n          g.once(GEOMETRY_LIFE_CIRCLE.AFTER_DRAW_ANIMATE, function () {\n            doWhat();\n          });\n          done = true;\n        }\n      });\n    }\n    if (!done) {\n      this.view.getRootView().once(VIEW_LIFE_CIRCLE.AFTER_RENDER, function () {\n        doWhat();\n      });\n    }\n  };\n  Annotation.prototype.createAnnotation = function (option) {\n    var type = option.type;\n    var Ctor = AnnotationComponent[upperFirst(type)];\n    if (Ctor) {\n      var theme = this.getAnnotationTheme(type);\n      var cfg = this.getAnnotationCfg(type, option, theme);\n      // 不创建\n      if (!cfg) {\n        return null;\n      }\n      var annotation = new Ctor(cfg);\n      return {\n        component: annotation,\n        layer: this.isTop(cfg) ? LAYER.FORE : LAYER.BG,\n        direction: DIRECTION.NONE,\n        type: COMPONENT_TYPE.ANNOTATION,\n        extra: option\n      };\n    }\n  };\n  // APIs for creating annotation component\n  Annotation.prototype.annotation = function (option) {\n    this.option.push(option);\n  };\n  /**\n   * 创建 Arc\n   * @param option\n   * @returns AnnotationController\n   */\n  Annotation.prototype.arc = function (option) {\n    this.annotation(__assign({\n      type: 'arc'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 image\n   * @param option\n   * @returns AnnotationController\n   */\n  Annotation.prototype.image = function (option) {\n    this.annotation(__assign({\n      type: 'image'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 Line\n   * @param option\n   * @returns AnnotationController\n   */\n  Annotation.prototype.line = function (option) {\n    this.annotation(__assign({\n      type: 'line'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 Region\n   * @param option\n   * @returns AnnotationController\n   */\n  Annotation.prototype.region = function (option) {\n    this.annotation(__assign({\n      type: 'region'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 Text\n   * @param option\n   * @returns AnnotationController\n   */\n  Annotation.prototype.text = function (option) {\n    this.annotation(__assign({\n      type: 'text'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 DataMarker\n   * @param option\n   * @returns AnnotationController\n   */\n  Annotation.prototype.dataMarker = function (option) {\n    this.annotation(__assign({\n      type: 'dataMarker'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 DataRegion\n   * @param option\n   * @returns AnnotationController\n   */\n  Annotation.prototype.dataRegion = function (option) {\n    this.annotation(__assign({\n      type: 'dataRegion'\n    }, option));\n  };\n  /**\n   * 创建 RegionFilter\n   * @param option\n   * @returns AnnotationController\n   */\n  Annotation.prototype.regionFilter = function (option) {\n    this.annotation(__assign({\n      type: 'regionFilter'\n    }, option));\n  };\n  /**\n   * 创建 ShapeAnnotation\n   * @param option\n   */\n  Annotation.prototype.shape = function (option) {\n    this.annotation(__assign({\n      type: 'shape'\n    }, option));\n  };\n  /**\n   * 创建 HtmlAnnotation\n   * @param option\n   */\n  Annotation.prototype.html = function (option) {\n    this.annotation(__assign({\n      type: 'html'\n    }, option));\n  };\n  // end API\n  /**\n   * parse the point position to [x, y]\n   * @param p Position\n   * @returns { x, y }\n   */\n  Annotation.prototype.parsePosition = function (p) {\n    var e_1, _a;\n    var xScale = this.view.getXScale();\n    // 转成 object\n    var yScales = this.view.getScalesByDim('y');\n    var position = isFunction(p) ? p.call(null, xScale, yScales) : p;\n    var x = 0;\n    var y = 0;\n    // 入参是 [24, 24] 这类时\n    if (isArray(position)) {\n      var _b = __read(position, 2),\n        xPos = _b[0],\n        yPos = _b[1];\n      // 如果数据格式是 ['50%', '50%'] 的格式\n      // fix: 原始数据中可能会包含 'xxx5%xxx' 这样的数据，需要判断下 https://github.com/antvis/f2/issues/590\n      // @ts-ignore\n      if (isString(xPos) && xPos.indexOf('%') !== -1 && !isNaN(xPos.slice(0, -1))) {\n        return this.parsePercentPosition(position);\n      }\n      x = getNormalizedValue(xPos, xScale);\n      y = getNormalizedValue(yPos, Object.values(yScales)[0]);\n    } else if (!isNil(position)) {\n      try {\n        // 入参是 object 结构，数据点\n        for (var _c = __values(keys(position)), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var key = _d.value;\n          var value = position[key];\n          if (key === xScale.field) {\n            x = getNormalizedValue(value, xScale);\n          }\n          if (yScales[key]) {\n            y = getNormalizedValue(value, yScales[key]);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n    if (isNaN(x) || isNaN(y)) {\n      return null;\n    }\n    return this.view.getCoordinate().convert({\n      x: x,\n      y: y\n    });\n  };\n  /**\n   * parse all the points between start and end\n   * @param start\n   * @param end\n   * @return Point[]\n   */\n  Annotation.prototype.getRegionPoints = function (start, end) {\n    var _this = this;\n    var xScale = this.view.getXScale();\n    var yScales = this.view.getScalesByDim('y');\n    var yScale = Object.values(yScales)[0];\n    var xField = xScale.field;\n    var viewData = this.view.getData();\n    var startXValue = isArray(start) ? start[0] : start[xField];\n    var endXValue = isArray(end) ? end[0] : end[xField];\n    var arr = [];\n    var startIndex;\n    each(viewData, function (item, idx) {\n      if (item[xField] === startXValue) {\n        startIndex = idx;\n      }\n      if (idx >= startIndex) {\n        var point = _this.parsePosition([item[xField], item[yScale.field]]);\n        if (point) {\n          arr.push(point);\n        }\n      }\n      if (item[xField] === endXValue) {\n        return false;\n      }\n    });\n    return arr;\n  };\n  /**\n   * parse percent position\n   * @param position\n   */\n  Annotation.prototype.parsePercentPosition = function (position) {\n    var xPercent = parseFloat(position[0]) / 100;\n    var yPercent = parseFloat(position[1]) / 100;\n    var coordinate = this.view.getCoordinate();\n    var start = coordinate.start,\n      end = coordinate.end;\n    var topLeft = {\n      x: Math.min(start.x, end.x),\n      y: Math.min(start.y, end.y)\n    };\n    var x = coordinate.getWidth() * xPercent + topLeft.x;\n    var y = coordinate.getHeight() * yPercent + topLeft.y;\n    return {\n      x: x,\n      y: y\n    };\n  };\n  /**\n   * get coordinate bbox\n   */\n  Annotation.prototype.getCoordinateBBox = function () {\n    var coordinate = this.view.getCoordinate();\n    var start = coordinate.start,\n      end = coordinate.end;\n    var width = coordinate.getWidth();\n    var height = coordinate.getHeight();\n    var topLeft = {\n      x: Math.min(start.x, end.x),\n      y: Math.min(start.y, end.y)\n    };\n    return {\n      x: topLeft.x,\n      y: topLeft.y,\n      minX: topLeft.x,\n      minY: topLeft.y,\n      maxX: topLeft.x + width,\n      maxY: topLeft.y + height,\n      width: width,\n      height: height\n    };\n  };\n  /**\n   * get annotation component config by different type\n   * @param type\n   * @param option 用户的配置\n   * @param theme\n   */\n  Annotation.prototype.getAnnotationCfg = function (type, option, theme) {\n    var _this = this;\n    var coordinate = this.view.getCoordinate();\n    var canvas = this.view.getCanvas();\n    var o = {};\n    if (isNil(option)) {\n      return null;\n    }\n    var start = option.start,\n      end = option.end,\n      position = option.position;\n    var sp = this.parsePosition(start);\n    var ep = this.parsePosition(end);\n    var textPoint = this.parsePosition(position);\n    if (['arc', 'image', 'line', 'region', 'regionFilter'].includes(type) && (!sp || !ep)) {\n      return null;\n    } else if (['text', 'dataMarker', 'html'].includes(type) && !textPoint) {\n      return null;\n    }\n    if (type === 'arc') {\n      var _a = option,\n        start_1 = _a.start,\n        end_1 = _a.end,\n        rest = __rest(_a, [\"start\", \"end\"]);\n      var startAngle = getAngleByPoint(coordinate, sp);\n      var endAngle = getAngleByPoint(coordinate, ep);\n      if (startAngle > endAngle) {\n        endAngle = Math.PI * 2 + endAngle;\n      }\n      o = __assign(__assign({}, rest), {\n        center: coordinate.getCenter(),\n        radius: getDistanceToCenter(coordinate, sp),\n        startAngle: startAngle,\n        endAngle: endAngle\n      });\n    } else if (type === 'image') {\n      var _b = option,\n        start_2 = _b.start,\n        end_2 = _b.end,\n        rest = __rest(_b, [\"start\", \"end\"]);\n      o = __assign(__assign({}, rest), {\n        start: sp,\n        end: ep,\n        src: option.src\n      });\n    } else if (type === 'line') {\n      var _c = option,\n        start_3 = _c.start,\n        end_3 = _c.end,\n        rest = __rest(_c, [\"start\", \"end\"]);\n      o = __assign(__assign({}, rest), {\n        start: sp,\n        end: ep,\n        text: get(option, 'text', null)\n      });\n    } else if (type === 'region') {\n      var _d = option,\n        start_4 = _d.start,\n        end_4 = _d.end,\n        rest = __rest(_d, [\"start\", \"end\"]);\n      o = __assign(__assign({}, rest), {\n        start: sp,\n        end: ep\n      });\n    } else if (type === 'text') {\n      var filteredData = this.view.getData();\n      var _e = option,\n        position_1 = _e.position,\n        content = _e.content,\n        rest = __rest(_e, [\"position\", \"content\"]);\n      var textContent = content;\n      if (isFunction(content)) {\n        textContent = content(filteredData);\n      }\n      o = __assign(__assign(__assign({}, textPoint), rest), {\n        content: textContent\n      });\n    } else if (type === 'dataMarker') {\n      var _f = option,\n        position_2 = _f.position,\n        point = _f.point,\n        line = _f.line,\n        text = _f.text,\n        autoAdjust = _f.autoAdjust,\n        direction = _f.direction,\n        rest = __rest(_f, [\"position\", \"point\", \"line\", \"text\", \"autoAdjust\", \"direction\"]);\n      o = __assign(__assign(__assign({}, rest), textPoint), {\n        coordinateBBox: this.getCoordinateBBox(),\n        point: point,\n        line: line,\n        text: text,\n        autoAdjust: autoAdjust,\n        direction: direction\n      });\n    } else if (type === 'dataRegion') {\n      var _g = option,\n        start_5 = _g.start,\n        end_5 = _g.end,\n        region = _g.region,\n        text = _g.text,\n        lineLength = _g.lineLength,\n        rest = __rest(_g, [\"start\", \"end\", \"region\", \"text\", \"lineLength\"]);\n      o = __assign(__assign({}, rest), {\n        points: this.getRegionPoints(start_5, end_5),\n        region: region,\n        text: text,\n        lineLength: lineLength\n      });\n    } else if (type === 'regionFilter') {\n      var _h = option,\n        start_6 = _h.start,\n        end_6 = _h.end,\n        apply_1 = _h.apply,\n        color = _h.color,\n        rest = __rest(_h, [\"start\", \"end\", \"apply\", \"color\"]);\n      var geometries = this.view.geometries;\n      var shapes_1 = [];\n      var addShapes_1 = function (item) {\n        if (!item) {\n          return;\n        }\n        if (item.isGroup()) {\n          item.getChildren().forEach(function (child) {\n            return addShapes_1(child);\n          });\n        } else {\n          shapes_1.push(item);\n        }\n      };\n      each(geometries, function (geom) {\n        if (apply_1) {\n          if (contains(apply_1, geom.type)) {\n            each(geom.elements, function (elem) {\n              addShapes_1(elem.shape);\n            });\n          }\n        } else {\n          each(geom.elements, function (elem) {\n            addShapes_1(elem.shape);\n          });\n        }\n      });\n      o = __assign(__assign({}, rest), {\n        color: color,\n        shapes: shapes_1,\n        start: sp,\n        end: ep\n      });\n    } else if (type === 'shape') {\n      var _j = option,\n        render_1 = _j.render,\n        restOptions = __rest(_j, [\"render\"]);\n      var wrappedRender = function (container) {\n        if (isFunction(option.render)) {\n          return render_1(container, _this.view, {\n            parsePosition: _this.parsePosition.bind(_this)\n          });\n        }\n      };\n      o = __assign(__assign({}, restOptions), {\n        render: wrappedRender\n      });\n    } else if (type === 'html') {\n      var _k = option,\n        html_1 = _k.html,\n        position_3 = _k.position,\n        restOptions = __rest(_k, [\"html\", \"position\"]);\n      var wrappedHtml = function (container) {\n        if (isFunction(html_1)) {\n          return html_1(container, _this.view);\n        }\n        return html_1;\n      };\n      o = __assign(__assign(__assign({}, restOptions), textPoint), {\n        // html 组件需要指定 parent\n        parent: canvas.get('el').parentNode,\n        html: wrappedHtml\n      });\n    }\n    // 合并主题，用户配置优先级高于默认主题\n    var cfg = deepMix({}, theme, __assign(__assign({}, o), {\n      top: option.top,\n      style: option.style,\n      offsetX: option.offsetX,\n      offsetY: option.offsetY\n    }));\n    if (type !== 'html') {\n      // html 类型不使用 G container\n      cfg.container = this.getComponentContainer(cfg);\n    }\n    cfg.animate = this.view.getOptions().animate && cfg.animate && get(option, 'animate', cfg.animate); // 如果 view 关闭动画，则不执行\n    cfg.animateOption = deepMix({}, DEFAULT_ANIMATE_CFG, cfg.animateOption, option.animateOption);\n    return cfg;\n  };\n  /**\n   * is annotation render on top\n   * @param option\n   * @return whethe on top\n   */\n  Annotation.prototype.isTop = function (option) {\n    return get(option, 'top', true);\n  };\n  /**\n   * get the container by option.top\n   * default is on top\n   * @param option\n   * @returns the container\n   */\n  Annotation.prototype.getComponentContainer = function (option) {\n    return this.isTop(option) ? this.foregroundContainer : this.backgroundContainer;\n  };\n  Annotation.prototype.getAnnotationTheme = function (type) {\n    return get(this.view.getTheme(), ['components', 'annotation', type], {});\n  };\n  /**\n   * 创建或者更新 annotation\n   * @param option\n   */\n  Annotation.prototype.updateOrCreate = function (option) {\n    // 拿到缓存的内容\n    var co = this.cache.get(this.getCacheKey(option));\n    // 存在则更新，不存在在创建\n    if (co) {\n      var type = option.type;\n      var theme = this.getAnnotationTheme(type);\n      var cfg = this.getAnnotationCfg(type, option, theme);\n      // 忽略掉一些配置\n      if (cfg) {\n        omit(cfg, ['container']);\n      }\n      co.component.update(__assign(__assign({}, cfg || {}), {\n        visible: !!cfg\n      }));\n      // 对于 regionFilter/shape，因为生命周期的原因，需要额外 render\n      if (includes(ANNOTATIONS_AFTER_RENDER, option.type)) {\n        co.component.render();\n      }\n    } else {\n      // 不存在，创建\n      co = this.createAnnotation(option);\n      if (co) {\n        co.component.init();\n        // Note：regionFilter/shape 特殊处理，regionFilter/shape 需要取到 Geometry 中的 Shape，需要在 view render 之后处理\n        // 其他组件使用外层的统一 render 逻辑\n        if (includes(ANNOTATIONS_AFTER_RENDER, option.type)) {\n          co.component.render();\n        }\n      }\n    }\n    return co;\n  };\n  /**\n   * 更新缓存，以及销毁组件\n   * @param updated 更新或者创建的组件\n   */\n  Annotation.prototype.syncCache = function (updated) {\n    var _this = this;\n    var newCache = new Map(this.cache); // clone 一份\n    // 将 update 更新到 cache\n    updated.forEach(function (co, key) {\n      newCache.set(key, co);\n    });\n    // 另外和 options 进行对比，删除\n    newCache.forEach(function (co, key) {\n      // option 中已经找不到，那么就是删除的\n      if (!find(_this.option, function (option) {\n        return key === _this.getCacheKey(option);\n      })) {\n        co.component.destroy();\n        newCache.delete(key);\n      }\n    });\n    return newCache;\n  };\n  /**\n   * 获得缓存组件的 key\n   * @param option\n   */\n  Annotation.prototype.getCacheKey = function (option) {\n    // 如果存在 id，则使用 id string，否则直接使用 option 引用作为 key\n    return option;\n    // 后续扩展 id 用\n    // const id = get(option, 'id');\n    // return id ? id : option;\n  };\n\n  return Annotation;\n}(Controller);\nexport default Annotation;","map":{"version":3,"sources":["../../../src/chart/controller/annotation.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  contains,\n  deepMix,\n  each,\n  get,\n  isArray,\n  isFunction,\n  isNil,\n  isString,\n  keys,\n  upperFirst,\n  find,\n  includes,\n} from '@antv/util';\nimport { Annotation as AnnotationComponent, IElement, IGroup } from '../../dependents';\nimport {\n  AnnotationBaseOption as BaseOption,\n  AnnotationPosition as Position,\n  ArcOption,\n  ComponentOption,\n  ShapeAnnotationOption,\n  Data,\n  DataMarkerOption,\n  DataRegionOption,\n  Datum,\n  HtmlAnnotationOption,\n  ImageOption,\n  LineOption,\n  Point,\n  RegionFilterOption,\n  RegionOption,\n  RegionPositionBaseOption,\n  TextOption,\n} from '../../interface';\n\nimport { DEFAULT_ANIMATE_CFG } from '../../animate/';\nimport { COMPONENT_TYPE, DIRECTION, GEOMETRY_LIFE_CIRCLE, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\n\nimport Geometry from '../../geometry/base';\nimport Element from '../../geometry/element';\nimport { getAngleByPoint, getDistanceToCenter } from '../../util/coordinate';\nimport { omit } from '../../util/helper';\nimport { getNormalizedValue } from '../../util/annotation';\nimport View from '../view';\nimport { Controller } from './base';\nimport { Scale } from '@antv/attr';\n\n/** 需要在图形绘制完成后才渲染的辅助组件类型列表 */\nconst ANNOTATIONS_AFTER_RENDER = ['regionFilter', 'shape'];\n\n/**\n * Annotation controller, 主要作用:\n * 1. 创建 Annotation: line、text、arc ...\n * 2. 生命周期: init、layout、render、clear、destroy\n */\nexport default class Annotation extends Controller<BaseOption[]> {\n  private foregroundContainer: IGroup;\n  private backgroundContainer: IGroup;\n\n  /* 组件更新的 cache，组件配置 object : 组件 */\n  private cache = new Map<BaseOption, ComponentOption>();\n\n  constructor(view: View) {\n    super(view);\n\n    this.foregroundContainer = this.view.getLayer(LAYER.FORE).addGroup();\n    this.backgroundContainer = this.view.getLayer(LAYER.BG).addGroup();\n\n    this.option = [];\n  }\n\n  public get name(): string {\n    return 'annotation';\n  }\n\n  public init() { }\n\n  /**\n   * 因为 annotation 需要依赖坐标系信息，所以 render 阶段为空方法，实际的创建逻辑都在 layout 中\n   */\n  public layout() {\n    this.update();\n  }\n\n  // 因为 Annotation 不参与布局，但是渲染的位置依赖于坐标系，所以可以将绘制阶段延迟到 layout() 进行\n  public render() { }\n\n  /**\n   * 更新\n   */\n  public update() {\n    // 1. 先处理需要在图形渲染之后的辅助组件 需要在 Geometry 完成之后，拿到图形信息\n    this.onAfterRender(() => {\n      const updated = new Map<BaseOption, ComponentOption>();\n      // 先看是否有 regionFilter/shape 要更新\n      each(this.option, (option: BaseOption) => {\n        if (includes(ANNOTATIONS_AFTER_RENDER, option.type)) {\n          const co = this.updateOrCreate(option);\n          // 存储已经处理过的\n          if (co) {\n            updated.set(this.getCacheKey(option), co);\n          }\n        }\n      });\n\n      // 处理完成之后，更新 cache\n      // 处理完成之后，销毁删除的\n      this.cache = this.syncCache(updated);\n    });\n\n    // 2. 处理非 regionFilter\n    const updateCache = new Map<BaseOption, ComponentOption>();\n    each(this.option, (option: BaseOption) => {\n      if (!includes(ANNOTATIONS_AFTER_RENDER, option.type)) {\n        const co = this.updateOrCreate(option);\n        // 存储已经处理过的\n        if (co) {\n          updateCache.set(this.getCacheKey(option), co);\n        }\n      }\n    });\n    this.cache = this.syncCache(updateCache);\n  }\n\n  /**\n   * 清空\n   * @param includeOption 是否清空 option 配置项\n   */\n  public clear(includeOption = false) {\n    super.clear();\n\n    this.clearComponents();\n    this.foregroundContainer.clear();\n    this.backgroundContainer.clear();\n\n    // clear all option\n    if (includeOption) {\n      this.option = [];\n    }\n  }\n\n  public destroy() {\n    this.clear(true);\n\n    this.foregroundContainer.remove(true);\n    this.backgroundContainer.remove(true);\n  }\n\n  /**\n   * 复写基类的方法\n   */\n  public getComponents(): ComponentOption[] {\n    const co = [];\n\n    this.cache.forEach((value: ComponentOption) => {\n      co.push(value);\n    });\n\n    return co;\n  }\n\n  /**\n   * 清除当前的组件\n   */\n  private clearComponents() {\n    this.getComponents().forEach((co) => {\n      co.component.destroy();\n    });\n\n    this.cache.clear();\n  }\n\n  /**\n   * region filter 比较特殊的渲染时机\n   * @param doWhat\n   */\n  private onAfterRender(doWhat: () => void) {\n    let done = false;\n    if (this.view.getOptions().animate) {\n      this.view.geometries.forEach((g: Geometry) => {\n        // 如果 geometry 开启，则监听\n        if (g.animateOption) {\n          g.once(GEOMETRY_LIFE_CIRCLE.AFTER_DRAW_ANIMATE, () => {\n          doWhat();\n          });\n          done = true;\n        }\n      });\n    }\n\n    if (!done) {\n      this.view.getRootView().once(VIEW_LIFE_CIRCLE.AFTER_RENDER, () => {\n        doWhat();\n      });\n    }\n  }\n\n  private createAnnotation(option: BaseOption) {\n    const { type } = option;\n\n    const Ctor = AnnotationComponent[upperFirst(type)];\n    if (Ctor) {\n      const theme = this.getAnnotationTheme(type);\n      const cfg = this.getAnnotationCfg(type, option, theme);\n      // 不创建\n      if (!cfg) {\n        return null;\n      }\n      const annotation = new Ctor(cfg);\n\n      return {\n        component: annotation,\n        layer: this.isTop(cfg) ? LAYER.FORE : LAYER.BG,\n        direction: DIRECTION.NONE,\n        type: COMPONENT_TYPE.ANNOTATION,\n        extra: option,\n      };\n    }\n  }\n\n  // APIs for creating annotation component\n  public annotation(option: any) {\n    this.option.push(option);\n  }\n\n  /**\n   * 创建 Arc\n   * @param option\n   * @returns AnnotationController\n   */\n  public arc(option: ArcOption) {\n    this.annotation({\n      type: 'arc',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 image\n   * @param option\n   * @returns AnnotationController\n   */\n  public image(option: ImageOption) {\n    this.annotation({\n      type: 'image',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 Line\n   * @param option\n   * @returns AnnotationController\n   */\n  public line(option: LineOption) {\n    this.annotation({\n      type: 'line',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 Region\n   * @param option\n   * @returns AnnotationController\n   */\n  public region(option: RegionOption) {\n    this.annotation({\n      type: 'region',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 Text\n   * @param option\n   * @returns AnnotationController\n   */\n  public text(option: TextOption) {\n    this.annotation({\n      type: 'text',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 DataMarker\n   * @param option\n   * @returns AnnotationController\n   */\n  public dataMarker(option: DataMarkerOption) {\n    this.annotation({\n      type: 'dataMarker',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 DataRegion\n   * @param option\n   * @returns AnnotationController\n   */\n  public dataRegion(option: DataRegionOption) {\n    this.annotation({\n      type: 'dataRegion',\n      ...option,\n    });\n  }\n\n  /**\n   * 创建 RegionFilter\n   * @param option\n   * @returns AnnotationController\n   */\n  public regionFilter(option: RegionFilterOption) {\n    this.annotation({\n      type: 'regionFilter',\n      ...option,\n    });\n  }\n\n  /**\n   * 创建 ShapeAnnotation\n   * @param option\n   */\n  public shape(option: ShapeAnnotationOption) {\n    this.annotation({\n      type: 'shape',\n      ...option,\n    });\n  }\n\n  /**\n   * 创建 HtmlAnnotation\n   * @param option\n   */\n  public html(option: HtmlAnnotationOption) {\n    this.annotation({\n      type: 'html',\n      ...option,\n    });\n  }\n  // end API\n\n  /**\n   * parse the point position to [x, y]\n   * @param p Position\n   * @returns { x, y }\n   */\n  private parsePosition(\n    p:\n      | [string | number, string | number]\n      | Datum\n      | ((xScale: Scale, yScale: Scale) => [string | number, string | number] | number | Datum)\n  ): Point {\n    const xScale = this.view.getXScale();\n    // 转成 object\n    const yScales = this.view.getScalesByDim('y');\n\n    const position: Position = isFunction(p) ? p.call(null, xScale, yScales) : p;\n\n    let x = 0;\n    let y = 0;\n\n    // 入参是 [24, 24] 这类时\n    if (isArray(position)) {\n      const [xPos, yPos] = position;\n      // 如果数据格式是 ['50%', '50%'] 的格式\n      // fix: 原始数据中可能会包含 'xxx5%xxx' 这样的数据，需要判断下 https://github.com/antvis/f2/issues/590\n      // @ts-ignore\n      if (isString(xPos) && xPos.indexOf('%') !== -1 && !isNaN(xPos.slice(0, -1))) {\n        return this.parsePercentPosition(position as [string, string]);\n      }\n\n      x = getNormalizedValue(xPos, xScale);\n      y = getNormalizedValue(yPos, Object.values(yScales)[0]);\n    } else if (!isNil(position)) {\n      // 入参是 object 结构，数据点\n      for (const key of keys(position)) {\n        const value = position[key];\n        if (key === xScale.field) {\n          x = getNormalizedValue(value, xScale);\n        }\n        if (yScales[key]) {\n          y = getNormalizedValue(value, yScales[key]);\n        }\n      }\n    }\n\n    if (isNaN(x) || isNaN(y)) {\n      return null;\n    }\n\n    return this.view.getCoordinate().convert({ x, y });\n  }\n\n  /**\n   * parse all the points between start and end\n   * @param start\n   * @param end\n   * @return Point[]\n   */\n  private getRegionPoints(start: Position | Data, end: Position | Data): Point[] {\n    const xScale = this.view.getXScale();\n    const yScales = this.view.getScalesByDim('y');\n    const yScale = Object.values(yScales)[0];\n    const xField = xScale.field;\n    const viewData = this.view.getData();\n    const startXValue = isArray(start) ? start[0] : start[xField];\n    const endXValue = isArray(end) ? end[0] : end[xField];\n    const arr = [];\n\n    let startIndex;\n    each(viewData, (item, idx) => {\n      if (item[xField] === startXValue) {\n        startIndex = idx;\n      }\n      if (idx >= startIndex) {\n        const point = this.parsePosition([item[xField], item[yScale.field]]);\n        if (point) {\n          arr.push(point);\n        }\n      }\n      if (item[xField] === endXValue) {\n        return false;\n      }\n    });\n\n    return arr;\n  }\n\n  /**\n   * parse percent position\n   * @param position\n   */\n  private parsePercentPosition(position: [string, string]): Point {\n    const xPercent = parseFloat(position[0]) / 100;\n    const yPercent = parseFloat(position[1]) / 100;\n    const coordinate = this.view.getCoordinate();\n    const { start, end } = coordinate;\n\n    const topLeft = {\n      x: Math.min(start.x, end.x),\n      y: Math.min(start.y, end.y),\n    };\n    const x = coordinate.getWidth() * xPercent + topLeft.x;\n    const y = coordinate.getHeight() * yPercent + topLeft.y;\n    return { x, y };\n  }\n\n  /**\n   * get coordinate bbox\n   */\n  private getCoordinateBBox() {\n    const coordinate = this.view.getCoordinate();\n    const { start, end } = coordinate;\n\n    const width = coordinate.getWidth();\n    const height = coordinate.getHeight();\n    const topLeft = {\n      x: Math.min(start.x, end.x),\n      y: Math.min(start.y, end.y),\n    };\n\n    return {\n      x: topLeft.x,\n      y: topLeft.y,\n      minX: topLeft.x,\n      minY: topLeft.y,\n      maxX: topLeft.x + width,\n      maxY: topLeft.y + height,\n      width,\n      height,\n    };\n  }\n\n  /**\n   * get annotation component config by different type\n   * @param type\n   * @param option 用户的配置\n   * @param theme\n   */\n  private getAnnotationCfg(type: string, option: any, theme: object): object | null {\n    const coordinate = this.view.getCoordinate();\n    const canvas = this.view.getCanvas();\n    let o = {};\n\n    if (isNil(option)) {\n      return null;\n    }\n    const { start, end, position } = option;\n    const sp = this.parsePosition(start);\n    const ep = this.parsePosition(end);\n    const textPoint = this.parsePosition(position);\n    if (['arc', 'image', 'line', 'region', 'regionFilter'].includes(type) && (!sp || !ep)) {\n      return null;\n    } else if (['text', 'dataMarker', 'html'].includes(type) && !textPoint) {\n      return null;\n    }\n\n    if (type === 'arc') {\n      const { start, end, ...rest } = option as ArcOption;\n      const startAngle = getAngleByPoint(coordinate, sp);\n      let endAngle = getAngleByPoint(coordinate, ep);\n      if (startAngle > endAngle) {\n        endAngle = Math.PI * 2 + endAngle;\n      }\n\n      o = {\n        ...rest,\n        center: coordinate.getCenter(),\n        radius: getDistanceToCenter(coordinate, sp),\n        startAngle,\n        endAngle,\n      };\n    } else if (type === 'image') {\n      const { start, end, ...rest } = option as ImageOption;\n      o = {\n        ...rest,\n        start: sp,\n        end: ep,\n        src: option.src,\n      };\n    } else if (type === 'line') {\n      const { start, end, ...rest } = option as LineOption;\n      o = {\n        ...rest,\n        start: sp,\n        end: ep,\n        text: get(option, 'text', null),\n      };\n    } else if (type === 'region') {\n      const { start, end, ...rest } = option as RegionPositionBaseOption;\n      o = {\n        ...rest,\n        start: sp,\n        end: ep,\n      };\n    } else if (type === 'text') {\n      const filteredData = this.view.getData();\n      const { position, content, ...rest } = option as TextOption;\n      let textContent = content;\n      if (isFunction(content)) {\n        textContent = content(filteredData);\n      }\n      o = {\n        ...textPoint,\n        ...rest,\n        content: textContent,\n      };\n    } else if (type === 'dataMarker') {\n      const { position, point, line, text, autoAdjust, direction, ...rest } = option as DataMarkerOption;\n      o = {\n        ...rest,\n        ...textPoint,\n        coordinateBBox: this.getCoordinateBBox(),\n        point,\n        line,\n        text,\n        autoAdjust,\n        direction,\n      };\n    } else if (type === 'dataRegion') {\n      const { start, end, region, text, lineLength, ...rest } = option as DataRegionOption;\n      o = {\n        ...rest,\n        points: this.getRegionPoints(start, end),\n        region,\n        text,\n        lineLength,\n      };\n    } else if (type === 'regionFilter') {\n      const { start, end, apply, color, ...rest } = option as RegionFilterOption;\n      const geometries: Geometry[] = this.view.geometries;\n      const shapes = [];\n      const addShapes = (item?: IElement) => {\n        if (!item) {\n          return;\n        }\n        if (item.isGroup()) {\n          (item as IGroup).getChildren().forEach((child) => addShapes(child));\n        } else {\n          shapes.push(item);\n        }\n      };\n      each(geometries, (geom: Geometry) => {\n        if (apply) {\n          if (contains(apply, geom.type)) {\n            each(geom.elements, (elem: Element) => {\n              addShapes(elem.shape);\n            });\n          }\n        } else {\n          each(geom.elements, (elem: Element) => {\n            addShapes(elem.shape);\n          });\n        }\n      });\n      o = {\n        ...rest,\n        color,\n        shapes,\n        start: sp,\n        end: ep,\n      };\n    } else if (type === 'shape') {\n      const { render, ...restOptions } = option as ShapeAnnotationOption;\n      const wrappedRender = (container: IGroup) => {\n        if (isFunction(option.render)) {\n          return render(container, this.view, { parsePosition: this.parsePosition.bind(this) });\n        }\n      };\n      o = {\n        ...restOptions,\n        render: wrappedRender,\n      };\n    } else if (type === 'html') {\n      const { html, position, ...restOptions } = option as HtmlAnnotationOption;\n      const wrappedHtml = (container: HTMLElement) => {\n        if (isFunction(html)) {\n          return html(container, this.view);\n        }\n        return html;\n      };\n      o = {\n        ...restOptions,\n        ...textPoint,\n        // html 组件需要指定 parent\n        parent: canvas.get('el').parentNode,\n        html: wrappedHtml,\n      };\n    }\n    // 合并主题，用户配置优先级高于默认主题\n    const cfg = deepMix({}, theme, {\n      ...o,\n      top: option.top,\n      style: option.style,\n      offsetX: option.offsetX,\n      offsetY: option.offsetY,\n    });\n    if (type !== 'html') {\n      // html 类型不使用 G container\n      cfg.container = this.getComponentContainer(cfg);\n    }\n    cfg.animate = this.view.getOptions().animate && cfg.animate && get(option, 'animate', cfg.animate); // 如果 view 关闭动画，则不执行\n    cfg.animateOption = deepMix({}, DEFAULT_ANIMATE_CFG, cfg.animateOption, option.animateOption);\n\n    return cfg;\n  }\n\n  /**\n   * is annotation render on top\n   * @param option\n   * @return whethe on top\n   */\n  private isTop(option: any): boolean {\n    return get(option, 'top', true);\n  }\n\n  /**\n   * get the container by option.top\n   * default is on top\n   * @param option\n   * @returns the container\n   */\n  private getComponentContainer(option: any) {\n    return this.isTop(option) ? this.foregroundContainer : this.backgroundContainer;\n  }\n\n  private getAnnotationTheme(type: string) {\n    return get(this.view.getTheme(), ['components', 'annotation', type], {});\n  }\n\n  /**\n   * 创建或者更新 annotation\n   * @param option\n   */\n  private updateOrCreate(option: BaseOption) {\n    // 拿到缓存的内容\n    let co = this.cache.get(this.getCacheKey(option));\n\n    // 存在则更新，不存在在创建\n    if (co) {\n      const { type } = option;\n      const theme = this.getAnnotationTheme(type);\n      const cfg = this.getAnnotationCfg(type, option, theme);\n\n      // 忽略掉一些配置\n      if (cfg) {\n        omit(cfg, ['container']);\n      }\n      co.component.update({ ...(cfg || {}), visible: !!cfg });\n      // 对于 regionFilter/shape，因为生命周期的原因，需要额外 render\n      if (includes(ANNOTATIONS_AFTER_RENDER, option.type)) {\n        co.component.render();\n      }\n    } else {\n      // 不存在，创建\n      co = this.createAnnotation(option);\n      if (co) {\n        co.component.init();\n        // Note：regionFilter/shape 特殊处理，regionFilter/shape 需要取到 Geometry 中的 Shape，需要在 view render 之后处理\n        // 其他组件使用外层的统一 render 逻辑\n        if (includes(ANNOTATIONS_AFTER_RENDER, option.type)) {\n          co.component.render();\n        }\n      }\n    }\n    return co;\n  }\n\n  /**\n   * 更新缓存，以及销毁组件\n   * @param updated 更新或者创建的组件\n   */\n  private syncCache(updated: Map<BaseOption, ComponentOption>) {\n    const newCache = new Map(this.cache); // clone 一份\n\n    // 将 update 更新到 cache\n    updated.forEach((co: ComponentOption, key: BaseOption) => {\n      newCache.set(key, co);\n    });\n\n    // 另外和 options 进行对比，删除\n    newCache.forEach((co: ComponentOption, key: BaseOption) => {\n      // option 中已经找不到，那么就是删除的\n      if (\n        !find(this.option, (option: BaseOption) => {\n          return key === this.getCacheKey(option);\n        })\n      ) {\n        co.component.destroy();\n        newCache.delete(key);\n      }\n    });\n\n    return newCache;\n  }\n\n  /**\n   * 获得缓存组件的 key\n   * @param option\n   */\n  private getCacheKey(option: BaseOption) {\n    // 如果存在 id，则使用 id string，否则直接使用 option 引用作为 key\n    return option;\n    // 后续扩展 id 用\n    // const id = get(option, 'id');\n    // return id ? id : option;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}