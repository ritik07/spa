{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nimport { getRectPath } from './util';\nimport { omit } from '../../../util/helper';\n// 根据数据点生成 Line 的两个关键点\nfunction getLinePoints(pointInfo) {\n  var x = pointInfo.x,\n    y = pointInfo.y,\n    y0 = pointInfo.y0;\n  if (isArray(y)) {\n    return y.map(function (yItem, idx) {\n      return {\n        x: isArray(x) ? x[idx] : x,\n        y: yItem\n      };\n    });\n  }\n  // 起始点从 y0 开始\n  return [{\n    x: x,\n    y: y0\n  }, {\n    x: x,\n    y: y\n  }];\n}\nregisterShape('interval', 'line', {\n  getPoints: function (shapePoint) {\n    return getLinePoints(shapePoint);\n  },\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, true, false, 'lineWidth');\n    var newStyle = omit(__assign({}, style), ['fill']);\n    var path = this.parsePath(getRectPath(cfg.points, false));\n    var shape = container.addShape('path', {\n      attrs: __assign(__assign({}, newStyle), {\n        path: path\n      }),\n      name: 'interval'\n    });\n    return shape;\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: function (x, y, r) {\n        return [['M', x, y - r], ['L', x, y + r]];\n      },\n      style: {\n        r: 5,\n        stroke: color\n      }\n    };\n  }\n});","map":{"version":3,"sources":["../../../../src/geometry/shape/interval/line.ts"],"names":[],"mappings":";AAAA,SAAS,OAAO,QAAQ,YAAY;AAIpC,SAAS,aAAa,QAAQ,SAAS;AACvC,SAAS,QAAQ,QAAQ,mBAAmB;AAC5C,SAAS,WAAW,QAAQ,QAAQ;AACpC,SAAS,IAAI,QAAQ,sBAAsB;AAE3C;AACA,SAAS,aAAa,CAAC,SAAqB,EAAA;EAClC,IAAA,CAAC,GAAY,SAAS,CAAA,CAArB;IAAE,CAAC,GAAS,SAAS,CAAA,CAAlB;IAAE,EAAE,GAAK,SAAS,CAAA,EAAd;EAEhB,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;IACd,OAAO,CAAC,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,GAAG,EAAA;MACtB,OAAO;QACL,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QAC1B,CAAC,EAAE;OACJ;IACH,CAAC,CAAC;EACH;EAED;EACA,OAAO,CACL;IAAE,CAAC,EAAE,CAAW;IAAE,CAAC,EAAE;EAAE,CAAE,EACzB;IAAE,CAAC,EAAE,CAAW;IAAE,CAAC,EAAA;EAAA,CAAE,CACtB;AACH;AAEA,aAAa,CAAC,UAAU,EAAE,MAAM,EAAE;EAChC,SAAS,EAAA,UAAC,UAAsB,EAAA;IAC9B,OAAO,aAAa,CAAC,UAAU,CAAC;EAClC,CAAC;EACD,IAAI,EAAA,UAAC,GAAc,EAAE,SAAiB,EAAA;IACpC,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC;IACrD,IAAM,QAAQ,GAAG,IAAI,CAAA,QAAA,CAAA,CAAA,CAAA,EAAM,KAAK,CAAA,EAAI,CAAC,MAAM,CAAC,CAAC;IAC7C,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,MAAiB,EAAE,KAAK,CAAC,CAAC;IACtE,IAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE;MACvC,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,QAAQ,CAAA,EAAA;QACX,IAAI,EAAA;MAAA,CAAA,CACL;MACD,IAAI,EAAE;KACP,CAAC;IAEF,OAAO,KAAK;EACd,CAAC;EACD,SAAS,EAAA,UAAC,SAAyB,EAAA;IACzB,IAAA,KAAK,GAAK,SAAS,CAAA,KAAd;IACb,OAAO;MACL,MAAM,EAAE,UAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAA;QACtC,OAAO,CACL,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EACf,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAChB;MACH,CAAC;MACD,KAAK,EAAE;QACL,CAAC,EAAE,CAAC;QACJ,MAAM,EAAE;MACT;KACF;EACH;CACD,CAAC","sourcesContent":["import { isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nimport { getRectPath } from './util';\nimport { omit } from '../../../util/helper';\n\n// 根据数据点生成 Line 的两个关键点\nfunction getLinePoints(pointInfo: ShapePoint): Point[] {\n  const { x, y, y0 } = pointInfo;\n\n  if (isArray(y)) {\n    return y.map((yItem, idx) => {\n      return {\n        x: isArray(x) ? x[idx] : x,\n        y: yItem,\n      };\n    });\n  }\n\n  // 起始点从 y0 开始\n  return [\n    { x: x as number, y: y0 },\n    { x: x as number, y },\n  ];\n}\n\nregisterShape('interval', 'line', {\n  getPoints(shapePoint: ShapePoint) {\n    return getLinePoints(shapePoint);\n  },\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, true, false, 'lineWidth');\n    const newStyle = omit({ ...style }, ['fill']);\n    const path = this.parsePath(getRectPath(cfg.points as Point[], false));\n    const shape = container.addShape('path', {\n      attrs: {\n        ...newStyle,\n        path,\n      },\n      name: 'interval',\n    });\n\n    return shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: (x: number, y: number, r: number) => {\n        return [\n          ['M', x, y - r],\n          ['L', x, y + r],\n        ];\n      },\n      style: {\n        r: 5,\n        stroke: color,\n      },\n    };\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}