{"ast":null,"code":"import { __assign, __extends, __values } from \"tslib\";\n/**\n * Create By Bruce Too\n * On 2020-02-10\n */\nimport { assign, deepMix, each, get } from '@antv/util';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * Tree Facet\n */\nvar Tree = /** @class */function (_super) {\n  __extends(Tree, _super);\n  function Tree() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.afterChartRender = function () {\n      if (_this.facets && _this.cfg.line) {\n        _this.container.clear();\n        _this.drawLines(_this.facets);\n      }\n    };\n    return _this;\n  }\n  Tree.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n  Tree.prototype.beforeEachView = function (view, facet) {};\n  Tree.prototype.init = function () {\n    _super.prototype.init.call(this);\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  };\n  Tree.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd'\n        },\n        smooth: false\n      },\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n  Tree.prototype.generateFacets = function (data) {\n    var fields = this.cfg.fields;\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n    var rst = [];\n    var rootFacet = {\n      type: this.cfg.type,\n      data: data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: ''\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  };\n  Tree.prototype.setRegion = function (facets) {\n    var _this = this;\n    this.forceColIndex(facets);\n    facets.forEach(function (facet) {\n      // @ts-ignore 允许调整\n      facet.region = _this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  };\n  Tree.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n    var xWidth = 1 / cols; // x轴方向的每个分面的偏移\n    var yWidth = 1 / rows; // y轴方向的每个分面的偏移\n    var start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex\n    };\n    var end = {\n      x: start.x + xWidth,\n      y: start.y + yWidth * 2 / 3 // 预留1/3的空隙，方便添加连接线\n    };\n\n    return {\n      start: start,\n      end: end\n    };\n  };\n  Tree.prototype.forceColIndex = function (facets) {\n    var e_1, _a;\n    var _this = this;\n    var leafs = [];\n    var index = 0;\n    facets.forEach(function (facet) {\n      if (_this.isLeaf(facet)) {\n        leafs.push(facet);\n        // @ts-ignore 允许调整\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n    leafs.forEach(function (facet) {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    var maxLevel = this.cfg.fields.length;\n    for (var i = maxLevel - 1; i >= 0; i--) {\n      var levelFacets = this.getFacetsByLevel(facets, i);\n      try {\n        // var yIndex = maxLevel - i;\n        for (var levelFacets_1 = (e_1 = void 0, __values(levelFacets)), levelFacets_1_1 = levelFacets_1.next(); !levelFacets_1_1.done; levelFacets_1_1 = levelFacets_1.next()) {\n          var facet = levelFacets_1_1.value;\n          if (!this.isLeaf(facet)) {\n            facet.originColIndex = facet.columnIndex;\n            // @ts-ignore\n            facet.columnIndex = this.getRegionIndex(facet.children);\n            // @ts-ignore\n            facet.columnValuesLength = leafs.length;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (levelFacets_1_1 && !levelFacets_1_1.done && (_a = levelFacets_1.return)) _a.call(levelFacets_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  // get facet use level\n  Tree.prototype.getFacetsByLevel = function (facets, level) {\n    var rst = [];\n    facets.forEach(function (facet) {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  };\n  // if the facet has children , make it's column index in the middle of it's children\n  Tree.prototype.getRegionIndex = function (children) {\n    var first = children[0];\n    var last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  };\n  // is  a leaf without children\n  Tree.prototype.isLeaf = function (facet) {\n    return !facet.children || !facet.children.length;\n  };\n  Tree.prototype.getRows = function () {\n    return this.cfg.fields.length + 1;\n  };\n  // get child\n  Tree.prototype.getChildFacets = function (data, level, arr) {\n    var _this = this;\n    // [ 'grade', 'class' ]\n    var fields = this.cfg.fields;\n    var length = fields.length;\n    if (length < level) {\n      return;\n    }\n    var rst = [];\n    // get fist level except root node\n    var field = fields[level - 1];\n    // get field value\n    var values = this.getFieldValues(data, field);\n    values.forEach(function (value, index) {\n      var conditions = [{\n        field: field,\n        value: value,\n        values: values\n      }];\n      var subData = data.filter(_this.getFacetDataFilter(conditions));\n      if (subData.length) {\n        var facet = {\n          type: _this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: _this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: _this.getChildFacets(subData, level + 1, arr)\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  };\n  Tree.prototype.render = function () {\n    _super.prototype.render.call(this);\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n  Tree.prototype.renderTitle = function () {\n    var _this = this;\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n        view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n  Tree.prototype.drawLines = function (facets) {\n    var _this = this;\n    facets.forEach(function (facet) {\n      if (!_this.isLeaf(facet)) {\n        var children = facet.children;\n        _this.addFacetLines(facet, children);\n      }\n    });\n  };\n  // add lines with it's children\n  Tree.prototype.addFacetLines = function (facet, children) {\n    var _this = this;\n    var view = facet.view;\n    var region = view.coordinateBBox;\n    // top, right, bottom, left\n    var start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height\n    };\n    children.forEach(function (subFacet) {\n      var subRegion = subFacet.view.coordinateBBox;\n      var end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y\n      };\n      var middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2\n      };\n      var middle2 = {\n        x: end.x,\n        y: middle1.y\n      };\n      _this.drawLine([start, middle1, middle2, end]);\n    });\n  };\n  Tree.prototype.getPath = function (points) {\n    var path = [];\n    var smooth = this.cfg.line.smooth;\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n    return path;\n  };\n  // draw line width points\n  Tree.prototype.drawLine = function (points) {\n    var path = this.getPath(points);\n    var line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign({\n        // @ts-ignore\n        path: path\n      }, line)\n    });\n  };\n  Tree.prototype.getXAxisOption = function (x, axes, option, facet) {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n    return option;\n  };\n  Tree.prototype.getYAxisOption = function (y, axes, option, facet) {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n    return option;\n  };\n  return Tree;\n}(Facet);\nexport default Tree;","map":{"version":3,"sources":["../../src/facet/tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Create By Bruce Too\n * On 2020-02-10\n */\nimport { assign, deepMix, each, get } from '@antv/util';\nimport View from '../chart/view';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { AxisCfg, Condition, Datum, TreeCfg, TreeData } from '../interface';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * Tree Facet\n */\nexport default class Tree extends Facet<TreeCfg, TreeData> {\n  protected afterEachView(view: View, facet: TreeData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: TreeData) {}\n\n  public init() {\n    super.init();\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  }\n\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd',\n        },\n        smooth: false,\n      },\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  protected generateFacets(data: Datum[]): TreeData[] {\n    const fields = this.cfg.fields;\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n    const rst = [];\n    const rootFacet: TreeData = {\n      type: this.cfg.type,\n      data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: '',\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  }\n\n  private setRegion(facets: TreeData[]) {\n    this.forceColIndex(facets);\n    facets.forEach((facet) => {\n      // @ts-ignore 允许调整\n      facet.region = this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  }\n\n  protected getRegion(rows: number, cols: number, xIndex: number, yIndex: number) {\n    const xWidth = 1 / cols; // x轴方向的每个分面的偏移\n    const yWidth = 1 / rows; // y轴方向的每个分面的偏移\n\n    const start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex,\n    };\n\n    const end = {\n      x: start.x + xWidth,\n      y: start.y + (yWidth * 2) / 3, // 预留1/3的空隙，方便添加连接线\n    };\n    return {\n      start,\n      end,\n    };\n  }\n\n  private forceColIndex(facets: TreeData[]) {\n    const leafs: TreeData[] = [];\n    let index = 0;\n    facets.forEach((facet) => {\n      if (this.isLeaf(facet)) {\n        leafs.push(facet);\n        // @ts-ignore 允许调整\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n\n    leafs.forEach((facet) => {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    const maxLevel = this.cfg.fields.length;\n    for (let i = maxLevel - 1; i >= 0; i--) {\n      const levelFacets = this.getFacetsByLevel(facets, i);\n      // var yIndex = maxLevel - i;\n      for (const facet of levelFacets) {\n        if (!this.isLeaf(facet)) {\n          facet.originColIndex = facet.columnIndex;\n          // @ts-ignore\n          facet.columnIndex = this.getRegionIndex(facet.children);\n          // @ts-ignore\n          facet.columnValuesLength = leafs.length;\n        }\n      }\n    }\n  }\n\n  // get facet use level\n  private getFacetsByLevel(facets: TreeData[], level: number) {\n    const rst: TreeData[] = [];\n    facets.forEach((facet) => {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  // if the facet has children , make it's column index in the middle of it's children\n  private getRegionIndex(children: TreeData[]) {\n    const first = children[0];\n    const last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  }\n\n  // is  a leaf without children\n  private isLeaf(facet: TreeData) {\n    return !facet.children || !facet.children.length;\n  }\n\n  private getRows() {\n    return this.cfg.fields.length + 1;\n  }\n\n  // get child\n  private getChildFacets(data: Datum[], level: number, arr: TreeData[]) {\n    // [ 'grade', 'class' ]\n    const fields = this.cfg.fields;\n    const length = fields.length;\n    if (length < level) {\n      return;\n    }\n    const rst = [];\n    // get fist level except root node\n    const field = fields[level - 1];\n    // get field value\n    const values = this.getFieldValues(data, field);\n    values.forEach((value, index) => {\n      const conditions = [{ field, value, values } as Condition];\n      const subData = data.filter(this.getFacetDataFilter(conditions));\n      if (subData.length) {\n        const facet: TreeData = {\n          type: this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: this.getChildFacets(subData, level + 1, arr),\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  public render() {\n    super.render();\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  private afterChartRender = () => {\n    if (this.facets && this.cfg.line) {\n      this.container.clear();\n      this.drawLines(this.facets);\n    }\n  };\n\n  private renderTitle() {\n    each(this.facets, (facet: TreeData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n\n  private drawLines(facets: TreeData[]) {\n    facets.forEach((facet) => {\n      if (!this.isLeaf(facet)) {\n        const children = facet.children;\n        this.addFacetLines(facet, children);\n      }\n    });\n  }\n\n  // add lines with it's children\n  private addFacetLines(facet: TreeData, children: TreeData[]) {\n    const view = facet.view;\n    const region = view.coordinateBBox;\n    // top, right, bottom, left\n    const start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height,\n    };\n\n    children.forEach((subFacet) => {\n      const subRegion = subFacet.view.coordinateBBox;\n      const end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y,\n      };\n\n      const middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2,\n      };\n      const middle2 = {\n        x: end.x,\n        y: middle1.y,\n      };\n      this.drawLine([start, middle1, middle2, end]);\n    });\n  }\n\n  private getPath(points) {\n    const path = [];\n    const smooth = this.cfg.line.smooth;\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach((point, index) => {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n\n    return path;\n  }\n\n  // draw line width points\n  private drawLine(points) {\n    const path = this.getPath(points);\n    const line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign(\n        {\n          // @ts-ignore\n          path,\n        },\n        line\n      ),\n    });\n  }\n\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}