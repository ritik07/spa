{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { debounce, each, isString } from '@antv/util';\nimport { GROUP_Z_INDEX, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\nvar Chart = /** @class */function (_super) {\n  __extends(Chart, _super);\n  // @ts-ignore\n  function Chart(props) {\n    var _this = this;\n    var container = props.container,\n      width = props.width,\n      height = props.height,\n      _a = props.autoFit,\n      autoFit = _a === void 0 ? false : _a,\n      padding = props.padding,\n      appendPadding = props.appendPadding,\n      _b = props.renderer,\n      renderer = _b === void 0 ? 'canvas' : _b,\n      pixelRatio = props.pixelRatio,\n      _c = props.localRefresh,\n      localRefresh = _c === void 0 ? true : _c,\n      _d = props.visible,\n      visible = _d === void 0 ? true : _d,\n      _e = props.supportCSSTransform,\n      supportCSSTransform = _e === void 0 ? false : _e,\n      _f = props.defaultInteractions,\n      defaultInteractions = _f === void 0 ? ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter', 'ellipsis-text', 'axis-description'] : _f,\n      options = props.options,\n      limitInPlot = props.limitInPlot,\n      theme = props.theme,\n      syncViewPadding = props.syncViewPadding;\n    var ele = isString(container) ? document.getElementById(container) : container;\n    // 生成内部正式绘制的 div 元素\n    var wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement);\n    // if autoFit, use the container size, to avoid the graph render twice.\n    var size = getChartSize(ele, autoFit, width, height);\n    var G = getEngine(renderer);\n    var canvas = new G.Canvas(__assign({\n      container: wrapperElement,\n      pixelRatio: pixelRatio,\n      localRefresh: localRefresh,\n      supportCSSTransform: supportCSSTransform\n    }, size));\n    // 调用 view 的创建\n    _this = _super.call(this, {\n      parent: null,\n      canvas: canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      padding: padding,\n      appendPadding: appendPadding,\n      visible: visible,\n      options: options,\n      limitInPlot: limitInPlot,\n      theme: theme,\n      syncViewPadding: syncViewPadding\n    }) || this;\n    /**\n     * when container size changed, change chart size props, and re-render.\n     */\n    _this.onResize = debounce(function () {\n      _this.forceFit();\n    }, 300);\n    _this.ele = ele;\n    _this.canvas = canvas;\n    _this.width = size.width;\n    _this.height = size.height;\n    _this.autoFit = autoFit;\n    _this.localRefresh = localRefresh;\n    _this.renderer = renderer;\n    _this.wrapperElement = wrapperElement;\n    // 自适应大小\n    _this.updateCanvasStyle();\n    _this.bindAutoFit();\n    _this.initDefaultInteractions(defaultInteractions);\n    return _this;\n  }\n  Chart.prototype.initDefaultInteractions = function (interactions) {\n    var _this = this;\n    each(interactions, function (interaction) {\n      _this.interaction(interaction);\n    });\n  };\n  /**\n   * 设置 WAI-ARIA 无障碍标签。如何根据图形语法自动生成 arial 内容？\n   * @param ariaOption\n   */\n  Chart.prototype.aria = function (ariaOption) {\n    var ATTR = 'aria-label';\n    if (ariaOption === false) {\n      this.ele.removeAttribute(ATTR);\n    } else {\n      this.ele.setAttribute(ATTR, ariaOption.label);\n    }\n  };\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n  Chart.prototype.changeSize = function (width, height) {\n    // 如果宽高一致，那么 changeSize 不执行任何操作\n    if (this.width === width && this.height === height) {\n      return this;\n    }\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE);\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height);\n    // 重新渲染\n    this.render(true);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_SIZE);\n    return this;\n  };\n  /**\n   * 清空图表，同时清除掉 aria 配置\n   */\n  Chart.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this.aria(false);\n  };\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n  Chart.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.unbindAutoFit();\n    this.canvas.destroy();\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  };\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n  Chart.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible); // 需要更新 visible 变量\n    this.wrapperElement.style.display = visible ? '' : 'none';\n    return this;\n  };\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n  Chart.prototype.forceFit = function () {\n    // skip if already destroyed\n    if (!this.destroyed) {\n      // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n      var _a = getChartSize(this.ele, true, this.width, this.height),\n        width = _a.width,\n        height = _a.height;\n      this.changeSize(width, height);\n    }\n  };\n  Chart.prototype.updateCanvasStyle = function () {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle'\n    });\n  };\n  Chart.prototype.bindAutoFit = function () {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  };\n  Chart.prototype.unbindAutoFit = function () {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  };\n  return Chart;\n}(View);\nexport default Chart;","map":{"version":3,"sources":["../../src/chart/chart.ts"],"names":[],"mappings":"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","sourcesContent":["import { debounce, each, isString } from '@antv/util';\nimport { ChartCfg } from '../interface';\nimport { GROUP_Z_INDEX, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\nimport { AriaOption } from '../interface';\n\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\nexport default class Chart extends View {\n  /** Chart 的 DOM 容器 */\n  public ele: HTMLElement;\n\n  /** 图表宽度 */\n  public width: number;\n  /** 图表高度 */\n  public height: number;\n  /** 是否开启局部刷新 */\n  public localRefresh: boolean;\n  /** 是否自适应 DOM 容器宽高，默认为 false，需要用户手动指定宽高 */\n  public autoFit: boolean;\n  /** 图表渲染引擎 */\n  public renderer: 'canvas' | 'svg';\n\n  private wrapperElement: HTMLElement;\n\n  // @ts-ignore\n  constructor(props: ChartCfg) {\n    const {\n      container,\n      width,\n      height,\n      autoFit = false,\n      padding,\n      appendPadding,\n      renderer = 'canvas',\n      pixelRatio,\n      localRefresh = true,\n      visible = true,\n      supportCSSTransform = false,\n      defaultInteractions = ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter', 'ellipsis-text', 'axis-description'],\n      options,\n      limitInPlot,\n      theme,\n      syncViewPadding,\n    } = props;\n\n    const ele: HTMLElement = isString(container) ? document.getElementById(container) : container;\n\n    // 生成内部正式绘制的 div 元素\n    const wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement);\n\n    // if autoFit, use the container size, to avoid the graph render twice.\n    const size = getChartSize(ele, autoFit, width, height);\n\n    const G = getEngine(renderer);\n\n    const canvas = new G.Canvas({\n      container: wrapperElement,\n      pixelRatio,\n      localRefresh,\n      supportCSSTransform,\n      ...size,\n    });\n\n    // 调用 view 的创建\n    super({\n      parent: null,\n      canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.BG }),\n      middleGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.MID }),\n      foregroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.FORE }),\n      padding,\n      appendPadding,\n      visible,\n      options,\n      limitInPlot,\n      theme,\n      syncViewPadding,\n    });\n\n    this.ele = ele;\n    this.canvas = canvas;\n    this.width = size.width;\n    this.height = size.height;\n    this.autoFit = autoFit;\n    this.localRefresh = localRefresh;\n    this.renderer = renderer;\n    this.wrapperElement = wrapperElement;\n\n    // 自适应大小\n    this.updateCanvasStyle();\n    this.bindAutoFit();\n    this.initDefaultInteractions(defaultInteractions);\n  }\n\n  private initDefaultInteractions(interactions) {\n    each(interactions, (interaction) => {\n      this.interaction(interaction);\n    });\n  }\n\n  /**\n   * 设置 WAI-ARIA 无障碍标签。如何根据图形语法自动生成 arial 内容？\n   * @param ariaOption\n   */\n  public aria(ariaOption: AriaOption) {\n    const ATTR = 'aria-label';\n    if (ariaOption === false) {\n      this.ele.removeAttribute(ATTR);\n    } else {\n      this.ele.setAttribute(ATTR, ariaOption.label);\n    }\n  }\n\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n  public changeSize(width: number, height: number) {\n    // 如果宽高一致，那么 changeSize 不执行任何操作\n    if (this.width === width && this.height === height) {\n      return this;\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE);\n\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height);\n\n    // 重新渲染\n    this.render(true);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_SIZE);\n\n    return this;\n  }\n\n  /**\n   * 清空图表，同时清除掉 aria 配置\n   */\n  public clear() {\n    super.clear();\n\n    this.aria(false);\n  }\n\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n  public destroy() {\n    super.destroy();\n\n    this.unbindAutoFit();\n    this.canvas.destroy();\n\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  }\n\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n  public changeVisible(visible: boolean) {\n    super.changeVisible(visible); // 需要更新 visible 变量\n    this.wrapperElement.style.display = visible ? '' : 'none';\n\n    return this;\n  }\n\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n  public forceFit() {\n    // skip if already destroyed\n    if (!this.destroyed) {\n      // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n      const { width, height } = getChartSize(this.ele, true, this.width, this.height);\n      this.changeSize(width, height);\n    }\n  }\n\n  private updateCanvasStyle() {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    });\n  }\n\n  private bindAutoFit() {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  }\n\n  private unbindAutoFit() {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }\n\n  /**\n   * when container size changed, change chart size props, and re-render.\n   */\n  private onResize = debounce(() => {\n    this.forceFit();\n  }, 300);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}