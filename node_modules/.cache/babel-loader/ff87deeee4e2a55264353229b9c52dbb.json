{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get } from '@antv/util';\nimport { ellipsisLabel } from './label';\nimport { applyRotate, applyTranslate } from './matrix';\nimport { formatPadding } from './util';\nexport function renderTag(container, tagCfg) {\n  var x = tagCfg.x,\n    y = tagCfg.y,\n    content = tagCfg.content,\n    style = tagCfg.style,\n    id = tagCfg.id,\n    name = tagCfg.name,\n    rotate = tagCfg.rotate,\n    maxLength = tagCfg.maxLength,\n    autoEllipsis = tagCfg.autoEllipsis,\n    isVertical = tagCfg.isVertical,\n    ellipsisPosition = tagCfg.ellipsisPosition,\n    background = tagCfg.background;\n  var tagGroup = container.addGroup({\n    id: id + \"-group\",\n    name: name + \"-group\",\n    attrs: {\n      x: x,\n      y: y\n    }\n  });\n  // Text shape\n  var text = tagGroup.addShape({\n    type: 'text',\n    id: id,\n    name: name,\n    attrs: __assign({\n      x: 0,\n      y: 0,\n      text: content\n    }, style)\n  });\n  // maxLength 应包含 background 中的 padding 值\n  var padding = formatPadding(get(background, 'padding', 0));\n  if (maxLength && autoEllipsis) {\n    var maxTextLength = maxLength - (padding[1] + padding[3]);\n    // 超出自动省略\n    ellipsisLabel(!isVertical, text, maxTextLength, ellipsisPosition);\n  }\n  if (background) {\n    // 渲染文本背景\n    var backgroundStyle = get(background, 'style', {});\n    var _a = text.getCanvasBBox(),\n      minX = _a.minX,\n      minY = _a.minY,\n      width = _a.width,\n      height = _a.height;\n    var tagBg = tagGroup.addShape('rect', {\n      id: id + \"-bg\",\n      name: id + \"-bg\",\n      attrs: __assign({\n        x: minX - padding[3],\n        y: minY - padding[0],\n        width: width + padding[1] + padding[3],\n        height: height + padding[0] + padding[2]\n      }, backgroundStyle)\n    });\n    tagBg.toBack();\n  }\n  applyTranslate(tagGroup, x, y);\n  applyRotate(tagGroup, rotate, x, y);\n}","map":{"version":3,"sources":["../../src/util/graphic.ts"],"names":[],"mappings":";AACA,SAAS,GAAG,QAAQ,YAAY;AAGhC,SAAS,aAAa,QAAQ,SAAS;AACvC,SAAS,WAAW,EAAE,cAAc,QAAQ,UAAU;AACtD,SAAS,aAAa,QAAQ,QAAQ;AAiBtC,OAAM,SAAU,SAAS,CAAC,SAAiB,EAAE,MAAc,EAAA;EACjD,IAAA,CAAC,GAA6G,MAAM,CAAA,CAAnH;IAAE,CAAC,GAA0G,MAAM,CAAA,CAAhH;IAAE,OAAO,GAAiG,MAAM,CAAA,OAAvG;IAAE,KAAK,GAA0F,MAAM,CAAA,KAAhG;IAAE,EAAE,GAAsF,MAAM,CAAA,EAA5F;IAAE,IAAI,GAAgF,MAAM,CAAA,IAAtF;IAAE,MAAM,GAAwE,MAAM,CAAA,MAA9E;IAAE,SAAS,GAA6D,MAAM,CAAA,SAAnE;IAAE,YAAY,GAA+C,MAAM,CAAA,YAArD;IAAE,UAAU,GAAmC,MAAM,CAAA,UAAzC;IAAE,gBAAgB,GAAiB,MAAM,CAAA,gBAAvB;IAAE,UAAU,GAAK,MAAM,CAAA,UAAX;EACjH,IAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;IAClC,EAAE,EAAK,EAAE,GAAA,QAAQ;IACjB,IAAI,EAAK,IAAI,GAAA,QAAQ;IACrB,KAAK,EAAE;MACL,CAAC,EAAA,CAAA;MACD,CAAC,EAAA;IACF;GACF,CAAC;EAEF;EACA,IAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC;IAC7B,IAAI,EAAE,MAAM;IACZ,EAAE,EAAA,EAAA;IACF,IAAI,EAAA,IAAA;IACJ,KAAK,EAAA,QAAA,CAAA;MACH,CAAC,EAAE,CAAC;MACJ,CAAC,EAAE,CAAC;MACJ,IAAI,EAAE;IAAO,CAAA,EACV,KAAK;GAEX,CAAC;EAEF;EACA,IAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;EAC5D,IAAI,SAAS,IAAI,YAAY,EAAE;IAC7B,IAAM,aAAa,GAAG,SAAS,IAAI,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D;IACA,aAAa,CAAC,CAAC,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,gBAAgB,CAAC;EAClE;EAED,IAAI,UAAU,EAAE;IACd;IACA,IAAM,eAAe,GAAG,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,CAAA,CAAE,CAAC;IAC9C,IAAA,EAAA,GAAgC,IAAI,CAAC,aAAa,EAAE;MAAlD,IAAI,GAAA,EAAA,CAAA,IAAA;MAAE,IAAI,GAAA,EAAA,CAAA,IAAA;MAAE,KAAK,GAAA,EAAA,CAAA,KAAA;MAAE,MAAM,GAAA,EAAA,CAAA,MAAyB;IAC1D,IAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE;MACtC,EAAE,EAAK,EAAE,GAAA,KAAK;MACd,IAAI,EAAK,EAAE,GAAA,KAAK;MAChB,KAAK,EAAA,QAAA,CAAA;QACH,CAAC,EAAE,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;QACpB,CAAC,EAAE,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;QACpB,KAAK,EAAE,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;QACtC,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;MAAC,CAAA,EACrC,eAAe;KAErB,CAAC;IACF,KAAK,CAAC,MAAM,EAAE;EACf;EAED,cAAc,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9B,WAAW,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;AACrC","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { get } from '@antv/util';\nimport { ellipsisLabel } from './label';\nimport { applyRotate, applyTranslate } from './matrix';\nimport { formatPadding } from './util';\nexport function renderTag(container, tagCfg) {\n    var x = tagCfg.x, y = tagCfg.y, content = tagCfg.content, style = tagCfg.style, id = tagCfg.id, name = tagCfg.name, rotate = tagCfg.rotate, maxLength = tagCfg.maxLength, autoEllipsis = tagCfg.autoEllipsis, isVertical = tagCfg.isVertical, ellipsisPosition = tagCfg.ellipsisPosition, background = tagCfg.background;\n    var tagGroup = container.addGroup({\n        id: id + \"-group\",\n        name: name + \"-group\",\n        attrs: {\n            x: x,\n            y: y,\n        }\n    });\n    // Text shape\n    var text = tagGroup.addShape({\n        type: 'text',\n        id: id,\n        name: name,\n        attrs: __assign({ x: 0, y: 0, text: content }, style),\n    });\n    // maxLength 应包含 background 中的 padding 值\n    var padding = formatPadding(get(background, 'padding', 0));\n    if (maxLength && autoEllipsis) {\n        var maxTextLength = maxLength - (padding[1] + padding[3]);\n        // 超出自动省略\n        ellipsisLabel(!isVertical, text, maxTextLength, ellipsisPosition);\n    }\n    if (background) {\n        // 渲染文本背景\n        var backgroundStyle = get(background, 'style', {});\n        var _a = text.getCanvasBBox(), minX = _a.minX, minY = _a.minY, width = _a.width, height = _a.height;\n        var tagBg = tagGroup.addShape('rect', {\n            id: id + \"-bg\",\n            name: id + \"-bg\",\n            attrs: __assign({ x: minX - padding[3], y: minY - padding[0], width: width + padding[1] + padding[3], height: height + padding[0] + padding[2] }, backgroundStyle),\n        });\n        tagBg.toBack();\n    }\n    applyTranslate(tagGroup, x, y);\n    applyRotate(tagGroup, rotate, x, y);\n}\n//# sourceMappingURL=graphic.js.map"]},"metadata":{},"sourceType":"module"}