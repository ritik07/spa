{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getElements, getElementValue, getCurrentElement } from '../util';\nimport Highlight, { STATUS_ACTIVE, STATUS_UNACTIVE } from './highlight';\n/**\n * Highlight x\n * @ignore\n */\nvar HighlightX = /** @class */function (_super) {\n  __extends(HighlightX, _super);\n  function HighlightX() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  // 不允许多选\n  HighlightX.prototype.setElementHighlight = function (el, callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, true);\n    } else {\n      el.setState(STATUS_UNACTIVE, true);\n      if (el.hasState(STATUS_ACTIVE)) {\n        el.setState(STATUS_ACTIVE, false);\n      }\n    }\n  };\n  HighlightX.prototype.setStateByElement = function (element, enable) {\n    var view = this.context.view;\n    var scale = view.getXScale();\n    var value = getElementValue(element, scale.field);\n    var elements = getElements(view);\n    var highlightElements = elements.filter(function (el) {\n      return getElementValue(el, scale.field) === value;\n    });\n    this.setHighlightBy(elements, function (el) {\n      return highlightElements.includes(el);\n    }, enable);\n  };\n  /**\n   * 切换状态\n   */\n  HighlightX.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      var hasState = element.hasState(this.stateName);\n      this.setStateByElement(element, !hasState);\n    }\n  };\n  return HighlightX;\n}(Highlight);\nexport default HighlightX;","map":{"version":3,"sources":["../../../../src/interaction/action/element/highlight-by-x.ts"],"names":[],"mappings":";AACA,SAAS,WAAW,EAAE,eAAe,EAAE,iBAAiB,QAAQ,SAAS;AACzE,OAAO,SAAS,IAAI,aAAa,EAAE,eAAe,QAAkB,aAAa;AAEjF;;;AAGG;AACH,IAAA,UAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAyB,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;EAAzB,SAAA,UAAA,GAAA;;EAqCA;EApCE;EACU,UAAA,CAAA,SAAA,CAAA,mBAAmB,GAA7B,UAA8B,EAAW,EAAE,QAAkB,EAAA;IAC3D,IAAI,QAAQ,CAAC,EAAE,CAAC,EAAE;MAChB,IAAI,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;QAChC,EAAE,CAAC,QAAQ,CAAC,eAAe,EAAE,KAAK,CAAC;MACpC;MACD,EAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC;KACjC,MAAM;MACL,EAAE,CAAC,QAAQ,CAAC,eAAe,EAAE,IAAI,CAAC;MAClC,IAAI,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;QAC9B,EAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC;MAClC;IACF;EACH,CAAC;EAES,UAAA,CAAA,SAAA,CAAA,iBAAiB,GAA3B,UAA4B,OAAgB,EAAE,MAAe,EAAA;IAC3D,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI;IAC9B,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE;IAC9B,IAAM,KAAK,GAAG,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC;IACnD,IAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC;IAClC,IAAM,iBAAiB,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAC,EAAE,EAAA;MAC3C,OAAO,eAAe,CAAC,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK;IACnD,CAAC,CAAC;IACF,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,UAAC,EAAE,EAAA;MAAK,OAAA,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC;IAA9B,CAA8B,EAAE,MAAM,CAAC;EAC/E,CAAC;EAED;;AAEG;EACI,UAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,IAAM,OAAO,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/C,IAAI,OAAO,EAAE;MACX,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;MACjD,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;IAC3C;EACH,CAAC;EACH,OAAA,UAAC;AAAD,CAAC,CArCwB,SAAS,CAAA;AAuClC,eAAe,UAAU","sourcesContent":["import Element from '../../../geometry/element/';\nimport { getElements, getElementValue, getCurrentElement } from '../util';\nimport Highlight, { STATUS_ACTIVE, STATUS_UNACTIVE, Callback } from './highlight';\n\n/**\n * Highlight x\n * @ignore\n */\nclass HighlightX extends Highlight {\n  // 不允许多选\n  protected setElementHighlight(el: Element, callback: Callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, true);\n    } else {\n      el.setState(STATUS_UNACTIVE, true);\n      if (el.hasState(STATUS_ACTIVE)) {\n        el.setState(STATUS_ACTIVE, false);\n      }\n    }\n  }\n\n  protected setStateByElement(element: Element, enable: boolean) {\n    const view = this.context.view;\n    const scale = view.getXScale();\n    const value = getElementValue(element, scale.field);\n    const elements = getElements(view);\n    const highlightElements = elements.filter((el) => {\n      return getElementValue(el, scale.field) === value;\n    });\n    this.setHighlightBy(elements, (el) => highlightElements.includes(el), enable);\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = element.hasState(this.stateName);\n      this.setStateByElement(element, !hasState);\n    }\n  }\n}\n\nexport default HighlightX;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}