{"ast":null,"code":"export function removeFromArray(arr, obj) {\n  var index = arr.indexOf(obj);\n  if (index !== -1) {\n    arr.splice(index, 1);\n  }\n}\nexport var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nexport { isNil, isFunction, isString, isObject, isArray, mix, each, upperFirst } from '@antv/util';\n// 是否元素的父容器\nexport function isParent(container, shape) {\n  // 所有 shape 都是 canvas 的子元素\n  if (container.isCanvas()) {\n    return true;\n  }\n  var parent = shape.getParent();\n  var isParent = false;\n  while (parent) {\n    if (parent === container) {\n      isParent = true;\n      break;\n    }\n    parent = parent.getParent();\n  }\n  return isParent;\n}\nexport function isAllowCapture(element) {\n  // @ts-ignore\n  return element.cfg.visible && element.cfg.capture;\n}","map":{"version":3,"sources":["../../src/util/util.ts"],"names":[],"mappings":"AACA,OAAM,SAAU,eAAe,CAAC,GAAU,EAAE,GAAQ,EAAA;EAClD,IAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC;EAC9B,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;EACrB;AACH;AAEA,OAAO,IAAM,SAAS,GAAG,OAAO,MAAM,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,WAAW;AAChG,SAAS,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,QAAQ,YAAY;AAElG;AACA,OAAM,SAAU,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAA;EACvC;EACA,IAAI,SAAS,CAAC,QAAQ,EAAE,EAAE;IACxB,OAAO,IAAI;EACZ;EACD,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE;EAC9B,IAAI,QAAQ,GAAG,KAAK;EACpB,OAAO,MAAM,EAAE;IACb,IAAI,MAAM,KAAK,SAAS,EAAE;MACxB,QAAQ,GAAG,IAAI;MACf;IACD;IACD,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE;EAC5B;EACD,OAAO,QAAQ;AACjB;AAEA,OAAM,SAAU,cAAc,CAAC,OAAc,EAAA;EAC3C;EACA,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO;AACnD","sourceRoot":"","sourcesContent":["export function removeFromArray(arr, obj) {\n    var index = arr.indexOf(obj);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\nexport var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nexport { isNil, isFunction, isString, isObject, isArray, mix, each, upperFirst } from '@antv/util';\n// 是否元素的父容器\nexport function isParent(container, shape) {\n    // 所有 shape 都是 canvas 的子元素\n    if (container.isCanvas()) {\n        return true;\n    }\n    var parent = shape.getParent();\n    var isParent = false;\n    while (parent) {\n        if (parent === container) {\n            isParent = true;\n            break;\n        }\n        parent = parent.getParent();\n    }\n    return isParent;\n}\nexport function isAllowCapture(element) {\n    // @ts-ignore\n    return element.cfg.visible && element.cfg.capture;\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}