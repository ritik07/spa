{"ast":null,"code":"import { DAY, HOUR, MINUTE, MONTH, SECOND, YEAR } from '../util/time';\nfunction getYear(date) {\n  return new Date(date).getFullYear();\n}\nfunction createYear(year) {\n  return new Date(year, 0, 1).getTime();\n}\nfunction getMonth(date) {\n  return new Date(date).getMonth();\n}\nfunction diffMonth(min, max) {\n  var minYear = getYear(min);\n  var maxYear = getYear(max);\n  var minMonth = getMonth(min);\n  var maxMonth = getMonth(max);\n  return (maxYear - minYear) * 12 + (maxMonth - minMonth) % 12;\n}\nfunction creatMonth(year, month) {\n  return new Date(year, month, 1).getTime();\n}\nfunction diffDay(min, max) {\n  return Math.ceil((max - min) / DAY);\n}\nfunction diffHour(min, max) {\n  return Math.ceil((max - min) / HOUR);\n}\nfunction diffMinus(min, max) {\n  return Math.ceil((max - min) / (60 * 1000));\n}\n/**\n * 计算 time 的 ticks，对 month, year 进行 pretty 处理\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\nexport default function timePretty(cfg) {\n  var min = cfg.min,\n    max = cfg.max,\n    minTickInterval = cfg.minTickInterval,\n    tickCount = cfg.tickCount;\n  var tickInterval = cfg.tickInterval;\n  var ticks = [];\n  // 指定 tickInterval 后 tickCount 不生效，需要重新计算\n  if (!tickInterval) {\n    tickInterval = (max - min) / tickCount;\n    // 如果设置了最小间距，则使用最小间距\n    if (minTickInterval && tickInterval < minTickInterval) {\n      tickInterval = minTickInterval;\n    }\n  }\n  tickInterval = Math.max(Math.floor((max - min) / (Math.pow(2, 12) - 1)), tickInterval);\n  var minYear = getYear(min);\n  // 如果间距大于 1 年，则将开始日期从整年开始\n  if (tickInterval > YEAR) {\n    var maxYear = getYear(max);\n    var yearInterval = Math.ceil(tickInterval / YEAR);\n    for (var i = minYear; i <= maxYear + yearInterval; i = i + yearInterval) {\n      ticks.push(createYear(i));\n    }\n  } else if (tickInterval > MONTH) {\n    // 大于月时\n    var monthInterval = Math.ceil(tickInterval / MONTH);\n    var mmMoth = getMonth(min);\n    var dMonths = diffMonth(min, max);\n    for (var i = 0; i <= dMonths + monthInterval; i = i + monthInterval) {\n      ticks.push(creatMonth(minYear, i + mmMoth));\n    }\n  } else if (tickInterval > DAY) {\n    // 大于天\n    var date = new Date(min);\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var mday = date.getDate();\n    var day = Math.ceil(tickInterval / DAY);\n    var ddays = diffDay(min, max);\n    for (var i = 0; i < ddays + day; i = i + day) {\n      ticks.push(new Date(year, month, mday + i).getTime());\n    }\n  } else if (tickInterval > HOUR) {\n    // 大于小时\n    var date = new Date(min);\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var day = date.getDate();\n    var hour = date.getHours();\n    var hours = Math.ceil(tickInterval / HOUR);\n    var dHours = diffHour(min, max);\n    for (var i = 0; i <= dHours + hours; i = i + hours) {\n      ticks.push(new Date(year, month, day, hour + i).getTime());\n    }\n  } else if (tickInterval > MINUTE) {\n    // 大于分钟\n    var dMinus = diffMinus(min, max);\n    var minutes = Math.ceil(tickInterval / MINUTE);\n    for (var i = 0; i <= dMinus + minutes; i = i + minutes) {\n      ticks.push(min + i * MINUTE);\n    }\n  } else {\n    // 小于分钟\n    var interval = tickInterval;\n    if (interval < SECOND) {\n      interval = SECOND;\n    }\n    var minSecond = Math.floor(min / SECOND) * SECOND;\n    var dSeconds = Math.ceil((max - min) / SECOND);\n    var seconds = Math.ceil(interval / SECOND);\n    for (var i = 0; i < dSeconds + seconds; i = i + seconds) {\n      ticks.push(minSecond + i * SECOND);\n    }\n  }\n  // 最好是能从算法能解决这个问题，但是如果指定了 tickInterval，计算 ticks，也只能这么算，所以\n  // 打印警告提示\n  if (ticks.length >= 512) {\n    console.warn(\"Notice: current ticks length(\" + ticks.length + \") >= 512, may cause performance issues, even out of memory. Because of the configure \\\"tickInterval\\\"(in milliseconds, current is \" + tickInterval + \") is too small, increase the value to solve the problem!\");\n  }\n  return ticks;\n}","map":{"version":3,"sources":["../../src/tick-method/time-pretty.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DAY, HOUR, MINUTE, MONTH, SECOND, YEAR } from '../util/time';\nfunction getYear(date) {\n    return new Date(date).getFullYear();\n}\nfunction createYear(year) {\n    return new Date(year, 0, 1).getTime();\n}\nfunction getMonth(date) {\n    return new Date(date).getMonth();\n}\nfunction diffMonth(min, max) {\n    var minYear = getYear(min);\n    var maxYear = getYear(max);\n    var minMonth = getMonth(min);\n    var maxMonth = getMonth(max);\n    return (maxYear - minYear) * 12 + ((maxMonth - minMonth) % 12);\n}\nfunction creatMonth(year, month) {\n    return new Date(year, month, 1).getTime();\n}\nfunction diffDay(min, max) {\n    return Math.ceil((max - min) / DAY);\n}\nfunction diffHour(min, max) {\n    return Math.ceil((max - min) / HOUR);\n}\nfunction diffMinus(min, max) {\n    return Math.ceil((max - min) / (60 * 1000));\n}\n/**\n * 计算 time 的 ticks，对 month, year 进行 pretty 处理\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\nexport default function timePretty(cfg) {\n    var min = cfg.min, max = cfg.max, minTickInterval = cfg.minTickInterval, tickCount = cfg.tickCount;\n    var tickInterval = cfg.tickInterval;\n    var ticks = [];\n    // 指定 tickInterval 后 tickCount 不生效，需要重新计算\n    if (!tickInterval) {\n        tickInterval = (max - min) / tickCount;\n        // 如果设置了最小间距，则使用最小间距\n        if (minTickInterval && tickInterval < minTickInterval) {\n            tickInterval = minTickInterval;\n        }\n    }\n    tickInterval = Math.max(Math.floor((max - min) / (Math.pow(2, 12) - 1)), tickInterval);\n    var minYear = getYear(min);\n    // 如果间距大于 1 年，则将开始日期从整年开始\n    if (tickInterval > YEAR) {\n        var maxYear = getYear(max);\n        var yearInterval = Math.ceil(tickInterval / YEAR);\n        for (var i = minYear; i <= maxYear + yearInterval; i = i + yearInterval) {\n            ticks.push(createYear(i));\n        }\n    }\n    else if (tickInterval > MONTH) {\n        // 大于月时\n        var monthInterval = Math.ceil(tickInterval / MONTH);\n        var mmMoth = getMonth(min);\n        var dMonths = diffMonth(min, max);\n        for (var i = 0; i <= dMonths + monthInterval; i = i + monthInterval) {\n            ticks.push(creatMonth(minYear, i + mmMoth));\n        }\n    }\n    else if (tickInterval > DAY) {\n        // 大于天\n        var date = new Date(min);\n        var year = date.getFullYear();\n        var month = date.getMonth();\n        var mday = date.getDate();\n        var day = Math.ceil(tickInterval / DAY);\n        var ddays = diffDay(min, max);\n        for (var i = 0; i < ddays + day; i = i + day) {\n            ticks.push(new Date(year, month, mday + i).getTime());\n        }\n    }\n    else if (tickInterval > HOUR) {\n        // 大于小时\n        var date = new Date(min);\n        var year = date.getFullYear();\n        var month = date.getMonth();\n        var day = date.getDate();\n        var hour = date.getHours();\n        var hours = Math.ceil(tickInterval / HOUR);\n        var dHours = diffHour(min, max);\n        for (var i = 0; i <= dHours + hours; i = i + hours) {\n            ticks.push(new Date(year, month, day, hour + i).getTime());\n        }\n    }\n    else if (tickInterval > MINUTE) {\n        // 大于分钟\n        var dMinus = diffMinus(min, max);\n        var minutes = Math.ceil(tickInterval / MINUTE);\n        for (var i = 0; i <= dMinus + minutes; i = i + minutes) {\n            ticks.push(min + i * MINUTE);\n        }\n    }\n    else {\n        // 小于分钟\n        var interval = tickInterval;\n        if (interval < SECOND) {\n            interval = SECOND;\n        }\n        var minSecond = Math.floor(min / SECOND) * SECOND;\n        var dSeconds = Math.ceil((max - min) / SECOND);\n        var seconds = Math.ceil(interval / SECOND);\n        for (var i = 0; i < dSeconds + seconds; i = i + seconds) {\n            ticks.push(minSecond + i * SECOND);\n        }\n    }\n    // 最好是能从算法能解决这个问题，但是如果指定了 tickInterval，计算 ticks，也只能这么算，所以\n    // 打印警告提示\n    if (ticks.length >= 512) {\n        console.warn(\"Notice: current ticks length(\" + ticks.length + \") >= 512, may cause performance issues, even out of memory. Because of the configure \\\"tickInterval\\\"(in milliseconds, current is \" + tickInterval + \") is too small, increase the value to solve the problem!\");\n    }\n    return ticks;\n}\n//# sourceMappingURL=time-pretty.js.map"]},"metadata":{},"sourceType":"module"}