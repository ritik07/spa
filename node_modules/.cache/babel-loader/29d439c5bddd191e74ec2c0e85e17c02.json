{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { ext } from '@antv/matrix-util';\nimport { each, filter, get, isFunction, isNil, isNumberEqual, mix, size } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { getMatrixByAngle } from '../util/matrix';\nimport { getStatesStyle } from '../util/state';\nimport Theme from '../util/theme';\nvar AxisBase = /** @class */function (_super) {\n  __extends(AxisBase, _super);\n  function AxisBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  AxisBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'axis',\n      ticks: [],\n      line: {},\n      tickLine: {},\n      subTickLine: null,\n      title: null,\n      /**\n       * 文本标签的配置项\n       */\n      label: {},\n      /**\n       * 垂直于坐标轴方向的因子，决定文本、title、tickLine 在坐标轴的哪一侧\n       */\n      verticalFactor: 1,\n      // 垂直方向限制的长度，对文本自适应有很大影响\n      verticalLimitLength: null,\n      overlapOrder: ['autoRotate', 'autoEllipsis', 'autoHide'],\n      tickStates: {},\n      optimize: {},\n      defaultCfg: {\n        line: {\n          // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          }\n        },\n        tickLine: {\n          // @type {Attrs} 标注坐标线的图形属性\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          },\n          alignTick: true,\n          length: 5,\n          displayWithLabel: true\n        },\n        subTickLine: {\n          // @type {Attrs} 标注坐标线的图形属性\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          },\n          count: 4,\n          length: 2\n        },\n        label: {\n          autoRotate: true,\n          autoHide: false,\n          autoEllipsis: false,\n          style: {\n            fontSize: 12,\n            fill: Theme.textColor,\n            fontFamily: Theme.fontFamily,\n            fontWeight: 'normal'\n          },\n          offset: 10,\n          offsetX: 0,\n          offsetY: 0\n        },\n        title: {\n          autoRotate: true,\n          spacing: 5,\n          position: 'center',\n          style: {\n            fontSize: 12,\n            fill: Theme.textColor,\n            textBaseline: 'middle',\n            fontFamily: Theme.fontFamily,\n            textAlign: 'center'\n          },\n          iconStyle: {\n            fill: Theme.descriptionIconFill,\n            stroke: Theme.descriptionIconStroke\n          },\n          description: ''\n        },\n        tickStates: {\n          active: {\n            labelStyle: {\n              fontWeight: 500\n            },\n            tickLineStyle: {\n              lineWidth: 2\n            }\n          },\n          inactive: {\n            labelStyle: {\n              fill: Theme.uncheckedColor\n            }\n          }\n        },\n        // 针对大数据量进行优化配置\n        optimize: {\n          enable: true,\n          threshold: 400\n        }\n      },\n      theme: {}\n    });\n  };\n  /**\n   * 绘制组件\n   */\n  AxisBase.prototype.renderInner = function (group) {\n    if (this.get('line')) {\n      this.drawLine(group);\n    }\n    // drawTicks 包括 drawLabels 和 drawTickLines\n    this.drawTicks(group);\n    if (this.get('title')) {\n      this.drawTitle(group);\n    }\n  };\n  // 实现 IList 接口\n  AxisBase.prototype.isList = function () {\n    return true;\n  };\n  /**\n   * 获取图例项\n   * @return {ListItem[]} 列表项集合\n   */\n  AxisBase.prototype.getItems = function () {\n    return this.get('ticks');\n  };\n  /**\n   * 设置列表项\n   * @param {ListItem[]} items 列表项集合\n   */\n  AxisBase.prototype.setItems = function (items) {\n    this.update({\n      ticks: items\n    });\n  };\n  /**\n   * 更新列表项\n   * @param {ListItem} item 列表项\n   * @param {object}   cfg  列表项\n   */\n  AxisBase.prototype.updateItem = function (item, cfg) {\n    mix(item, cfg);\n    this.clear(); // 由于单个图例项变化，会引起全局变化，所以全部更新\n    this.render();\n  };\n  /**\n   * 清空列表\n   */\n  AxisBase.prototype.clearItems = function () {\n    var itemGroup = this.getElementByLocalId('label-group');\n    itemGroup && itemGroup.clear();\n  };\n  /**\n   * 设置列表项的状态\n   * @param {ListItem} item  列表项\n   * @param {string}   state 状态名\n   * @param {boolean}  value 状态值, true, false\n   */\n  AxisBase.prototype.setItemState = function (item, state, value) {\n    item[state] = value;\n    this.updateTickStates(item); // 应用状态样式\n  };\n  /**\n   * 是否存在指定的状态\n   * @param {ListItem} item  列表项\n   * @param {boolean} state 状态名\n   */\n  AxisBase.prototype.hasState = function (item, state) {\n    return !!item[state];\n  };\n  AxisBase.prototype.getItemStates = function (item) {\n    var tickStates = this.get('tickStates');\n    var rst = [];\n    each(tickStates, function (v, k) {\n      if (item[k]) {\n        // item.selected\n        rst.push(k);\n      }\n    });\n    return rst;\n  };\n  /**\n   * 清楚所有列表项的状态\n   * @param {string} state 状态值\n   */\n  AxisBase.prototype.clearItemsState = function (state) {\n    var _this = this;\n    var items = this.getItemsByState(state);\n    each(items, function (item) {\n      _this.setItemState(item, state, false);\n    });\n  };\n  /**\n   * 根据状态获取图例项\n   * @param  {string}     state [description]\n   * @return {ListItem[]}       [description]\n   */\n  AxisBase.prototype.getItemsByState = function (state) {\n    var _this = this;\n    var items = this.getItems();\n    return filter(items, function (item) {\n      return _this.hasState(item, state);\n    });\n  };\n  AxisBase.prototype.getSidePoint = function (point, offset) {\n    var self = this;\n    var vector = self.getSideVector(offset, point);\n    return {\n      x: point.x + vector[0],\n      y: point.y + vector[1]\n    };\n  };\n  AxisBase.prototype.getTextAnchor = function (vector) {\n    var align;\n    if (isNumberEqual(vector[0], 0)) {\n      align = 'center';\n    } else if (vector[0] > 0) {\n      align = 'start';\n    } else if (vector[0] < 0) {\n      align = 'end';\n    }\n    return align;\n  };\n  AxisBase.prototype.getTextBaseline = function (vector) {\n    var base;\n    if (isNumberEqual(vector[1], 0)) {\n      base = 'middle';\n    } else if (vector[1] > 0) {\n      base = 'top';\n    } else if (vector[1] < 0) {\n      base = 'bottom';\n    }\n    return base;\n  };\n  AxisBase.prototype.processOverlap = function (labelGroup) {};\n  // 绘制坐标轴线\n  AxisBase.prototype.drawLine = function (group) {\n    var path = this.getLinePath();\n    var line = this.get('line'); // line 的判空在调用 drawLine 之前，不在这里判定\n    this.addShape(group, {\n      type: 'path',\n      id: this.getElementId('line'),\n      name: 'axis-line',\n      attrs: mix({\n        path: path\n      }, line.style)\n    });\n  };\n  AxisBase.prototype.getTickLineItems = function (ticks) {\n    var _this = this;\n    var tickLineItems = [];\n    var tickLine = this.get('tickLine');\n    var alignTick = tickLine.alignTick;\n    var tickLineLength = tickLine.length;\n    var tickSegment = 1;\n    var tickCount = ticks.length;\n    if (tickCount >= 2) {\n      tickSegment = ticks[1].value - ticks[0].value;\n    }\n    each(ticks, function (tick) {\n      var point = tick.point;\n      if (!alignTick) {\n        // tickLine 不同 tick 对齐时需要调整 point\n        point = _this.getTickPoint(tick.value - tickSegment / 2);\n      }\n      var endPoint = _this.getSidePoint(point, tickLineLength);\n      tickLineItems.push({\n        startPoint: point,\n        tickValue: tick.value,\n        endPoint: endPoint,\n        tickId: tick.id,\n        id: \"tickline-\" + tick.id\n      });\n    });\n    // 如果 tickLine 不居中对齐，则需要在最后面补充一个 tickLine\n    // if (!alignTick && tickCount > 0) {\n    //   const tick = ticks[tickCount - 1];\n    //   const point = this.getTickPoint(tick.value + tickSegment / 2);\n    // }\n    return tickLineItems;\n  };\n  AxisBase.prototype.getSubTickLineItems = function (tickLineItems) {\n    var subTickLineItems = [];\n    var subTickLine = this.get('subTickLine');\n    var subCount = subTickLine.count;\n    var tickLineCount = tickLineItems.length;\n    // 刻度线的数量大于 2 时，才绘制子刻度\n    if (tickLineCount >= 2) {\n      for (var i = 0; i < tickLineCount - 1; i++) {\n        var pre = tickLineItems[i];\n        var next = tickLineItems[i + 1];\n        for (var j = 0; j < subCount; j++) {\n          var percent = (j + 1) / (subCount + 1);\n          var tickValue = (1 - percent) * pre.tickValue + percent * next.tickValue;\n          var point = this.getTickPoint(tickValue);\n          var endPoint = this.getSidePoint(point, subTickLine.length);\n          subTickLineItems.push({\n            startPoint: point,\n            endPoint: endPoint,\n            tickValue: tickValue,\n            id: \"sub-\" + pre.id + \"-\" + j\n          });\n        }\n      }\n    }\n    return subTickLineItems;\n  };\n  AxisBase.prototype.getTickLineAttrs = function (tickItem, type, index, tickItems) {\n    var style = this.get(type).style;\n    // 保持和 grid 相同的数据结构\n    var item = {\n      points: [tickItem.startPoint, tickItem.endPoint]\n    };\n    var defaultTickLineStyle = get(this.get('theme'), ['tickLine', 'style'], {});\n    style = isFunction(style) ? mix({}, defaultTickLineStyle, style(item, index, tickItems)) : style;\n    var startPoint = tickItem.startPoint,\n      endPoint = tickItem.endPoint;\n    return __assign({\n      x1: startPoint.x,\n      y1: startPoint.y,\n      x2: endPoint.x,\n      y2: endPoint.y\n    }, style);\n  };\n  // 绘制坐标轴刻度线\n  AxisBase.prototype.drawTick = function (tickItem, tickLineGroup, type, index, tickItems) {\n    this.addShape(tickLineGroup, {\n      type: 'line',\n      id: this.getElementId(tickItem.id),\n      name: \"axis-\" + type,\n      attrs: this.getTickLineAttrs(tickItem, type, index, tickItems)\n    });\n  };\n  // 绘制坐标轴刻度线，包括子刻度线\n  AxisBase.prototype.drawTickLines = function (group) {\n    var _this = this;\n    var ticks = this.get('ticks');\n    var subTickLine = this.get('subTickLine');\n    var tickLineItems = this.getTickLineItems(ticks);\n    var tickLineGroup = this.addGroup(group, {\n      name: 'axis-tickline-group',\n      id: this.getElementId('tickline-group')\n    });\n    var tickCfg = this.get('tickLine');\n    each(tickLineItems, function (item, index) {\n      if (tickCfg.displayWithLabel) {\n        // 如果跟随 label 显示，则检测是否存在对应的 label\n        var labelId = _this.getElementId(\"label-\" + item.tickId);\n        if (group.findById(labelId)) {\n          _this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n        }\n      } else {\n        _this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n      }\n    });\n    if (subTickLine) {\n      var subTickLineItems_1 = this.getSubTickLineItems(tickLineItems);\n      each(subTickLineItems_1, function (item, index) {\n        _this.drawTick(item, tickLineGroup, 'subTickLine', index, subTickLineItems_1);\n      });\n    }\n  };\n  // 预处理 ticks 确定位置和补充 id\n  AxisBase.prototype.processTicks = function () {\n    var _this = this;\n    var ticks = this.get('ticks');\n    each(ticks, function (tick) {\n      tick.point = _this.getTickPoint(tick.value);\n      // 补充 tick 的 id，为动画和更新做准备\n      if (isNil(tick.id)) {\n        // 默认使用 tick.name 作为id\n        tick.id = tick.name;\n      }\n    });\n  };\n  // 绘制 ticks 包括文本和 tickLine\n  AxisBase.prototype.drawTicks = function (group) {\n    var _this = this;\n    this.optimizeTicks();\n    this.processTicks();\n    if (this.get('label')) {\n      this.drawLabels(group);\n    }\n    if (this.get('tickLine')) {\n      this.drawTickLines(group);\n    }\n    var ticks = this.get('ticks');\n    each(ticks, function (tick) {\n      _this.applyTickStates(tick, group);\n    });\n  };\n  /**\n   * 根据 optimize 配置对 ticks 进行抽样，对抽样过后的 ticks 才进行真实的渲染\n   */\n  AxisBase.prototype.optimizeTicks = function () {\n    var optimize = this.get('optimize');\n    var ticks = this.get('ticks');\n    if (optimize && optimize.enable && optimize.threshold > 0) {\n      var len = size(ticks);\n      if (len > optimize.threshold) {\n        var page_1 = Math.ceil(len / optimize.threshold);\n        var optimizedTicks = ticks.filter(function (tick, idx) {\n          return idx % page_1 === 0;\n        });\n        this.set('ticks', optimizedTicks);\n        this.set('originalTicks', ticks);\n      }\n    }\n  };\n  // 获取 label 的配置项\n  AxisBase.prototype.getLabelAttrs = function (tick, index, ticks) {\n    var labelCfg = this.get('label');\n    var offset = labelCfg.offset,\n      offsetX = labelCfg.offsetX,\n      offsetY = labelCfg.offsetY,\n      rotate = labelCfg.rotate,\n      formatter = labelCfg.formatter;\n    var point = this.getSidePoint(tick.point, offset);\n    var vector = this.getSideVector(offset, point);\n    var text = formatter ? formatter(tick.name, tick, index) : tick.name;\n    var style = labelCfg.style;\n    style = isFunction(style) ? get(this.get('theme'), ['label', 'style'], {}) : style;\n    var attrs = mix({\n      x: point.x + offsetX,\n      y: point.y + offsetY,\n      text: text,\n      textAlign: this.getTextAnchor(vector),\n      textBaseline: this.getTextBaseline(vector)\n    }, style);\n    if (rotate) {\n      attrs.matrix = getMatrixByAngle(point, rotate);\n    }\n    return attrs;\n  };\n  // 绘制文本\n  AxisBase.prototype.drawLabels = function (group) {\n    var _this = this;\n    var ticks = this.get('ticks');\n    var labelGroup = this.addGroup(group, {\n      name: 'axis-label-group',\n      id: this.getElementId('label-group')\n    });\n    each(ticks, function (tick, index) {\n      _this.addShape(labelGroup, {\n        type: 'text',\n        name: 'axis-label',\n        id: _this.getElementId(\"label-\" + tick.id),\n        attrs: _this.getLabelAttrs(tick, index, ticks),\n        delegateObject: {\n          tick: tick,\n          item: tick,\n          index: index\n        }\n      });\n    });\n    this.processOverlap(labelGroup);\n    // 处理完后再进行 style 回调处理\n    var labels = labelGroup.getChildren();\n    var defaultLabelStyle = get(this.get('theme'), ['label', 'style'], {});\n    var _a = this.get('label'),\n      style = _a.style,\n      formatter = _a.formatter;\n    if (isFunction(style)) {\n      var afterProcessTicks_1 = labels.map(function (label) {\n        return get(label.get('delegateObject'), 'tick');\n      });\n      each(labels, function (label, index) {\n        var tick = label.get('delegateObject').tick;\n        var text = formatter ? formatter(tick.name, tick, index) : tick.name;\n        var newStyle = mix({}, defaultLabelStyle, style(text, index, afterProcessTicks_1));\n        label.attr(newStyle);\n      });\n    }\n  };\n  // 标题的属性\n  AxisBase.prototype.getTitleAttrs = function () {\n    var titleCfg = this.get('title');\n    var style = titleCfg.style,\n      position = titleCfg.position,\n      offset = titleCfg.offset,\n      _a = titleCfg.spacing,\n      spacing = _a === void 0 ? 0 : _a,\n      autoRotate = titleCfg.autoRotate;\n    var titleHeight = style.fontSize;\n    var percent = 0.5;\n    if (position === 'start') {\n      percent = 0;\n    } else if (position === 'end') {\n      percent = 1;\n    }\n    var point = this.getTickPoint(percent); // 标题对应的坐标轴上的点\n    // 如果没有指定 titleOffset 也没有渲染 label，这里需要自动计算 offset\n    var titlePoint = this.getSidePoint(point, offset || spacing + titleHeight / 2); // 标题的点\n    var attrs = mix({\n      x: titlePoint.x,\n      y: titlePoint.y,\n      text: titleCfg.text\n    }, style);\n    var rotate = titleCfg.rotate; // rotate 是角度值\n    var angle = rotate;\n    if (isNil(rotate) && autoRotate) {\n      // 用户没有设定旋转角度，同时设置自动旋转\n      var vector = this.getAxisVector(point);\n      var v1 = [1, 0]; // 水平方向的向量\n      angle = ext.angleTo(vector, v1, true);\n    }\n    if (angle) {\n      var matrix = getMatrixByAngle(titlePoint, angle);\n      attrs.matrix = matrix;\n    }\n    return attrs;\n  };\n  // 绘制标题\n  AxisBase.prototype.drawTitle = function (group) {\n    var _a;\n    var titleAttrs = this.getTitleAttrs();\n    var titleShape = this.addShape(group, {\n      type: 'text',\n      id: this.getElementId('title'),\n      name: 'axis-title',\n      attrs: titleAttrs\n    });\n    // description字段存在时，显示icon\n    if ((_a = this.get('title')) === null || _a === void 0 ? void 0 : _a.description) {\n      this.drawDescriptionIcon(group, titleShape, titleAttrs.matrix);\n    }\n  };\n  AxisBase.prototype.drawDescriptionIcon = function (group, titleShape, matrix) {\n    var descriptionShape = this.addGroup(group, {\n      name: 'axis-description',\n      id: this.getElementById('description')\n    });\n    var _a = titleShape.getBBox(),\n      maxX = _a.maxX,\n      maxY = _a.maxY,\n      height = _a.height;\n    var iconStyle = this.get('title').iconStyle;\n    var spacing = 4; // 设置icon与文本之间距离\n    var r = height / 2;\n    var lineWidth = r / 6;\n    var startX = maxX + spacing;\n    var startY = maxY - height / 2;\n    // 绘制 information icon 路径\n    // 外圆环path\n    var _b = [startX + r, startY - r],\n      x0 = _b[0],\n      y0 = _b[1];\n    var _c = [x0 + r, y0 + r],\n      x1 = _c[0],\n      y1 = _c[1];\n    var _d = [x0, y1 + r],\n      x2 = _d[0],\n      y2 = _d[1];\n    var _e = [startX, y0 + r],\n      x3 = _e[0],\n      y3 = _e[1];\n    // i path\n    var _f = [startX + r, startY - height / 4],\n      x4 = _f[0],\n      y4 = _f[1];\n    var _g = [x4, y4 + lineWidth],\n      x5 = _g[0],\n      y5 = _g[1];\n    var _h = [x5, y5 + lineWidth],\n      x6 = _h[0],\n      y6 = _h[1];\n    var _j = [x6, y6 + r * 3 / 4],\n      x7 = _j[0],\n      y7 = _j[1];\n    this.addShape(descriptionShape, {\n      type: 'path',\n      id: this.getElementId('title-description-icon'),\n      name: 'axis-title-description-icon',\n      attrs: __assign({\n        path: [['M', x0, y0], ['A', r, r, 0, 0, 1, x1, y1], ['A', r, r, 0, 0, 1, x2, y2], ['A', r, r, 0, 0, 1, x3, y3], ['A', r, r, 0, 0, 1, x0, y0], ['M', x4, y4], ['L', x5, y5], ['M', x6, y6], ['L', x7, y7]],\n        lineWidth: lineWidth,\n        matrix: matrix\n      }, iconStyle)\n    });\n    // 点击热区，设置透明矩形\n    this.addShape(descriptionShape, {\n      type: 'rect',\n      id: this.getElementId('title-description-rect'),\n      name: 'axis-title-description-rect',\n      attrs: {\n        x: startX,\n        y: startY - height / 2,\n        width: height,\n        height: height,\n        stroke: '#000',\n        fill: '#000',\n        opacity: 0,\n        matrix: matrix,\n        cursor: 'pointer'\n      }\n    });\n  };\n  AxisBase.prototype.applyTickStates = function (tick, group) {\n    var states = this.getItemStates(tick);\n    if (states.length) {\n      var tickStates = this.get('tickStates');\n      // 分别更新 label 和 tickLine\n      var labelId = this.getElementId(\"label-\" + tick.id);\n      var labelShape = group.findById(labelId);\n      if (labelShape) {\n        var labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n        labelStateStyle && labelShape.attr(labelStateStyle);\n      }\n      var tickLineId = this.getElementId(\"tickline-\" + tick.id);\n      var tickLineShape = group.findById(tickLineId);\n      if (tickLineShape) {\n        var tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n        tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n      }\n    }\n  };\n  AxisBase.prototype.updateTickStates = function (tick) {\n    var states = this.getItemStates(tick);\n    var tickStates = this.get('tickStates');\n    var labelCfg = this.get('label');\n    var labelShape = this.getElementByLocalId(\"label-\" + tick.id);\n    var tickLineCfg = this.get('tickLine');\n    var tickLineShape = this.getElementByLocalId(\"tickline-\" + tick.id);\n    if (states.length) {\n      if (labelShape) {\n        var labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n        labelStateStyle && labelShape.attr(labelStateStyle);\n      }\n      if (tickLineShape) {\n        var tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n        tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n      }\n    } else {\n      if (labelShape) {\n        labelShape.attr(labelCfg.style);\n      }\n      if (tickLineShape) {\n        tickLineShape.attr(tickLineCfg.style);\n      }\n    }\n  };\n  return AxisBase;\n}(GroupComponent);\nexport default AxisBase;","map":{"version":3,"sources":["../../src/axis/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { ext } from '@antv/matrix-util';\nimport { each, filter, get, isFunction, isNil, isNumberEqual, mix, size } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { getMatrixByAngle } from '../util/matrix';\nimport { getStatesStyle } from '../util/state';\nimport Theme from '../util/theme';\nvar AxisBase = /** @class */ (function (_super) {\n    __extends(AxisBase, _super);\n    function AxisBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AxisBase.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { name: 'axis', ticks: [], line: {}, tickLine: {}, subTickLine: null, title: null, \n            /**\n             * 文本标签的配置项\n             */\n            label: {}, \n            /**\n             * 垂直于坐标轴方向的因子，决定文本、title、tickLine 在坐标轴的哪一侧\n             */\n            verticalFactor: 1, \n            // 垂直方向限制的长度，对文本自适应有很大影响\n            verticalLimitLength: null, overlapOrder: ['autoRotate', 'autoEllipsis', 'autoHide'], tickStates: {}, optimize: {}, defaultCfg: {\n                line: {\n                    // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线\n                    style: {\n                        lineWidth: 1,\n                        stroke: Theme.lineColor,\n                    },\n                },\n                tickLine: {\n                    // @type {Attrs} 标注坐标线的图形属性\n                    style: {\n                        lineWidth: 1,\n                        stroke: Theme.lineColor,\n                    },\n                    alignTick: true,\n                    length: 5,\n                    displayWithLabel: true,\n                },\n                subTickLine: {\n                    // @type {Attrs} 标注坐标线的图形属性\n                    style: {\n                        lineWidth: 1,\n                        stroke: Theme.lineColor,\n                    },\n                    count: 4,\n                    length: 2,\n                },\n                label: {\n                    autoRotate: true,\n                    autoHide: false,\n                    autoEllipsis: false,\n                    style: {\n                        fontSize: 12,\n                        fill: Theme.textColor,\n                        fontFamily: Theme.fontFamily,\n                        fontWeight: 'normal',\n                    },\n                    offset: 10,\n                    offsetX: 0,\n                    offsetY: 0,\n                },\n                title: {\n                    autoRotate: true,\n                    spacing: 5,\n                    position: 'center',\n                    style: {\n                        fontSize: 12,\n                        fill: Theme.textColor,\n                        textBaseline: 'middle',\n                        fontFamily: Theme.fontFamily,\n                        textAlign: 'center',\n                    },\n                    iconStyle: {\n                        fill: Theme.descriptionIconFill,\n                        stroke: Theme.descriptionIconStroke,\n                    },\n                    description: ''\n                },\n                tickStates: {\n                    active: {\n                        labelStyle: {\n                            fontWeight: 500,\n                        },\n                        tickLineStyle: {\n                            lineWidth: 2,\n                        },\n                    },\n                    inactive: {\n                        labelStyle: {\n                            fill: Theme.uncheckedColor,\n                        },\n                    },\n                },\n                // 针对大数据量进行优化配置\n                optimize: {\n                    enable: true,\n                    threshold: 400,\n                },\n            }, theme: {} });\n    };\n    /**\n     * 绘制组件\n     */\n    AxisBase.prototype.renderInner = function (group) {\n        if (this.get('line')) {\n            this.drawLine(group);\n        }\n        // drawTicks 包括 drawLabels 和 drawTickLines\n        this.drawTicks(group);\n        if (this.get('title')) {\n            this.drawTitle(group);\n        }\n    };\n    // 实现 IList 接口\n    AxisBase.prototype.isList = function () {\n        return true;\n    };\n    /**\n     * 获取图例项\n     * @return {ListItem[]} 列表项集合\n     */\n    AxisBase.prototype.getItems = function () {\n        return this.get('ticks');\n    };\n    /**\n     * 设置列表项\n     * @param {ListItem[]} items 列表项集合\n     */\n    AxisBase.prototype.setItems = function (items) {\n        this.update({\n            ticks: items,\n        });\n    };\n    /**\n     * 更新列表项\n     * @param {ListItem} item 列表项\n     * @param {object}   cfg  列表项\n     */\n    AxisBase.prototype.updateItem = function (item, cfg) {\n        mix(item, cfg);\n        this.clear(); // 由于单个图例项变化，会引起全局变化，所以全部更新\n        this.render();\n    };\n    /**\n     * 清空列表\n     */\n    AxisBase.prototype.clearItems = function () {\n        var itemGroup = this.getElementByLocalId('label-group');\n        itemGroup && itemGroup.clear();\n    };\n    /**\n     * 设置列表项的状态\n     * @param {ListItem} item  列表项\n     * @param {string}   state 状态名\n     * @param {boolean}  value 状态值, true, false\n     */\n    AxisBase.prototype.setItemState = function (item, state, value) {\n        item[state] = value;\n        this.updateTickStates(item); // 应用状态样式\n    };\n    /**\n     * 是否存在指定的状态\n     * @param {ListItem} item  列表项\n     * @param {boolean} state 状态名\n     */\n    AxisBase.prototype.hasState = function (item, state) {\n        return !!item[state];\n    };\n    AxisBase.prototype.getItemStates = function (item) {\n        var tickStates = this.get('tickStates');\n        var rst = [];\n        each(tickStates, function (v, k) {\n            if (item[k]) {\n                // item.selected\n                rst.push(k);\n            }\n        });\n        return rst;\n    };\n    /**\n     * 清楚所有列表项的状态\n     * @param {string} state 状态值\n     */\n    AxisBase.prototype.clearItemsState = function (state) {\n        var _this = this;\n        var items = this.getItemsByState(state);\n        each(items, function (item) {\n            _this.setItemState(item, state, false);\n        });\n    };\n    /**\n     * 根据状态获取图例项\n     * @param  {string}     state [description]\n     * @return {ListItem[]}       [description]\n     */\n    AxisBase.prototype.getItemsByState = function (state) {\n        var _this = this;\n        var items = this.getItems();\n        return filter(items, function (item) {\n            return _this.hasState(item, state);\n        });\n    };\n    AxisBase.prototype.getSidePoint = function (point, offset) {\n        var self = this;\n        var vector = self.getSideVector(offset, point);\n        return {\n            x: point.x + vector[0],\n            y: point.y + vector[1],\n        };\n    };\n    AxisBase.prototype.getTextAnchor = function (vector) {\n        var align;\n        if (isNumberEqual(vector[0], 0)) {\n            align = 'center';\n        }\n        else if (vector[0] > 0) {\n            align = 'start';\n        }\n        else if (vector[0] < 0) {\n            align = 'end';\n        }\n        return align;\n    };\n    AxisBase.prototype.getTextBaseline = function (vector) {\n        var base;\n        if (isNumberEqual(vector[1], 0)) {\n            base = 'middle';\n        }\n        else if (vector[1] > 0) {\n            base = 'top';\n        }\n        else if (vector[1] < 0) {\n            base = 'bottom';\n        }\n        return base;\n    };\n    AxisBase.prototype.processOverlap = function (labelGroup) { };\n    // 绘制坐标轴线\n    AxisBase.prototype.drawLine = function (group) {\n        var path = this.getLinePath();\n        var line = this.get('line'); // line 的判空在调用 drawLine 之前，不在这里判定\n        this.addShape(group, {\n            type: 'path',\n            id: this.getElementId('line'),\n            name: 'axis-line',\n            attrs: mix({\n                path: path,\n            }, line.style),\n        });\n    };\n    AxisBase.prototype.getTickLineItems = function (ticks) {\n        var _this = this;\n        var tickLineItems = [];\n        var tickLine = this.get('tickLine');\n        var alignTick = tickLine.alignTick;\n        var tickLineLength = tickLine.length;\n        var tickSegment = 1;\n        var tickCount = ticks.length;\n        if (tickCount >= 2) {\n            tickSegment = ticks[1].value - ticks[0].value;\n        }\n        each(ticks, function (tick) {\n            var point = tick.point;\n            if (!alignTick) {\n                // tickLine 不同 tick 对齐时需要调整 point\n                point = _this.getTickPoint(tick.value - tickSegment / 2);\n            }\n            var endPoint = _this.getSidePoint(point, tickLineLength);\n            tickLineItems.push({\n                startPoint: point,\n                tickValue: tick.value,\n                endPoint: endPoint,\n                tickId: tick.id,\n                id: \"tickline-\" + tick.id,\n            });\n        });\n        // 如果 tickLine 不居中对齐，则需要在最后面补充一个 tickLine\n        // if (!alignTick && tickCount > 0) {\n        //   const tick = ticks[tickCount - 1];\n        //   const point = this.getTickPoint(tick.value + tickSegment / 2);\n        // }\n        return tickLineItems;\n    };\n    AxisBase.prototype.getSubTickLineItems = function (tickLineItems) {\n        var subTickLineItems = [];\n        var subTickLine = this.get('subTickLine');\n        var subCount = subTickLine.count;\n        var tickLineCount = tickLineItems.length;\n        // 刻度线的数量大于 2 时，才绘制子刻度\n        if (tickLineCount >= 2) {\n            for (var i = 0; i < tickLineCount - 1; i++) {\n                var pre = tickLineItems[i];\n                var next = tickLineItems[i + 1];\n                for (var j = 0; j < subCount; j++) {\n                    var percent = (j + 1) / (subCount + 1);\n                    var tickValue = (1 - percent) * pre.tickValue + percent * next.tickValue;\n                    var point = this.getTickPoint(tickValue);\n                    var endPoint = this.getSidePoint(point, subTickLine.length);\n                    subTickLineItems.push({\n                        startPoint: point,\n                        endPoint: endPoint,\n                        tickValue: tickValue,\n                        id: \"sub-\" + pre.id + \"-\" + j,\n                    });\n                }\n            }\n        }\n        return subTickLineItems;\n    };\n    AxisBase.prototype.getTickLineAttrs = function (tickItem, type, index, tickItems) {\n        var style = this.get(type).style;\n        // 保持和 grid 相同的数据结构\n        var item = {\n            points: [tickItem.startPoint, tickItem.endPoint],\n        };\n        var defaultTickLineStyle = get(this.get('theme'), ['tickLine', 'style'], {});\n        style = isFunction(style) ? mix({}, defaultTickLineStyle, style(item, index, tickItems)) : style;\n        var startPoint = tickItem.startPoint, endPoint = tickItem.endPoint;\n        return __assign({ x1: startPoint.x, y1: startPoint.y, x2: endPoint.x, y2: endPoint.y }, style);\n    };\n    // 绘制坐标轴刻度线\n    AxisBase.prototype.drawTick = function (tickItem, tickLineGroup, type, index, tickItems) {\n        this.addShape(tickLineGroup, {\n            type: 'line',\n            id: this.getElementId(tickItem.id),\n            name: \"axis-\" + type,\n            attrs: this.getTickLineAttrs(tickItem, type, index, tickItems),\n        });\n    };\n    // 绘制坐标轴刻度线，包括子刻度线\n    AxisBase.prototype.drawTickLines = function (group) {\n        var _this = this;\n        var ticks = this.get('ticks');\n        var subTickLine = this.get('subTickLine');\n        var tickLineItems = this.getTickLineItems(ticks);\n        var tickLineGroup = this.addGroup(group, {\n            name: 'axis-tickline-group',\n            id: this.getElementId('tickline-group'),\n        });\n        var tickCfg = this.get('tickLine');\n        each(tickLineItems, function (item, index) {\n            if (tickCfg.displayWithLabel) {\n                // 如果跟随 label 显示，则检测是否存在对应的 label\n                var labelId = _this.getElementId(\"label-\" + item.tickId);\n                if (group.findById(labelId)) {\n                    _this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n                }\n            }\n            else {\n                _this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n            }\n        });\n        if (subTickLine) {\n            var subTickLineItems_1 = this.getSubTickLineItems(tickLineItems);\n            each(subTickLineItems_1, function (item, index) {\n                _this.drawTick(item, tickLineGroup, 'subTickLine', index, subTickLineItems_1);\n            });\n        }\n    };\n    // 预处理 ticks 确定位置和补充 id\n    AxisBase.prototype.processTicks = function () {\n        var _this = this;\n        var ticks = this.get('ticks');\n        each(ticks, function (tick) {\n            tick.point = _this.getTickPoint(tick.value);\n            // 补充 tick 的 id，为动画和更新做准备\n            if (isNil(tick.id)) {\n                // 默认使用 tick.name 作为id\n                tick.id = tick.name;\n            }\n        });\n    };\n    // 绘制 ticks 包括文本和 tickLine\n    AxisBase.prototype.drawTicks = function (group) {\n        var _this = this;\n        this.optimizeTicks();\n        this.processTicks();\n        if (this.get('label')) {\n            this.drawLabels(group);\n        }\n        if (this.get('tickLine')) {\n            this.drawTickLines(group);\n        }\n        var ticks = this.get('ticks');\n        each(ticks, function (tick) {\n            _this.applyTickStates(tick, group);\n        });\n    };\n    /**\n     * 根据 optimize 配置对 ticks 进行抽样，对抽样过后的 ticks 才进行真实的渲染\n     */\n    AxisBase.prototype.optimizeTicks = function () {\n        var optimize = this.get('optimize');\n        var ticks = this.get('ticks');\n        if (optimize && optimize.enable && optimize.threshold > 0) {\n            var len = size(ticks);\n            if (len > optimize.threshold) {\n                var page_1 = Math.ceil(len / optimize.threshold);\n                var optimizedTicks = ticks.filter(function (tick, idx) { return idx % page_1 === 0; });\n                this.set('ticks', optimizedTicks);\n                this.set('originalTicks', ticks);\n            }\n        }\n    };\n    // 获取 label 的配置项\n    AxisBase.prototype.getLabelAttrs = function (tick, index, ticks) {\n        var labelCfg = this.get('label');\n        var offset = labelCfg.offset, offsetX = labelCfg.offsetX, offsetY = labelCfg.offsetY, rotate = labelCfg.rotate, formatter = labelCfg.formatter;\n        var point = this.getSidePoint(tick.point, offset);\n        var vector = this.getSideVector(offset, point);\n        var text = formatter ? formatter(tick.name, tick, index) : tick.name;\n        var style = labelCfg.style;\n        style = isFunction(style) ? get(this.get('theme'), ['label', 'style'], {}) : style;\n        var attrs = mix({\n            x: point.x + offsetX,\n            y: point.y + offsetY,\n            text: text,\n            textAlign: this.getTextAnchor(vector),\n            textBaseline: this.getTextBaseline(vector),\n        }, style);\n        if (rotate) {\n            attrs.matrix = getMatrixByAngle(point, rotate);\n        }\n        return attrs;\n    };\n    // 绘制文本\n    AxisBase.prototype.drawLabels = function (group) {\n        var _this = this;\n        var ticks = this.get('ticks');\n        var labelGroup = this.addGroup(group, {\n            name: 'axis-label-group',\n            id: this.getElementId('label-group'),\n        });\n        each(ticks, function (tick, index) {\n            _this.addShape(labelGroup, {\n                type: 'text',\n                name: 'axis-label',\n                id: _this.getElementId(\"label-\" + tick.id),\n                attrs: _this.getLabelAttrs(tick, index, ticks),\n                delegateObject: {\n                    tick: tick,\n                    item: tick,\n                    index: index,\n                },\n            });\n        });\n        this.processOverlap(labelGroup);\n        // 处理完后再进行 style 回调处理\n        var labels = labelGroup.getChildren();\n        var defaultLabelStyle = get(this.get('theme'), ['label', 'style'], {});\n        var _a = this.get('label'), style = _a.style, formatter = _a.formatter;\n        if (isFunction(style)) {\n            var afterProcessTicks_1 = labels.map(function (label) { return get(label.get('delegateObject'), 'tick'); });\n            each(labels, function (label, index) {\n                var tick = label.get('delegateObject').tick;\n                var text = formatter ? formatter(tick.name, tick, index) : tick.name;\n                var newStyle = mix({}, defaultLabelStyle, style(text, index, afterProcessTicks_1));\n                label.attr(newStyle);\n            });\n        }\n    };\n    // 标题的属性\n    AxisBase.prototype.getTitleAttrs = function () {\n        var titleCfg = this.get('title');\n        var style = titleCfg.style, position = titleCfg.position, offset = titleCfg.offset, _a = titleCfg.spacing, spacing = _a === void 0 ? 0 : _a, autoRotate = titleCfg.autoRotate;\n        var titleHeight = style.fontSize;\n        var percent = 0.5;\n        if (position === 'start') {\n            percent = 0;\n        }\n        else if (position === 'end') {\n            percent = 1;\n        }\n        var point = this.getTickPoint(percent); // 标题对应的坐标轴上的点\n        // 如果没有指定 titleOffset 也没有渲染 label，这里需要自动计算 offset\n        var titlePoint = this.getSidePoint(point, offset || spacing + titleHeight / 2); // 标题的点\n        var attrs = mix({\n            x: titlePoint.x,\n            y: titlePoint.y,\n            text: titleCfg.text,\n        }, style);\n        var rotate = titleCfg.rotate; // rotate 是角度值\n        var angle = rotate;\n        if (isNil(rotate) && autoRotate) {\n            // 用户没有设定旋转角度，同时设置自动旋转\n            var vector = this.getAxisVector(point);\n            var v1 = [1, 0]; // 水平方向的向量\n            angle = ext.angleTo(vector, v1, true);\n        }\n        if (angle) {\n            var matrix = getMatrixByAngle(titlePoint, angle);\n            attrs.matrix = matrix;\n        }\n        return attrs;\n    };\n    // 绘制标题\n    AxisBase.prototype.drawTitle = function (group) {\n        var _a;\n        var titleAttrs = this.getTitleAttrs();\n        var titleShape = this.addShape(group, {\n            type: 'text',\n            id: this.getElementId('title'),\n            name: 'axis-title',\n            attrs: titleAttrs\n        });\n        // description字段存在时，显示icon\n        if ((_a = this.get('title')) === null || _a === void 0 ? void 0 : _a.description) {\n            this.drawDescriptionIcon(group, titleShape, titleAttrs.matrix);\n        }\n    };\n    AxisBase.prototype.drawDescriptionIcon = function (group, titleShape, matrix) {\n        var descriptionShape = this.addGroup(group, {\n            name: 'axis-description',\n            id: this.getElementById('description')\n        });\n        var _a = titleShape.getBBox(), maxX = _a.maxX, maxY = _a.maxY, height = _a.height;\n        var iconStyle = this.get('title').iconStyle;\n        var spacing = 4; // 设置icon与文本之间距离\n        var r = height / 2;\n        var lineWidth = r / 6;\n        var startX = maxX + spacing;\n        var startY = maxY - height / 2;\n        // 绘制 information icon 路径\n        // 外圆环path\n        var _b = [startX + r, startY - r], x0 = _b[0], y0 = _b[1];\n        var _c = [x0 + r, y0 + r], x1 = _c[0], y1 = _c[1];\n        var _d = [x0, y1 + r], x2 = _d[0], y2 = _d[1];\n        var _e = [startX, y0 + r], x3 = _e[0], y3 = _e[1];\n        // i path\n        var _f = [startX + r, startY - height / 4], x4 = _f[0], y4 = _f[1];\n        var _g = [x4, y4 + lineWidth], x5 = _g[0], y5 = _g[1];\n        var _h = [x5, y5 + lineWidth], x6 = _h[0], y6 = _h[1];\n        var _j = [x6, y6 + r * 3 / 4], x7 = _j[0], y7 = _j[1];\n        this.addShape(descriptionShape, {\n            type: 'path',\n            id: this.getElementId('title-description-icon'),\n            name: 'axis-title-description-icon',\n            attrs: __assign({ path: [\n                    ['M', x0, y0],\n                    ['A', r, r, 0, 0, 1, x1, y1],\n                    ['A', r, r, 0, 0, 1, x2, y2],\n                    ['A', r, r, 0, 0, 1, x3, y3],\n                    ['A', r, r, 0, 0, 1, x0, y0],\n                    ['M', x4, y4],\n                    ['L', x5, y5],\n                    ['M', x6, y6],\n                    ['L', x7, y7]\n                ], lineWidth: lineWidth,\n                matrix: matrix }, iconStyle),\n        });\n        // 点击热区，设置透明矩形\n        this.addShape(descriptionShape, {\n            type: 'rect',\n            id: this.getElementId('title-description-rect'),\n            name: 'axis-title-description-rect',\n            attrs: {\n                x: startX,\n                y: startY - height / 2,\n                width: height,\n                height: height,\n                stroke: '#000',\n                fill: '#000',\n                opacity: 0,\n                matrix: matrix,\n                cursor: 'pointer'\n            }\n        });\n    };\n    AxisBase.prototype.applyTickStates = function (tick, group) {\n        var states = this.getItemStates(tick);\n        if (states.length) {\n            var tickStates = this.get('tickStates');\n            // 分别更新 label 和 tickLine\n            var labelId = this.getElementId(\"label-\" + tick.id);\n            var labelShape = group.findById(labelId);\n            if (labelShape) {\n                var labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n                labelStateStyle && labelShape.attr(labelStateStyle);\n            }\n            var tickLineId = this.getElementId(\"tickline-\" + tick.id);\n            var tickLineShape = group.findById(tickLineId);\n            if (tickLineShape) {\n                var tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n                tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n            }\n        }\n    };\n    AxisBase.prototype.updateTickStates = function (tick) {\n        var states = this.getItemStates(tick);\n        var tickStates = this.get('tickStates');\n        var labelCfg = this.get('label');\n        var labelShape = this.getElementByLocalId(\"label-\" + tick.id);\n        var tickLineCfg = this.get('tickLine');\n        var tickLineShape = this.getElementByLocalId(\"tickline-\" + tick.id);\n        if (states.length) {\n            if (labelShape) {\n                var labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n                labelStateStyle && labelShape.attr(labelStateStyle);\n            }\n            if (tickLineShape) {\n                var tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n                tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n            }\n        }\n        else {\n            if (labelShape) {\n                labelShape.attr(labelCfg.style);\n            }\n            if (tickLineShape) {\n                tickLineShape.attr(tickLineCfg.style);\n            }\n        }\n    };\n    return AxisBase;\n}(GroupComponent));\nexport default AxisBase;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}