{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { clamp, size, valuesOfKey } from '@antv/util';\nimport { Action } from '..';\nfunction isWheelDown(event) {\n  var wheelEvent = event.gEvent.originalEvent;\n  return wheelEvent.deltaY > 0;\n}\nvar DEFAULT_WHEELDELTA = 1;\nvar MousewheelScroll = /** @class */function (_super) {\n  __extends(MousewheelScroll, _super);\n  function MousewheelScroll() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  MousewheelScroll.prototype.scroll = function (arg) {\n    var _a = this.context,\n      view = _a.view,\n      event = _a.event;\n    if (!view.getOptions().scrollbar) {\n      return;\n    }\n    var wheelDelta = (arg === null || arg === void 0 ? void 0 : arg.wheelDelta) || DEFAULT_WHEELDELTA;\n    var scrollbarController = view.getController('scrollbar');\n    var xScale = view.getXScale();\n    var data = view.getOptions().data;\n    var dataSize = size(valuesOfKey(data, xScale.field));\n    var step = size(xScale.values);\n    var currentRatio = scrollbarController.getValue();\n    var currentStart = Math.floor((dataSize - step) * currentRatio);\n    var nextStart = currentStart + (isWheelDown(event) ? wheelDelta : -wheelDelta);\n    var correction = wheelDelta / (dataSize - step) / 10000;\n    var nextRatio = clamp(nextStart / (dataSize - step) + correction, 0, 1);\n    scrollbarController.setValue(nextRatio);\n  };\n  return MousewheelScroll;\n}(Action);\nexport default MousewheelScroll;","map":{"version":3,"sources":["../../../../src/interaction/action/view/mousewheel-scroll.ts"],"names":[],"mappings":";AAAA,SAAS,KAAK,EAAE,IAAI,EAAE,WAAW,QAAQ,YAAY;AAErD,SAAS,MAAM,QAAQ,IAAI;AAG3B,SAAS,WAAW,CAAC,KAAkB,EAAA;EACrC,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,aAA2B;EAC3D,OAAO,UAAU,CAAC,MAAM,GAAG,CAAC;AAC9B;AAEA,IAAM,kBAAkB,GAAG,CAAC;AAC5B,IAAA,gBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+B,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;EAA/B,SAAA,gBAAA,GAAA;;EAwBA;EAvBS,gBAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,GAAI,EAAA;IACV,IAAA,EAAA,GAAkB,IAAI,CAAC,OAAO;MAA5B,IAAI,GAAA,EAAA,CAAA,IAAA;MAAE,KAAK,GAAA,EAAA,CAAA,KAAiB;IAEpC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE;MAChC;IACD;IAED,IAAM,UAAU,GAAG,CAAA,GAAG,KAAA,IAAA,IAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,UAAU,KAAI,kBAAkB;IACxD,IAAM,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;IAE3D,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI;IACnC,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IACtD,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAEhC,IAAM,YAAY,GAAG,mBAAmB,CAAC,QAAQ,EAAE;IACnD,IAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,IAAI,IAAI,YAAY,CAAC;IAEjE,IAAM,SAAS,GAAG,YAAY,IAAI,WAAW,CAAC,KAAK,CAAC,GAAG,UAAU,GAAG,CAAC,UAAU,CAAC;IAChF,IAAM,UAAU,GAAG,UAAU,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,KAAK;IACzD,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;IACzE,mBAAmB,CAAC,QAAQ,CAAC,SAAS,CAAC;EACzC,CAAC;EACH,OAAA,gBAAC;AAAD,CAAC,CAxB8B,MAAM,CAAA;AA0BrC,eAAe,gBAAgB","sourcesContent":["import { clamp, size, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE } from '../../../constant';\nimport { Action } from '..';\nimport { LooseObject } from '../../../interface';\n\nfunction isWheelDown(event: LooseObject) {\n  const wheelEvent = event.gEvent.originalEvent as WheelEvent;\n  return wheelEvent.deltaY > 0;\n}\n\nconst DEFAULT_WHEELDELTA = 1;\nclass MousewheelScroll extends Action {\n  public scroll(arg?) {\n    const { view, event } = this.context;\n\n    if (!view.getOptions().scrollbar) {\n      return;\n    }\n\n    const wheelDelta = arg?.wheelDelta || DEFAULT_WHEELDELTA;\n    const scrollbarController = view.getController('scrollbar');\n\n    const xScale = view.getXScale();\n    const data = view.getOptions().data;\n    const dataSize = size(valuesOfKey(data, xScale.field));\n    const step = size(xScale.values);\n\n    const currentRatio = scrollbarController.getValue();\n    const currentStart = Math.floor((dataSize - step) * currentRatio);\n\n    const nextStart = currentStart + (isWheelDown(event) ? wheelDelta : -wheelDelta);\n    const correction = wheelDelta / (dataSize - step) / 10000;\n    const nextRatio = clamp(nextStart / (dataSize - step) + correction, 0, 1);\n    scrollbarController.setValue(nextRatio);\n  }\n}\n\nexport default MousewheelScroll;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}