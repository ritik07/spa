{"ast":null,"code":"var onmessage = function (e) {\n  // Copy from src/util/collision-detect.ts\n  function generateUtils() {\n    function dot(a, b) {\n      return (a[0] || 0) * (b[0] || 0) + (a[1] || 0) * (b[1] || 0) + (a[2] || 0) * (b[2] || 0);\n    }\n    /**\n     * 1. 获取投影轴\n     */\n    function getAxes(points /** 多边形的关键点 */) {\n      // 目前先处理 平行矩形 的场景, 其他多边形不处理\n      if (points.length > 4) {\n        return [];\n      }\n      // 获取向量\n      var vector = function (start, end) {\n        return [end.x - start.x, end.y - start.y];\n      };\n      // 由于 矩形的平行原理，所以只有 2 条投影轴: A -> B, B -> C\n      var AB = vector(points[0], points[1]);\n      var BC = vector(points[1], points[2]);\n      return [AB, BC];\n    }\n    /**\n     * 绕指定点顺时针旋转后的点坐标\n     * 默认绕原点旋转\n     */\n    function rotateAtPoint(point, deg, origin) {\n      if (deg === void 0) {\n        deg = 0;\n      }\n      if (origin === void 0) {\n        origin = {\n          x: 0,\n          y: 0\n        };\n      }\n      var x = point.x,\n        y = point.y;\n      return {\n        x: (x - origin.x) * Math.cos(-deg) + (y - origin.y) * Math.sin(-deg) + origin.x,\n        y: (origin.x - x) * Math.sin(-deg) + (y - origin.y) * Math.cos(-deg) + origin.y\n      };\n    }\n    /**\n     * @private\n     * 转化为顶点坐标数组\n     *\n     * @param {Object} box\n     */\n    function getRectPoints(box) {\n      var points = [{\n        x: box.x,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y + box.height\n      }, {\n        x: box.x,\n        y: box.y + box.height\n      }];\n      var rotation = box.rotation;\n      if (rotation) {\n        return [rotateAtPoint(points[0], rotation, points[0]), rotateAtPoint(points[1], rotation, points[0]), rotateAtPoint(points[2], rotation, points[0]), rotateAtPoint(points[3], rotation, points[0])];\n      }\n      return points;\n    }\n    /**\n     * 2. 获取多边形在投影轴上的投影\n     *\n     * 向量的点积的其中一个几何含义是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n     * 由于投影轴是单位向量（长度为1），投影的长度为 x1 * x2 + y1 * y2\n     */\n    function getProjection(points /** 多边形的关键点 */, axis) {\n      // 目前先处理矩形的场景\n      if (points.length > 4) {\n        return {\n          min: 0,\n          max: 0\n        };\n      }\n      var scalars = [];\n      points.forEach(function (point) {\n        scalars.push(dot([point.x, point.y], axis));\n      });\n      return {\n        min: Math.min.apply(null, scalars),\n        max: Math.max.apply(null, scalars)\n      };\n    }\n    function isProjectionOverlap(projection1, projection2) {\n      return projection1.max > projection2.min && projection1.min < projection2.max;\n    }\n    function isValidNumber(d) {\n      return typeof d === 'number' && !Number.isNaN(d) && d !== Infinity && d !== -Infinity;\n    }\n    function isValidBox(box) {\n      return ['x', 'y', 'width', 'height'].every(function (attr) {\n        return isValidNumber(box[attr]);\n      });\n    }\n    function isIntersectRect(box1, box2, margin) {\n      if (margin === void 0) {\n        margin = 0;\n      }\n      return !(box2.x > box1.x + box1.width + margin || box2.x + box2.width < box1.x - margin || box2.y > box1.y + box1.height + margin || box2.y + box2.height < box1.y - margin);\n    }\n    function intersect(box1, box2, margin) {\n      if (margin === void 0) {\n        margin = 0;\n      }\n      if (!isValidBox(box1) || !isValidBox(box2)) return false;\n      // Quick detect, if rotation is null or zero.\n      if (!box1.rotation && !box2.rotation) {\n        return isIntersectRect(box1, box2, margin);\n      }\n      // 分别获取 4 个关键点\n      var rect1Points = getRectPoints(box1);\n      var rect2Points = getRectPoints(box2);\n      // 获取所有投影轴\n      var axes = getAxes(rect1Points).concat(getAxes(rect2Points));\n      for (var i = 0; i < axes.length; i++) {\n        var axis = axes[i];\n        var projection1 = getProjection(rect1Points, axis);\n        var projection2 = getProjection(rect2Points, axis);\n        if (!isProjectionOverlap(projection1, projection2)) return false;\n      }\n      return true;\n    }\n    return {\n      intersect: intersect\n    };\n  }\n  var intersect = generateUtils().intersect;\n  // Label layouts.\n  function hideOverlap(items) {\n    var boxes = items.slice();\n    for (var i = 0; i < boxes.length; i++) {\n      var box1 = boxes[i];\n      if (box1.visible) {\n        for (var j = i + 1; j < boxes.length; j++) {\n          var box2 = boxes[j];\n          if (box1 !== box2 && box2.visible) {\n            if (intersect(box1, box2)) {\n              box2.visible = false;\n            }\n          }\n        }\n      }\n    }\n    return boxes;\n  }\n  var methods = {\n    'hide-overlap': hideOverlap\n  };\n  // Main\n  try {\n    var eventData = JSON.parse(e.data);\n    if (!eventData || !eventData.type || !methods[eventData.type]) return;\n    var type = eventData.type,\n      items = eventData.items;\n    var result = methods[type](items);\n    self.postMessage(result);\n  } catch (e) {\n    throw e;\n  }\n};\nvar code = \"\\n   self.onmessage = \".concat(onmessage.toString(), \"\\n\");\nexport { code };","map":{"version":3,"sources":["../../../../../src/geometry/label/layout/worker/hide-overlap.ts"],"names":[],"mappings":"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","sourcesContent":["const onmessage = function (e) {\n  type Item = {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    rotation?: number;\n    visible?: boolean;\n  };\n\n  // Copy from src/util/collision-detect.ts\n  function generateUtils() {\n    type Vec2 = [number, number];\n\n    type Point = { x: number; y: number };\n\n    /**\n     * 定义投影对象\n     */\n    type Projection = { min: number; max: number };\n\n    function dot(a, b) {\n      return (a[0] || 0) * (b[0] || 0) + (a[1] || 0) * (b[1] || 0) + (a[2] || 0) * (b[2] || 0);\n    }\n    /**\n     * 1. 获取投影轴\n     */\n    function getAxes(points: Point[] /** 多边形的关键点 */): Vec2[] {\n      // 目前先处理 平行矩形 的场景, 其他多边形不处理\n      if (points.length > 4) {\n        return [];\n      }\n      // 获取向量\n      const vector = (start: Point, end: Point): Vec2 => {\n        return [end.x - start.x, end.y - start.y];\n      };\n\n      // 由于 矩形的平行原理，所以只有 2 条投影轴: A -> B, B -> C\n      const AB = vector(points[0], points[1]);\n      const BC = vector(points[1], points[2]);\n\n      return [AB, BC];\n    }\n\n    /**\n     * 绕指定点顺时针旋转后的点坐标\n     * 默认绕原点旋转\n     */\n    function rotateAtPoint(point: Point, deg = 0, origin = { x: 0, y: 0 }): Point {\n      const { x, y } = point;\n      return {\n        x: (x - origin.x) * Math.cos(-deg) + (y - origin.y) * Math.sin(-deg) + origin.x,\n        y: (origin.x - x) * Math.sin(-deg) + (y - origin.y) * Math.cos(-deg) + origin.y,\n      };\n    }\n\n    /**\n     * @private\n     * 转化为顶点坐标数组\n     *\n     * @param {Object} box\n     */\n    function getRectPoints(box: Item): Point[] {\n      const points = [\n        { x: box.x, y: box.y },\n        { x: box.x + box.width, y: box.y },\n        { x: box.x + box.width, y: box.y + box.height },\n        { x: box.x, y: box.y + box.height },\n      ];\n\n      const rotation = box.rotation;\n      if (rotation) {\n        return [\n          rotateAtPoint(points[0], rotation, points[0]),\n          rotateAtPoint(points[1], rotation, points[0]),\n          rotateAtPoint(points[2], rotation, points[0]),\n          rotateAtPoint(points[3], rotation, points[0]),\n        ];\n      }\n\n      return points;\n    }\n\n    /**\n     * 2. 获取多边形在投影轴上的投影\n     *\n     * 向量的点积的其中一个几何含义是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n     * 由于投影轴是单位向量（长度为1），投影的长度为 x1 * x2 + y1 * y2\n     */\n    function getProjection(points: Point[] /** 多边形的关键点 */, axis: Vec2): Projection {\n      // 目前先处理矩形的场景\n      if (points.length > 4) {\n        return { min: 0, max: 0 };\n      }\n\n      const scalars = [];\n      points.forEach((point) => {\n        scalars.push(dot([point.x, point.y], axis));\n      });\n\n      return { min: Math.min.apply(null, scalars), max: Math.max.apply(null, scalars) };\n    }\n\n    function isProjectionOverlap(projection1: Projection, projection2: Projection): boolean {\n      return projection1.max > projection2.min && projection1.min < projection2.max;\n    }\n\n    function isValidNumber(d: number) {\n      return typeof d === 'number' && !Number.isNaN(d) && d !== Infinity && d !== -Infinity;\n    }\n\n    function isValidBox(box: Item) {\n      return ['x', 'y', 'width', 'height'].every(attr => isValidNumber(box[attr]))\n    }\n\n    function isIntersectRect(box1: Item, box2: Item, margin: number = 0): boolean {\n      return !(\n        box2.x > box1.x + box1.width + margin ||\n        box2.x + box2.width < box1.x - margin ||\n        box2.y > box1.y + box1.height + margin ||\n        box2.y + box2.height < box1.y - margin\n      );\n    }\n    function intersect(box1: Item, box2: Item, margin: number = 0) {\n      if (!isValidBox(box1) || !isValidBox(box2)) return false;\n\n      // Quick detect, if rotation is null or zero.\n      if (!box1.rotation && !box2.rotation) {\n        return isIntersectRect(box1, box2, margin);\n      }\n\n      // 分别获取 4 个关键点\n      const rect1Points = getRectPoints(box1);\n      const rect2Points = getRectPoints(box2);\n\n      // 获取所有投影轴\n      const axes = getAxes(rect1Points).concat(getAxes(rect2Points));\n\n      for (let i = 0; i < axes.length; i++) {\n        const axis = axes[i];\n        const projection1 = getProjection(rect1Points, axis);\n        const projection2 = getProjection(rect2Points, axis);\n\n        if (!isProjectionOverlap(projection1, projection2)) return false;\n      }\n\n      return true;\n    }\n    return { intersect }\n  }\n  const { intersect } = generateUtils();\n\n  // Label layouts.\n  function hideOverlap(items: Item[]) {\n    const boxes = items.slice();\n    for (let i = 0; i < boxes.length; i++) {\n      const box1 = boxes[i];\n      if (box1.visible) {\n        for (let j = i + 1; j < boxes.length; j++) {\n          const box2 = boxes[j];\n          if (box1 !== box2 && box2.visible) {\n            if (intersect(box1, box2)) {\n              box2.visible = false;\n            }\n          }\n        }\n      }\n    }\n    return boxes;\n  }\n\n  const methods = {\n    'hide-overlap': hideOverlap,\n  }\n\n  // Main\n  try {\n    const eventData = JSON.parse(e.data);\n    if (!eventData || !eventData.type || !methods[eventData.type]) return;\n\n    const { type, items } = eventData;\n    const result = methods[type](items);\n    self.postMessage(result);\n  } catch (e) {\n    throw e;\n  }\n}\n\nconst code = `\n   self.onmessage = ${onmessage.toString()}\n`\nexport { code };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}