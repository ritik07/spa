{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { getElements, getElementsByState } from '../util';\nimport { clearHighlight } from './highlight-util';\nimport StateAction from './state';\nimport { ELEMENT_STATE } from '../../../constant';\nexport var STATUS_UNACTIVE = ELEMENT_STATE.INACTIVE;\nexport var STATUS_ACTIVE = ELEMENT_STATE.ACTIVE;\n/**\n * @ignore\n * highlight，指定图形高亮，其他图形变暗\n */\nvar ElementHighlight = /** @class */function (_super) {\n  __extends(ElementHighlight, _super);\n  function ElementHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_ACTIVE;\n    return _this;\n  }\n  // 多个元素设置、取消 highlight\n  ElementHighlight.prototype.setElementsStateByItem = function (elements, field, item, enable) {\n    var _this = this;\n    var callback = function (el) {\n      return _this.isMathItem(el, field, item);\n    };\n    this.setHighlightBy(elements, callback, enable);\n  };\n  // 设置元素的 highlight\n  ElementHighlight.prototype.setElementHighlight = function (el, callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, true);\n    } else if (!el.hasState(STATUS_ACTIVE)) {\n      el.setState(STATUS_UNACTIVE, true);\n    }\n  };\n  ElementHighlight.prototype.setHighlightBy = function (elements, callback, enable) {\n    var _this = this;\n    if (enable) {\n      // 如果是设置 highlight ，则将匹配的 element 设置成 active，\n      // 其他如果不是 active，则设置成 unactive\n      each(elements, function (el) {\n        _this.setElementHighlight(el, callback);\n      });\n    } else {\n      // 如果取消 highlight，则要检测是否全部取消 highlight\n      var activeElements = getElementsByState(this.context.view, STATUS_ACTIVE);\n      var allCancel_1 = true;\n      // 检测所有 activeElements 都要取消 highlight\n      each(activeElements, function (el) {\n        if (!callback(el)) {\n          allCancel_1 = false;\n          return false;\n        }\n      });\n      if (allCancel_1) {\n        // 都要取消，则取消所有的 active，unactive 状态\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(elements, function (el) {\n          if (callback(el)) {\n            if (el.hasState(STATUS_ACTIVE)) {\n              el.setState(STATUS_ACTIVE, false);\n            }\n            el.setState(STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  };\n  // 单个元素设置和取消 highlight\n  ElementHighlight.prototype.setElementState = function (element, enable) {\n    var view = this.context.view;\n    var elements = getElements(view);\n    this.setHighlightBy(elements, function (el) {\n      return element === el;\n    }, enable);\n  };\n  ElementHighlight.prototype.highlight = function () {\n    this.setState();\n  };\n  // 清理掉所有的 active， unactive 状态\n  ElementHighlight.prototype.clear = function () {\n    var view = this.context.view;\n    clearHighlight(view);\n  };\n  return ElementHighlight;\n}(StateAction);\nexport default ElementHighlight;","map":{"version":3,"sources":["../../../../src/interaction/action/element/highlight.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element/';\nimport { getElements, getElementsByState } from '../util';\nimport { clearHighlight } from './highlight-util';\nimport StateAction from './state';\n\nimport { ELEMENT_STATE } from '../../../constant';\n\nexport const STATUS_UNACTIVE = ELEMENT_STATE.INACTIVE;\nexport const STATUS_ACTIVE = ELEMENT_STATE.ACTIVE;\nexport type Callback = (el) => boolean;\n\n/**\n * @ignore\n * highlight，指定图形高亮，其他图形变暗\n */\nclass ElementHighlight extends StateAction {\n  protected stateName: string = STATUS_ACTIVE;\n\n  // 多个元素设置、取消 highlight\n  protected setElementsStateByItem(elements: Element[], field: string, item: ListItem, enable: boolean) {\n    const callback = (el) => this.isMathItem(el, field, item);\n    this.setHighlightBy(elements, callback, enable);\n  }\n\n  // 设置元素的 highlight\n  protected setElementHighlight(el: Element, callback: Callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, true);\n    } else if (!el.hasState(STATUS_ACTIVE)) {\n      el.setState(STATUS_UNACTIVE, true);\n    }\n  }\n\n  protected setHighlightBy(elements: Element[], callback: Callback, enable: boolean) {\n    if (enable) {\n      // 如果是设置 highlight ，则将匹配的 element 设置成 active，\n      // 其他如果不是 active，则设置成 unactive\n      each(elements, (el) => {\n        this.setElementHighlight(el, callback);\n      });\n    } else {\n      // 如果取消 highlight，则要检测是否全部取消 highlight\n      const activeElements = getElementsByState(this.context.view, STATUS_ACTIVE);\n      let allCancel = true;\n      // 检测所有 activeElements 都要取消 highlight\n      each(activeElements, (el) => {\n        if (!callback(el)) {\n          allCancel = false;\n          return false;\n        }\n      });\n      if (allCancel) {\n        // 都要取消，则取消所有的 active，unactive 状态\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(elements, (el) => {\n          if (callback(el)) {\n            if (el.hasState(STATUS_ACTIVE)) {\n              el.setState(STATUS_ACTIVE, false);\n            }\n            el.setState(STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }\n\n  // 单个元素设置和取消 highlight\n  protected setElementState(element: Element, enable: boolean) {\n    const view = this.context.view;\n    const elements = getElements(view);\n    this.setHighlightBy(elements, (el) => element === el, enable);\n  }\n\n  public highlight() {\n    this.setState();\n  }\n\n  // 清理掉所有的 active， unactive 状态\n  public clear() {\n    const view = this.context.view;\n    clearHighlight(view);\n  }\n}\n\nexport default ElementHighlight;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}