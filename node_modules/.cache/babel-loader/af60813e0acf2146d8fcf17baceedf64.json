{"ast":null,"code":"var TAU = Math.PI * 2;\nvar mapToEllipse = function (_a, rx, ry, cosphi, sinphi, centerx, centery) {\n  var x = _a.x,\n    y = _a.y;\n  x *= rx;\n  y *= ry;\n  var xp = cosphi * x - sinphi * y;\n  var yp = sinphi * x + cosphi * y;\n  return {\n    x: xp + centerx,\n    y: yp + centery\n  };\n};\nvar approxUnitArc = function (ang1, ang2) {\n  // If 90 degree circular arc, use a constant\n  // as derived from http://spencermortensen.com/articles/bezier-circle\n  var a = ang2 === 1.5707963267948966 ? 0.551915024494 : ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n  var x1 = Math.cos(ang1);\n  var y1 = Math.sin(ang1);\n  var x2 = Math.cos(ang1 + ang2);\n  var y2 = Math.sin(ang1 + ang2);\n  return [{\n    x: x1 - y1 * a,\n    y: y1 + x1 * a\n  }, {\n    x: x2 + y2 * a,\n    y: y2 - x2 * a\n  }, {\n    x: x2,\n    y: y2\n  }];\n};\nvar vectorAngle = function (ux, uy, vx, vy) {\n  var sign = ux * vy - uy * vx < 0 ? -1 : 1;\n  var dot = ux * vx + uy * vy;\n  if (dot > 1) {\n    dot = 1;\n  }\n  if (dot < -1) {\n    dot = -1;\n  }\n  return sign * Math.acos(dot);\n};\nvar getArcCenter = function (px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {\n  var rxsq = Math.pow(rx, 2);\n  var rysq = Math.pow(ry, 2);\n  var pxpsq = Math.pow(pxp, 2);\n  var pypsq = Math.pow(pyp, 2);\n  var radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;\n  if (radicant < 0) {\n    radicant = 0;\n  }\n  radicant /= rxsq * pypsq + rysq * pxpsq;\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n  var centerxp = radicant * rx / ry * pyp;\n  var centeryp = radicant * -ry / rx * pxp;\n  var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;\n  var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;\n  var vx1 = (pxp - centerxp) / rx;\n  var vy1 = (pyp - centeryp) / ry;\n  var vx2 = (-pxp - centerxp) / rx;\n  var vy2 = (-pyp - centeryp) / ry;\n  var ang1 = vectorAngle(1, 0, vx1, vy1);\n  var ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU;\n  }\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU;\n  }\n  return [centerx, centery, ang1, ang2];\n};\nvar arcToBezier = function (_a) {\n  var px = _a.px,\n    py = _a.py,\n    cx = _a.cx,\n    cy = _a.cy,\n    rx = _a.rx,\n    ry = _a.ry,\n    _b = _a.xAxisRotation,\n    xAxisRotation = _b === void 0 ? 0 : _b,\n    _c = _a.largeArcFlag,\n    largeArcFlag = _c === void 0 ? 0 : _c,\n    _d = _a.sweepFlag,\n    sweepFlag = _d === void 0 ? 0 : _d;\n  var curves = [];\n  if (rx === 0 || ry === 0) {\n    return [{\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n      x: cx,\n      y: cy\n    }];\n  }\n  var sinphi = Math.sin(xAxisRotation * TAU / 360);\n  var cosphi = Math.cos(xAxisRotation * TAU / 360);\n  var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;\n  var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;\n  if (pxp === 0 && pyp === 0) {\n    return [{\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n      x: cx,\n      y: cy\n    }];\n  }\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n  var _e = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp),\n    centerx = _e[0],\n    centery = _e[1],\n    ang1 = _e[2],\n    ang2 = _e[3];\n  // If 'ang2' == 90.0000000001, then `ratio` will evaluate to\n  // 1.0000000001. This causes `segments` to be greater than one, which is an\n  // unecessary split, and adds extra points to the bezier curve. To alleviate\n  // this issue, we round to 1.0 when the ratio is close to 1.0.\n  var ratio = Math.abs(ang2) / (TAU / 4);\n  if (Math.abs(1.0 - ratio) < 0.0000001) {\n    ratio = 1.0;\n  }\n  var segments = Math.max(Math.ceil(ratio), 1);\n  ang2 /= segments;\n  for (var i = 0; i < segments; i++) {\n    curves.push(approxUnitArc(ang1, ang2));\n    ang1 += ang2;\n  }\n  return curves.map(function (curve) {\n    var _a = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery),\n      x1 = _a.x,\n      y1 = _a.y;\n    var _b = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery),\n      x2 = _b.x,\n      y2 = _b.y;\n    var _c = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery),\n      x = _c.x,\n      y = _c.y;\n    return {\n      x1: x1,\n      y1: y1,\n      x2: x2,\n      y2: y2,\n      x: x,\n      y: y\n    };\n  });\n};\nexport function arcToCubic(x1, y1, rx, ry, angle, LAF, SF, x2, y2) {\n  var curves = arcToBezier({\n    px: x1,\n    py: y1,\n    cx: x2,\n    cy: y2,\n    rx: rx,\n    ry: ry,\n    xAxisRotation: angle,\n    largeArcFlag: LAF,\n    sweepFlag: SF\n  });\n  return curves.reduce(function (prev, cur) {\n    var x1 = cur.x1,\n      y1 = cur.y1,\n      x2 = cur.x2,\n      y2 = cur.y2,\n      x = cur.x,\n      y = cur.y;\n    prev.push(x1, y1, x2, y2, x, y);\n    return prev;\n  }, []);\n}","map":{"version":3,"sources":["../../src/process/arc-2-cubic.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var TAU = Math.PI * 2;\nvar mapToEllipse = function (_a, rx, ry, cosphi, sinphi, centerx, centery) {\n    var x = _a.x, y = _a.y;\n    x *= rx;\n    y *= ry;\n    var xp = cosphi * x - sinphi * y;\n    var yp = sinphi * x + cosphi * y;\n    return {\n        x: xp + centerx,\n        y: yp + centery\n    };\n};\nvar approxUnitArc = function (ang1, ang2) {\n    // If 90 degree circular arc, use a constant\n    // as derived from http://spencermortensen.com/articles/bezier-circle\n    var a = ang2 === 1.5707963267948966\n        ? 0.551915024494\n        : ang2 === -1.5707963267948966\n            ? -0.551915024494\n            : 4 / 3 * Math.tan(ang2 / 4);\n    var x1 = Math.cos(ang1);\n    var y1 = Math.sin(ang1);\n    var x2 = Math.cos(ang1 + ang2);\n    var y2 = Math.sin(ang1 + ang2);\n    return [\n        {\n            x: x1 - y1 * a,\n            y: y1 + x1 * a\n        },\n        {\n            x: x2 + y2 * a,\n            y: y2 - x2 * a\n        },\n        {\n            x: x2,\n            y: y2\n        }\n    ];\n};\nvar vectorAngle = function (ux, uy, vx, vy) {\n    var sign = (ux * vy - uy * vx < 0) ? -1 : 1;\n    var dot = ux * vx + uy * vy;\n    if (dot > 1) {\n        dot = 1;\n    }\n    if (dot < -1) {\n        dot = -1;\n    }\n    return sign * Math.acos(dot);\n};\nvar getArcCenter = function (px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {\n    var rxsq = Math.pow(rx, 2);\n    var rysq = Math.pow(ry, 2);\n    var pxpsq = Math.pow(pxp, 2);\n    var pypsq = Math.pow(pyp, 2);\n    var radicant = (rxsq * rysq) - (rxsq * pypsq) - (rysq * pxpsq);\n    if (radicant < 0) {\n        radicant = 0;\n    }\n    radicant /= (rxsq * pypsq) + (rysq * pxpsq);\n    radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n    var centerxp = radicant * rx / ry * pyp;\n    var centeryp = radicant * -ry / rx * pxp;\n    var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;\n    var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;\n    var vx1 = (pxp - centerxp) / rx;\n    var vy1 = (pyp - centeryp) / ry;\n    var vx2 = (-pxp - centerxp) / rx;\n    var vy2 = (-pyp - centeryp) / ry;\n    var ang1 = vectorAngle(1, 0, vx1, vy1);\n    var ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n    if (sweepFlag === 0 && ang2 > 0) {\n        ang2 -= TAU;\n    }\n    if (sweepFlag === 1 && ang2 < 0) {\n        ang2 += TAU;\n    }\n    return [centerx, centery, ang1, ang2];\n};\nvar arcToBezier = function (_a) {\n    var px = _a.px, py = _a.py, cx = _a.cx, cy = _a.cy, rx = _a.rx, ry = _a.ry, _b = _a.xAxisRotation, xAxisRotation = _b === void 0 ? 0 : _b, _c = _a.largeArcFlag, largeArcFlag = _c === void 0 ? 0 : _c, _d = _a.sweepFlag, sweepFlag = _d === void 0 ? 0 : _d;\n    var curves = [];\n    if (rx === 0 || ry === 0) {\n        return [{ x1: 0, y1: 0, x2: 0, y2: 0, x: cx, y: cy }];\n    }\n    var sinphi = Math.sin(xAxisRotation * TAU / 360);\n    var cosphi = Math.cos(xAxisRotation * TAU / 360);\n    var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;\n    var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;\n    if (pxp === 0 && pyp === 0) {\n        return [{ x1: 0, y1: 0, x2: 0, y2: 0, x: cx, y: cy }];\n    }\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n    var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) +\n        Math.pow(pyp, 2) / Math.pow(ry, 2);\n    if (lambda > 1) {\n        rx *= Math.sqrt(lambda);\n        ry *= Math.sqrt(lambda);\n    }\n    var _e = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp), centerx = _e[0], centery = _e[1], ang1 = _e[2], ang2 = _e[3];\n    // If 'ang2' == 90.0000000001, then `ratio` will evaluate to\n    // 1.0000000001. This causes `segments` to be greater than one, which is an\n    // unecessary split, and adds extra points to the bezier curve. To alleviate\n    // this issue, we round to 1.0 when the ratio is close to 1.0.\n    var ratio = Math.abs(ang2) / (TAU / 4);\n    if (Math.abs(1.0 - ratio) < 0.0000001) {\n        ratio = 1.0;\n    }\n    var segments = Math.max(Math.ceil(ratio), 1);\n    ang2 /= segments;\n    for (var i = 0; i < segments; i++) {\n        curves.push(approxUnitArc(ang1, ang2));\n        ang1 += ang2;\n    }\n    return curves.map(function (curve) {\n        var _a = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery), x1 = _a.x, y1 = _a.y;\n        var _b = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery), x2 = _b.x, y2 = _b.y;\n        var _c = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery), x = _c.x, y = _c.y;\n        return { x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y };\n    });\n};\nexport function arcToCubic(x1, y1, rx, ry, angle, LAF, SF, x2, y2) {\n    var curves = arcToBezier({\n        px: x1,\n        py: y1,\n        cx: x2,\n        cy: y2,\n        rx: rx,\n        ry: ry,\n        xAxisRotation: angle,\n        largeArcFlag: LAF,\n        sweepFlag: SF,\n    });\n    return curves.reduce(function (prev, cur) {\n        var x1 = cur.x1, y1 = cur.y1, x2 = cur.x2, y2 = cur.y2, x = cur.x, y = cur.y;\n        prev.push(x1, y1, x2, y2, x, y);\n        return prev;\n    }, []);\n}\n//# sourceMappingURL=arc-2-cubic.js.map"]},"metadata":{},"sourceType":"module"}