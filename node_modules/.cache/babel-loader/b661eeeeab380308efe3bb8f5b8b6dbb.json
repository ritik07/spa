{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, head, last } from '@antv/util';\nimport Continuous from './base';\n/**\n * 分段度量\n */\nvar Quantize = /** @class */function (_super) {\n  __extends(Quantize, _super);\n  function Quantize() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'quantize';\n    return _this;\n  }\n  Quantize.prototype.invert = function (value) {\n    var ticks = this.ticks;\n    var length = ticks.length;\n    var percent = this.getInvertPercent(value);\n    var minIndex = Math.floor(percent * (length - 1));\n    // 最后一个\n    if (minIndex >= length - 1) {\n      return last(ticks);\n    }\n    // 超出左边界， 则取第一个\n    if (minIndex < 0) {\n      return head(ticks);\n    }\n    var minTick = ticks[minIndex];\n    var nextTick = ticks[minIndex + 1];\n    // 比当前值小的 tick 在度量上的占比\n    var minIndexPercent = minIndex / (length - 1);\n    var maxIndexPercent = (minIndex + 1) / (length - 1);\n    return minTick + (percent - minIndexPercent) / (maxIndexPercent - minIndexPercent) * (nextTick - minTick);\n  };\n  Quantize.prototype.initCfg = function () {\n    this.tickMethod = 'r-pretty';\n    this.tickCount = 5;\n    this.nice = true;\n  };\n  Quantize.prototype.calculateTicks = function () {\n    var ticks = _super.prototype.calculateTicks.call(this);\n    if (!this.nice) {\n      // 如果 nice = false ,补充 min, max\n      if (last(ticks) !== this.max) {\n        ticks.push(this.max);\n      }\n      if (head(ticks) !== this.min) {\n        ticks.unshift(this.min);\n      }\n    }\n    return ticks;\n  };\n  // 计算当前值在刻度中的占比\n  Quantize.prototype.getScalePercent = function (value) {\n    var ticks = this.ticks;\n    // 超出左边界\n    if (value < head(ticks)) {\n      return 0;\n    }\n    // 超出右边界\n    if (value > last(ticks)) {\n      return 1;\n    }\n    var minIndex = 0;\n    each(ticks, function (tick, index) {\n      if (value >= tick) {\n        minIndex = index;\n      } else {\n        return false;\n      }\n    });\n    return minIndex / (ticks.length - 1);\n  };\n  return Quantize;\n}(Continuous);\nexport default Quantize;","map":{"version":3,"sources":["../../src/continuous/quantize.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { each, head, last } from '@antv/util';\nimport Continuous from './base';\n/**\n * 分段度量\n */\nvar Quantize = /** @class */ (function (_super) {\n    __extends(Quantize, _super);\n    function Quantize() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'quantize';\n        return _this;\n    }\n    Quantize.prototype.invert = function (value) {\n        var ticks = this.ticks;\n        var length = ticks.length;\n        var percent = this.getInvertPercent(value);\n        var minIndex = Math.floor(percent * (length - 1));\n        // 最后一个\n        if (minIndex >= length - 1) {\n            return last(ticks);\n        }\n        // 超出左边界， 则取第一个\n        if (minIndex < 0) {\n            return head(ticks);\n        }\n        var minTick = ticks[minIndex];\n        var nextTick = ticks[minIndex + 1];\n        // 比当前值小的 tick 在度量上的占比\n        var minIndexPercent = minIndex / (length - 1);\n        var maxIndexPercent = (minIndex + 1) / (length - 1);\n        return minTick + (percent - minIndexPercent) / (maxIndexPercent - minIndexPercent) * (nextTick - minTick);\n    };\n    Quantize.prototype.initCfg = function () {\n        this.tickMethod = 'r-pretty';\n        this.tickCount = 5;\n        this.nice = true;\n    };\n    Quantize.prototype.calculateTicks = function () {\n        var ticks = _super.prototype.calculateTicks.call(this);\n        if (!this.nice) { // 如果 nice = false ,补充 min, max\n            if (last(ticks) !== this.max) {\n                ticks.push(this.max);\n            }\n            if (head(ticks) !== this.min) {\n                ticks.unshift(this.min);\n            }\n        }\n        return ticks;\n    };\n    // 计算当前值在刻度中的占比\n    Quantize.prototype.getScalePercent = function (value) {\n        var ticks = this.ticks;\n        // 超出左边界\n        if (value < head(ticks)) {\n            return 0;\n        }\n        // 超出右边界\n        if (value > last(ticks)) {\n            return 1;\n        }\n        var minIndex = 0;\n        each(ticks, function (tick, index) {\n            if (value >= tick) {\n                minIndex = index;\n            }\n            else {\n                return false;\n            }\n        });\n        return minIndex / (ticks.length - 1);\n    };\n    return Quantize;\n}(Continuous));\nexport default Quantize;\n//# sourceMappingURL=quantize.js.map"]},"metadata":{},"sourceType":"module"}