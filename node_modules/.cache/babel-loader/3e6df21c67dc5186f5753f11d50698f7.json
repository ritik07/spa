{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractGroup } from '@antv/g-base';\nimport * as Shape from './shape';\nimport { applyAttrsToContext, drawChildren, refreshElement } from './util/draw';\nimport { each, max, min } from '@antv/util';\nimport { intersectRect } from './util/util';\nvar Group = /** @class */function (_super) {\n  __extends(Group, _super);\n  function Group() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  Group.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n  Group.prototype.getShapeBase = function () {\n    return Shape;\n  };\n  Group.prototype.getGroupBase = function () {\n    return Group;\n  };\n  // 同 shape 中的方法重复了\n  Group.prototype._applyClip = function (context, clip) {\n    if (clip) {\n      context.save();\n      // 将 clip 的属性挂载到 context 上\n      applyAttrsToContext(context, clip);\n      // 绘制 clip 路径\n      clip.createPath(context);\n      context.restore();\n      // 裁剪\n      context.clip();\n      clip._afterDraw();\n    }\n  };\n  // 这个方法以前直接使用的 getCanvasBBox，由于 group 上没有缓存，所以每次重新计算，导致性能开销比较大\n  // 大概能够节省全局渲染 15-20% 的性能，如果不在这里加缓存优化后 10W 个节点无法达到 5-6 ms，大概能够 30-40ms\n  Group.prototype.cacheCanvasBBox = function () {\n    var children = this.cfg.children;\n    var xArr = [];\n    var yArr = [];\n    each(children, function (child) {\n      var bbox = child.cfg.cacheCanvasBBox;\n      // isInview 的判定是一旦图形或者分组渲染就要计算是否在视图内，\n      // 这个判定 10W 个图形下差不多能够节省 5-6 ms 的开销\n      if (bbox && child.cfg.isInView) {\n        xArr.push(bbox.minX, bbox.maxX);\n        yArr.push(bbox.minY, bbox.maxY);\n      }\n    });\n    var bbox = null;\n    if (xArr.length) {\n      var minX = min(xArr);\n      var maxX = max(xArr);\n      var minY = min(yArr);\n      var maxY = max(yArr);\n      bbox = {\n        minX: minX,\n        minY: minY,\n        x: minX,\n        y: minY,\n        maxX: maxX,\n        maxY: maxY,\n        width: maxX - minX,\n        height: maxY - minY\n      };\n      var canvas = this.cfg.canvas;\n      if (canvas) {\n        var viewRange = canvas.getViewRange();\n        // 如果这个地方判定 isInView == false 设置 bbox 为 false 的话，拾取的性能会更高\n        // 但是目前 10W 图形的拾取在 2-5ms 内，这个优化意义不大，可以后期观察再看\n        this.set('isInView', intersectRect(bbox, viewRange));\n      }\n    } else {\n      this.set('isInView', false);\n    }\n    this.set('cacheCanvasBBox', bbox);\n  };\n  Group.prototype.draw = function (context, region) {\n    var children = this.cfg.children;\n    var allowDraw = region ? this.cfg.refresh : true; // 局部刷新需要判定\n    // 这个地方需要判定，在 G6 的场景每个 group 都有 transform 的场景下性能会开销非常大\n    // 通过 refresh 的判定，可以不刷新没有发生过变化的分组，不在视窗内的分组等等\n    // 如果想进一步提升局部渲染性能，可以进一步优化 refresh 的判定，依然有潜力\n    if (children.length && allowDraw) {\n      context.save();\n      // group 上的矩阵和属性也会应用到上下文上\n      // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n      applyAttrsToContext(context, this);\n      this._applyClip(context, this.getClip());\n      drawChildren(context, children, region);\n      context.restore();\n      this.cacheCanvasBBox();\n    }\n    // 这里的成本比较大，如果不绘制则不再\n    // this.set('cacheCanvasBBox', this.getCanvasBBox());\n    this.cfg.refresh = null;\n    // 绘制后，消除更新标记\n    this.set('hasChanged', false);\n  };\n  // 绘制时被跳过，一般发生在分组隐藏时\n  Group.prototype.skipDraw = function () {\n    this.set('cacheCanvasBBox', null);\n    this.set('hasChanged', false);\n  };\n  return Group;\n}(AbstractGroup);\nexport default Group;","map":{"version":3,"sources":["../src/group.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { AbstractGroup } from '@antv/g-base';\nimport * as Shape from './shape';\nimport { applyAttrsToContext, drawChildren, refreshElement } from './util/draw';\nimport { each, max, min } from '@antv/util';\nimport { intersectRect } from './util/util';\nvar Group = /** @class */ (function (_super) {\n    __extends(Group, _super);\n    function Group() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    Group.prototype.onCanvasChange = function (changeType) {\n        refreshElement(this, changeType);\n    };\n    Group.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    Group.prototype.getGroupBase = function () {\n        return Group;\n    };\n    // 同 shape 中的方法重复了\n    Group.prototype._applyClip = function (context, clip) {\n        if (clip) {\n            context.save();\n            // 将 clip 的属性挂载到 context 上\n            applyAttrsToContext(context, clip);\n            // 绘制 clip 路径\n            clip.createPath(context);\n            context.restore();\n            // 裁剪\n            context.clip();\n            clip._afterDraw();\n        }\n    };\n    // 这个方法以前直接使用的 getCanvasBBox，由于 group 上没有缓存，所以每次重新计算，导致性能开销比较大\n    // 大概能够节省全局渲染 15-20% 的性能，如果不在这里加缓存优化后 10W 个节点无法达到 5-6 ms，大概能够 30-40ms\n    Group.prototype.cacheCanvasBBox = function () {\n        var children = this.cfg.children;\n        var xArr = [];\n        var yArr = [];\n        each(children, function (child) {\n            var bbox = child.cfg.cacheCanvasBBox;\n            // isInview 的判定是一旦图形或者分组渲染就要计算是否在视图内，\n            // 这个判定 10W 个图形下差不多能够节省 5-6 ms 的开销\n            if (bbox && child.cfg.isInView) {\n                xArr.push(bbox.minX, bbox.maxX);\n                yArr.push(bbox.minY, bbox.maxY);\n            }\n        });\n        var bbox = null;\n        if (xArr.length) {\n            var minX = min(xArr);\n            var maxX = max(xArr);\n            var minY = min(yArr);\n            var maxY = max(yArr);\n            bbox = {\n                minX: minX,\n                minY: minY,\n                x: minX,\n                y: minY,\n                maxX: maxX,\n                maxY: maxY,\n                width: maxX - minX,\n                height: maxY - minY,\n            };\n            var canvas = this.cfg.canvas;\n            if (canvas) {\n                var viewRange = canvas.getViewRange();\n                // 如果这个地方判定 isInView == false 设置 bbox 为 false 的话，拾取的性能会更高\n                // 但是目前 10W 图形的拾取在 2-5ms 内，这个优化意义不大，可以后期观察再看\n                this.set('isInView', intersectRect(bbox, viewRange));\n            }\n        }\n        else {\n            this.set('isInView', false);\n        }\n        this.set('cacheCanvasBBox', bbox);\n    };\n    Group.prototype.draw = function (context, region) {\n        var children = this.cfg.children;\n        var allowDraw = region ? this.cfg.refresh : true; // 局部刷新需要判定\n        // 这个地方需要判定，在 G6 的场景每个 group 都有 transform 的场景下性能会开销非常大\n        // 通过 refresh 的判定，可以不刷新没有发生过变化的分组，不在视窗内的分组等等\n        // 如果想进一步提升局部渲染性能，可以进一步优化 refresh 的判定，依然有潜力\n        if (children.length && allowDraw) {\n            context.save();\n            // group 上的矩阵和属性也会应用到上下文上\n            // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n            applyAttrsToContext(context, this);\n            this._applyClip(context, this.getClip());\n            drawChildren(context, children, region);\n            context.restore();\n            this.cacheCanvasBBox();\n        }\n        // 这里的成本比较大，如果不绘制则不再\n        // this.set('cacheCanvasBBox', this.getCanvasBBox());\n        this.cfg.refresh = null;\n        // 绘制后，消除更新标记\n        this.set('hasChanged', false);\n    };\n    // 绘制时被跳过，一般发生在分组隐藏时\n    Group.prototype.skipDraw = function () {\n        this.set('cacheCanvasBBox', null);\n        this.set('hasChanged', false);\n    };\n    return Group;\n}(AbstractGroup));\nexport default Group;\n//# sourceMappingURL=group.js.map"]},"metadata":{},"sourceType":"module"}