{"ast":null,"code":"import { each } from '@antv/util';\nimport { MarkerSymbols } from '../../../util/marker';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { splitPoints } from '../util/split-points';\nimport { drawPoints, SHAPES } from './util';\nvar PointShapeFactory = registerShapeFactory('point', {\n  defaultShapeType: 'hollow-circle',\n  getDefaultPoints: function (pointInfo) {\n    return splitPoints(pointInfo);\n  }\n});\neach(SHAPES, function (shapeName) {\n  // 添加该 shape 对应的 hollow-shape\n  registerShape('point', \"hollow-\".concat(shapeName), {\n    draw: function (cfg, container) {\n      return drawPoints(this, cfg, container, shapeName, true);\n    },\n    getMarker: function (markerCfg) {\n      var color = markerCfg.color;\n      return {\n        symbol: MarkerSymbols[shapeName] || shapeName,\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null\n        }\n      };\n    }\n  });\n});\nexport default PointShapeFactory;","map":{"version":3,"sources":["../../../../src/geometry/shape/point/index.ts"],"names":[],"mappings":"AAAA,SAAS,IAAI,QAAQ,YAAY;AAIjC,SAAS,aAAa,QAAQ,sBAAsB;AACpD,SAAS,aAAa,EAAE,oBAAoB,QAAQ,SAAS;AAC7D,SAAS,WAAW,QAAQ,sBAAsB;AAClD,SAAS,UAAU,EAAE,MAAM,QAAQ,QAAQ;AAE3C,IAAM,iBAAiB,GAAG,oBAAoB,CAAC,OAAO,EAAE;EACtD,gBAAgB,EAAE,eAAe;EACjC,gBAAgB,EAAA,UAAC,SAAqB,EAAA;IACpC,OAAO,WAAW,CAAC,SAAS,CAAC;EAC/B;CACD,CAAC;AAEF,IAAI,CAAC,MAAM,EAAE,UAAC,SAAiB,EAAA;EAC7B;EACA,aAAa,CAAC,OAAO,EAAE,SAAA,CAAA,MAAA,CAAU,SAAS,CAAE,EAAE;IAC5C,IAAI,EAAA,UAAC,GAAc,EAAE,SAAiB,EAAA;MACpC,OAAO,UAAU,CAAC,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC;IAC1D,CAAC;IACD,SAAS,EAAA,UAAC,SAAyB,EAAA;MACzB,IAAA,KAAK,GAAK,SAAS,CAAA,KAAd;MACb,OAAO;QACL,MAAM,EAAE,aAAa,CAAC,SAAS,CAAC,IAAI,SAAS;QAC7C,KAAK,EAAE;UACL,CAAC,EAAE,GAAG;UACN,MAAM,EAAE,KAAK;UACb,IAAI,EAAE;QACP;OACF;IACH;GACD,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,iBAAiB","sourcesContent":["import { each } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { MarkerSymbols } from '../../../util/marker';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { splitPoints } from '../util/split-points';\nimport { drawPoints, SHAPES } from './util';\n\nconst PointShapeFactory = registerShapeFactory('point', {\n  defaultShapeType: 'hollow-circle',\n  getDefaultPoints(pointInfo: ShapePoint): Point[] {\n    return splitPoints(pointInfo);\n  },\n});\n\neach(SHAPES, (shapeName: string) => {\n  // 添加该 shape 对应的 hollow-shape\n  registerShape('point', `hollow-${shapeName}`, {\n    draw(cfg: ShapeInfo, container: IGroup) {\n      return drawPoints(this, cfg, container, shapeName, true);\n    },\n    getMarker(markerCfg: ShapeMarkerCfg) {\n      const { color } = markerCfg;\n      return {\n        symbol: MarkerSymbols[shapeName] || shapeName,\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null,\n        },\n      };\n    },\n  });\n});\n\nexport default PointShapeFactory;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}