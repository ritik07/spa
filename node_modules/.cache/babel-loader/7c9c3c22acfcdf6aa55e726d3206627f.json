{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { AbstractShape } from '@antv/g-base';\nimport { isNil, intersectRect } from '../util/util';\nimport { applyAttrsToContext, refreshElement } from '../util/draw';\nimport { getBBoxMethod } from '@antv/g-base';\nimport * as Shape from './index';\nimport Group from '../group';\nvar ShapeBase = /** @class */function (_super) {\n  __extends(ShapeBase, _super);\n  function ShapeBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ShapeBase.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    // 设置默认值\n    return __assign(__assign({}, attrs), {\n      lineWidth: 1,\n      lineAppendWidth: 0,\n      strokeOpacity: 1,\n      fillOpacity: 1\n    });\n  };\n  ShapeBase.prototype.getShapeBase = function () {\n    return Shape;\n  };\n  ShapeBase.prototype.getGroupBase = function () {\n    return Group;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  ShapeBase.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n  ShapeBase.prototype.calculateBBox = function () {\n    var type = this.get('type');\n    var lineWidth = this.getHitLineWidth();\n    // const attrs = this.attr();\n    var bboxMethod = getBBoxMethod(type);\n    var box = bboxMethod(this);\n    var halfLineWidth = lineWidth / 2;\n    var minX = box.x - halfLineWidth;\n    var minY = box.y - halfLineWidth;\n    var maxX = box.x + box.width + halfLineWidth;\n    var maxY = box.y + box.height + halfLineWidth;\n    return {\n      x: minX,\n      minX: minX,\n      y: minY,\n      minY: minY,\n      width: box.width + lineWidth,\n      height: box.height + lineWidth,\n      maxX: maxX,\n      maxY: maxY\n    };\n  };\n  ShapeBase.prototype.isFill = function () {\n    return !!this.attrs['fill'] || this.isClipShape();\n  };\n  ShapeBase.prototype.isStroke = function () {\n    return !!this.attrs['stroke'];\n  };\n  // 同 shape 中的方法重复了\n  ShapeBase.prototype._applyClip = function (context, clip) {\n    if (clip) {\n      context.save();\n      // 将 clip 的属性挂载到 context 上\n      applyAttrsToContext(context, clip);\n      // 绘制 clip 路径\n      clip.createPath(context);\n      context.restore();\n      // 裁剪\n      context.clip();\n      clip._afterDraw();\n    }\n  };\n  // 绘制图形时需要考虑 region 限制\n  ShapeBase.prototype.draw = function (context, region) {\n    var clip = this.cfg.clipShape;\n    // 如果指定了 region，同时不允许刷新时，直接返回\n    if (region) {\n      if (this.cfg.refresh === false) {\n        // this._afterDraw();\n        this.set('hasChanged', false);\n        return;\n      }\n      // 是否相交需要考虑 clip 的包围盒\n      var bbox = this.getCanvasBBox();\n      if (!intersectRect(region, bbox)) {\n        // 图形的包围盒与重绘区域不相交时，也需要清除标记\n        this.set('hasChanged', false);\n        // 存在多种情形需要更新 cacheCanvasBBox 和 isInview 的判定\n        // 1. 之前图形在视窗内，但是现在不再视窗内\n        // 2. 如果当前的图形以及父元素都没有发生过变化，refresh = false 不会走到这里，所以这里的图形都是父元素发生变化，但是没有在视图内的元素\n        if (this.cfg.isInView) {\n          this._afterDraw();\n        }\n        return;\n      }\n    }\n    context.save();\n    // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n    applyAttrsToContext(context, this);\n    this._applyClip(context, clip);\n    this.drawPath(context);\n    context.restore();\n    this._afterDraw();\n  };\n  ShapeBase.prototype.getCanvasViewBox = function () {\n    var canvas = this.cfg.canvas;\n    if (canvas) {\n      // @ts-ignore\n      return canvas.getViewRange();\n    }\n    return null;\n  };\n  ShapeBase.prototype.cacheCanvasBBox = function () {\n    var canvasBBox = this.getCanvasViewBox();\n    // 绘制的时候缓存包围盒\n    if (canvasBBox) {\n      var bbox = this.getCanvasBBox();\n      var isInView = intersectRect(bbox, canvasBBox);\n      this.set('isInView', isInView);\n      // 不再视窗内 cacheCanvasBBox 设置成 null，会提升局部渲染的性能，\n      // 因为在局部渲染影响的包围盒计算时不考虑这个图形的包围盒\n      // 父元素 cacheCanvasBBox 计算的时候也不计算\n      if (isInView) {\n        this.set('cacheCanvasBBox', bbox);\n      } else {\n        this.set('cacheCanvasBBox', null);\n      }\n    }\n  };\n  ShapeBase.prototype._afterDraw = function () {\n    this.cacheCanvasBBox();\n    // 绘制后消除标记\n    this.set('hasChanged', false);\n    this.set('refresh', null);\n  };\n  ShapeBase.prototype.skipDraw = function () {\n    this.set('cacheCanvasBBox', null);\n    this.set('isInView', null);\n    this.set('hasChanged', false);\n  };\n  /**\n   * 绘制图形的路径\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n  ShapeBase.prototype.drawPath = function (context) {\n    this.createPath(context);\n    this.strokeAndFill(context);\n    this.afterDrawPath(context);\n  };\n  /**\n   * @protected\n   * 填充图形\n   * @param {CanvasRenderingContext2D} context context 上下文\n   */\n  ShapeBase.prototype.fill = function (context) {\n    context.fill();\n  };\n  /**\n   * @protected\n   * 绘制图形边框\n   * @param {CanvasRenderingContext2D} context context 上下文\n   */\n  ShapeBase.prototype.stroke = function (context) {\n    context.stroke();\n  };\n  // 绘制或者填充\n  ShapeBase.prototype.strokeAndFill = function (context) {\n    var _a = this.attrs,\n      lineWidth = _a.lineWidth,\n      opacity = _a.opacity,\n      strokeOpacity = _a.strokeOpacity,\n      fillOpacity = _a.fillOpacity;\n    if (this.isFill()) {\n      if (!isNil(fillOpacity) && fillOpacity !== 1) {\n        context.globalAlpha = fillOpacity;\n        this.fill(context);\n        context.globalAlpha = opacity;\n      } else {\n        this.fill(context);\n      }\n    }\n    if (this.isStroke()) {\n      if (lineWidth > 0) {\n        if (!isNil(strokeOpacity) && strokeOpacity !== 1) {\n          context.globalAlpha = strokeOpacity;\n        }\n        this.stroke(context);\n      }\n    }\n    this.afterDrawPath(context);\n  };\n  /**\n   * @protected\n   * 绘制图形的路径\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n  ShapeBase.prototype.createPath = function (context) {};\n  /**\n   * 绘制完成 path 后的操作\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n  ShapeBase.prototype.afterDrawPath = function (context) {};\n  ShapeBase.prototype.isInShape = function (refX, refY) {\n    // return HitUtil.isHitShape(this, refX, refY);\n    var isStroke = this.isStroke();\n    var isFill = this.isFill();\n    var lineWidth = this.getHitLineWidth();\n    return this.isInStrokeOrPath(refX, refY, isStroke, isFill, lineWidth);\n  };\n  // 之所以不拆成 isInStroke 和 isInPath 在于两者存在一些共同的计算\n  ShapeBase.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    return false;\n  };\n  /**\n   * 获取线拾取的宽度\n   * @returns {number} 线的拾取宽度\n   */\n  ShapeBase.prototype.getHitLineWidth = function () {\n    if (!this.isStroke()) {\n      return 0;\n    }\n    var attrs = this.attrs;\n    return attrs['lineWidth'] + attrs['lineAppendWidth'];\n  };\n  return ShapeBase;\n}(AbstractShape);\nexport default ShapeBase;","map":{"version":3,"sources":["../../src/shape/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { AbstractShape } from '@antv/g-base';\nimport { isNil, intersectRect } from '../util/util';\nimport { applyAttrsToContext, refreshElement } from '../util/draw';\nimport { getBBoxMethod } from '@antv/g-base';\nimport * as Shape from './index';\nimport Group from '../group';\nvar ShapeBase = /** @class */ (function (_super) {\n    __extends(ShapeBase, _super);\n    function ShapeBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ShapeBase.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        // 设置默认值\n        return __assign(__assign({}, attrs), { lineWidth: 1, lineAppendWidth: 0, strokeOpacity: 1, fillOpacity: 1 });\n    };\n    ShapeBase.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    ShapeBase.prototype.getGroupBase = function () {\n        return Group;\n    };\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    ShapeBase.prototype.onCanvasChange = function (changeType) {\n        refreshElement(this, changeType);\n    };\n    ShapeBase.prototype.calculateBBox = function () {\n        var type = this.get('type');\n        var lineWidth = this.getHitLineWidth();\n        // const attrs = this.attr();\n        var bboxMethod = getBBoxMethod(type);\n        var box = bboxMethod(this);\n        var halfLineWidth = lineWidth / 2;\n        var minX = box.x - halfLineWidth;\n        var minY = box.y - halfLineWidth;\n        var maxX = box.x + box.width + halfLineWidth;\n        var maxY = box.y + box.height + halfLineWidth;\n        return {\n            x: minX,\n            minX: minX,\n            y: minY,\n            minY: minY,\n            width: box.width + lineWidth,\n            height: box.height + lineWidth,\n            maxX: maxX,\n            maxY: maxY,\n        };\n    };\n    ShapeBase.prototype.isFill = function () {\n        return !!this.attrs['fill'] || this.isClipShape();\n    };\n    ShapeBase.prototype.isStroke = function () {\n        return !!this.attrs['stroke'];\n    };\n    // 同 shape 中的方法重复了\n    ShapeBase.prototype._applyClip = function (context, clip) {\n        if (clip) {\n            context.save();\n            // 将 clip 的属性挂载到 context 上\n            applyAttrsToContext(context, clip);\n            // 绘制 clip 路径\n            clip.createPath(context);\n            context.restore();\n            // 裁剪\n            context.clip();\n            clip._afterDraw();\n        }\n    };\n    // 绘制图形时需要考虑 region 限制\n    ShapeBase.prototype.draw = function (context, region) {\n        var clip = this.cfg.clipShape;\n        // 如果指定了 region，同时不允许刷新时，直接返回\n        if (region) {\n            if (this.cfg.refresh === false) {\n                // this._afterDraw();\n                this.set('hasChanged', false);\n                return;\n            }\n            // 是否相交需要考虑 clip 的包围盒\n            var bbox = this.getCanvasBBox();\n            if (!intersectRect(region, bbox)) {\n                // 图形的包围盒与重绘区域不相交时，也需要清除标记\n                this.set('hasChanged', false);\n                // 存在多种情形需要更新 cacheCanvasBBox 和 isInview 的判定\n                // 1. 之前图形在视窗内，但是现在不再视窗内\n                // 2. 如果当前的图形以及父元素都没有发生过变化，refresh = false 不会走到这里，所以这里的图形都是父元素发生变化，但是没有在视图内的元素\n                if (this.cfg.isInView) {\n                    this._afterDraw();\n                }\n                return;\n            }\n        }\n        context.save();\n        // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n        applyAttrsToContext(context, this);\n        this._applyClip(context, clip);\n        this.drawPath(context);\n        context.restore();\n        this._afterDraw();\n    };\n    ShapeBase.prototype.getCanvasViewBox = function () {\n        var canvas = this.cfg.canvas;\n        if (canvas) {\n            // @ts-ignore\n            return canvas.getViewRange();\n        }\n        return null;\n    };\n    ShapeBase.prototype.cacheCanvasBBox = function () {\n        var canvasBBox = this.getCanvasViewBox();\n        // 绘制的时候缓存包围盒\n        if (canvasBBox) {\n            var bbox = this.getCanvasBBox();\n            var isInView = intersectRect(bbox, canvasBBox);\n            this.set('isInView', isInView);\n            // 不再视窗内 cacheCanvasBBox 设置成 null，会提升局部渲染的性能，\n            // 因为在局部渲染影响的包围盒计算时不考虑这个图形的包围盒\n            // 父元素 cacheCanvasBBox 计算的时候也不计算\n            if (isInView) {\n                this.set('cacheCanvasBBox', bbox);\n            }\n            else {\n                this.set('cacheCanvasBBox', null);\n            }\n        }\n    };\n    ShapeBase.prototype._afterDraw = function () {\n        this.cacheCanvasBBox();\n        // 绘制后消除标记\n        this.set('hasChanged', false);\n        this.set('refresh', null);\n    };\n    ShapeBase.prototype.skipDraw = function () {\n        this.set('cacheCanvasBBox', null);\n        this.set('isInView', null);\n        this.set('hasChanged', false);\n    };\n    /**\n     * 绘制图形的路径\n     * @param {CanvasRenderingContext2D} context 上下文\n     */\n    ShapeBase.prototype.drawPath = function (context) {\n        this.createPath(context);\n        this.strokeAndFill(context);\n        this.afterDrawPath(context);\n    };\n    /**\n     * @protected\n     * 填充图形\n     * @param {CanvasRenderingContext2D} context context 上下文\n     */\n    ShapeBase.prototype.fill = function (context) {\n        context.fill();\n    };\n    /**\n     * @protected\n     * 绘制图形边框\n     * @param {CanvasRenderingContext2D} context context 上下文\n     */\n    ShapeBase.prototype.stroke = function (context) {\n        context.stroke();\n    };\n    // 绘制或者填充\n    ShapeBase.prototype.strokeAndFill = function (context) {\n        var _a = this.attrs, lineWidth = _a.lineWidth, opacity = _a.opacity, strokeOpacity = _a.strokeOpacity, fillOpacity = _a.fillOpacity;\n        if (this.isFill()) {\n            if (!isNil(fillOpacity) && fillOpacity !== 1) {\n                context.globalAlpha = fillOpacity;\n                this.fill(context);\n                context.globalAlpha = opacity;\n            }\n            else {\n                this.fill(context);\n            }\n        }\n        if (this.isStroke()) {\n            if (lineWidth > 0) {\n                if (!isNil(strokeOpacity) && strokeOpacity !== 1) {\n                    context.globalAlpha = strokeOpacity;\n                }\n                this.stroke(context);\n            }\n        }\n        this.afterDrawPath(context);\n    };\n    /**\n     * @protected\n     * 绘制图形的路径\n     * @param {CanvasRenderingContext2D} context 上下文\n     */\n    ShapeBase.prototype.createPath = function (context) { };\n    /**\n     * 绘制完成 path 后的操作\n     * @param {CanvasRenderingContext2D} context 上下文\n     */\n    ShapeBase.prototype.afterDrawPath = function (context) { };\n    ShapeBase.prototype.isInShape = function (refX, refY) {\n        // return HitUtil.isHitShape(this, refX, refY);\n        var isStroke = this.isStroke();\n        var isFill = this.isFill();\n        var lineWidth = this.getHitLineWidth();\n        return this.isInStrokeOrPath(refX, refY, isStroke, isFill, lineWidth);\n    };\n    // 之所以不拆成 isInStroke 和 isInPath 在于两者存在一些共同的计算\n    ShapeBase.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n        return false;\n    };\n    /**\n     * 获取线拾取的宽度\n     * @returns {number} 线的拾取宽度\n     */\n    ShapeBase.prototype.getHitLineWidth = function () {\n        if (!this.isStroke()) {\n            return 0;\n        }\n        var attrs = this.attrs;\n        return attrs['lineWidth'] + attrs['lineAppendWidth'];\n    };\n    return ShapeBase;\n}(AbstractShape));\nexport default ShapeBase;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}