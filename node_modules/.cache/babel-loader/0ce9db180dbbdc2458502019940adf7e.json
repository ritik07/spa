{"ast":null,"code":"import path2Absolute from './path-2-absolute';\nimport { segmentToCubic } from './process/segment-2-cubic';\nexport default function pathToCurve(path, needZCommandIndexes) {\n  if (needZCommandIndexes === void 0) {\n    needZCommandIndexes = false;\n  }\n  var pathArray = path2Absolute(path);\n  var params = {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    x: 0,\n    y: 0,\n    qx: null,\n    qy: null\n  };\n  var allPathCommands = [];\n  var pathCommand = '';\n  var ii = pathArray.length;\n  var segment;\n  var seglen;\n  var zCommandIndexes = [];\n  for (var i = 0; i < ii; i += 1) {\n    if (pathArray[i]) pathCommand = pathArray[i][0];\n    allPathCommands[i] = pathCommand;\n    pathArray[i] = segmentToCubic(pathArray[i], params);\n    fixArc(pathArray, allPathCommands, i);\n    ii = pathArray.length; // solves curveArrays ending in Z\n    // keep Z command account for lineJoin\n    // @see https://github.com/antvis/util/issues/68\n    if (pathCommand === 'Z') {\n      zCommandIndexes.push(i);\n    }\n    segment = pathArray[i];\n    seglen = segment.length;\n    params.x1 = +segment[seglen - 2];\n    params.y1 = +segment[seglen - 1];\n    params.x2 = +segment[seglen - 4] || params.x1;\n    params.y2 = +segment[seglen - 3] || params.y1;\n  }\n  if (needZCommandIndexes) {\n    return [pathArray, zCommandIndexes];\n  } else {\n    return pathArray;\n  }\n}\nfunction fixArc(pathArray, allPathCommands, i) {\n  if (pathArray[i].length > 7) {\n    pathArray[i].shift();\n    var pi = pathArray[i];\n    // const ni = i + 1;\n    var ni = i;\n    while (pi.length) {\n      // if created multiple C:s, their original seg is saved\n      allPathCommands[i] = 'A';\n      // @ts-ignore\n      pathArray.splice(ni += 1, 0, ['C'].concat(pi.splice(0, 6)));\n    }\n    pathArray.splice(i, 1);\n  }\n}","map":{"version":3,"sources":["../src/path-2-curve.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,mBAAmB;AAC7C,SAAS,cAAc,QAAQ,2BAA2B;AAG1D,eAAc,SAAU,WAAW,CAAC,IAA4B,EAAE,mBAA2B,EAAA;EAA3B,IAAA,mBAAA,KAAA,KAAA,CAAA,EAAA;IAAA,mBAAA,GAAA,KAA2B;EAAA;EAC3F,IAAM,SAAS,GAAG,aAAa,CAAC,IAAc,CAAkB;EAEhE,IAAM,MAAM,GAAkB;IAC5B,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,CAAC;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE,CAAC;IAAE,EAAE,EAAE,IAAI;IAAE,EAAE,EAAE;GACvD;EACD,IAAM,eAAe,GAAG,EAAE;EAC1B,IAAI,WAAW,GAAG,EAAE;EACpB,IAAI,EAAE,GAAG,SAAS,CAAC,MAAM;EACzB,IAAI,OAAoB;EACxB,IAAI,MAAc;EAClB,IAAI,eAAe,GAAa,EAAE;EAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;IAC9B,IAAI,SAAS,CAAC,CAAC,CAAC,EAAG,WAAW,GAAI,SAAS,CAAC,CAAC,CAAC,CAAA,CAAA,CAAhB;IAE9B,eAAe,CAAC,CAAC,CAAC,GAAG,WAAW;IAChC,SAAS,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC;IAEnD,MAAM,CAAC,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;IACrC,EAAE,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IAEvB;IACA;IACA,IAAI,WAAW,KAAK,GAAG,EAAE;MACvB,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IACxB;IAED,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC;IACtB,MAAM,GAAG,OAAO,CAAC,MAAM;IAEvB,MAAM,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAChC,MAAM,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAChC,MAAM,CAAC,EAAE,GAAG,CAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAE,IAAI,MAAM,CAAC,EAAE;IAC/C,MAAM,CAAC,EAAE,GAAG,CAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAE,IAAI,MAAM,CAAC,EAAE;EAChD;EACD,IAAI,mBAAmB,EAAE;IACvB,OAAO,CAAC,SAAS,EAAE,eAAe,CAAC;GACpC,MAAM;IACL,OAAO,SAAS;EACjB;AACH;AAEA,SAAS,MAAM,CAAC,SAAwB,EAAE,eAAyB,EAAE,CAAS,EAAA;EAC5E,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;IAC3B,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;IACpB,IAAM,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC;IACvB;IACA,IAAI,EAAE,GAAG,CAAC;IACV,OAAO,EAAE,CAAC,MAAM,EAAE;MAChB;MACA,eAAe,CAAC,CAAC,CAAC,GAAG,GAAG;MACxB;MACA,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D;IACD,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACvB;AACH","sourceRoot":"","sourcesContent":["import path2Absolute from './path-2-absolute';\nimport { segmentToCubic } from './process/segment-2-cubic';\nexport default function pathToCurve(path, needZCommandIndexes) {\n    if (needZCommandIndexes === void 0) { needZCommandIndexes = false; }\n    var pathArray = path2Absolute(path);\n    var params = {\n        x1: 0, y1: 0, x2: 0, y2: 0, x: 0, y: 0, qx: null, qy: null,\n    };\n    var allPathCommands = [];\n    var pathCommand = '';\n    var ii = pathArray.length;\n    var segment;\n    var seglen;\n    var zCommandIndexes = [];\n    for (var i = 0; i < ii; i += 1) {\n        if (pathArray[i])\n            pathCommand = pathArray[i][0];\n        allPathCommands[i] = pathCommand;\n        pathArray[i] = segmentToCubic(pathArray[i], params);\n        fixArc(pathArray, allPathCommands, i);\n        ii = pathArray.length; // solves curveArrays ending in Z\n        // keep Z command account for lineJoin\n        // @see https://github.com/antvis/util/issues/68\n        if (pathCommand === 'Z') {\n            zCommandIndexes.push(i);\n        }\n        segment = pathArray[i];\n        seglen = segment.length;\n        params.x1 = +segment[seglen - 2];\n        params.y1 = +segment[seglen - 1];\n        params.x2 = +(segment[seglen - 4]) || params.x1;\n        params.y2 = +(segment[seglen - 3]) || params.y1;\n    }\n    if (needZCommandIndexes) {\n        return [pathArray, zCommandIndexes];\n    }\n    else {\n        return pathArray;\n    }\n}\nfunction fixArc(pathArray, allPathCommands, i) {\n    if (pathArray[i].length > 7) {\n        pathArray[i].shift();\n        var pi = pathArray[i];\n        // const ni = i + 1;\n        var ni = i;\n        while (pi.length) {\n            // if created multiple C:s, their original seg is saved\n            allPathCommands[i] = 'A';\n            // @ts-ignore\n            pathArray.splice(ni += 1, 0, ['C'].concat(pi.splice(0, 6)));\n        }\n        pathArray.splice(i, 1);\n    }\n}\n//# sourceMappingURL=path-2-curve.js.map"]},"metadata":{},"sourceType":"module"}