{"ast":null,"code":"import { __assign, __extends, __values } from \"tslib\";\nimport ColorUtil from '@antv/color-util';\nimport { get, isNumber } from '@antv/util';\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\n/**\n * 用于绘制热力图。\n */\nvar Heatmap = /** @class */function (_super) {\n  __extends(Heatmap, _super);\n  function Heatmap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'heatmap';\n    _this.paletteCache = {};\n    return _this;\n  }\n  Heatmap.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      var range = this.prepareRange(mappingData);\n      var radius = this.prepareSize();\n      var blur_1 = get(this.styleOption, ['cfg', 'shadowBlur']);\n      if (!isNumber(blur_1)) {\n        blur_1 = radius / 2;\n      }\n      this.prepareGreyScaleBlurredCircle(radius, blur_1);\n      this.drawWithRange(mappingData, range, radius, blur_1);\n    }\n  };\n  /** 热力图暂时不支持 callback 回调（文档需要说明下） */\n  Heatmap.prototype.color = function (field, cfg) {\n    this.createAttrOption('color', field, typeof cfg !== 'function' ? cfg : '');\n    return this;\n  };\n  /**\n   * clear\n   */\n  Heatmap.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this.clearShadowCanvasCtx();\n    this.paletteCache = {};\n  };\n  Heatmap.prototype.prepareRange = function (data) {\n    var colorAttr = this.getAttribute('color');\n    var colorField = colorAttr.getFields()[0];\n    var min = Infinity;\n    var max = -Infinity;\n    data.forEach(function (row) {\n      var value = row[FIELD_ORIGIN][colorField];\n      if (value > max) {\n        max = value;\n      }\n      if (value < min) {\n        min = value;\n      }\n    });\n    if (min === max) {\n      min = max - 1;\n    }\n    return [min, max];\n  };\n  Heatmap.prototype.prepareSize = function () {\n    var radius = this.getDefaultValue('size');\n    if (!isNumber(radius)) {\n      radius = this.getDefaultSize();\n    }\n    return radius;\n  };\n  Heatmap.prototype.prepareGreyScaleBlurredCircle = function (radius, blur) {\n    var grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    var r2 = radius + blur;\n    var ctx = grayScaleBlurredCanvas.getContext('2d');\n    grayScaleBlurredCanvas.width = grayScaleBlurredCanvas.height = r2 * 2;\n    ctx.clearRect(0, 0, grayScaleBlurredCanvas.width, grayScaleBlurredCanvas.height);\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, radius, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n  };\n  Heatmap.prototype.drawWithRange = function (data, range, radius, blur) {\n    var e_1, _a;\n    // canvas size\n    var _b = this.coordinate,\n      start = _b.start,\n      end = _b.end;\n    var width = this.coordinate.getWidth();\n    var height = this.coordinate.getHeight();\n    // value, range, etc\n    var colorAttr = this.getAttribute('color');\n    var valueField = colorAttr.getFields()[0];\n    // prepare shadow canvas context\n    this.clearShadowCanvasCtx();\n    var ctx = this.getShadowCanvasCtx();\n    // filter data\n    if (range) {\n      data = data.filter(function (row) {\n        return row[FIELD_ORIGIN][valueField] <= range[1] && row[FIELD_ORIGIN][valueField] >= range[0];\n      });\n    }\n    // step1. draw points with shadow\n    var scale = this.scales[valueField];\n    try {\n      for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n        var obj = data_1_1.value;\n        var _c = this.getDrawCfg(obj),\n          x = _c.x,\n          y = _c.y;\n        var alpha = scale.scale(obj[FIELD_ORIGIN][valueField]);\n        this.drawGrayScaleBlurredCircle(x - start.x, y - end.y, radius + blur, alpha, ctx);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    // step2. convert pixels\n    var colored = ctx.getImageData(0, 0, width, height);\n    this.clearShadowCanvasCtx();\n    this.colorize(colored);\n    ctx.putImageData(colored, 0, 0);\n    var imageShape = this.getImageShape();\n    imageShape.attr('x', start.x);\n    imageShape.attr('y', end.y);\n    imageShape.attr('width', width);\n    imageShape.attr('height', height);\n    imageShape.attr('img', ctx.canvas);\n    imageShape.set('origin', this.getShapeInfo(data)); // 存储绘图信息数据\n  };\n\n  Heatmap.prototype.getDefaultSize = function () {\n    var position = this.getAttribute('position');\n    var coordinate = this.coordinate;\n    return Math.min(coordinate.getWidth() / (position.scales[0].ticks.length * 4), coordinate.getHeight() / (position.scales[1].ticks.length * 4));\n  };\n  Heatmap.prototype.clearShadowCanvasCtx = function () {\n    var ctx = this.getShadowCanvasCtx();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  };\n  Heatmap.prototype.getShadowCanvasCtx = function () {\n    var canvas = this.shadowCanvas;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      this.shadowCanvas = canvas;\n    }\n    canvas.width = this.coordinate.getWidth();\n    canvas.height = this.coordinate.getHeight();\n    return canvas.getContext('2d');\n  };\n  Heatmap.prototype.getGrayScaleBlurredCanvas = function () {\n    if (!this.grayScaleBlurredCanvas) {\n      this.grayScaleBlurredCanvas = document.createElement('canvas');\n    }\n    return this.grayScaleBlurredCanvas;\n  };\n  Heatmap.prototype.drawGrayScaleBlurredCircle = function (x, y, r, alpha, ctx) {\n    var grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    ctx.globalAlpha = alpha;\n    ctx.drawImage(grayScaleBlurredCanvas, x - r, y - r);\n  };\n  Heatmap.prototype.colorize = function (img) {\n    var colorAttr = this.getAttribute('color');\n    var pixels = img.data;\n    var paletteCache = this.paletteCache;\n    for (var i = 3; i < pixels.length; i += 4) {\n      var alpha = pixels[i]; // get gradient color from opacity value\n      if (isNumber(alpha)) {\n        var palette = paletteCache[alpha] ? paletteCache[alpha] : ColorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n        pixels[i - 3] = palette[0];\n        pixels[i - 2] = palette[1];\n        pixels[i - 1] = palette[2];\n        pixels[i] = alpha;\n      }\n    }\n  };\n  Heatmap.prototype.getImageShape = function () {\n    var imageShape = this.imageShape;\n    if (imageShape) {\n      return imageShape;\n    }\n    var container = this.container;\n    imageShape = container.addShape({\n      type: 'image',\n      attrs: {}\n    });\n    this.imageShape = imageShape;\n    return imageShape;\n  };\n  Heatmap.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n    var data = mappingData.map(function (obj) {\n      return obj[FIELD_ORIGIN];\n    });\n    return __assign(__assign({}, shapeCfg), {\n      mappingData: mappingData,\n      data: data\n    });\n  };\n  return Heatmap;\n}(Geometry);\nexport default Heatmap;","map":{"version":3,"sources":["../../src/geometry/heatmap.ts"],"names":[],"mappings":"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","sourcesContent":["import ColorUtil from '@antv/color-util';\nimport { get, isNumber } from '@antv/util';\nimport { FIELD_ORIGIN } from '../constant';\nimport { Color, IShape } from '../dependents';\nimport { Data, Datum, MappingDatum, ShapeInfo, AttributeOption, ColorAttrCallback } from '../interface';\nimport Geometry from './base';\n\n/**\n * 用于绘制热力图。\n */\nexport default class Heatmap extends Geometry {\n  public readonly type: string = 'heatmap';\n\n  private paletteCache: Record<number, number> = {};\n  private grayScaleBlurredCanvas: HTMLCanvasElement;\n  private shadowCanvas: HTMLCanvasElement;\n  private imageShape: IShape;\n\n  protected updateElements(mappingDataArray: MappingDatum[][], isUpdate: boolean = false) {\n    for (let i = 0; i < mappingDataArray.length; i++) {\n      const mappingData = mappingDataArray[i];\n      const range = this.prepareRange(mappingData);\n      const radius = this.prepareSize();\n\n      let blur = get(this.styleOption, ['cfg', 'shadowBlur']);\n      if (!isNumber(blur)) {\n        blur = radius / 2;\n      }\n\n      this.prepareGreyScaleBlurredCircle(radius, blur);\n      this.drawWithRange(mappingData, range, radius, blur);\n    }\n  }\n\n  /** 热力图暂时不支持 callback 回调（文档需要说明下） */\n  public color(field: AttributeOption | string, cfg?: string | string[] | ColorAttrCallback): Geometry {\n    this.createAttrOption('color', field, typeof cfg !== 'function' ? cfg : '');\n\n    return this;\n  }\n\n  /**\n   * clear\n   */\n  public clear() {\n    super.clear();\n    this.clearShadowCanvasCtx();\n    this.paletteCache = {};\n  }\n\n  private prepareRange(data: MappingDatum[]) {\n    const colorAttr = this.getAttribute('color');\n    const colorField = colorAttr.getFields()[0];\n\n    let min = Infinity;\n    let max = -Infinity;\n    data.forEach((row) => {\n      const value = row[FIELD_ORIGIN][colorField];\n      if (value > max) {\n        max = value;\n      }\n      if (value < min) {\n        min = value;\n      }\n    });\n\n    if (min === max) {\n      min = max - 1;\n    }\n\n    return [min, max];\n  }\n\n  private prepareSize() {\n    let radius = this.getDefaultValue('size');\n    if (!isNumber(radius)) {\n      radius = this.getDefaultSize();\n    }\n\n    return radius;\n  }\n\n  private prepareGreyScaleBlurredCircle(radius: number, blur: number) {\n    const grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    const r2 = radius + blur;\n    const ctx = grayScaleBlurredCanvas.getContext('2d');\n    grayScaleBlurredCanvas.width = grayScaleBlurredCanvas.height = r2 * 2;\n    ctx.clearRect(0, 0, grayScaleBlurredCanvas.width, grayScaleBlurredCanvas.height);\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, radius, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  private drawWithRange(data: MappingDatum[], range: number[], radius: number, blur: number) {\n    // canvas size\n    const { start, end } = this.coordinate;\n    const width = this.coordinate.getWidth();\n    const height = this.coordinate.getHeight();\n\n    // value, range, etc\n    const colorAttr = this.getAttribute('color');\n    const valueField = colorAttr.getFields()[0];\n\n    // prepare shadow canvas context\n    this.clearShadowCanvasCtx();\n    const ctx = this.getShadowCanvasCtx();\n    // filter data\n    if (range) {\n      data = data.filter((row) => {\n        return row[FIELD_ORIGIN][valueField] <= range[1] && row[FIELD_ORIGIN][valueField] >= range[0];\n      });\n    }\n\n    // step1. draw points with shadow\n    const scale = this.scales[valueField];\n    for (const obj of data) {\n      const { x, y } = this.getDrawCfg(obj);\n      const alpha = scale.scale(obj[FIELD_ORIGIN][valueField]);\n      this.drawGrayScaleBlurredCircle((x as number) - start.x, (y as number) - end.y, radius + blur, alpha, ctx);\n    }\n\n    // step2. convert pixels\n    const colored = ctx.getImageData(0, 0, width, height);\n    this.clearShadowCanvasCtx();\n    this.colorize(colored);\n    ctx.putImageData(colored, 0, 0);\n    const imageShape = this.getImageShape();\n    imageShape.attr('x', start.x);\n    imageShape.attr('y', end.y);\n    imageShape.attr('width', width);\n    imageShape.attr('height', height);\n    imageShape.attr('img', ctx.canvas);\n    imageShape.set('origin', this.getShapeInfo(data)); // 存储绘图信息数据\n  }\n\n  private getDefaultSize() {\n    const position = this.getAttribute('position');\n    const coordinate = this.coordinate;\n    return Math.min(\n      coordinate.getWidth() / (position.scales[0].ticks.length * 4),\n      coordinate.getHeight() / (position.scales[1].ticks.length * 4)\n    );\n  }\n\n  private clearShadowCanvasCtx() {\n    const ctx = this.getShadowCanvasCtx();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  }\n\n  private getShadowCanvasCtx() {\n    let canvas = this.shadowCanvas;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      this.shadowCanvas = canvas;\n    }\n    canvas.width = this.coordinate.getWidth();\n    canvas.height = this.coordinate.getHeight();\n    return canvas.getContext('2d');\n  }\n\n  private getGrayScaleBlurredCanvas() {\n    if (!this.grayScaleBlurredCanvas) {\n      this.grayScaleBlurredCanvas = document.createElement('canvas');\n    }\n\n    return this.grayScaleBlurredCanvas;\n  }\n\n  private drawGrayScaleBlurredCircle(x: number, y: number, r: number, alpha: number, ctx: CanvasRenderingContext2D) {\n    const grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    ctx.globalAlpha = alpha;\n    ctx.drawImage(grayScaleBlurredCanvas, x - r, y - r);\n  }\n\n  private colorize(img: ImageData) {\n    const colorAttr = this.getAttribute('color') as Color;\n    const pixels = img.data;\n    const paletteCache = this.paletteCache;\n    for (let i = 3; i < pixels.length; i += 4) {\n      const alpha = pixels[i]; // get gradient color from opacity value\n      if (isNumber(alpha)) {\n        const palette = paletteCache[alpha] ? paletteCache[alpha] : ColorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n        pixels[i - 3] = palette[0];\n        pixels[i - 2] = palette[1];\n        pixels[i - 1] = palette[2];\n        pixels[i] = alpha;\n      }\n    }\n  }\n\n  private getImageShape() {\n    let imageShape = this.imageShape;\n    if (imageShape) {\n      return imageShape;\n    }\n    const container = this.container;\n    imageShape = container.addShape({\n      type: 'image',\n      attrs: {},\n    });\n    this.imageShape = imageShape;\n    return imageShape;\n  }\n\n  private getShapeInfo(mappingData: MappingDatum[]): ShapeInfo {\n    const shapeCfg = this.getDrawCfg(mappingData[0]);\n\n    const data = mappingData.map((obj: Datum) => {\n      return obj[FIELD_ORIGIN];\n    });\n\n    return {\n      ...shapeCfg,\n      mappingData,\n      data,\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}