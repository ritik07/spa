{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractCanvas } from '@antv/g-base';\nimport { getShape } from './util/hit';\nimport * as Shape from './shape';\nimport Group from './group';\nimport { each, getPixelRatio, requestAnimationFrame, clearAnimationFrame } from './util/util';\nimport { applyAttrsToContext, drawChildren, getMergedRegion, mergeView, checkRefresh, clearChanged } from './util/draw';\nvar Canvas = /** @class */function (_super) {\n  __extends(Canvas, _super);\n  function Canvas() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Canvas.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    // 设置渲染引擎为 canvas，只读属性\n    cfg['renderer'] = 'canvas';\n    // 是否自动绘制，不需要用户调用 draw 方法\n    cfg['autoDraw'] = true;\n    // 是否允许局部刷新图表\n    cfg['localRefresh'] = true;\n    cfg['refreshElements'] = [];\n    // 是否在视图内自动裁剪\n    cfg['clipView'] = true;\n    // 是否使用快速拾取的方案，默认为 false，上层可以打开\n    cfg['quickHit'] = false;\n    return cfg;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  Canvas.prototype.onCanvasChange = function (changeType) {\n    /**\n     * 触发画布更新的三种 changeType\n     * 1. attr: 修改画布的绘图属性\n     * 2. sort: 画布排序，图形的层次会发生变化\n     * 3. changeSize: 改变画布大小\n     */\n    if (changeType === 'attr' || changeType === 'sort' || changeType === 'changeSize') {\n      this.set('refreshElements', [this]);\n      this.draw();\n    }\n  };\n  Canvas.prototype.getShapeBase = function () {\n    return Shape;\n  };\n  Canvas.prototype.getGroupBase = function () {\n    return Group;\n  };\n  /**\n   * 获取屏幕像素比\n   */\n  Canvas.prototype.getPixelRatio = function () {\n    var pixelRatio = this.get('pixelRatio') || getPixelRatio();\n    // 不足 1 的取 1，超出 1 的取整\n    return pixelRatio >= 1 ? Math.ceil(pixelRatio) : 1;\n  };\n  Canvas.prototype.getViewRange = function () {\n    return {\n      minX: 0,\n      minY: 0,\n      maxX: this.cfg.width,\n      maxY: this.cfg.height\n    };\n  };\n  // 复写基类的方法生成标签\n  Canvas.prototype.createDom = function () {\n    var element = document.createElement('canvas');\n    var context = element.getContext('2d');\n    // 缓存 context 对象\n    this.set('context', context);\n    return element;\n  };\n  Canvas.prototype.setDOMSize = function (width, height) {\n    _super.prototype.setDOMSize.call(this, width, height);\n    var context = this.get('context');\n    var el = this.get('el');\n    var pixelRatio = this.getPixelRatio();\n    el.width = pixelRatio * width;\n    el.height = pixelRatio * height;\n    // 设置 canvas 元素的宽度和高度，会重置缩放，因此 context.scale 需要在每次设置宽、高后调用\n    if (pixelRatio > 1) {\n      context.scale(pixelRatio, pixelRatio);\n    }\n  };\n  // 复写基类方法\n  Canvas.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this._clearFrame(); // 需要清理掉延迟绘制的帧\n    var context = this.get('context');\n    var element = this.get('el');\n    context.clearRect(0, 0, element.width, element.height);\n  };\n  Canvas.prototype.getShape = function (x, y) {\n    var shape;\n    if (this.get('quickHit')) {\n      shape = getShape(this, x, y);\n    } else {\n      shape = _super.prototype.getShape.call(this, x, y, null);\n    }\n    return shape;\n  };\n  // 对绘制区域边缘取整，避免浮点数问题\n  Canvas.prototype._getRefreshRegion = function () {\n    var elements = this.get('refreshElements');\n    var viewRegion = this.getViewRange();\n    var region;\n    // 如果是当前画布整体发生了变化，则直接重绘整个画布\n    if (elements.length && elements[0] === this) {\n      region = viewRegion;\n    } else {\n      region = getMergedRegion(elements);\n      if (region) {\n        region.minX = Math.floor(region.minX);\n        region.minY = Math.floor(region.minY);\n        region.maxX = Math.ceil(region.maxX);\n        region.maxY = Math.ceil(region.maxY);\n        region.maxY += 1; // 在很多环境下字体的高低会不一致，附加一像素，避免残影\n        var clipView = this.get('clipView');\n        // 自动裁剪不在 view 内的区域\n        if (clipView) {\n          region = mergeView(region, viewRegion);\n        }\n      }\n    }\n    return region;\n  };\n  /**\n   * 刷新图形元素，这里仅仅是放入队列，下次绘制时进行绘制\n   * @param {IElement} element 图形元素\n   */\n  Canvas.prototype.refreshElement = function (element) {\n    var refreshElements = this.get('refreshElements');\n    refreshElements.push(element);\n    // if (this.get('autoDraw')) {\n    //   this._startDraw();\n    // }\n  };\n  // 清理还在进行的绘制\n  Canvas.prototype._clearFrame = function () {\n    var drawFrame = this.get('drawFrame');\n    if (drawFrame) {\n      // 如果全部渲染时，存在局部渲染，则抛弃掉局部渲染\n      clearAnimationFrame(drawFrame);\n      this.set('drawFrame', null);\n      this.set('refreshElements', []);\n    }\n  };\n  // 手工调用绘制接口\n  Canvas.prototype.draw = function () {\n    var drawFrame = this.get('drawFrame');\n    if (this.get('autoDraw') && drawFrame) {\n      return;\n    }\n    this._startDraw();\n  };\n  // 绘制所有图形\n  Canvas.prototype._drawAll = function () {\n    var context = this.get('context');\n    var element = this.get('el');\n    var children = this.getChildren();\n    context.clearRect(0, 0, element.width, element.height);\n    applyAttrsToContext(context, this);\n    drawChildren(context, children);\n    // 对于 https://github.com/antvis/g/issues/422 的场景，全局渲染的模式下也会记录更新的元素队列，因此全局渲染完后也需要置空\n    this.set('refreshElements', []);\n  };\n  // 绘制局部\n  Canvas.prototype._drawRegion = function () {\n    var context = this.get('context');\n    var refreshElements = this.get('refreshElements');\n    var children = this.getChildren();\n    var region = this._getRefreshRegion();\n    // 需要注意可能没有 region 的场景\n    // 一般发生在设置了 localRefresh ,在没有图形发生变化的情况下，用户调用了 draw\n    if (region) {\n      // 清理指定区域\n      context.clearRect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);\n      // 保存上下文，设置 clip\n      context.save();\n      context.beginPath();\n      context.rect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);\n      context.clip();\n      applyAttrsToContext(context, this);\n      // 确认更新的元素，这个优化可以提升 10 倍左右的性能，10W 个带有 group 的节点，局部渲染会从 90ms 下降到 5-6 ms\n      checkRefresh(this, children, region);\n      // 绘制子元素\n      drawChildren(context, children, region);\n      context.restore();\n    } else if (refreshElements.length) {\n      // 防止发生改变的 elements 没有 region 的场景，这会发生在多个情况下\n      // 1. 空的 group\n      // 2. 所有 elements 没有在绘图区域\n      // 3. group 下面的 elements 隐藏掉\n      // 如果不进行清理 hasChanged 的状态会不正确\n      clearChanged(refreshElements);\n    }\n    each(refreshElements, function (element) {\n      if (element.get('hasChanged')) {\n        // 在视窗外的 Group 元素会加入到更新队列里，但实际却没有执行 draw() 逻辑，也就没有清除 hasChanged 标记\n        // 即已经重绘完、但 hasChanged 标记没有清除的元素，需要统一清除掉。主要是 Group 存在问题，具体原因待排查\n        element.set('hasChanged', false);\n      }\n    });\n    this.set('refreshElements', []);\n  };\n  // 触发绘制\n  Canvas.prototype._startDraw = function () {\n    var _this = this;\n    var drawFrame = this.get('drawFrame');\n    if (!drawFrame) {\n      drawFrame = requestAnimationFrame(function () {\n        if (_this.get('localRefresh')) {\n          _this._drawRegion();\n        } else {\n          _this._drawAll();\n        }\n        _this.set('drawFrame', null);\n      });\n      this.set('drawFrame', drawFrame);\n    }\n  };\n  Canvas.prototype.skipDraw = function () {};\n  Canvas.prototype.removeDom = function () {\n    var el = this.get('el');\n    // 需要清理 canvas 画布内容，否则ios下 创建的canvas垃圾未回收，导致Total canvas memory use exceeds问题\n    // 相关问题列表\n    // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n    // https://github.com/openlayers/openlayers/issues/9291\n    el.width = 0;\n    el.height = 0;\n    el.parentNode.removeChild(el);\n  };\n  return Canvas;\n}(AbstractCanvas);\nexport default Canvas;","map":{"version":3,"sources":["../src/canvas.ts"],"names":[],"mappings":";AAAA,SAAS,cAAc,QAAQ,cAAc;AAG7C,SAAS,QAAQ,QAAQ,YAAY;AACrC,OAAO,KAAK,KAAK,MAAM,SAAS;AAChC,OAAO,KAAK,MAAM,SAAS;AAC3B,SAAS,IAAI,EAAE,aAAa,EAAE,qBAAqB,EAAE,mBAAmB,QAAQ,aAAa;AAC7F,SAAS,mBAAmB,EAAE,YAAY,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAAE,YAAY,QAAQ,aAAa;AAEvH,IAAA,MAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAqB,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;EAArB,SAAA,MAAA,GAAA;;EAwOA;EAvOE,MAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACE,IAAM,GAAG,GAAG,MAAA,CAAA,SAAA,CAAM,aAAa,CAAA,IAAA,CAAA,IAAA,CAAE;IACjC;IACA,GAAG,CAAC,UAAU,CAAC,GAAG,QAAQ;IAC1B;IACA,GAAG,CAAC,UAAU,CAAC,GAAG,IAAI;IACtB;IACA,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI;IAC1B,GAAG,CAAC,iBAAiB,CAAC,GAAG,EAAE;IAC3B;IACA,GAAG,CAAC,UAAU,CAAC,GAAG,IAAI;IACtB;IACA,GAAG,CAAC,UAAU,CAAC,GAAG,KAAK;IACvB,OAAO,GAAG;EACZ,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,UAAsB,EAAA;IACnC;;;;;AAKG;IACH,IAAI,UAAU,KAAK,MAAM,IAAI,UAAU,KAAK,MAAM,IAAI,UAAU,KAAK,YAAY,EAAE;MACjF,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,CAAC;MACnC,IAAI,CAAC,IAAI,EAAE;IACZ;EACH,CAAC;EAED,MAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,YAAA;IACE,OAAO,KAAK;EACd,CAAC;EAED,MAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,YAAA;IACE,OAAO,KAAK;EACd,CAAC;EACD;;AAEG;EACH,MAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACE,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,aAAa,EAAE;IAC5D;IACA,OAAO,UAAU,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;EACpD,CAAC;EAED,MAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,YAAA;IACE,OAAO;MACL,IAAI,EAAE,CAAC;MACP,IAAI,EAAE,CAAC;MACP,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK;MACpB,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC;KAChB;EACH,CAAC;EAED;EACA,MAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;IAChD,IAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;IACxC;IACA,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC;IAC5B,OAAO,OAAO;EAChB,CAAC;EACD,MAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,KAAa,EAAE,MAAc,EAAA;IACtC,MAAA,CAAA,SAAA,CAAM,UAAU,CAAA,IAAA,CAAA,IAAA,EAAC,KAAK,EAAE,MAAM,CAAC;IAC/B,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;IACnC,IAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IACzB,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE;IACvC,EAAE,CAAC,KAAK,GAAG,UAAU,GAAG,KAAK;IAC7B,EAAE,CAAC,MAAM,GAAG,UAAU,GAAG,MAAM;IAC/B;IACA,IAAI,UAAU,GAAG,CAAC,EAAE;MAClB,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;IACtC;EACH,CAAC;EACD;EACA,MAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IACE,MAAA,CAAA,SAAA,CAAM,KAAK,CAAA,IAAA,CAAA,IAAA,CAAE;IACb,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IACpB,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;IACnC,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IAC9B,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC;EACxD,CAAC;EAED,MAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,CAAS,EAAE,CAAS,EAAA;IAC3B,IAAI,KAAK;IACT,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;MACxB,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;KAC7B,MAAM;MACL,KAAK,GAAG,MAAA,CAAA,SAAA,CAAM,QAAQ,CAAA,IAAA,CAAA,IAAA,EAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;IACnC;IACD,OAAO,KAAK;EACd,CAAC;EACD;EACA,MAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,YAAA;IACE,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC;IAC5C,IAAM,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE;IACtC,IAAI,MAAM;IACV;IACA,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MAC3C,MAAM,GAAG,UAAU;KACpB,MAAM;MACL,MAAM,GAAG,eAAe,CAAC,QAAQ,CAAC;MAClC,IAAI,MAAM,EAAE;QACV,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;QACrC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;QACrC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACpC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACpC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;QAClB,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;QACrC;QACA,IAAI,QAAQ,EAAE;UACZ,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC;QACvC;MACF;IACF;IACD,OAAO,MAAM;EACf,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,OAAiB,EAAA;IAC9B,IAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC;IACnD,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC;IAC7B;IACA;IACA;EACF,CAAC;EACD;EACA,MAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;IACvC,IAAI,SAAS,EAAE;MACb;MACA,mBAAmB,CAAC,SAAS,CAAC;MAC9B,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC;MAC3B,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC;IAChC;EACH,CAAC;EAED;EACA,MAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,YAAA;IACE,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;IACvC,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,SAAS,EAAE;MACrC;IACD;IACD,IAAI,CAAC,UAAU,EAAE;EACnB,CAAC;EACD;EACA,MAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;IACnC,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IAC9B,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAgB;IACjD,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC;IACtD,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC;IAClC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC;IAC/B;IACA,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC;EACjC,CAAC;EACD;EACA,MAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;IACnC,IAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC;IACnD,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAgB;IACjD,IAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,EAAE;IACvC;IACA;IACA,IAAI,MAAM,EAAE;MACV;MACA,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;MACjG;MACA,OAAO,CAAC,IAAI,EAAE;MACd,OAAO,CAAC,SAAS,EAAE;MACnB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;MAC5F,OAAO,CAAC,IAAI,EAAE;MACd,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC;MAClC;MACA,YAAY,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC;MACpC;MACA,YAAY,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC;MACvC,OAAO,CAAC,OAAO,EAAE;KAClB,MAAM,IAAI,eAAe,CAAC,MAAM,EAAE;MACjC;MACA;MACA;MACA;MACA;MACA,YAAY,CAAC,eAAe,CAAC;IAC9B;IACD,IAAI,CAAC,eAAe,EAAE,UAAC,OAAO,EAAA;MAC5B,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;QAC7B;QACA;QACA,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC;MACjC;IACH,CAAC,CAAC;IACF,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC;EACjC,CAAC;EAED;EACA,MAAA,CAAA,SAAA,CAAA,UAAU,GAAV,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACE,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;IACrC,IAAI,CAAC,SAAS,EAAE;MACd,SAAS,GAAG,qBAAqB,CAAC,YAAA;QAChC,IAAI,KAAI,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;UAC5B,KAAI,CAAC,WAAW,EAAE;SACnB,MAAM;UACL,KAAI,CAAC,QAAQ,EAAE;QAChB;QACD,KAAI,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC;MAC7B,CAAC,CAAC;MACF,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC;IACjC;EACH,CAAC;EAED,MAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA,CAAY,CAAC;EAEb,MAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,IAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IACzB;IACA;IACA;IACA;IACA,EAAE,CAAC,KAAK,GAAG,CAAC;IACZ,EAAE,CAAC,MAAM,GAAG,CAAC;IACb,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;EAC/B,CAAC;EACH,OAAA,MAAC;AAAD,CAAC,CAxOoB,cAAc,CAAA;AA0OnC,eAAe,MAAM","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { AbstractCanvas } from '@antv/g-base';\nimport { getShape } from './util/hit';\nimport * as Shape from './shape';\nimport Group from './group';\nimport { each, getPixelRatio, requestAnimationFrame, clearAnimationFrame } from './util/util';\nimport { applyAttrsToContext, drawChildren, getMergedRegion, mergeView, checkRefresh, clearChanged } from './util/draw';\nvar Canvas = /** @class */ (function (_super) {\n    __extends(Canvas, _super);\n    function Canvas() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Canvas.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        // 设置渲染引擎为 canvas，只读属性\n        cfg['renderer'] = 'canvas';\n        // 是否自动绘制，不需要用户调用 draw 方法\n        cfg['autoDraw'] = true;\n        // 是否允许局部刷新图表\n        cfg['localRefresh'] = true;\n        cfg['refreshElements'] = [];\n        // 是否在视图内自动裁剪\n        cfg['clipView'] = true;\n        // 是否使用快速拾取的方案，默认为 false，上层可以打开\n        cfg['quickHit'] = false;\n        return cfg;\n    };\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    Canvas.prototype.onCanvasChange = function (changeType) {\n        /**\n         * 触发画布更新的三种 changeType\n         * 1. attr: 修改画布的绘图属性\n         * 2. sort: 画布排序，图形的层次会发生变化\n         * 3. changeSize: 改变画布大小\n         */\n        if (changeType === 'attr' || changeType === 'sort' || changeType === 'changeSize') {\n            this.set('refreshElements', [this]);\n            this.draw();\n        }\n    };\n    Canvas.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    Canvas.prototype.getGroupBase = function () {\n        return Group;\n    };\n    /**\n     * 获取屏幕像素比\n     */\n    Canvas.prototype.getPixelRatio = function () {\n        var pixelRatio = this.get('pixelRatio') || getPixelRatio();\n        // 不足 1 的取 1，超出 1 的取整\n        return pixelRatio >= 1 ? Math.ceil(pixelRatio) : 1;\n    };\n    Canvas.prototype.getViewRange = function () {\n        return {\n            minX: 0,\n            minY: 0,\n            maxX: this.cfg.width,\n            maxY: this.cfg.height,\n        };\n    };\n    // 复写基类的方法生成标签\n    Canvas.prototype.createDom = function () {\n        var element = document.createElement('canvas');\n        var context = element.getContext('2d');\n        // 缓存 context 对象\n        this.set('context', context);\n        return element;\n    };\n    Canvas.prototype.setDOMSize = function (width, height) {\n        _super.prototype.setDOMSize.call(this, width, height);\n        var context = this.get('context');\n        var el = this.get('el');\n        var pixelRatio = this.getPixelRatio();\n        el.width = pixelRatio * width;\n        el.height = pixelRatio * height;\n        // 设置 canvas 元素的宽度和高度，会重置缩放，因此 context.scale 需要在每次设置宽、高后调用\n        if (pixelRatio > 1) {\n            context.scale(pixelRatio, pixelRatio);\n        }\n    };\n    // 复写基类方法\n    Canvas.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this._clearFrame(); // 需要清理掉延迟绘制的帧\n        var context = this.get('context');\n        var element = this.get('el');\n        context.clearRect(0, 0, element.width, element.height);\n    };\n    Canvas.prototype.getShape = function (x, y) {\n        var shape;\n        if (this.get('quickHit')) {\n            shape = getShape(this, x, y);\n        }\n        else {\n            shape = _super.prototype.getShape.call(this, x, y, null);\n        }\n        return shape;\n    };\n    // 对绘制区域边缘取整，避免浮点数问题\n    Canvas.prototype._getRefreshRegion = function () {\n        var elements = this.get('refreshElements');\n        var viewRegion = this.getViewRange();\n        var region;\n        // 如果是当前画布整体发生了变化，则直接重绘整个画布\n        if (elements.length && elements[0] === this) {\n            region = viewRegion;\n        }\n        else {\n            region = getMergedRegion(elements);\n            if (region) {\n                region.minX = Math.floor(region.minX);\n                region.minY = Math.floor(region.minY);\n                region.maxX = Math.ceil(region.maxX);\n                region.maxY = Math.ceil(region.maxY);\n                region.maxY += 1; // 在很多环境下字体的高低会不一致，附加一像素，避免残影\n                var clipView = this.get('clipView');\n                // 自动裁剪不在 view 内的区域\n                if (clipView) {\n                    region = mergeView(region, viewRegion);\n                }\n            }\n        }\n        return region;\n    };\n    /**\n     * 刷新图形元素，这里仅仅是放入队列，下次绘制时进行绘制\n     * @param {IElement} element 图形元素\n     */\n    Canvas.prototype.refreshElement = function (element) {\n        var refreshElements = this.get('refreshElements');\n        refreshElements.push(element);\n        // if (this.get('autoDraw')) {\n        //   this._startDraw();\n        // }\n    };\n    // 清理还在进行的绘制\n    Canvas.prototype._clearFrame = function () {\n        var drawFrame = this.get('drawFrame');\n        if (drawFrame) {\n            // 如果全部渲染时，存在局部渲染，则抛弃掉局部渲染\n            clearAnimationFrame(drawFrame);\n            this.set('drawFrame', null);\n            this.set('refreshElements', []);\n        }\n    };\n    // 手工调用绘制接口\n    Canvas.prototype.draw = function () {\n        var drawFrame = this.get('drawFrame');\n        if (this.get('autoDraw') && drawFrame) {\n            return;\n        }\n        this._startDraw();\n    };\n    // 绘制所有图形\n    Canvas.prototype._drawAll = function () {\n        var context = this.get('context');\n        var element = this.get('el');\n        var children = this.getChildren();\n        context.clearRect(0, 0, element.width, element.height);\n        applyAttrsToContext(context, this);\n        drawChildren(context, children);\n        // 对于 https://github.com/antvis/g/issues/422 的场景，全局渲染的模式下也会记录更新的元素队列，因此全局渲染完后也需要置空\n        this.set('refreshElements', []);\n    };\n    // 绘制局部\n    Canvas.prototype._drawRegion = function () {\n        var context = this.get('context');\n        var refreshElements = this.get('refreshElements');\n        var children = this.getChildren();\n        var region = this._getRefreshRegion();\n        // 需要注意可能没有 region 的场景\n        // 一般发生在设置了 localRefresh ,在没有图形发生变化的情况下，用户调用了 draw\n        if (region) {\n            // 清理指定区域\n            context.clearRect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);\n            // 保存上下文，设置 clip\n            context.save();\n            context.beginPath();\n            context.rect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);\n            context.clip();\n            applyAttrsToContext(context, this);\n            // 确认更新的元素，这个优化可以提升 10 倍左右的性能，10W 个带有 group 的节点，局部渲染会从 90ms 下降到 5-6 ms\n            checkRefresh(this, children, region);\n            // 绘制子元素\n            drawChildren(context, children, region);\n            context.restore();\n        }\n        else if (refreshElements.length) {\n            // 防止发生改变的 elements 没有 region 的场景，这会发生在多个情况下\n            // 1. 空的 group\n            // 2. 所有 elements 没有在绘图区域\n            // 3. group 下面的 elements 隐藏掉\n            // 如果不进行清理 hasChanged 的状态会不正确\n            clearChanged(refreshElements);\n        }\n        each(refreshElements, function (element) {\n            if (element.get('hasChanged')) {\n                // 在视窗外的 Group 元素会加入到更新队列里，但实际却没有执行 draw() 逻辑，也就没有清除 hasChanged 标记\n                // 即已经重绘完、但 hasChanged 标记没有清除的元素，需要统一清除掉。主要是 Group 存在问题，具体原因待排查\n                element.set('hasChanged', false);\n            }\n        });\n        this.set('refreshElements', []);\n    };\n    // 触发绘制\n    Canvas.prototype._startDraw = function () {\n        var _this = this;\n        var drawFrame = this.get('drawFrame');\n        if (!drawFrame) {\n            drawFrame = requestAnimationFrame(function () {\n                if (_this.get('localRefresh')) {\n                    _this._drawRegion();\n                }\n                else {\n                    _this._drawAll();\n                }\n                _this.set('drawFrame', null);\n            });\n            this.set('drawFrame', drawFrame);\n        }\n    };\n    Canvas.prototype.skipDraw = function () { };\n    Canvas.prototype.removeDom = function () {\n        var el = this.get('el');\n        // 需要清理 canvas 画布内容，否则ios下 创建的canvas垃圾未回收，导致Total canvas memory use exceeds问题\n        // 相关问题列表\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        // https://github.com/openlayers/openlayers/issues/9291\n        el.width = 0;\n        el.height = 0;\n        el.parentNode.removeChild(el);\n    };\n    return Canvas;\n}(AbstractCanvas));\nexport default Canvas;\n//# sourceMappingURL=canvas.js.map"]},"metadata":{},"sourceType":"module"}