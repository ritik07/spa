{"ast":null,"code":"var LOAD_COMPONENT_CONTROLLERS = {};\n/**\n * 全局注册组件。\n * @param name 组件名称\n * @param plugin 注册的组件类\n * @returns void\n */\nexport function registerComponentController(name, plugin) {\n  LOAD_COMPONENT_CONTROLLERS[name] = plugin;\n}\n/**\n * 删除全局组件。\n * @param name 组件名\n * @returns void\n */\nexport function unregisterComponentController(name) {\n  delete LOAD_COMPONENT_CONTROLLERS[name];\n}\n/**\n * 获取以注册的组件名。\n * @returns string[] 返回已注册的组件名称\n */\nexport function getComponentControllerNames() {\n  return Object.keys(LOAD_COMPONENT_CONTROLLERS);\n}\n/**\n * 根据组件名获取组件类。\n * @param name 组件名\n * @returns 返回组件类\n */\nexport function getComponentController(name) {\n  return LOAD_COMPONENT_CONTROLLERS[name];\n}","map":{"version":3,"sources":["../../../src/chart/controller/index.ts"],"names":[],"mappings":"AAEA,IAAM,0BAA0B,GAAmC,CAAA,CAAE;AAErE;;;;;AAKG;AACH,OAAM,SAAU,2BAA2B,CAAC,IAAY,EAAE,MAAsB,EAAA;EAC9E,0BAA0B,CAAC,IAAI,CAAC,GAAG,MAAM;AAC3C;AAEA;;;;AAIG;AACH,OAAM,SAAU,6BAA6B,CAAC,IAAY,EAAA;EACxD,OAAO,0BAA0B,CAAC,IAAI,CAAC;AACzC;AAEA;;;AAGG;AACH,OAAM,SAAU,2BAA2B,GAAA;EACzC,OAAO,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC;AAChD;AAEA;;;;AAIG;AACH,OAAM,SAAU,sBAAsB,CAAC,IAAY,EAAA;EACjD,OAAO,0BAA0B,CAAC,IAAI,CAAC;AACzC","sourcesContent":["import { ControllerCtor } from './base';\n\nconst LOAD_COMPONENT_CONTROLLERS: Record<string, ControllerCtor> = {};\n\n/**\n * 全局注册组件。\n * @param name 组件名称\n * @param plugin 注册的组件类\n * @returns void\n */\nexport function registerComponentController(name: string, plugin: ControllerCtor) {\n  LOAD_COMPONENT_CONTROLLERS[name] = plugin;\n}\n\n/**\n * 删除全局组件。\n * @param name 组件名\n * @returns void\n */\nexport function unregisterComponentController(name: string) {\n  delete LOAD_COMPONENT_CONTROLLERS[name];\n}\n\n/**\n * 获取以注册的组件名。\n * @returns string[] 返回已注册的组件名称\n */\nexport function getComponentControllerNames(): string[] {\n  return Object.keys(LOAD_COMPONENT_CONTROLLERS);\n}\n\n/**\n * 根据组件名获取组件类。\n * @param name 组件名\n * @returns 返回组件类\n */\nexport function getComponentController(name: string): ControllerCtor {\n  return LOAD_COMPONENT_CONTROLLERS[name];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}