{"ast":null,"code":"/**\n * @fileoverview 椭圆\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\n// 根据椭圆公式计算 x*x/rx*rx + y*y/ry*ry;\nfunction ellipseDistance(squareX, squareY, rx, ry) {\n  return squareX / (rx * rx) + squareY / (ry * ry);\n}\nvar Ellipse = /** @class */function (_super) {\n  __extends(Ellipse, _super);\n  function Ellipse() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Ellipse.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    return __assign(__assign({}, attrs), {\n      x: 0,\n      y: 0,\n      rx: 0,\n      ry: 0\n    });\n  };\n  Ellipse.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    var attrs = this.attr();\n    var halfLineWith = lineWidth / 2;\n    var cx = attrs.x;\n    var cy = attrs.y;\n    var rx = attrs.rx,\n      ry = attrs.ry;\n    var squareX = (x - cx) * (x - cx);\n    var squareY = (y - cy) * (y - cy);\n    // 使用椭圆的公式： x*x/rx*rx + y*y/ry*ry = 1;\n    if (isFill && isStroke) {\n      return ellipseDistance(squareX, squareY, rx + halfLineWith, ry + halfLineWith) <= 1;\n    }\n    if (isFill) {\n      return ellipseDistance(squareX, squareY, rx, ry) <= 1;\n    }\n    if (isStroke) {\n      return ellipseDistance(squareX, squareY, rx - halfLineWith, ry - halfLineWith) >= 1 && ellipseDistance(squareX, squareY, rx + halfLineWith, ry + halfLineWith) <= 1;\n    }\n    return false;\n  };\n  Ellipse.prototype.createPath = function (context) {\n    var attrs = this.attr();\n    var cx = attrs.x;\n    var cy = attrs.y;\n    var rx = attrs.rx;\n    var ry = attrs.ry;\n    context.beginPath();\n    // 兼容逻辑\n    if (context.ellipse) {\n      context.ellipse(cx, cy, rx, ry, 0, 0, Math.PI * 2, false);\n    } else {\n      // 如果不支持，则使用圆来绘制，进行变形\n      var r = rx > ry ? rx : ry;\n      var scaleX = rx > ry ? 1 : rx / ry;\n      var scaleY = rx > ry ? ry / rx : 1;\n      context.save();\n      context.translate(cx, cy);\n      context.scale(scaleX, scaleY);\n      context.arc(0, 0, r, 0, Math.PI * 2);\n      context.restore();\n      context.closePath();\n    }\n  };\n  return Ellipse;\n}(ShapeBase);\nexport default Ellipse;","map":{"version":3,"sources":["../../src/shape/ellipse.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileoverview 椭圆\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\n// 根据椭圆公式计算 x*x/rx*rx + y*y/ry*ry;\nfunction ellipseDistance(squareX, squareY, rx, ry) {\n    return squareX / (rx * rx) + squareY / (ry * ry);\n}\nvar Ellipse = /** @class */ (function (_super) {\n    __extends(Ellipse, _super);\n    function Ellipse() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Ellipse.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        return __assign(__assign({}, attrs), { x: 0, y: 0, rx: 0, ry: 0 });\n    };\n    Ellipse.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n        var attrs = this.attr();\n        var halfLineWith = lineWidth / 2;\n        var cx = attrs.x;\n        var cy = attrs.y;\n        var rx = attrs.rx, ry = attrs.ry;\n        var squareX = (x - cx) * (x - cx);\n        var squareY = (y - cy) * (y - cy);\n        // 使用椭圆的公式： x*x/rx*rx + y*y/ry*ry = 1;\n        if (isFill && isStroke) {\n            return ellipseDistance(squareX, squareY, rx + halfLineWith, ry + halfLineWith) <= 1;\n        }\n        if (isFill) {\n            return ellipseDistance(squareX, squareY, rx, ry) <= 1;\n        }\n        if (isStroke) {\n            return (ellipseDistance(squareX, squareY, rx - halfLineWith, ry - halfLineWith) >= 1 &&\n                ellipseDistance(squareX, squareY, rx + halfLineWith, ry + halfLineWith) <= 1);\n        }\n        return false;\n    };\n    Ellipse.prototype.createPath = function (context) {\n        var attrs = this.attr();\n        var cx = attrs.x;\n        var cy = attrs.y;\n        var rx = attrs.rx;\n        var ry = attrs.ry;\n        context.beginPath();\n        // 兼容逻辑\n        if (context.ellipse) {\n            context.ellipse(cx, cy, rx, ry, 0, 0, Math.PI * 2, false);\n        }\n        else {\n            // 如果不支持，则使用圆来绘制，进行变形\n            var r = rx > ry ? rx : ry;\n            var scaleX = rx > ry ? 1 : rx / ry;\n            var scaleY = rx > ry ? ry / rx : 1;\n            context.save();\n            context.translate(cx, cy);\n            context.scale(scaleX, scaleY);\n            context.arc(0, 0, r, 0, Math.PI * 2);\n            context.restore();\n            context.closePath();\n        }\n    };\n    return Ellipse;\n}(ShapeBase));\nexport default Ellipse;\n//# sourceMappingURL=ellipse.js.map"]},"metadata":{},"sourceType":"module"}