{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { clamp, head, last } from '@antv/util';\nimport RectMask from './rect';\nfunction clampPoint(point) {\n  point.x = clamp(point.x, 0, 1);\n  point.y = clamp(point.y, 0, 1);\n}\n/**\n * @ignore\n */\nvar DimRect = /** @class */function (_super) {\n  __extends(DimRect, _super);\n  function DimRect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.dim = 'x';\n    _this.inPlot = true;\n    return _this;\n  }\n  DimRect.prototype.getRegion = function () {\n    var start = null;\n    var end = null;\n    var points = this.points;\n    var dim = this.dim;\n    var coord = this.context.view.getCoordinate();\n    var normalStart = coord.invert(head(points));\n    var normalEnd = coord.invert(last(points));\n    if (this.inPlot) {\n      // 约束到 0 - 1 范围内\n      clampPoint(normalStart);\n      clampPoint(normalEnd);\n    }\n    if (dim === 'x') {\n      // x 轴方向扩展, y 轴方向占满全部\n      start = coord.convert({\n        x: normalStart.x,\n        y: 0\n      });\n      end = coord.convert({\n        x: normalEnd.x,\n        y: 1\n      });\n    } else {\n      // y 轴方向扩展, x 轴方向占满全部\n      start = coord.convert({\n        x: 0,\n        y: normalStart.y\n      });\n      end = coord.convert({\n        x: 1,\n        y: normalEnd.y\n      });\n    }\n    return {\n      start: start,\n      end: end\n    };\n  };\n  return DimRect;\n}(RectMask);\nexport default DimRect;","map":{"version":3,"sources":["../../../../src/interaction/action/mask/dim-rect.ts"],"names":[],"mappings":";AAAA,SAAS,KAAK,EAAE,IAAI,EAAE,IAAI,QAAQ,YAAY;AAE9C,OAAO,QAAQ,MAAM,QAAQ;AAE7B,SAAS,UAAU,CAAC,KAAK,EAAA;EACvB,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9B,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAChC;AAEA;;AAEG;AACH,IAAA,OAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAsB,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;EAAtB,SAAA,OAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IACY,KAAA,CAAA,GAAG,GAAG,GAAG;IACT,KAAA,CAAA,MAAM,GAAG,IAAI;;EAwCzB;EAvCY,OAAA,CAAA,SAAA,CAAA,SAAS,GAAnB,YAAA;IACE,IAAI,KAAK,GAAG,IAAI;IAChB,IAAI,GAAG,GAAG,IAAI;IACd,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM;IAC1B,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG;IACpB,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE;IAC/C,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9C,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5C,IAAI,IAAI,CAAC,MAAM,EAAE;MACf;MACA,UAAU,CAAC,WAAW,CAAC;MACvB,UAAU,CAAC,SAAS,CAAC;IACtB;IACD,IAAI,GAAG,KAAK,GAAG,EAAE;MACf;MACA,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;QACpB,CAAC,EAAE,WAAW,CAAC,CAAC;QAChB,CAAC,EAAE;OACJ,CAAC;MACF,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC;QAClB,CAAC,EAAE,SAAS,CAAC,CAAC;QACd,CAAC,EAAE;OACJ,CAAC;KACH,MAAM;MACL;MACA,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;QACpB,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,WAAW,CAAC;OAChB,CAAC;MACF,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC;QAClB,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,SAAS,CAAC;OACd,CAAC;IACH;IACD,OAAO;MACL,KAAK,EAAA,KAAA;MACL,GAAG,EAAA;KACJ;EACH,CAAC;EACH,OAAA,OAAC;AAAD,CAAC,CA1CqB,QAAQ,CAAA;AA4C9B,eAAe,OAAO","sourcesContent":["import { clamp, head, last } from '@antv/util';\nimport { Region } from '../../../interface';\nimport RectMask from './rect';\n\nfunction clampPoint(point) {\n  point.x = clamp(point.x, 0, 1);\n  point.y = clamp(point.y, 0, 1);\n}\n\n/**\n * @ignore\n */\nclass DimRect extends RectMask {\n  protected dim = 'x';\n  protected inPlot = true;\n  protected getRegion(): Region {\n    let start = null;\n    let end = null;\n    const points = this.points;\n    const dim = this.dim;\n    const coord = this.context.view.getCoordinate();\n    const normalStart = coord.invert(head(points));\n    const normalEnd = coord.invert(last(points));\n    if (this.inPlot) {\n      // 约束到 0 - 1 范围内\n      clampPoint(normalStart);\n      clampPoint(normalEnd);\n    }\n    if (dim === 'x') {\n      // x 轴方向扩展, y 轴方向占满全部\n      start = coord.convert({\n        x: normalStart.x,\n        y: 0,\n      });\n      end = coord.convert({\n        x: normalEnd.x,\n        y: 1,\n      });\n    } else {\n      // y 轴方向扩展, x 轴方向占满全部\n      start = coord.convert({\n        x: 0,\n        y: normalStart.y,\n      });\n      end = coord.convert({\n        x: 1,\n        y: normalEnd.y,\n      });\n    }\n    return {\n      start,\n      end,\n    };\n  }\n}\n\nexport default DimRect;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}