{"ast":null,"code":"import { each, isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\nimport { splitPoints } from '../util/split-points';\nimport { getLineMarker } from './util';\nfunction getShapeAttrs(cfg, smooth, constraint) {\n  var isStack = cfg.isStack,\n    connectNulls = cfg.connectNulls,\n    isInCircle = cfg.isInCircle,\n    showSinglePoint = cfg.showSinglePoint;\n  var shapeAttrs = getStyle(cfg, true, false, 'lineWidth');\n  var points = getPathPoints(cfg.points, connectNulls, showSinglePoint); // 根据 connectNulls 值处理 points\n  var path = [];\n  for (var i = 0, len = points.length; i < len; i++) {\n    var eachLinePoints = points[i];\n    path = path.concat(getPath(eachLinePoints, isInCircle, isStack, smooth, constraint, shapeAttrs));\n  }\n  shapeAttrs.path = path;\n  return shapeAttrs;\n}\n// 单条 path\nfunction getSinglePath(points, isInCircle, smooth, constraint, style) {\n  if (points.length === 1) {\n    // 只有一个点时\n    return [['M', points[0].x, points[0].y - style.lineWidth / 2], ['L', points[0].x, points[0].y], ['L', points[0].x, points[0].y + style.lineWidth / 2]];\n  }\n  var path;\n  if (!smooth) {\n    path = getLinePath(points, false);\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  } else {\n    // 直角坐标系下绘制曲线时限制最大值、最小值\n    if (isInCircle && points.length) {\n      points.push({\n        x: points[0].x,\n        y: points[0].y\n      });\n    }\n    path = getSplinePath(points, false, constraint);\n  }\n  return path;\n}\nfunction getRangePath(points, isInCircle, isStack, smooth, constraint, style) {\n  var topPoints = [];\n  var bottomPoints = [];\n  each(points, function (point) {\n    var result = splitPoints(point);\n    topPoints.push(result[1]); // 上边\n    bottomPoints.push(result[0]); // 底边\n  });\n\n  var topPath = getSinglePath(topPoints, isInCircle, smooth, constraint, style);\n  var bottomPath = getSinglePath(bottomPoints, isInCircle, smooth, constraint, style);\n  if (isStack) {\n    return topPath;\n  }\n  return topPath.concat(bottomPath);\n}\n/**\n * 获取折线图 path\n */\nexport function getPath(points, isInCircle, isStack, smooth, constraint, style) {\n  if (points.length) {\n    var first = points[0];\n    return isArray(first.y) ? getRangePath(points, isInCircle, isStack, smooth, constraint, style) : getSinglePath(points, isInCircle, smooth, constraint, style);\n  }\n  return [];\n}\nvar LineShapeFactory = registerShapeFactory('line', {\n  defaultShapeType: 'line'\n});\n// 这里因为代码公用，所以直接全部注册\n// 'line' 默认折线；'dot' 点线 ···；'dash' 断线 - - -\neach(['line', 'dot', 'dash', 'smooth'], function (shapeType) {\n  registerShape('line', shapeType, {\n    draw: function (cfg, container) {\n      var smooth = shapeType === 'smooth';\n      var constraint;\n      if (smooth) {\n        var _a = this.coordinate,\n          start = _a.start,\n          end = _a.end;\n        constraint = [[start.x, end.y], [end.x, start.y]];\n      }\n      var attrs = getShapeAttrs(cfg, smooth, constraint);\n      var shape = container.addShape({\n        type: 'path',\n        attrs: attrs,\n        name: 'line',\n        capture: !smooth\n      });\n      return shape;\n    },\n    getMarker: function (markerCfg) {\n      return getLineMarker(markerCfg, shapeType);\n    }\n  });\n});\nexport default LineShapeFactory;","map":{"version":3,"sources":["../../../../src/geometry/shape/line/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, isArray } from '@antv/util';\nimport { IGroup, ShapeAttrs } from '../../../dependents';\nimport { Point, Position, RangePoint, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\nimport { splitPoints } from '../util/split-points';\nimport { getLineMarker } from './util';\n\nfunction getShapeAttrs(cfg: ShapeInfo, smooth?: boolean, constraint?: Position[]) {\n  const { isStack, connectNulls, isInCircle, showSinglePoint } = cfg;\n  const shapeAttrs = getStyle(cfg, true, false, 'lineWidth');\n\n  const points = getPathPoints(cfg.points, connectNulls, showSinglePoint); // 根据 connectNulls 值处理 points\n  let path = [];\n  for (let i = 0, len = points.length; i < len; i++) {\n    const eachLinePoints = points[i];\n    path = path.concat(getPath(eachLinePoints, isInCircle, isStack, smooth, constraint, shapeAttrs));\n  }\n  shapeAttrs.path = path;\n\n  return shapeAttrs;\n}\n\n// 单条 path\nfunction getSinglePath(\n  points: Point[],\n  isInCircle: boolean,\n  smooth?: boolean,\n  constraint?: Position[],\n  style?: ShapeAttrs\n) {\n  if (points.length === 1) {\n    // 只有一个点时\n    return [\n      ['M', points[0].x, points[0].y - style.lineWidth / 2],\n      ['L', points[0].x, points[0].y],\n      ['L', points[0].x, points[0].y + style.lineWidth / 2],\n    ];\n  }\n\n  let path;\n  if (!smooth) {\n    path = getLinePath(points, false);\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  } else {\n    // 直角坐标系下绘制曲线时限制最大值、最小值\n    if (isInCircle && points.length) {\n      points.push({ x: points[0].x, y: points[0].y });\n    }\n    path = getSplinePath(points, false, constraint);\n  }\n\n  return path;\n}\n\nfunction getRangePath(\n  points: RangePoint[],\n  isInCircle: boolean,\n  isStack?: boolean,\n  smooth?: boolean,\n  constraint?: Position[],\n  style?: ShapeAttrs\n) {\n  const topPoints = [];\n  const bottomPoints = [];\n  each(points, (point: RangePoint) => {\n    const result = splitPoints(point);\n    topPoints.push(result[1]); // 上边\n    bottomPoints.push(result[0]); // 底边\n  });\n\n  const topPath = getSinglePath(topPoints, isInCircle, smooth, constraint, style);\n  const bottomPath = getSinglePath(bottomPoints, isInCircle, smooth, constraint, style);\n  if (isStack) {\n    return topPath;\n  }\n  return topPath.concat(bottomPath);\n}\n\n/**\n * 获取折线图 path\n */\nexport function getPath(\n  points: Point[] | RangePoint[],\n  isInCircle: boolean,\n  isStack?: boolean,\n  smooth?: boolean,\n  constraint?: Position[],\n  style?: ShapeAttrs\n) {\n  if (points.length) {\n    const first = points[0];\n\n    return isArray(first.y)\n      ? getRangePath(points as RangePoint[], isInCircle, isStack, smooth, constraint, style)\n      : getSinglePath(points as Point[], isInCircle, smooth, constraint, style);\n  }\n  return [];\n}\n\nconst LineShapeFactory = registerShapeFactory('line', {\n  defaultShapeType: 'line',\n});\n\n// 这里因为代码公用，所以直接全部注册\n// 'line' 默认折线；'dot' 点线 ···；'dash' 断线 - - -\neach(['line', 'dot', 'dash', 'smooth'], (shapeType) => {\n  registerShape('line', shapeType, {\n    draw(cfg: ShapeInfo, container: IGroup) {\n      const smooth = shapeType === 'smooth';\n      let constraint;\n      if (smooth) {\n        const { start, end } = this.coordinate;\n        constraint = [\n          [start.x, end.y],\n          [end.x, start.y],\n        ];\n      }\n\n      const attrs = getShapeAttrs(cfg, smooth, constraint);\n      const shape = container.addShape({\n        type: 'path',\n        attrs,\n        name: 'line',\n        capture: !smooth,\n      });\n\n      return shape;\n    },\n    getMarker(markerCfg: ShapeMarkerCfg) {\n      return getLineMarker(markerCfg, shapeType);\n    },\n  });\n});\n\nexport default LineShapeFactory;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}