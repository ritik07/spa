{"ast":null,"code":"import mix from './mix';\nimport isFunction from './is-function';\nvar extend = function (subclass, superclass, overrides, staticOverrides) {\n  // 如果只提供父类构造函数，则自动生成子类构造函数\n  if (!isFunction(superclass)) {\n    overrides = superclass;\n    superclass = subclass;\n    subclass = function () {};\n  }\n  var create = Object.create ? function (proto, c) {\n    return Object.create(proto, {\n      constructor: {\n        value: c\n      }\n    });\n  } : function (proto, c) {\n    function Tmp() {}\n    Tmp.prototype = proto;\n    var o = new Tmp();\n    o.constructor = c;\n    return o;\n  };\n  var superObj = create(superclass.prototype, subclass); // new superclass(),//实例化父类作为子类的prototype\n  subclass.prototype = mix(superObj, subclass.prototype); // 指定子类的prototype\n  subclass.superclass = create(superclass.prototype, superclass);\n  mix(superObj, overrides);\n  mix(subclass, staticOverrides);\n  return subclass;\n};\nexport default extend;","map":{"version":3,"sources":["../src/extend.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,OAAO;AACvB,OAAO,UAAU,MAAM,eAAe;AAEtC,IAAM,MAAM,GAAG,UAAS,QAAQ,EAAE,UAAU,EAAE,SAAU,EAAE,eAAgB,EAAA;EACxE;EACA,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;IAC3B,SAAS,GAAG,UAAU;IACtB,UAAU,GAAG,QAAQ;IACrB,QAAQ,GAAG,YAAA,CAAY,CAAC;EACzB;EAED,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,GAC1B,UAAS,KAAK,EAAE,CAAC,EAAA;IACf,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;MAC1B,WAAW,EAAE;QACX,KAAK,EAAE;MACR;KACF,CAAC;EACJ,CAAC,GACD,UAAS,KAAK,EAAE,CAAC,EAAA;IACf,SAAS,GAAG,GAAA,CAAI;IAChB,GAAG,CAAC,SAAS,GAAG,KAAK;IACrB,IAAM,CAAC,GAAG,IAAI,GAAG,EAAE;IACnB,CAAC,CAAC,WAAW,GAAG,CAAC;IACjB,OAAO,CAAC;EACV,CAAC;EAEH,IAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;EACzD,QAAQ,CAAC,SAAS,GAAG,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EACxD,QAAQ,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC;EAC9D,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC;EACxB,GAAG,CAAC,QAAQ,EAAE,eAAe,CAAC;EAC9B,OAAO,QAAQ;AACjB,CAAC;AAED,eAAe,MAAM","sourceRoot":"","sourcesContent":["import mix from './mix';\nimport isFunction from './is-function';\nvar extend = function (subclass, superclass, overrides, staticOverrides) {\n    // 如果只提供父类构造函数，则自动生成子类构造函数\n    if (!isFunction(superclass)) {\n        overrides = superclass;\n        superclass = subclass;\n        subclass = function () { };\n    }\n    var create = Object.create ?\n        function (proto, c) {\n            return Object.create(proto, {\n                constructor: {\n                    value: c\n                }\n            });\n        } :\n        function (proto, c) {\n            function Tmp() { }\n            Tmp.prototype = proto;\n            var o = new Tmp();\n            o.constructor = c;\n            return o;\n        };\n    var superObj = create(superclass.prototype, subclass); // new superclass(),//实例化父类作为子类的prototype\n    subclass.prototype = mix(superObj, subclass.prototype); // 指定子类的prototype\n    subclass.superclass = create(superclass.prototype, superclass);\n    mix(superObj, overrides);\n    mix(subclass, staticOverrides);\n    return subclass;\n};\nexport default extend;\n//# sourceMappingURL=extend.js.map"]},"metadata":{},"sourceType":"module"}