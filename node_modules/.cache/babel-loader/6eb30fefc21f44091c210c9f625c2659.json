{"ast":null,"code":"import { __assign, __extends, __values } from \"tslib\";\nimport { each, head, isEqual, last, get, flatten, isArray, uniq, isNil } from '@antv/util';\nimport { findItemsFromViewRecurisive } from '../../util/tooltip';\nimport { getAngle, getSectorPath } from '../../util/graphics';\nimport Action from './base';\nvar DEFAULT_REGION_PATH_STYLE = {\n  fill: '#CCD6EC',\n  opacity: 0.3\n};\nexport function getItemsOfView(view, point, tooltipCfg) {\n  var e_1, _a, e_2, _b, e_3, _c;\n  var items = findItemsFromViewRecurisive(view, point, tooltipCfg);\n  if (items.length) {\n    // 三层\n    items = flatten(items);\n    try {\n      for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n        var itemArr = items_1_1.value;\n        try {\n          for (var itemArr_1 = (e_2 = void 0, __values(itemArr)), itemArr_1_1 = itemArr_1.next(); !itemArr_1_1.done; itemArr_1_1 = itemArr_1.next()) {\n            var item = itemArr_1_1.value;\n            var _d = item.mappingData,\n              x = _d.x,\n              y = _d.y;\n            item.x = isArray(x) ? x[x.length - 1] : x;\n            item.y = isArray(y) ? y[y.length - 1] : y;\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (itemArr_1_1 && !itemArr_1_1.done && (_b = itemArr_1.return)) _b.call(itemArr_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    var shared = tooltipCfg.shared;\n    // shared: false 代表只显示当前拾取到的 shape 的数据，但是一个 view 会有多个 Geometry，所以有可能会拾取到多个 shape\n    if (shared === false && items.length > 1) {\n      var snapItem = items[0];\n      var min = Math.abs(point.y - snapItem[0].y);\n      try {\n        for (var items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n          var aItem = items_2_1.value;\n          var yDistance = Math.abs(point.y - aItem[0].y);\n          if (yDistance <= min) {\n            snapItem = aItem;\n            min = yDistance;\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (items_2_1 && !items_2_1.done && (_c = items_2.return)) _c.call(items_2);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n      items = [snapItem];\n    }\n    return uniq(flatten(items));\n  }\n  return [];\n}\n/**\n * 背景框的 Action. 只作用于 interval 和 schema geometry\n * @ignore\n */\nvar ActiveRegion = /** @class */function (_super) {\n  __extends(ActiveRegion, _super);\n  function ActiveRegion() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 显示\n   * @param {ShapeAttrs} style region-path 的样式\n   * @param {number} appendRatio 适用于笛卡尔坐标系. 对于 x 轴非 linear 类型: 默认：0.25, x 轴 linear 类型: 默认 0\n   * @param {number} appendWidth  适用于笛卡尔坐标系. 像素级别，优先级 > appendRatio\n   */\n  ActiveRegion.prototype.show = function (args) {\n    var view = this.context.view;\n    var ev = this.context.event;\n    var tooltipCfg = view.getController('tooltip').getTooltipCfg();\n    var tooltipItems = getItemsOfView(view, {\n      x: ev.x,\n      y: ev.y\n    }, tooltipCfg);\n    if (isEqual(tooltipItems, this.items)) {\n      // 如果拾取数据同上次相同，则不重复绘制\n      return;\n    }\n    this.items = tooltipItems;\n    if (tooltipItems.length) {\n      var xField_1 = view.getXScale().field;\n      var xValue_1 = tooltipItems[0].data[xField_1];\n      // 根据 x 对应的值查找 elements\n      var elements_1 = [];\n      var geometries = view.geometries;\n      each(geometries, function (geometry) {\n        if (geometry.type === 'interval' || geometry.type === 'schema') {\n          var result = geometry.getElementsBy(function (ele) {\n            var eleData = ele.getData();\n            return eleData[xField_1] === xValue_1;\n          });\n          elements_1 = elements_1.concat(result);\n        }\n      });\n      // 根据 bbox 计算背景框的面积区域\n      if (elements_1.length) {\n        var coordinate_1 = view.getCoordinate();\n        var firstBBox_1 = elements_1[0].shape.getCanvasBBox();\n        var lastBBox_1 = elements_1[0].shape.getCanvasBBox();\n        var groupBBox_1 = firstBBox_1;\n        each(elements_1, function (ele) {\n          var bbox = ele.shape.getCanvasBBox();\n          if (coordinate_1.isTransposed) {\n            if (bbox.minY < firstBBox_1.minY) {\n              firstBBox_1 = bbox;\n            }\n            if (bbox.maxY > lastBBox_1.maxY) {\n              lastBBox_1 = bbox;\n            }\n          } else {\n            if (bbox.minX < firstBBox_1.minX) {\n              firstBBox_1 = bbox;\n            }\n            if (bbox.maxX > lastBBox_1.maxX) {\n              lastBBox_1 = bbox;\n            }\n          }\n          groupBBox_1.x = Math.min(bbox.minX, groupBBox_1.minX);\n          groupBBox_1.y = Math.min(bbox.minY, groupBBox_1.minY);\n          groupBBox_1.width = Math.max(bbox.maxX, groupBBox_1.maxX) - groupBBox_1.x;\n          groupBBox_1.height = Math.max(bbox.maxY, groupBBox_1.maxY) - groupBBox_1.y;\n        });\n        var backgroundGroup = view.backgroundGroup,\n          coordinateBBox = view.coordinateBBox;\n        var path = void 0;\n        if (coordinate_1.isRect) {\n          var xScale = view.getXScale();\n          var _a = args || {},\n            appendRatio = _a.appendRatio,\n            appendWidth = _a.appendWidth;\n          if (isNil(appendWidth)) {\n            appendRatio = isNil(appendRatio) ? xScale.isLinear ? 0 : 0.25 : appendRatio; // 如果 x 轴是数值类型，如直方图，默认不需要加额外的宽度\n            appendWidth = coordinate_1.isTransposed ? appendRatio * lastBBox_1.height : appendRatio * firstBBox_1.width;\n          }\n          var minX = void 0;\n          var minY = void 0;\n          var width = void 0;\n          var height = void 0;\n          if (coordinate_1.isTransposed) {\n            minX = coordinateBBox.minX;\n            minY = Math.min(lastBBox_1.minY, firstBBox_1.minY) - appendWidth;\n            width = coordinateBBox.width;\n            height = groupBBox_1.height + appendWidth * 2;\n          } else {\n            minX = Math.min(firstBBox_1.minX, lastBBox_1.minX) - appendWidth;\n            // 直角坐标系 非转置：最小值直接取 坐标系 minY\n            minY = coordinateBBox.minY;\n            width = groupBBox_1.width + appendWidth * 2;\n            height = coordinateBBox.height;\n          }\n          path = [['M', minX, minY], ['L', minX + width, minY], ['L', minX + width, minY + height], ['L', minX, minY + height], ['Z']];\n        } else {\n          var firstElement = head(elements_1);\n          var lastElement = last(elements_1);\n          var startAngle = getAngle(firstElement.getModel(), coordinate_1).startAngle;\n          var endAngle = getAngle(lastElement.getModel(), coordinate_1).endAngle;\n          var center = coordinate_1.getCenter();\n          var radius = coordinate_1.getRadius();\n          var innterRadius = coordinate_1.innerRadius * radius;\n          path = getSectorPath(center.x, center.y, radius, startAngle, endAngle, innterRadius);\n        }\n        if (this.regionPath) {\n          this.regionPath.attr('path', path);\n          this.regionPath.show();\n        } else {\n          var style = get(args, 'style', DEFAULT_REGION_PATH_STYLE);\n          this.regionPath = backgroundGroup.addShape({\n            type: 'path',\n            name: 'active-region',\n            capture: false,\n            attrs: __assign(__assign({}, style), {\n              path: path\n            })\n          });\n        }\n      }\n    }\n  };\n  /**\n   * 隐藏\n   */\n  ActiveRegion.prototype.hide = function () {\n    if (this.regionPath) {\n      this.regionPath.hide();\n    }\n    // this.regionPath = null;\n    this.items = null;\n  };\n  /**\n   * 销毁\n   */\n  ActiveRegion.prototype.destroy = function () {\n    this.hide();\n    if (this.regionPath) {\n      this.regionPath.remove(true);\n    }\n    _super.prototype.destroy.call(this);\n  };\n  return ActiveRegion;\n}(Action);\nexport default ActiveRegion;","map":{"version":3,"sources":["../../../src/interaction/action/active-region.ts"],"names":[],"mappings":";AAAA,SAAS,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,QAAQ,YAAY;AAE1F,SAAS,2BAA2B,QAAQ,oBAAoB;AAIhE,SAAS,QAAQ,EAAE,aAAa,QAAQ,qBAAqB;AAC7D,OAAO,MAAM,MAAM,QAAQ;AAE3B,IAAM,yBAAyB,GAAG;EAChC,IAAI,EAAE,SAAS;EACf,OAAO,EAAE;CACV;AAED,OAAM,SAAU,cAAc,CAAC,IAAU,EAAE,KAAY,EAAE,UAAsB,EAAA;;EAC7E,IAAI,KAAK,GAAG,2BAA2B,CAAC,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC;EAChE,IAAI,KAAK,CAAC,MAAM,EAAE;IAChB;IACA,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;;MACtB,KAAsB,IAAA,OAAA,GAAA,QAAA,CAAA,KAAK,CAAA,EAAA,SAAA,GAAA,OAAA,CAAA,IAAA,EAAA,EAAA,CAAA,SAAA,CAAA,IAAA,EAAA,SAAA,GAAA,OAAA,CAAA,IAAA,EAAA,EAAE;QAAxB,IAAM,OAAO,GAAA,SAAA,CAAA,KAAA;;UAChB,KAAmB,IAAA,SAAA,IAAA,GAAA,GAAA,KAAA,CAAA,EAAA,QAAA,CAAA,OAAO,CAAA,CAAA,EAAA,WAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,CAAA,WAAA,CAAA,IAAA,EAAA,WAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAE;YAAvB,IAAM,IAAI,GAAA,WAAA,CAAA,KAAA;YACP,IAAA,EAAA,GAAW,IAAI,CAAC,WAAW;cAAzB,CAAC,GAAA,EAAA,CAAA,CAAA;cAAE,CAAC,GAAA,EAAA,CAAA,CAAqB;YACjC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;YACzC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;UAC1C;;;;;;;;;;;;MACF;;;;;;;;;;;;IAEO,IAAA,MAAM,GAAK,UAAU,CAAA,MAAf;IACd;IACA,IAAI,MAAM,KAAK,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;MACxC,IAAI,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC;MACvB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;QAC3C,KAAoB,IAAA,OAAA,GAAA,QAAA,CAAA,KAAK,CAAA,EAAA,SAAA,GAAA,OAAA,CAAA,IAAA,EAAA,EAAA,CAAA,SAAA,CAAA,IAAA,EAAA,SAAA,GAAA,OAAA,CAAA,IAAA,EAAA,EAAE;UAAtB,IAAM,KAAK,GAAA,SAAA,CAAA,KAAA;UACd,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAChD,IAAI,SAAS,IAAI,GAAG,EAAE;YACpB,QAAQ,GAAG,KAAK;YAChB,GAAG,GAAG,SAAS;UAChB;QACF;;;;;;;;;;;;MACD,KAAK,GAAG,CAAC,QAAQ,CAAC;IACnB;IAED,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;EAC5B;EAED,OAAO,EAAE;AACX;AAEA;;;AAGG;AACH,IAAA,YAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA2B,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;EAA3B,SAAA,YAAA,GAAA;;EAiKA;EA9JE;;;;;AAKG;EACI,YAAA,CAAA,SAAA,CAAA,IAAI,GAAX,UAAY,IAAwE,EAAA;IAClF,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI;IAC9B,IAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK;IAE7B,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,aAAa,EAAE;IAChE,IAAM,YAAY,GAAG,cAAc,CACjC,IAAI,EACJ;MACE,CAAC,EAAE,EAAE,CAAC,CAAC;MACP,CAAC,EAAE,EAAE,CAAC;KACP,EACD,UAAU,CACX;IAED,IAAI,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;MACrC;MACA;IACD;IACD,IAAI,CAAC,KAAK,GAAG,YAAY;IACzB,IAAI,YAAY,CAAC,MAAM,EAAE;MACvB,IAAM,QAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK;MACrC,IAAM,QAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAM,CAAC;MAC3C;MACA,IAAI,UAAQ,GAAc,EAAE;MAC5B,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU;MAClC,IAAI,CAAC,UAAU,EAAE,UAAC,QAAQ,EAAA;QACxB,IAAI,QAAQ,CAAC,IAAI,KAAK,UAAU,IAAI,QAAQ,CAAC,IAAI,KAAK,QAAQ,EAAE;UAC9D,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAC,GAAG,EAAA;YACxC,IAAM,OAAO,GAAG,GAAG,CAAC,OAAO,EAAE;YAC7B,OAAO,OAAO,CAAC,QAAM,CAAC,KAAK,QAAM;UACnC,CAAC,CAAC;UAEF,UAAQ,GAAG,UAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;QACnC;MACH,CAAC,CAAC;MAEF;MACA,IAAI,UAAQ,CAAC,MAAM,EAAE;QACnB,IAAM,YAAU,GAAG,IAAI,CAAC,aAAa,EAAE;QAEvC,IAAI,WAAS,GAAG,UAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,EAAE;QACjD,IAAI,UAAQ,GAAG,UAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,EAAE;QAChD,IAAM,WAAS,GAAgB,WAAS;QAExC,IAAI,CAAC,UAAQ,EAAE,UAAC,GAAY,EAAA;UAC1B,IAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,aAAa,EAAE;UACtC,IAAI,YAAU,CAAC,YAAY,EAAE;YAC3B,IAAI,IAAI,CAAC,IAAI,GAAG,WAAS,CAAC,IAAI,EAAE;cAC9B,WAAS,GAAG,IAAI;YACjB;YACD,IAAI,IAAI,CAAC,IAAI,GAAG,UAAQ,CAAC,IAAI,EAAE;cAC7B,UAAQ,GAAG,IAAI;YAChB;WACF,MAAM;YACL,IAAI,IAAI,CAAC,IAAI,GAAG,WAAS,CAAC,IAAI,EAAE;cAC9B,WAAS,GAAG,IAAI;YACjB;YACD,IAAI,IAAI,CAAC,IAAI,GAAG,UAAQ,CAAC,IAAI,EAAE;cAC7B,UAAQ,GAAG,IAAI;YAChB;UACF;UAED,WAAS,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,WAAS,CAAC,IAAI,CAAC;UACjD,WAAS,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,WAAS,CAAC,IAAI,CAAC;UACjD,WAAS,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,WAAS,CAAC,IAAI,CAAC,GAAG,WAAS,CAAC,CAAC;UACnE,WAAS,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,WAAS,CAAC,IAAI,CAAC,GAAG,WAAS,CAAC,CAAC;QACtE,CAAC,CAAC;QAEM,IAAA,eAAe,GAAqB,IAAI,CAAA,eAAzB;UAAE,cAAc,GAAK,IAAI,CAAA,cAAT;QACvC,IAAI,IAAI,GAAA,KAAA,CAAA;QACR,IAAI,YAAU,CAAC,MAAM,EAAE;UACrB,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;UAE3B,IAAA,EAAA,GAA+B,IAAI,IAAI,CAAA,CAAE;YAAvC,WAAW,GAAA,EAAA,CAAA,WAAA;YAAE,WAAW,GAAA,EAAA,CAAA,WAAe;UAC7C,IAAI,KAAK,CAAC,WAAW,CAAC,EAAE;YACtB,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC,GAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,GAAG,IAAI,GAAI,WAAW,CAAC,CAAC;YAC/E,WAAW,GAAG,YAAU,CAAC,YAAY,GAAG,WAAW,GAAG,UAAQ,CAAC,MAAM,GAAG,WAAW,GAAG,WAAS,CAAC,KAAK;UACtG;UAED,IAAI,IAAI,GAAA,KAAA,CAAQ;UAChB,IAAI,IAAI,GAAA,KAAA,CAAQ;UAChB,IAAI,KAAK,GAAA,KAAA,CAAQ;UACjB,IAAI,MAAM,GAAA,KAAA,CAAQ;UAClB,IAAI,YAAU,CAAC,YAAY,EAAE;YAC3B,IAAI,GAAG,cAAc,CAAC,IAAI;YAC1B,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAQ,CAAC,IAAI,EAAE,WAAS,CAAC,IAAI,CAAC,GAAG,WAAW;YAC5D,KAAK,GAAG,cAAc,CAAC,KAAK;YAC5B,MAAM,GAAG,WAAS,CAAC,MAAM,GAAG,WAAW,GAAG,CAAC;WAC5C,MAAM;YACL,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,WAAS,CAAC,IAAI,EAAE,UAAQ,CAAC,IAAI,CAAC,GAAG,WAAW;YAC5D;YACA,IAAI,GAAG,cAAc,CAAC,IAAI;YAC1B,KAAK,GAAG,WAAS,CAAC,KAAK,GAAG,WAAW,GAAG,CAAC;YACzC,MAAM,GAAG,cAAc,CAAC,MAAM;UAC/B;UAED,IAAI,GAAG,CACL,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,EACjB,CAAC,GAAG,EAAE,IAAI,GAAG,KAAK,EAAE,IAAI,CAAC,EACzB,CAAC,GAAG,EAAE,IAAI,GAAG,KAAK,EAAE,IAAI,GAAG,MAAM,CAAC,EAClC,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,GAAG,MAAM,CAAC,EAC1B,CAAC,GAAG,CAAC,CACN;SACF,MAAM;UACL,IAAM,YAAY,GAAG,IAAI,CAAC,UAAQ,CAAC;UACnC,IAAM,WAAW,GAAG,IAAI,CAAC,UAAQ,CAAC;UAC1B,IAAA,UAAU,GAAK,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,YAAU,CAAC,CAAA,UAAlD;UACV,IAAA,QAAQ,GAAK,QAAQ,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,YAAU,CAAC,CAAA,QAAjD;UAChB,IAAM,MAAM,GAAG,YAAU,CAAC,SAAS,EAAE;UACrC,IAAM,MAAM,GAAG,YAAU,CAAC,SAAS,EAAE;UACrC,IAAM,YAAY,GAAG,YAAU,CAAC,WAAW,GAAG,MAAM;UACpD,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,YAAY,CAAC;QACrF;QAED,IAAI,IAAI,CAAC,UAAU,EAAE;UACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC;UAClC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;SACvB,MAAM;UACL,IAAM,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,OAAO,EAAE,yBAAyB,CAAC;UAC3D,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC,QAAQ,CAAC;YACzC,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,eAAe;YACrB,OAAO,EAAE,KAAK;YACd,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,KAAK,CAAA,EAAA;cACR,IAAI,EAAA;YAAA,CAAA;WAEP,CAAC;QACH;MACF;IACF;EACH,CAAC;EACD;;AAEG;EACI,YAAA,CAAA,SAAA,CAAA,IAAI,GAAX,YAAA;IACE,IAAI,IAAI,CAAC,UAAU,EAAE;MACnB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;IACvB;IACD;IACA,IAAI,CAAC,KAAK,GAAG,IAAI;EACnB,CAAC;EACD;;AAEG;EACI,YAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IACE,IAAI,CAAC,IAAI,EAAE;IACX,IAAI,IAAI,CAAC,UAAU,EAAE;MACnB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC;IAC7B;IACD,MAAA,CAAA,SAAA,CAAM,OAAO,CAAA,IAAA,CAAA,IAAA,CAAE;EACjB,CAAC;EACH,OAAA,YAAC;AAAD,CAAC,CAjK0B,MAAM,CAAA;AAmKjC,eAAe,YAAY","sourcesContent":["import { each, head, isEqual, last, get, flatten, isArray, uniq, isNil } from '@antv/util';\nimport View from '../../chart/view';\nimport { findItemsFromViewRecurisive } from '../../util/tooltip';\nimport { IShape, Point, ShapeAttrs } from '../../dependents';\nimport Element from '../../geometry/element';\nimport { LooseObject, TooltipCfg } from '../../interface';\nimport { getAngle, getSectorPath } from '../../util/graphics';\nimport Action from './base';\n\nconst DEFAULT_REGION_PATH_STYLE = {\n  fill: '#CCD6EC',\n  opacity: 0.3,\n};\n\nexport function getItemsOfView(view: View, point: Point, tooltipCfg: TooltipCfg) {\n  let items = findItemsFromViewRecurisive(view, point, tooltipCfg);\n  if (items.length) {\n    // 三层\n    items = flatten(items);\n    for (const itemArr of items) {\n      for (const item of itemArr) {\n        const { x, y } = item.mappingData;\n        item.x = isArray(x) ? x[x.length - 1] : x;\n        item.y = isArray(y) ? y[y.length - 1] : y;\n      }\n    }\n\n    const { shared } = tooltipCfg;\n    // shared: false 代表只显示当前拾取到的 shape 的数据，但是一个 view 会有多个 Geometry，所以有可能会拾取到多个 shape\n    if (shared === false && items.length > 1) {\n      let snapItem = items[0];\n      let min = Math.abs(point.y - snapItem[0].y);\n      for (const aItem of items) {\n        const yDistance = Math.abs(point.y - aItem[0].y);\n        if (yDistance <= min) {\n          snapItem = aItem;\n          min = yDistance;\n        }\n      }\n      items = [snapItem];\n    }\n\n    return uniq(flatten(items));\n  }\n\n  return [];\n}\n\n/**\n * 背景框的 Action. 只作用于 interval 和 schema geometry\n * @ignore\n */\nclass ActiveRegion extends Action {\n  private items: any[];\n  private regionPath: IShape;\n  /**\n   * 显示\n   * @param {ShapeAttrs} style region-path 的样式\n   * @param {number} appendRatio 适用于笛卡尔坐标系. 对于 x 轴非 linear 类型: 默认：0.25, x 轴 linear 类型: 默认 0\n   * @param {number} appendWidth  适用于笛卡尔坐标系. 像素级别，优先级 > appendRatio\n   */\n  public show(args?: { style: ShapeAttrs; appendRatio?: number; appendWidth?: number }) {\n    const view = this.context.view;\n    const ev = this.context.event;\n\n    const tooltipCfg = view.getController('tooltip').getTooltipCfg();\n    const tooltipItems = getItemsOfView(\n      view,\n      {\n        x: ev.x,\n        y: ev.y,\n      },\n      tooltipCfg\n    );\n\n    if (isEqual(tooltipItems, this.items)) {\n      // 如果拾取数据同上次相同，则不重复绘制\n      return;\n    }\n    this.items = tooltipItems;\n    if (tooltipItems.length) {\n      const xField = view.getXScale().field;\n      const xValue = tooltipItems[0].data[xField];\n      // 根据 x 对应的值查找 elements\n      let elements: Element[] = [];\n      const geometries = view.geometries;\n      each(geometries, (geometry) => {\n        if (geometry.type === 'interval' || geometry.type === 'schema') {\n          const result = geometry.getElementsBy((ele) => {\n            const eleData = ele.getData();\n            return eleData[xField] === xValue;\n          });\n\n          elements = elements.concat(result);\n        }\n      });\n\n      // 根据 bbox 计算背景框的面积区域\n      if (elements.length) {\n        const coordinate = view.getCoordinate();\n\n        let firstBBox = elements[0].shape.getCanvasBBox();\n        let lastBBox = elements[0].shape.getCanvasBBox();\n        const groupBBox: LooseObject = firstBBox;\n\n        each(elements, (ele: Element) => {\n          const bbox = ele.shape.getCanvasBBox();\n          if (coordinate.isTransposed) {\n            if (bbox.minY < firstBBox.minY) {\n              firstBBox = bbox;\n            }\n            if (bbox.maxY > lastBBox.maxY) {\n              lastBBox = bbox;\n            }\n          } else {\n            if (bbox.minX < firstBBox.minX) {\n              firstBBox = bbox;\n            }\n            if (bbox.maxX > lastBBox.maxX) {\n              lastBBox = bbox;\n            }\n          }\n\n          groupBBox.x = Math.min(bbox.minX, groupBBox.minX);\n          groupBBox.y = Math.min(bbox.minY, groupBBox.minY);\n          groupBBox.width = Math.max(bbox.maxX, groupBBox.maxX) - groupBBox.x;\n          groupBBox.height = Math.max(bbox.maxY, groupBBox.maxY) - groupBBox.y;\n        });\n\n        const { backgroundGroup, coordinateBBox } = view;\n        let path;\n        if (coordinate.isRect) {\n          const xScale = view.getXScale();\n\n          let { appendRatio, appendWidth } = args || {};\n          if (isNil(appendWidth)) {\n            appendRatio = isNil(appendRatio) ? (xScale.isLinear ? 0 : 0.25) : appendRatio; // 如果 x 轴是数值类型，如直方图，默认不需要加额外的宽度\n            appendWidth = coordinate.isTransposed ? appendRatio * lastBBox.height : appendRatio * firstBBox.width;\n          }\n\n          let minX: number;\n          let minY: number;\n          let width: number;\n          let height: number;\n          if (coordinate.isTransposed) {\n            minX = coordinateBBox.minX;\n            minY = Math.min(lastBBox.minY, firstBBox.minY) - appendWidth;\n            width = coordinateBBox.width;\n            height = groupBBox.height + appendWidth * 2;\n          } else {\n            minX = Math.min(firstBBox.minX, lastBBox.minX) - appendWidth;\n            // 直角坐标系 非转置：最小值直接取 坐标系 minY\n            minY = coordinateBBox.minY;\n            width = groupBBox.width + appendWidth * 2;\n            height = coordinateBBox.height;\n          }\n\n          path = [\n            ['M', minX, minY],\n            ['L', minX + width, minY],\n            ['L', minX + width, minY + height],\n            ['L', minX, minY + height],\n            ['Z'],\n          ];\n        } else {\n          const firstElement = head(elements);\n          const lastElement = last(elements);\n          const { startAngle } = getAngle(firstElement.getModel(), coordinate);\n          const { endAngle } = getAngle(lastElement.getModel(), coordinate);\n          const center = coordinate.getCenter();\n          const radius = coordinate.getRadius();\n          const innterRadius = coordinate.innerRadius * radius;\n          path = getSectorPath(center.x, center.y, radius, startAngle, endAngle, innterRadius);\n        }\n\n        if (this.regionPath) {\n          this.regionPath.attr('path', path);\n          this.regionPath.show();\n        } else {\n          const style = get(args, 'style', DEFAULT_REGION_PATH_STYLE);\n          this.regionPath = backgroundGroup.addShape({\n            type: 'path',\n            name: 'active-region',\n            capture: false,\n            attrs: {\n              ...style,\n              path,\n            },\n          });\n        }\n      }\n    }\n  }\n  /**\n   * 隐藏\n   */\n  public hide() {\n    if (this.regionPath) {\n      this.regionPath.hide();\n    }\n    // this.regionPath = null;\n    this.items = null;\n  }\n  /**\n   * 销毁\n   */\n  public destroy() {\n    this.hide();\n    if (this.regionPath) {\n      this.regionPath.remove(true);\n    }\n    super.destroy();\n  }\n}\n\nexport default ActiveRegion;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}