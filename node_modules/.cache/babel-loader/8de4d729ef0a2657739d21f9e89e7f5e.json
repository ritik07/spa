{"ast":null,"code":"import { __extends } from \"tslib\";\nimport EE from '@antv/event-emitter';\nimport { mix } from '../util/util';\nvar Base = /** @class */function (_super) {\n  __extends(Base, _super);\n  function Base(cfg) {\n    var _this = _super.call(this) || this;\n    /**\n     * 是否被销毁\n     * @type {boolean}\n     */\n    _this.destroyed = false;\n    var defaultCfg = _this.getDefaultCfg();\n    _this.cfg = mix(defaultCfg, cfg);\n    return _this;\n  }\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  Base.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  // 实现接口的方法\n  Base.prototype.get = function (name) {\n    return this.cfg[name];\n  };\n  // 实现接口的方法\n  Base.prototype.set = function (name, value) {\n    this.cfg[name] = value;\n  };\n  // 实现接口的方法\n  Base.prototype.destroy = function () {\n    this.cfg = {\n      destroyed: true\n    };\n    this.off();\n    this.destroyed = true;\n  };\n  return Base;\n}(EE);\nexport default Base;","map":{"version":3,"sources":["../../src/abstract/base.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,MAAM,qBAAqB;AAEpC,SAAS,GAAG,QAAQ,cAAc;AAElC,IAAA,IAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA4B,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;EAsB1B,SAAA,IAAA,CAAY,GAAG,EAAA;IAAf,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IAhBT;;;AAGG;IACH,KAAA,CAAA,SAAS,GAAY,KAAK;IAaxB,IAAM,UAAU,GAAG,KAAI,CAAC,aAAa,EAAE;IACvC,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC;;EACjC;EAbA;;;;AAIG;EACH,IAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACE,OAAO,CAAA,CAAE;EACX,CAAC;EAQD;EACA,IAAA,CAAA,SAAA,CAAA,GAAG,GAAH,UAAI,IAAI,EAAA;IACN,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;EACvB,CAAC;EACD;EACA,IAAA,CAAA,SAAA,CAAA,GAAG,GAAH,UAAI,IAAI,EAAE,KAAK,EAAA;IACb,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK;EACxB,CAAC;EAED;EACA,IAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,IAAI,CAAC,GAAG,GAAG;MACT,SAAS,EAAE;KACZ;IACD,IAAI,CAAC,GAAG,EAAE;IACV,IAAI,CAAC,SAAS,GAAG,IAAI;EACvB,CAAC;EACH,OAAA,IAAC;AAAD,CAAC,CA7C2B,EAAE,CAAA;AA+C9B,eAAe,IAAI","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport EE from '@antv/event-emitter';\nimport { mix } from '../util/util';\nvar Base = /** @class */ (function (_super) {\n    __extends(Base, _super);\n    function Base(cfg) {\n        var _this = _super.call(this) || this;\n        /**\n         * 是否被销毁\n         * @type {boolean}\n         */\n        _this.destroyed = false;\n        var defaultCfg = _this.getDefaultCfg();\n        _this.cfg = mix(defaultCfg, cfg);\n        return _this;\n    }\n    /**\n     * @protected\n     * 默认的配置项\n     * @returns {object} 默认的配置项\n     */\n    Base.prototype.getDefaultCfg = function () {\n        return {};\n    };\n    // 实现接口的方法\n    Base.prototype.get = function (name) {\n        return this.cfg[name];\n    };\n    // 实现接口的方法\n    Base.prototype.set = function (name, value) {\n        this.cfg[name] = value;\n    };\n    // 实现接口的方法\n    Base.prototype.destroy = function () {\n        this.cfg = {\n            destroyed: true,\n        };\n        this.off();\n        this.destroyed = true;\n    };\n    return Base;\n}(EE));\nexport default Base;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}