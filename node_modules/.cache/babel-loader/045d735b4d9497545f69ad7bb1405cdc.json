{"ast":null,"code":"import { isNil, each, isString } from './util';\nimport { getOffScreenContext } from './offscreen';\n/**\n * 获取文本的高度\n * @param text 文本\n * @param fontSize 字体大小\n * @param lineHeight 行高，可以为空\n */\nexport function getTextHeight(text, fontSize, lineHeight) {\n  var lineCount = 1;\n  if (isString(text)) {\n    lineCount = text.split('\\n').length;\n  }\n  if (lineCount > 1) {\n    var spaceingY = getLineSpaceing(fontSize, lineHeight);\n    return fontSize * lineCount + spaceingY * (lineCount - 1);\n  }\n  return fontSize;\n}\n/**\n * 获取行间距如果文本多行，需要获取文本间距\n * @param fontSize 字体大小\n * @param lineHeight 行高\n */\nexport function getLineSpaceing(fontSize, lineHeight) {\n  return lineHeight ? lineHeight - fontSize : fontSize * 0.14;\n}\n/**\n * 字体宽度\n * @param text 文本\n * @param font 字体\n */\nexport function getTextWidth(text, font) {\n  var context = getOffScreenContext(); // 获取离屏的 ctx 进行计算\n  var width = 0;\n  // null 或者 undefined 时，宽度为 0\n  if (isNil(text) || text === '') {\n    return width;\n  }\n  context.save();\n  context.font = font;\n  if (isString(text) && text.includes('\\n')) {\n    var textArr = text.split('\\n');\n    each(textArr, function (subText) {\n      var measureWidth = context.measureText(subText).width;\n      if (width < measureWidth) {\n        width = measureWidth;\n      }\n    });\n  } else {\n    width = context.measureText(text).width;\n  }\n  context.restore();\n  return width;\n}\nexport function assembleFont(attrs) {\n  var fontSize = attrs.fontSize,\n    fontFamily = attrs.fontFamily,\n    fontWeight = attrs.fontWeight,\n    fontStyle = attrs.fontStyle,\n    fontVariant = attrs.fontVariant;\n  return [fontStyle, fontVariant, fontWeight, fontSize + \"px\", fontFamily].join(' ').trim();\n}","map":{"version":3,"sources":["../../src/util/text.ts"],"names":[],"mappings":"AAAA,SAAS,KAAK,EAAE,IAAI,EAAE,QAAQ,QAAQ,QAAQ;AAC9C,SAAS,mBAAmB,QAAQ,aAAa;AAGjD;;;;;AAKG;AACH,OAAM,SAAU,aAAa,CAAC,IAAY,EAAE,QAAgB,EAAE,UAAmB,EAAA;EAC/E,IAAI,SAAS,GAAG,CAAC;EACjB,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;IAClB,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM;EACpC;EACD,IAAI,SAAS,GAAG,CAAC,EAAE;IACjB,IAAM,SAAS,GAAG,eAAe,CAAC,QAAQ,EAAE,UAAU,CAAC;IACvD,OAAO,QAAQ,GAAG,SAAS,GAAG,SAAS,IAAI,SAAS,GAAG,CAAC,CAAC;EAC1D;EACD,OAAO,QAAQ;AACjB;AAEA;;;;AAIG;AACH,OAAM,SAAU,eAAe,CAAC,QAAgB,EAAE,UAAmB,EAAA;EACnE,OAAO,UAAU,GAAG,UAAU,GAAG,QAAQ,GAAG,QAAQ,GAAG,IAAI;AAC7D;AAEA;;;;AAIG;AACH,OAAM,SAAU,YAAY,CAAC,IAAY,EAAE,IAAY,EAAA;EACrD,IAAM,OAAO,GAAG,mBAAmB,EAAE,CAAC,CAAC;EACvC,IAAI,KAAK,GAAG,CAAC;EACb;EACA,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,EAAE,EAAE;IAC9B,OAAO,KAAK;EACb;EACD,OAAO,CAAC,IAAI,EAAE;EACd,OAAO,CAAC,IAAI,GAAG,IAAI;EACnB,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;IACzC,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAChC,IAAI,CAAC,OAAO,EAAE,UAAC,OAAO,EAAA;MACpB,IAAM,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,KAAK;MACvD,IAAI,KAAK,GAAG,YAAY,EAAE;QACxB,KAAK,GAAG,YAAY;MACrB;IACH,CAAC,CAAC;GACH,MAAM;IACL,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK;EACxC;EACD,OAAO,CAAC,OAAO,EAAE;EACjB,OAAO,KAAK;AACd;AAEA,OAAM,SAAU,YAAY,CAAC,KAAiB,EAAA;EACpC,IAAA,QAAQ,GAAqD,KAAK,CAAA,QAA1D;IAAE,UAAU,GAAyC,KAAK,CAAA,UAA9C;IAAE,UAAU,GAA6B,KAAK,CAAA,UAAlC;IAAE,SAAS,GAAkB,KAAK,CAAA,SAAvB;IAAE,WAAW,GAAK,KAAK,CAAA,WAAV;EAChE,OAAO,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,EAAK,QAAQ,GAAA,IAAI,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE;AAC3F","sourceRoot":"","sourcesContent":["import { isNil, each, isString } from './util';\nimport { getOffScreenContext } from './offscreen';\n/**\n * 获取文本的高度\n * @param text 文本\n * @param fontSize 字体大小\n * @param lineHeight 行高，可以为空\n */\nexport function getTextHeight(text, fontSize, lineHeight) {\n    var lineCount = 1;\n    if (isString(text)) {\n        lineCount = text.split('\\n').length;\n    }\n    if (lineCount > 1) {\n        var spaceingY = getLineSpaceing(fontSize, lineHeight);\n        return fontSize * lineCount + spaceingY * (lineCount - 1);\n    }\n    return fontSize;\n}\n/**\n * 获取行间距如果文本多行，需要获取文本间距\n * @param fontSize 字体大小\n * @param lineHeight 行高\n */\nexport function getLineSpaceing(fontSize, lineHeight) {\n    return lineHeight ? lineHeight - fontSize : fontSize * 0.14;\n}\n/**\n * 字体宽度\n * @param text 文本\n * @param font 字体\n */\nexport function getTextWidth(text, font) {\n    var context = getOffScreenContext(); // 获取离屏的 ctx 进行计算\n    var width = 0;\n    // null 或者 undefined 时，宽度为 0\n    if (isNil(text) || text === '') {\n        return width;\n    }\n    context.save();\n    context.font = font;\n    if (isString(text) && text.includes('\\n')) {\n        var textArr = text.split('\\n');\n        each(textArr, function (subText) {\n            var measureWidth = context.measureText(subText).width;\n            if (width < measureWidth) {\n                width = measureWidth;\n            }\n        });\n    }\n    else {\n        width = context.measureText(text).width;\n    }\n    context.restore();\n    return width;\n}\nexport function assembleFont(attrs) {\n    var fontSize = attrs.fontSize, fontFamily = attrs.fontFamily, fontWeight = attrs.fontWeight, fontStyle = attrs.fontStyle, fontVariant = attrs.fontVariant;\n    return [fontStyle, fontVariant, fontWeight, fontSize + \"px\", fontFamily].join(' ').trim();\n}\n//# sourceMappingURL=text.js.map"]},"metadata":{},"sourceType":"module"}