{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { difference, each, isNil, keys, mix, pick } from '@antv/util';\nimport { propagationDelegate } from '../util/event';\nimport { applyMatrix2BBox, getMatrixByTranslate } from '../util/matrix';\nimport { getBBoxWithClip, updateClip } from '../util/util';\nimport Component from './component';\nvar STATUS_UPDATE = 'update_status';\nvar COPY_PROPERTIES = ['visible', 'tip', 'delegateObject']; // 更新对象时需要复制的属性\nvar COPY_PROPERTIES_EXCLUDES = ['container', 'group', 'shapesMap', 'isRegister', 'isUpdating', 'destroyed']; // 更新子组件时排除的属性\nvar GroupComponent = /** @class */function (_super) {\n  __extends(GroupComponent, _super);\n  function GroupComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  GroupComponent.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      container: null,\n      /**\n       * @private\n       * 缓存图形的 Map\n       */\n      shapesMap: {},\n      group: null,\n      capture: true,\n      /**\n       * @private 组件或者图形是否允许注册\n       * @type {false}\n       */\n      isRegister: false,\n      /**\n       * @private 是否正在更新\n       * @type {false}\n       */\n      isUpdating: false,\n      /**\n       * @private\n       * 是否初始状态，一旦 render，update 后，这个状态就变成 false, clear 后恢复\n       */\n      isInit: true\n    });\n  };\n  GroupComponent.prototype.remove = function () {\n    this.clear();\n    var group = this.get('group');\n    group.remove();\n  };\n  GroupComponent.prototype.clear = function () {\n    var group = this.get('group');\n    group.clear();\n    this.set('shapesMap', {});\n    this.clearOffScreenCache();\n    this.set('isInit', true);\n  };\n  GroupComponent.prototype.getChildComponentById = function (id) {\n    var group = this.getElementById(id);\n    var inst = group && group.get('component');\n    return inst;\n  };\n  GroupComponent.prototype.getElementById = function (id) {\n    return this.get('shapesMap')[id];\n  };\n  GroupComponent.prototype.getElementByLocalId = function (localId) {\n    var id = this.getElementId(localId);\n    return this.getElementById(id);\n  };\n  GroupComponent.prototype.getElementsByName = function (name) {\n    var rst = [];\n    each(this.get('shapesMap'), function (elem) {\n      if (elem.get('name') === name) {\n        rst.push(elem);\n      }\n    });\n    return rst;\n  };\n  GroupComponent.prototype.getContainer = function () {\n    return this.get('container');\n  };\n  GroupComponent.prototype.updateInner = function (cfg) {\n    // this.updateInner();\n    // this.set('isUpdating', false);\n    this.offScreenRender();\n    if (this.get('updateAutoRender')) {\n      this.render();\n    }\n  };\n  GroupComponent.prototype.render = function () {\n    var offScreenGroup = this.get('offScreenGroup');\n    if (!offScreenGroup) {\n      offScreenGroup = this.offScreenRender();\n    }\n    var group = this.get('group');\n    this.updateElements(offScreenGroup, group);\n    this.deleteElements();\n    this.applyOffset();\n    if (!this.get('eventInitted')) {\n      this.initEvent();\n      this.set('eventInitted', true);\n    }\n    this.set('isInit', false);\n  };\n  GroupComponent.prototype.show = function () {\n    var group = this.get('group');\n    group.show();\n    this.set('visible', true);\n  };\n  GroupComponent.prototype.hide = function () {\n    var group = this.get('group');\n    group.hide();\n    this.set('visible', false);\n  };\n  GroupComponent.prototype.setCapture = function (capture) {\n    var group = this.get('group');\n    group.set('capture', capture);\n    this.set('capture', capture);\n  };\n  GroupComponent.prototype.destroy = function () {\n    this.removeEvent();\n    this.remove();\n    _super.prototype.destroy.call(this);\n  };\n  GroupComponent.prototype.getBBox = function () {\n    return this.get('group').getCanvasBBox();\n  };\n  GroupComponent.prototype.getLayoutBBox = function () {\n    var group = this.get('group');\n    // 防止被 clear 了，offScreenBBox 不存在\n    var bbox = this.getInnerLayoutBBox();\n    var matrix = group.getTotalMatrix();\n    if (matrix) {\n      bbox = applyMatrix2BBox(matrix, bbox);\n    }\n    return bbox; // 默认返回 getBBox，不同的组件内部单独实现\n  };\n  // 复写 on, off, emit 透传到 group\n  GroupComponent.prototype.on = function (evt, callback, once) {\n    var group = this.get('group');\n    group.on(evt, callback, once);\n    return this;\n  };\n  GroupComponent.prototype.off = function (evt, callback) {\n    var group = this.get('group');\n    group && group.off(evt, callback);\n    return this;\n  };\n  GroupComponent.prototype.emit = function (eventName, eventObject) {\n    var group = this.get('group');\n    group.emit(eventName, eventObject);\n  };\n  GroupComponent.prototype.init = function () {\n    _super.prototype.init.call(this);\n    if (!this.get('group')) {\n      this.initGroup();\n    }\n    this.offScreenRender(); // 绘制离屏 group\n  };\n  // 获取组件内部布局占的包围盒\n  GroupComponent.prototype.getInnerLayoutBBox = function () {\n    return this.get('offScreenBBox') || this.get('group').getBBox();\n  };\n  // 抛出委托对象\n  GroupComponent.prototype.delegateEmit = function (eventName, eventObject) {\n    var group = this.get('group');\n    eventObject.target = group;\n    group.emit(eventName, eventObject);\n    propagationDelegate(group, eventName, eventObject);\n  };\n  // 创建离屏的 group ,不添加在 canvas 中\n  GroupComponent.prototype.createOffScreenGroup = function () {\n    var group = this.get('group');\n    var GroupClass = group.getGroupBase(); // 获取分组的构造函数\n    var newGroup = new GroupClass({\n      delegateObject: this.getDelegateObject()\n    });\n    return newGroup;\n  };\n  // 应用 offset\n  GroupComponent.prototype.applyOffset = function () {\n    var offsetX = this.get('offsetX');\n    var offsetY = this.get('offsetY');\n    this.moveElementTo(this.get('group'), {\n      x: offsetX,\n      y: offsetY\n    });\n  };\n  GroupComponent.prototype.initGroup = function () {\n    var container = this.get('container');\n    this.set('group', container.addGroup({\n      id: this.get('id'),\n      name: this.get('name'),\n      capture: this.get('capture'),\n      visible: this.get('visible'),\n      isComponent: true,\n      component: this,\n      delegateObject: this.getDelegateObject()\n    }));\n  };\n  // 离屏渲染\n  GroupComponent.prototype.offScreenRender = function () {\n    this.clearOffScreenCache();\n    var offScreenGroup = this.createOffScreenGroup();\n    this.renderInner(offScreenGroup);\n    this.set('offScreenGroup', offScreenGroup);\n    // 包含包围盒的 bbox\n    this.set('offScreenBBox', getBBoxWithClip(offScreenGroup));\n    return offScreenGroup;\n  };\n  /**\n   * @protected\n   * 在组件上添加分组，主要解决 isReigeter 的问题\n   * @param {IGroup} parent 父元素\n   * @param {object} cfg    分组的配置项\n   */\n  GroupComponent.prototype.addGroup = function (parent, cfg) {\n    this.appendDelegateObject(parent, cfg);\n    var group = parent.addGroup(cfg);\n    if (this.get('isRegister')) {\n      this.registerElement(group);\n    }\n    return group;\n  };\n  /**\n   * @protected\n   * 在组件上添加图形，主要解决 isReigeter 的问题\n   * @param {IGroup} parent 父元素\n   * @param {object} cfg    分组的配置项\n   */\n  GroupComponent.prototype.addShape = function (parent, cfg) {\n    this.appendDelegateObject(parent, cfg);\n    var shape = parent.addShape(cfg);\n    if (this.get('isRegister')) {\n      this.registerElement(shape);\n    }\n    return shape;\n  };\n  /**\n   * 在组件上添加子组件\n   *\n   * @param parent 父元素\n   * @param cfg 子组件配置项\n   */\n  GroupComponent.prototype.addComponent = function (parent, cfg) {\n    var id = cfg.id,\n      Ctor = cfg.component,\n      restCfg = __rest(cfg, [\"id\", \"component\"]);\n    // @ts-ignore\n    var inst = new Ctor(__assign(__assign({}, restCfg), {\n      id: id,\n      container: parent,\n      updateAutoRender: this.get('updateAutoRender')\n    }));\n    inst.init();\n    inst.render();\n    if (this.get('isRegister')) {\n      this.registerElement(inst.get('group'));\n    }\n    return inst;\n  };\n  GroupComponent.prototype.initEvent = function () {};\n  GroupComponent.prototype.removeEvent = function () {\n    var group = this.get('group');\n    group.off();\n  };\n  GroupComponent.prototype.getElementId = function (localId) {\n    var id = this.get('id'); // 组件的 Id\n    var name = this.get('name'); // 组件的名称\n    return id + \"-\" + name + \"-\" + localId;\n  };\n  GroupComponent.prototype.registerElement = function (element) {\n    var id = element.get('id');\n    this.get('shapesMap')[id] = element;\n  };\n  GroupComponent.prototype.unregisterElement = function (element) {\n    var id = element.get('id');\n    delete this.get('shapesMap')[id];\n  };\n  // 移动元素\n  GroupComponent.prototype.moveElementTo = function (element, point) {\n    var matrix = getMatrixByTranslate(point);\n    element.attr('matrix', matrix);\n  };\n  /**\n   * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n   * @protected\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} newElement  新的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  GroupComponent.prototype.addAnimation = function (elmentName, newElement, animateCfg) {\n    // 缓存透明度\n    var originOpacity = newElement.attr('opacity');\n    if (isNil(originOpacity)) {\n      originOpacity = 1;\n    }\n    newElement.attr('opacity', 0);\n    newElement.animate({\n      opacity: originOpacity\n    }, animateCfg);\n  };\n  /**\n   * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n   * @protected\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} originElement 要删除的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  GroupComponent.prototype.removeAnimation = function (elementName, originElement, animateCfg) {\n    originElement.animate({\n      opacity: 0\n    }, animateCfg);\n  };\n  /**\n   * 图形元素的更新动画\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} originElement 现有的图形元素\n   * @param {object} newAttrs  新的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  GroupComponent.prototype.updateAnimation = function (elementName, originElement, newAttrs, animateCfg) {\n    originElement.animate(newAttrs, animateCfg);\n  };\n  // 更新组件的图形\n  GroupComponent.prototype.updateElements = function (newGroup, originGroup) {\n    var _this = this;\n    var animate = this.get('animate');\n    var animateOption = this.get('animateOption');\n    var children = newGroup.getChildren().slice(0); // 创建一个新数组，防止添加到 originGroup 时， children 变动\n    var preElement; // 前面已经匹配到的图形元素，用于\n    each(children, function (element) {\n      var elementId = element.get('id');\n      var originElement = _this.getElementById(elementId);\n      var elementName = element.get('name');\n      if (originElement) {\n        if (element.get('isComponent')) {\n          // 嵌套子组件更新\n          var childComponent = element.get('component');\n          var origChildComponent = originElement.get('component');\n          var newCfg = pick(childComponent.cfg, difference(keys(childComponent.cfg), COPY_PROPERTIES_EXCLUDES));\n          origChildComponent.update(newCfg);\n          originElement.set(STATUS_UPDATE, 'update');\n        } else {\n          var replaceAttrs = _this.getReplaceAttrs(originElement, element);\n          // 更新\n          if (animate && animateOption.update) {\n            // 没有动画\n            _this.updateAnimation(elementName, originElement, replaceAttrs, animateOption.update);\n          } else {\n            // originElement.attrs = replaceAttrs; // 直接替换\n            originElement.attr(replaceAttrs);\n          }\n          // 如果是分组，则继续执行\n          if (element.isGroup()) {\n            _this.updateElements(element, originElement);\n          }\n          // 复制属性\n          each(COPY_PROPERTIES, function (name) {\n            originElement.set(name, element.get(name));\n          });\n          updateClip(originElement, element);\n          preElement = originElement;\n          // 执行完更新后设置状态位为更新\n          originElement.set(STATUS_UPDATE, 'update');\n        }\n      } else {\n        // 没有对应的图形，则插入当前图形\n        originGroup.add(element); // 应该在 group 加个 insertAt 的方法\n        var siblings = originGroup.getChildren(); // 兄弟节点\n        siblings.splice(siblings.length - 1, 1); // 先从数组中移除，然后放到合适的位置\n        if (preElement) {\n          // 前面已经有更新的图形或者插入的图形，则在这个图形后面插入\n          var index = siblings.indexOf(preElement);\n          siblings.splice(index + 1, 0, element); // 在已经更新的图形元素后面插入\n        } else {\n          siblings.unshift(element);\n        }\n        _this.registerElement(element); // 注册节点\n        element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n        if (element.get('isComponent')) {\n          // 直接新增子组件container属性，实例不变\n          var childComponent = element.get('component');\n          childComponent.set('container', originGroup);\n        } else if (element.isGroup()) {\n          // 如果元素是新增加的元素，则遍历注册所有的子节点\n          _this.registerNewGroup(element);\n        }\n        preElement = element;\n        if (animate) {\n          var animateCfg = _this.get('isInit') ? animateOption.appear : animateOption.enter;\n          if (animateCfg) {\n            _this.addAnimation(elementName, element, animateCfg);\n          }\n        }\n      }\n    });\n  };\n  GroupComponent.prototype.clearUpdateStatus = function (group) {\n    var children = group.getChildren();\n    each(children, function (el) {\n      el.set(STATUS_UPDATE, null); // 清理掉更新状态\n    });\n  };\n  // 清理离屏缓存\n  GroupComponent.prototype.clearOffScreenCache = function () {\n    var offScreenGroup = this.get('offScreenGroup');\n    if (offScreenGroup) {\n      // 销毁原先的离线 Group\n      offScreenGroup.destroy();\n    }\n    this.set('offScreenGroup', null);\n    this.set('offScreenBBox', null);\n  };\n  // private updateInner() {\n  //   const group = this.get('group');\n  //   const newGroup = this.createOffScreenGroup();\n  //   this.renderInner(newGroup);\n  //   this.applyOffset();\n  //   this.updateElements(newGroup, group);\n  //   this.deleteElements();\n  //   newGroup.destroy(); // 销毁虚拟分组\n  // }\n  // 获取发生委托时的对象，在事件中抛出\n  GroupComponent.prototype.getDelegateObject = function () {\n    var _a;\n    var name = this.get('name');\n    var delegateObject = (_a = {}, _a[name] = this, _a.component = this, _a);\n    return delegateObject;\n  };\n  // 附加委托信息，用于事件\n  GroupComponent.prototype.appendDelegateObject = function (parent, cfg) {\n    var parentObject = parent.get('delegateObject');\n    if (!cfg.delegateObject) {\n      cfg.delegateObject = {};\n    }\n    mix(cfg.delegateObject, parentObject); // 将父元素上的委托信息复制到自身\n  };\n  // 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\n  GroupComponent.prototype.getReplaceAttrs = function (originElement, newElement) {\n    var originAttrs = originElement.attr();\n    var newAttrs = newElement.attr();\n    each(originAttrs, function (v, k) {\n      if (newAttrs[k] === undefined) {\n        newAttrs[k] = undefined;\n      }\n    });\n    return newAttrs;\n  };\n  GroupComponent.prototype.registerNewGroup = function (group) {\n    var _this = this;\n    var children = group.getChildren();\n    each(children, function (element) {\n      _this.registerElement(element); // 注册节点\n      element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n      if (element.isGroup()) {\n        _this.registerNewGroup(element);\n      }\n    });\n  };\n  // 移除多余的元素\n  GroupComponent.prototype.deleteElements = function () {\n    var _this = this;\n    var shapesMap = this.get('shapesMap');\n    var deleteArray = [];\n    // 遍历获取需要删除的图形元素\n    each(shapesMap, function (element, id) {\n      if (!element.get(STATUS_UPDATE) || element.destroyed) {\n        deleteArray.push([id, element]);\n      } else {\n        element.set(STATUS_UPDATE, null); // 清理掉更新状态\n      }\n    });\n\n    var animate = this.get('animate');\n    var animateOption = this.get('animateOption');\n    // 删除图形元素\n    each(deleteArray, function (item) {\n      var id = item[0],\n        element = item[1];\n      if (!element.destroyed) {\n        var elementName = element.get('name');\n        if (animate && animateOption.leave) {\n          // 需要动画结束时移除图形\n          var callbackAnimCfg = mix({\n            callback: function () {\n              _this.removeElement(element);\n            }\n          }, animateOption.leave);\n          _this.removeAnimation(elementName, element, callbackAnimCfg);\n        } else {\n          _this.removeElement(element);\n        }\n      }\n      delete shapesMap[id]; // 从缓存中移除\n    });\n  };\n\n  GroupComponent.prototype.removeElement = function (element) {\n    if (element.get('isGroup')) {\n      var component = element.get('component');\n      if (component) {\n        component.destroy();\n      }\n    }\n    element.remove();\n  };\n  return GroupComponent;\n}(Component);\nexport default GroupComponent;","map":{"version":3,"sources":["../../src/abstract/group-component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\nimport { difference, each, isNil, keys, mix, pick } from '@antv/util';\nimport { propagationDelegate } from '../util/event';\nimport { applyMatrix2BBox, getMatrixByTranslate } from '../util/matrix';\nimport { getBBoxWithClip, updateClip } from '../util/util';\nimport Component from './component';\nvar STATUS_UPDATE = 'update_status';\nvar COPY_PROPERTIES = ['visible', 'tip', 'delegateObject']; // 更新对象时需要复制的属性\nvar COPY_PROPERTIES_EXCLUDES = ['container', 'group', 'shapesMap', 'isRegister', 'isUpdating', 'destroyed']; // 更新子组件时排除的属性\nvar GroupComponent = /** @class */ (function (_super) {\n    __extends(GroupComponent, _super);\n    function GroupComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GroupComponent.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { container: null, \n            /**\n             * @private\n             * 缓存图形的 Map\n             */\n            shapesMap: {}, group: null, capture: true, \n            /**\n             * @private 组件或者图形是否允许注册\n             * @type {false}\n             */\n            isRegister: false, \n            /**\n             * @private 是否正在更新\n             * @type {false}\n             */\n            isUpdating: false, \n            /**\n             * @private\n             * 是否初始状态，一旦 render，update 后，这个状态就变成 false, clear 后恢复\n             */\n            isInit: true });\n    };\n    GroupComponent.prototype.remove = function () {\n        this.clear();\n        var group = this.get('group');\n        group.remove();\n    };\n    GroupComponent.prototype.clear = function () {\n        var group = this.get('group');\n        group.clear();\n        this.set('shapesMap', {});\n        this.clearOffScreenCache();\n        this.set('isInit', true);\n    };\n    GroupComponent.prototype.getChildComponentById = function (id) {\n        var group = this.getElementById(id);\n        var inst = group && group.get('component');\n        return inst;\n    };\n    GroupComponent.prototype.getElementById = function (id) {\n        return this.get('shapesMap')[id];\n    };\n    GroupComponent.prototype.getElementByLocalId = function (localId) {\n        var id = this.getElementId(localId);\n        return this.getElementById(id);\n    };\n    GroupComponent.prototype.getElementsByName = function (name) {\n        var rst = [];\n        each(this.get('shapesMap'), function (elem) {\n            if (elem.get('name') === name) {\n                rst.push(elem);\n            }\n        });\n        return rst;\n    };\n    GroupComponent.prototype.getContainer = function () {\n        return this.get('container');\n    };\n    GroupComponent.prototype.updateInner = function (cfg) {\n        // this.updateInner();\n        // this.set('isUpdating', false);\n        this.offScreenRender();\n        if (this.get('updateAutoRender')) {\n            this.render();\n        }\n    };\n    GroupComponent.prototype.render = function () {\n        var offScreenGroup = this.get('offScreenGroup');\n        if (!offScreenGroup) {\n            offScreenGroup = this.offScreenRender();\n        }\n        var group = this.get('group');\n        this.updateElements(offScreenGroup, group);\n        this.deleteElements();\n        this.applyOffset();\n        if (!this.get('eventInitted')) {\n            this.initEvent();\n            this.set('eventInitted', true);\n        }\n        this.set('isInit', false);\n    };\n    GroupComponent.prototype.show = function () {\n        var group = this.get('group');\n        group.show();\n        this.set('visible', true);\n    };\n    GroupComponent.prototype.hide = function () {\n        var group = this.get('group');\n        group.hide();\n        this.set('visible', false);\n    };\n    GroupComponent.prototype.setCapture = function (capture) {\n        var group = this.get('group');\n        group.set('capture', capture);\n        this.set('capture', capture);\n    };\n    GroupComponent.prototype.destroy = function () {\n        this.removeEvent();\n        this.remove();\n        _super.prototype.destroy.call(this);\n    };\n    GroupComponent.prototype.getBBox = function () {\n        return this.get('group').getCanvasBBox();\n    };\n    GroupComponent.prototype.getLayoutBBox = function () {\n        var group = this.get('group');\n        // 防止被 clear 了，offScreenBBox 不存在\n        var bbox = this.getInnerLayoutBBox();\n        var matrix = group.getTotalMatrix();\n        if (matrix) {\n            bbox = applyMatrix2BBox(matrix, bbox);\n        }\n        return bbox; // 默认返回 getBBox，不同的组件内部单独实现\n    };\n    // 复写 on, off, emit 透传到 group\n    GroupComponent.prototype.on = function (evt, callback, once) {\n        var group = this.get('group');\n        group.on(evt, callback, once);\n        return this;\n    };\n    GroupComponent.prototype.off = function (evt, callback) {\n        var group = this.get('group');\n        group && group.off(evt, callback);\n        return this;\n    };\n    GroupComponent.prototype.emit = function (eventName, eventObject) {\n        var group = this.get('group');\n        group.emit(eventName, eventObject);\n    };\n    GroupComponent.prototype.init = function () {\n        _super.prototype.init.call(this);\n        if (!this.get('group')) {\n            this.initGroup();\n        }\n        this.offScreenRender(); // 绘制离屏 group\n    };\n    // 获取组件内部布局占的包围盒\n    GroupComponent.prototype.getInnerLayoutBBox = function () {\n        return this.get('offScreenBBox') || this.get('group').getBBox();\n    };\n    // 抛出委托对象\n    GroupComponent.prototype.delegateEmit = function (eventName, eventObject) {\n        var group = this.get('group');\n        eventObject.target = group;\n        group.emit(eventName, eventObject);\n        propagationDelegate(group, eventName, eventObject);\n    };\n    // 创建离屏的 group ,不添加在 canvas 中\n    GroupComponent.prototype.createOffScreenGroup = function () {\n        var group = this.get('group');\n        var GroupClass = group.getGroupBase(); // 获取分组的构造函数\n        var newGroup = new GroupClass({\n            delegateObject: this.getDelegateObject(),\n        });\n        return newGroup;\n    };\n    // 应用 offset\n    GroupComponent.prototype.applyOffset = function () {\n        var offsetX = this.get('offsetX');\n        var offsetY = this.get('offsetY');\n        this.moveElementTo(this.get('group'), {\n            x: offsetX,\n            y: offsetY,\n        });\n    };\n    GroupComponent.prototype.initGroup = function () {\n        var container = this.get('container');\n        this.set('group', container.addGroup({\n            id: this.get('id'),\n            name: this.get('name'),\n            capture: this.get('capture'),\n            visible: this.get('visible'),\n            isComponent: true,\n            component: this,\n            delegateObject: this.getDelegateObject(),\n        }));\n    };\n    // 离屏渲染\n    GroupComponent.prototype.offScreenRender = function () {\n        this.clearOffScreenCache();\n        var offScreenGroup = this.createOffScreenGroup();\n        this.renderInner(offScreenGroup);\n        this.set('offScreenGroup', offScreenGroup);\n        // 包含包围盒的 bbox\n        this.set('offScreenBBox', getBBoxWithClip(offScreenGroup));\n        return offScreenGroup;\n    };\n    /**\n     * @protected\n     * 在组件上添加分组，主要解决 isReigeter 的问题\n     * @param {IGroup} parent 父元素\n     * @param {object} cfg    分组的配置项\n     */\n    GroupComponent.prototype.addGroup = function (parent, cfg) {\n        this.appendDelegateObject(parent, cfg);\n        var group = parent.addGroup(cfg);\n        if (this.get('isRegister')) {\n            this.registerElement(group);\n        }\n        return group;\n    };\n    /**\n     * @protected\n     * 在组件上添加图形，主要解决 isReigeter 的问题\n     * @param {IGroup} parent 父元素\n     * @param {object} cfg    分组的配置项\n     */\n    GroupComponent.prototype.addShape = function (parent, cfg) {\n        this.appendDelegateObject(parent, cfg);\n        var shape = parent.addShape(cfg);\n        if (this.get('isRegister')) {\n            this.registerElement(shape);\n        }\n        return shape;\n    };\n    /**\n     * 在组件上添加子组件\n     *\n     * @param parent 父元素\n     * @param cfg 子组件配置项\n     */\n    GroupComponent.prototype.addComponent = function (parent, cfg) {\n        var id = cfg.id, Ctor = cfg.component, restCfg = __rest(cfg, [\"id\", \"component\"]);\n        // @ts-ignore\n        var inst = new Ctor(__assign(__assign({}, restCfg), { id: id, container: parent, updateAutoRender: this.get('updateAutoRender') }));\n        inst.init();\n        inst.render();\n        if (this.get('isRegister')) {\n            this.registerElement(inst.get('group'));\n        }\n        return inst;\n    };\n    GroupComponent.prototype.initEvent = function () { };\n    GroupComponent.prototype.removeEvent = function () {\n        var group = this.get('group');\n        group.off();\n    };\n    GroupComponent.prototype.getElementId = function (localId) {\n        var id = this.get('id'); // 组件的 Id\n        var name = this.get('name'); // 组件的名称\n        return id + \"-\" + name + \"-\" + localId;\n    };\n    GroupComponent.prototype.registerElement = function (element) {\n        var id = element.get('id');\n        this.get('shapesMap')[id] = element;\n    };\n    GroupComponent.prototype.unregisterElement = function (element) {\n        var id = element.get('id');\n        delete this.get('shapesMap')[id];\n    };\n    // 移动元素\n    GroupComponent.prototype.moveElementTo = function (element, point) {\n        var matrix = getMatrixByTranslate(point);\n        element.attr('matrix', matrix);\n    };\n    /**\n     * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n     * @protected\n     * @param {string} elmentName 图形元素名称\n     * @param {IElement} newElement  新的图形元素\n     * @param {object} animateCfg 动画的配置项\n     */\n    GroupComponent.prototype.addAnimation = function (elmentName, newElement, animateCfg) {\n        // 缓存透明度\n        var originOpacity = newElement.attr('opacity');\n        if (isNil(originOpacity)) {\n            originOpacity = 1;\n        }\n        newElement.attr('opacity', 0);\n        newElement.animate({ opacity: originOpacity }, animateCfg);\n    };\n    /**\n     * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n     * @protected\n     * @param {string} elmentName 图形元素名称\n     * @param {IElement} originElement 要删除的图形元素\n     * @param {object} animateCfg 动画的配置项\n     */\n    GroupComponent.prototype.removeAnimation = function (elementName, originElement, animateCfg) {\n        originElement.animate({ opacity: 0 }, animateCfg);\n    };\n    /**\n     * 图形元素的更新动画\n     * @param {string} elmentName 图形元素名称\n     * @param {IElement} originElement 现有的图形元素\n     * @param {object} newAttrs  新的图形元素\n     * @param {object} animateCfg 动画的配置项\n     */\n    GroupComponent.prototype.updateAnimation = function (elementName, originElement, newAttrs, animateCfg) {\n        originElement.animate(newAttrs, animateCfg);\n    };\n    // 更新组件的图形\n    GroupComponent.prototype.updateElements = function (newGroup, originGroup) {\n        var _this = this;\n        var animate = this.get('animate');\n        var animateOption = this.get('animateOption');\n        var children = newGroup.getChildren().slice(0); // 创建一个新数组，防止添加到 originGroup 时， children 变动\n        var preElement; // 前面已经匹配到的图形元素，用于\n        each(children, function (element) {\n            var elementId = element.get('id');\n            var originElement = _this.getElementById(elementId);\n            var elementName = element.get('name');\n            if (originElement) {\n                if (element.get('isComponent')) {\n                    // 嵌套子组件更新\n                    var childComponent = element.get('component');\n                    var origChildComponent = originElement.get('component');\n                    var newCfg = pick(childComponent.cfg, difference(keys(childComponent.cfg), COPY_PROPERTIES_EXCLUDES));\n                    origChildComponent.update(newCfg);\n                    originElement.set(STATUS_UPDATE, 'update');\n                }\n                else {\n                    var replaceAttrs = _this.getReplaceAttrs(originElement, element);\n                    // 更新\n                    if (animate && animateOption.update) {\n                        // 没有动画\n                        _this.updateAnimation(elementName, originElement, replaceAttrs, animateOption.update);\n                    }\n                    else {\n                        // originElement.attrs = replaceAttrs; // 直接替换\n                        originElement.attr(replaceAttrs);\n                    }\n                    // 如果是分组，则继续执行\n                    if (element.isGroup()) {\n                        _this.updateElements(element, originElement);\n                    }\n                    // 复制属性\n                    each(COPY_PROPERTIES, function (name) {\n                        originElement.set(name, element.get(name));\n                    });\n                    updateClip(originElement, element);\n                    preElement = originElement;\n                    // 执行完更新后设置状态位为更新\n                    originElement.set(STATUS_UPDATE, 'update');\n                }\n            }\n            else {\n                // 没有对应的图形，则插入当前图形\n                originGroup.add(element); // 应该在 group 加个 insertAt 的方法\n                var siblings = originGroup.getChildren(); // 兄弟节点\n                siblings.splice(siblings.length - 1, 1); // 先从数组中移除，然后放到合适的位置\n                if (preElement) {\n                    // 前面已经有更新的图形或者插入的图形，则在这个图形后面插入\n                    var index = siblings.indexOf(preElement);\n                    siblings.splice(index + 1, 0, element); // 在已经更新的图形元素后面插入\n                }\n                else {\n                    siblings.unshift(element);\n                }\n                _this.registerElement(element); // 注册节点\n                element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n                if (element.get('isComponent')) {\n                    // 直接新增子组件container属性，实例不变\n                    var childComponent = element.get('component');\n                    childComponent.set('container', originGroup);\n                }\n                else if (element.isGroup()) {\n                    // 如果元素是新增加的元素，则遍历注册所有的子节点\n                    _this.registerNewGroup(element);\n                }\n                preElement = element;\n                if (animate) {\n                    var animateCfg = _this.get('isInit') ? animateOption.appear : animateOption.enter;\n                    if (animateCfg) {\n                        _this.addAnimation(elementName, element, animateCfg);\n                    }\n                }\n            }\n        });\n    };\n    GroupComponent.prototype.clearUpdateStatus = function (group) {\n        var children = group.getChildren();\n        each(children, function (el) {\n            el.set(STATUS_UPDATE, null); // 清理掉更新状态\n        });\n    };\n    // 清理离屏缓存\n    GroupComponent.prototype.clearOffScreenCache = function () {\n        var offScreenGroup = this.get('offScreenGroup');\n        if (offScreenGroup) {\n            // 销毁原先的离线 Group\n            offScreenGroup.destroy();\n        }\n        this.set('offScreenGroup', null);\n        this.set('offScreenBBox', null);\n    };\n    // private updateInner() {\n    //   const group = this.get('group');\n    //   const newGroup = this.createOffScreenGroup();\n    //   this.renderInner(newGroup);\n    //   this.applyOffset();\n    //   this.updateElements(newGroup, group);\n    //   this.deleteElements();\n    //   newGroup.destroy(); // 销毁虚拟分组\n    // }\n    // 获取发生委托时的对象，在事件中抛出\n    GroupComponent.prototype.getDelegateObject = function () {\n        var _a;\n        var name = this.get('name');\n        var delegateObject = (_a = {},\n            _a[name] = this,\n            _a.component = this,\n            _a);\n        return delegateObject;\n    };\n    // 附加委托信息，用于事件\n    GroupComponent.prototype.appendDelegateObject = function (parent, cfg) {\n        var parentObject = parent.get('delegateObject');\n        if (!cfg.delegateObject) {\n            cfg.delegateObject = {};\n        }\n        mix(cfg.delegateObject, parentObject); // 将父元素上的委托信息复制到自身\n    };\n    // 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\n    GroupComponent.prototype.getReplaceAttrs = function (originElement, newElement) {\n        var originAttrs = originElement.attr();\n        var newAttrs = newElement.attr();\n        each(originAttrs, function (v, k) {\n            if (newAttrs[k] === undefined) {\n                newAttrs[k] = undefined;\n            }\n        });\n        return newAttrs;\n    };\n    GroupComponent.prototype.registerNewGroup = function (group) {\n        var _this = this;\n        var children = group.getChildren();\n        each(children, function (element) {\n            _this.registerElement(element); // 注册节点\n            element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n            if (element.isGroup()) {\n                _this.registerNewGroup(element);\n            }\n        });\n    };\n    // 移除多余的元素\n    GroupComponent.prototype.deleteElements = function () {\n        var _this = this;\n        var shapesMap = this.get('shapesMap');\n        var deleteArray = [];\n        // 遍历获取需要删除的图形元素\n        each(shapesMap, function (element, id) {\n            if (!element.get(STATUS_UPDATE) || element.destroyed) {\n                deleteArray.push([id, element]);\n            }\n            else {\n                element.set(STATUS_UPDATE, null); // 清理掉更新状态\n            }\n        });\n        var animate = this.get('animate');\n        var animateOption = this.get('animateOption');\n        // 删除图形元素\n        each(deleteArray, function (item) {\n            var id = item[0], element = item[1];\n            if (!element.destroyed) {\n                var elementName = element.get('name');\n                if (animate && animateOption.leave) {\n                    // 需要动画结束时移除图形\n                    var callbackAnimCfg = mix({\n                        callback: function () {\n                            _this.removeElement(element);\n                        },\n                    }, animateOption.leave);\n                    _this.removeAnimation(elementName, element, callbackAnimCfg);\n                }\n                else {\n                    _this.removeElement(element);\n                }\n            }\n            delete shapesMap[id]; // 从缓存中移除\n        });\n    };\n    GroupComponent.prototype.removeElement = function (element) {\n        if (element.get('isGroup')) {\n            var component = element.get('component');\n            if (component) {\n                component.destroy();\n            }\n        }\n        element.remove();\n    };\n    return GroupComponent;\n}(Component));\nexport default GroupComponent;\n//# sourceMappingURL=group-component.js.map"]},"metadata":{},"sourceType":"module"}