{"ast":null,"code":"/**\n * @description 扩展方法，提供 gl-matrix 为提供的方法\n * */\nimport { mat3, vec2 } from 'gl-matrix';\nexport function leftTranslate(out, a, v) {\n  var transMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromTranslation(transMat, v);\n  return mat3.multiply(out, transMat, a);\n}\nexport function leftRotate(out, a, rad) {\n  var rotateMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromRotation(rotateMat, rad);\n  return mat3.multiply(out, rotateMat, a);\n}\nexport function leftScale(out, a, v) {\n  var scaleMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromScaling(scaleMat, v);\n  return mat3.multiply(out, scaleMat, a);\n}\nfunction leftMultiply(out, a, a1) {\n  return mat3.multiply(out, a1, a);\n}\n/**\n * 根据 actions 来做 transform\n * @param m\n * @param actions\n */\nexport function transform(m, actions) {\n  var matrix = m ? [].concat(m) : [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  for (var i = 0, len = actions.length; i < len; i++) {\n    var action = actions[i];\n    switch (action[0]) {\n      case 't':\n        leftTranslate(matrix, matrix, [action[1], action[2]]);\n        break;\n      case 's':\n        leftScale(matrix, matrix, [action[1], action[2]]);\n        break;\n      case 'r':\n        leftRotate(matrix, matrix, action[1]);\n        break;\n      case 'm':\n        leftMultiply(matrix, matrix, action[1]);\n        break;\n      default:\n        break;\n    }\n  }\n  return matrix;\n}\n/**\n * 向量 v1 到 向量 v2 夹角的方向\n * @param  {Array} v1 向量\n * @param  {Array} v2 向量\n * @return {Boolean} >= 0 顺时针 < 0 逆时针\n */\nexport function direction(v1, v2) {\n  return v1[0] * v2[1] - v2[0] * v1[1];\n}\n/**\n * 二维向量 v1 到 v2 的夹角\n * @param v1\n * @param v2\n * @param direct\n */\nexport function angleTo(v1, v2, direct) {\n  var ang = vec2.angle(v1, v2);\n  var angleLargeThanPI = direction(v1, v2) >= 0;\n  if (direct) {\n    if (angleLargeThanPI) {\n      return Math.PI * 2 - ang;\n    }\n    return ang;\n  }\n  if (angleLargeThanPI) {\n    return ang;\n  }\n  return Math.PI * 2 - ang;\n}\n/**\n * 计算二维向量的垂直向量\n * @param out\n * @param v\n * @param flag\n */\nexport function vertical(out, v, flag) {\n  if (flag) {\n    out[0] = v[1];\n    out[1] = -1 * v[0];\n  } else {\n    out[0] = -1 * v[1];\n    out[1] = v[0];\n  }\n  return out;\n}","map":{"version":3,"sources":["../src/ext.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @description 扩展方法，提供 gl-matrix 为提供的方法\n * */\nimport { mat3, vec2 } from 'gl-matrix';\nexport function leftTranslate(out, a, v) {\n    var transMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    mat3.fromTranslation(transMat, v);\n    return mat3.multiply(out, transMat, a);\n}\nexport function leftRotate(out, a, rad) {\n    var rotateMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    mat3.fromRotation(rotateMat, rad);\n    return mat3.multiply(out, rotateMat, a);\n}\nexport function leftScale(out, a, v) {\n    var scaleMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    mat3.fromScaling(scaleMat, v);\n    return mat3.multiply(out, scaleMat, a);\n}\nfunction leftMultiply(out, a, a1) {\n    return mat3.multiply(out, a1, a);\n}\n/**\n * 根据 actions 来做 transform\n * @param m\n * @param actions\n */\nexport function transform(m, actions) {\n    var matrix = m ? [].concat(m) : [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    for (var i = 0, len = actions.length; i < len; i++) {\n        var action = actions[i];\n        switch (action[0]) {\n            case 't':\n                leftTranslate(matrix, matrix, [action[1], action[2]]);\n                break;\n            case 's':\n                leftScale(matrix, matrix, [action[1], action[2]]);\n                break;\n            case 'r':\n                leftRotate(matrix, matrix, action[1]);\n                break;\n            case 'm':\n                leftMultiply(matrix, matrix, action[1]);\n                break;\n            default:\n                break;\n        }\n    }\n    return matrix;\n}\n/**\n * 向量 v1 到 向量 v2 夹角的方向\n * @param  {Array} v1 向量\n * @param  {Array} v2 向量\n * @return {Boolean} >= 0 顺时针 < 0 逆时针\n */\nexport function direction(v1, v2) {\n    return v1[0] * v2[1] - v2[0] * v1[1];\n}\n/**\n * 二维向量 v1 到 v2 的夹角\n * @param v1\n * @param v2\n * @param direct\n */\nexport function angleTo(v1, v2, direct) {\n    var ang = vec2.angle(v1, v2);\n    var angleLargeThanPI = direction(v1, v2) >= 0;\n    if (direct) {\n        if (angleLargeThanPI) {\n            return Math.PI * 2 - ang;\n        }\n        return ang;\n    }\n    if (angleLargeThanPI) {\n        return ang;\n    }\n    return Math.PI * 2 - ang;\n}\n/**\n * 计算二维向量的垂直向量\n * @param out\n * @param v\n * @param flag\n */\nexport function vertical(out, v, flag) {\n    if (flag) {\n        out[0] = v[1];\n        out[1] = -1 * v[0];\n    }\n    else {\n        out[0] = -1 * v[1];\n        out[1] = v[0];\n    }\n    return out;\n}\n//# sourceMappingURL=ext.js.map"]},"metadata":{},"sourceType":"module"}