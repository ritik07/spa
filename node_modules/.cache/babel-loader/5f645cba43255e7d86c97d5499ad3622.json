{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isNil, get } from '@antv/util';\nimport { getCurrentElement, getDelegationObject, getElements, getElementValue, getScaleByField, isElementChange, isList } from '../util';\nimport StateBase from './state-base';\nfunction getItem(shape) {\n  return get(shape.get('delegateObject'), 'item');\n}\n/**\n * 状态量 Action 的基类，允许多个 Element 同时拥有某个状态\n * @class\n * @ignore\n */\nvar ElementState = /** @class */function (_super) {\n  __extends(ElementState, _super);\n  function ElementState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.ignoreListItemStates = ['unchecked'];\n    return _this;\n  }\n  // 是否忽略触发的列表项\n  ElementState.prototype.isItemIgnore = function (item, list) {\n    var states = this.ignoreListItemStates;\n    var filtered = states.filter(function (state) {\n      return list.hasState(item, state);\n    });\n    return !!filtered.length;\n  };\n  // 设置由组件选项导致的状态变化\n  ElementState.prototype.setStateByComponent = function (component, item, enable) {\n    var view = this.context.view;\n    var field = component.get('field');\n    var elements = getElements(view);\n    this.setElementsStateByItem(elements, field, item, enable);\n  };\n  // 处理触发源由 element 导致的状态变化\n  ElementState.prototype.setStateByElement = function (element, enable) {\n    this.setElementState(element, enable);\n  };\n  /** 组件的选项是否同 element 匹配 */\n  ElementState.prototype.isMathItem = function (element, field, item) {\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    var value = getElementValue(element, field);\n    return !isNil(value) && item.name === scale.getText(value);\n  };\n  ElementState.prototype.setElementsStateByItem = function (elements, field, item, enable) {\n    var _this = this;\n    each(elements, function (el) {\n      if (_this.isMathItem(el, field, item)) {\n        el.setState(_this.stateName, enable);\n      }\n    });\n  };\n  /** 设置状态是否激活 */\n  ElementState.prototype.setStateEnable = function (enable) {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      // 触发源由于 element 导致\n      if (isElementChange(this.context)) {\n        this.setStateByElement(element, enable);\n      }\n    } else {\n      // 触发源由组件导致\n      var delegateObject = getDelegationObject(this.context);\n      // 如果触发源时列表，图例、坐标轴\n      if (isList(delegateObject)) {\n        var item = delegateObject.item,\n          component = delegateObject.component;\n        if (item && component && !this.isItemIgnore(item, component)) {\n          var event_1 = this.context.event.gEvent;\n          // 防止闪烁\n          if (event_1 && event_1.fromShape && event_1.toShape && getItem(event_1.fromShape) === getItem(event_1.toShape)) {\n            return;\n          }\n          this.setStateByComponent(component, item, enable);\n        }\n      }\n    }\n  };\n  /**\n   * 切换状态\n   */\n  ElementState.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      var hasState = element.hasState(this.stateName);\n      this.setElementState(element, !hasState);\n    }\n  };\n  /**\n   * 取消当前时间影响的状态\n   */\n  ElementState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n  return ElementState;\n}(StateBase);\nexport default ElementState;","map":{"version":3,"sources":["../../../../src/interaction/action/element/state.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, isNil, get } from '@antv/util';\nimport { ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element/';\nimport {\n  getCurrentElement,\n  getDelegationObject,\n  getElements,\n  getElementValue,\n  getScaleByField,\n  isElementChange,\n  isList,\n} from '../util';\nimport StateBase from './state-base';\n\nfunction getItem(shape) {\n  return get(shape.get('delegateObject'), 'item');\n}\n\n/**\n * 状态量 Action 的基类，允许多个 Element 同时拥有某个状态\n * @class\n * @ignore\n */\nclass ElementState extends StateBase {\n  protected ignoreListItemStates = ['unchecked'];\n\n  // 是否忽略触发的列表项\n  private isItemIgnore(item: ListItem, list) {\n    const states = this.ignoreListItemStates;\n    const filtered = states.filter((state) => {\n      return list.hasState(item, state);\n    });\n    return !!filtered.length;\n  }\n\n  // 设置由组件选项导致的状态变化\n  private setStateByComponent(component, item: ListItem, enable: boolean) {\n    const view = this.context.view;\n    const field = component.get('field');\n    const elements = getElements(view);\n    this.setElementsStateByItem(elements, field, item, enable);\n  }\n\n  // 处理触发源由 element 导致的状态变化\n  protected setStateByElement(element: Element, enable: boolean) {\n    this.setElementState(element, enable);\n  }\n\n  /** 组件的选项是否同 element 匹配 */\n  protected isMathItem(element: Element, field: string, item: ListItem) {\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    const value = getElementValue(element, field);\n    return !isNil(value) && item.name === scale.getText(value);\n  }\n\n  protected setElementsStateByItem(elements: Element[], field: string, item: ListItem, enable: boolean) {\n    each(elements, (el) => {\n      if (this.isMathItem(el, field, item)) {\n        el.setState(this.stateName, enable);\n      }\n    });\n  }\n\n  /** 设置状态是否激活 */\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // 触发源由于 element 导致\n      if (isElementChange(this.context)) {\n        this.setStateByElement(element, enable);\n      }\n    } else {\n      // 触发源由组件导致\n      const delegateObject = getDelegationObject(this.context);\n      // 如果触发源时列表，图例、坐标轴\n      if (isList(delegateObject)) {\n        const { item, component } = delegateObject;\n        if (item && component && !this.isItemIgnore(item, component)) {\n          const event = this.context.event.gEvent;\n          // 防止闪烁\n          if (event && event.fromShape && event.toShape && getItem(event.fromShape) === getItem(event.toShape)) {\n            return;\n          }\n          this.setStateByComponent(component, item, enable);\n        }\n      }\n    }\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = element.hasState(this.stateName);\n      this.setElementState(element, !hasState);\n    }\n  }\n\n  /**\n   * 取消当前时间影响的状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n}\n\nexport default ElementState;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}