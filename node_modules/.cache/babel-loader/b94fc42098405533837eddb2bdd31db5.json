{"ast":null,"code":"import { map, memoize, isString, each } from '@antv/util';\nvar RGB_REG = /rgba?\\(([\\s.,0-9]+)\\)/;\nvar regexLG = /^l\\s*\\(\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexRG = /^r\\s*\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexColorStop = /[\\d.]+:(#[^\\s]+|[^\\)]+\\))/gi;\nvar isGradientColor = function (val) {\n  return /^[r,R,L,l]{1}[\\s]*\\(/.test(val);\n};\n// 创建辅助 tag 取颜色\nvar createTmp = function () {\n  var i = document.createElement('i');\n  i.title = 'Web Colour Picker';\n  i.style.display = 'none';\n  document.body.appendChild(i);\n  return i;\n};\n// 获取颜色之间的插值\nvar getValue = function (start, end, percent, index) {\n  return start[index] + (end[index] - start[index]) * percent;\n};\n// 数组转换成颜色\nfunction arr2rgb(arr) {\n  return \"#\" + toHex(arr[0]) + toHex(arr[1]) + toHex(arr[2]);\n}\n// rgb 颜色转换成数组\nvar rgb2arr = function (str) {\n  return [parseInt(str.substr(1, 2), 16), parseInt(str.substr(3, 2), 16), parseInt(str.substr(5, 2), 16)];\n};\n// 将数值从 0-255 转换成16进制字符串\nvar toHex = function (value) {\n  var x16Value = Math.round(value).toString(16);\n  return x16Value.length === 1 ? \"0\" + x16Value : x16Value;\n};\n// 计算颜色\nvar calColor = function (points, percent) {\n  var fixedPercent = isNaN(Number(percent)) || percent < 0 ? 0 : percent > 1 ? 1 : Number(percent);\n  var steps = points.length - 1;\n  var step = Math.floor(steps * fixedPercent);\n  var left = steps * fixedPercent - step;\n  var start = points[step];\n  var end = step === steps ? start : points[step + 1];\n  return arr2rgb([getValue(start, end, left, 0), getValue(start, end, left, 1), getValue(start, end, left, 2)]);\n};\n// 用于给 toRGB 的缓存（使用 memoize 方法替换）\n// const colorCache = {};\nvar iEl;\n/**\n * 将颜色转换到 rgb 的格式\n * @param {color} color 颜色\n * @return 将颜色转换到 '#ffffff' 的格式\n */\nvar toRGB = function (color) {\n  // 如果已经是 rgb的格式\n  if (color[0] === '#' && color.length === 7) {\n    return color;\n  }\n  if (!iEl) {\n    // 防止防止在页头报错\n    iEl = createTmp();\n  }\n  iEl.style.color = color;\n  var rst = document.defaultView.getComputedStyle(iEl, '').getPropertyValue('color');\n  var matches = RGB_REG.exec(rst);\n  var cArray = matches[1].split(/\\s*,\\s*/).map(function (s) {\n    return Number(s);\n  });\n  rst = arr2rgb(cArray);\n  return rst;\n};\n/**\n * 获取渐变函数\n * @param colors 多个颜色\n * @return 颜色值\n */\nvar gradient = function (colors) {\n  var colorArray = isString(colors) ? colors.split('-') : colors;\n  var points = map(colorArray, function (color) {\n    return rgb2arr(color.indexOf('#') === -1 ? toRGB(color) : color);\n  });\n  // 返回一个函数\n  return function (percent) {\n    return calColor(points, percent);\n  };\n};\nvar toCSSGradient = function (gradientColor) {\n  if (isGradientColor(gradientColor)) {\n    var cssColor_1;\n    var steps = void 0;\n    if (gradientColor[0] === 'l') {\n      // 线性渐变\n      var arr = regexLG.exec(gradientColor);\n      var angle = +arr[1] + 90; // css 和 g 的渐变起始角度不同\n      steps = arr[2];\n      cssColor_1 = \"linear-gradient(\" + angle + \"deg, \";\n    } else if (gradientColor[0] === 'r') {\n      // 径向渐变\n      cssColor_1 = 'radial-gradient(';\n      var arr = regexRG.exec(gradientColor);\n      steps = arr[4];\n    }\n    var colorStops_1 = steps.match(regexColorStop);\n    each(colorStops_1, function (item, index) {\n      var itemArr = item.split(':');\n      cssColor_1 += itemArr[1] + \" \" + itemArr[0] * 100 + \"%\";\n      if (index !== colorStops_1.length - 1) {\n        cssColor_1 += ', ';\n      }\n    });\n    cssColor_1 += ')';\n    return cssColor_1;\n  }\n  return gradientColor;\n};\nexport default {\n  rgb2arr: rgb2arr,\n  gradient: gradient,\n  toRGB: memoize(toRGB),\n  toCSSGradient: toCSSGradient\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { map, memoize, isString, each } from '@antv/util';\nvar RGB_REG = /rgba?\\(([\\s.,0-9]+)\\)/;\nvar regexLG = /^l\\s*\\(\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexRG = /^r\\s*\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexColorStop = /[\\d.]+:(#[^\\s]+|[^\\)]+\\))/gi;\nvar isGradientColor = function (val) { return /^[r,R,L,l]{1}[\\s]*\\(/.test(val); };\n// 创建辅助 tag 取颜色\nvar createTmp = function () {\n    var i = document.createElement('i');\n    i.title = 'Web Colour Picker';\n    i.style.display = 'none';\n    document.body.appendChild(i);\n    return i;\n};\n// 获取颜色之间的插值\nvar getValue = function (start, end, percent, index) {\n    return start[index] + (end[index] - start[index]) * percent;\n};\n// 数组转换成颜色\nfunction arr2rgb(arr) {\n    return \"#\" + toHex(arr[0]) + toHex(arr[1]) + toHex(arr[2]);\n}\n// rgb 颜色转换成数组\nvar rgb2arr = function (str) {\n    return [\n        parseInt(str.substr(1, 2), 16),\n        parseInt(str.substr(3, 2), 16),\n        parseInt(str.substr(5, 2), 16),\n    ];\n};\n// 将数值从 0-255 转换成16进制字符串\nvar toHex = function (value) {\n    var x16Value = Math.round(value).toString(16);\n    return x16Value.length === 1 ? \"0\" + x16Value : x16Value;\n};\n// 计算颜色\nvar calColor = function (points, percent) {\n    var fixedPercent = isNaN(Number(percent)) || percent < 0 ? 0 :\n        percent > 1 ? 1 :\n            Number(percent);\n    var steps = points.length - 1;\n    var step = Math.floor(steps * fixedPercent);\n    var left = steps * fixedPercent - step;\n    var start = points[step];\n    var end = step === steps ? start : points[step + 1];\n    return arr2rgb([\n        getValue(start, end, left, 0),\n        getValue(start, end, left, 1),\n        getValue(start, end, left, 2),\n    ]);\n};\n// 用于给 toRGB 的缓存（使用 memoize 方法替换）\n// const colorCache = {};\nvar iEl;\n/**\n * 将颜色转换到 rgb 的格式\n * @param {color} color 颜色\n * @return 将颜色转换到 '#ffffff' 的格式\n */\nvar toRGB = function (color) {\n    // 如果已经是 rgb的格式\n    if (color[0] === '#' && color.length === 7) {\n        return color;\n    }\n    if (!iEl) {\n        // 防止防止在页头报错\n        iEl = createTmp();\n    }\n    iEl.style.color = color;\n    var rst = document.defaultView.getComputedStyle(iEl, '').getPropertyValue('color');\n    var matches = RGB_REG.exec(rst);\n    var cArray = matches[1].split(/\\s*,\\s*/).map(function (s) { return Number(s); });\n    rst = arr2rgb(cArray);\n    return rst;\n};\n/**\n * 获取渐变函数\n * @param colors 多个颜色\n * @return 颜色值\n */\nvar gradient = function (colors) {\n    var colorArray = isString(colors) ? colors.split('-') : colors;\n    var points = map(colorArray, function (color) {\n        return rgb2arr(color.indexOf('#') === -1 ? toRGB(color) : color);\n    });\n    // 返回一个函数\n    return function (percent) {\n        return calColor(points, percent);\n    };\n};\nvar toCSSGradient = function (gradientColor) {\n    if (isGradientColor(gradientColor)) {\n        var cssColor_1;\n        var steps = void 0;\n        if (gradientColor[0] === 'l') {\n            // 线性渐变\n            var arr = regexLG.exec(gradientColor);\n            var angle = +arr[1] + 90; // css 和 g 的渐变起始角度不同\n            steps = arr[2];\n            cssColor_1 = \"linear-gradient(\" + angle + \"deg, \";\n        }\n        else if (gradientColor[0] === 'r') {\n            // 径向渐变\n            cssColor_1 = 'radial-gradient(';\n            var arr = regexRG.exec(gradientColor);\n            steps = arr[4];\n        }\n        var colorStops_1 = steps.match(regexColorStop);\n        each(colorStops_1, function (item, index) {\n            var itemArr = item.split(':');\n            cssColor_1 += itemArr[1] + \" \" + itemArr[0] * 100 + \"%\";\n            if (index !== (colorStops_1.length - 1)) {\n                cssColor_1 += ', ';\n            }\n        });\n        cssColor_1 += ')';\n        return cssColor_1;\n    }\n    return gradientColor;\n};\nexport default {\n    rgb2arr: rgb2arr,\n    gradient: gradient,\n    toRGB: memoize(toRGB),\n    toCSSGradient: toCSSGradient,\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}