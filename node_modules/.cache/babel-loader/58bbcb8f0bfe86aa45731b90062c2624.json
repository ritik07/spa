{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport GridBase from './base';\nvar Line = /** @class */function (_super) {\n  __extends(Line, _super);\n  function Line() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Line.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      type: 'line'\n    });\n  };\n  Line.prototype.getGridPath = function (points) {\n    var path = [];\n    each(points, function (point, index) {\n      if (index === 0) {\n        path.push(['M', point.x, point.y]);\n      } else {\n        path.push(['L', point.x, point.y]);\n      }\n    });\n    return path;\n  };\n  return Line;\n}(GridBase);\nexport default Line;","map":{"version":3,"sources":["../../src/grid/line.ts"],"names":[],"mappings":";AAAA,SAAS,IAAI,QAAQ,YAAY;AAEjC,OAAO,QAAQ,MAAM,QAAQ;AAE7B,IAAA,IAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmB,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;EAAnB,SAAA,IAAA,GAAA;;EAoBA;EAnBS,IAAA,CAAA,SAAA,CAAA,aAAa,GAApB,YAAA;IACE,IAAM,GAAG,GAAG,MAAA,CAAA,SAAA,CAAM,aAAa,CAAA,IAAA,CAAA,IAAA,CAAE;IACjC,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,GAAG,CAAA,EAAA;MACN,IAAI,EAAE;IAAM,CAAA,CAAA;EAEhB,CAAC;EAES,IAAA,CAAA,SAAA,CAAA,WAAW,GAArB,UAAsB,MAAe,EAAA;IACnC,IAAM,IAAI,GAAG,EAAE;IACf,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK,EAAE,KAAK,EAAA;MACxB,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;OACnC,MAAM;QACL,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;MACnC;IACH,CAAC,CAAC;IACF,OAAO,IAAI;EACb,CAAC;EACH,OAAA,IAAC;AAAD,CAAC,CApBkB,QAAQ,CAAA;AAsB3B,eAAe,IAAI","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport GridBase from './base';\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    function Line() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Line.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { type: 'line' });\n    };\n    Line.prototype.getGridPath = function (points) {\n        var path = [];\n        each(points, function (point, index) {\n            if (index === 0) {\n                path.push(['M', point.x, point.y]);\n            }\n            else {\n                path.push(['L', point.x, point.y]);\n            }\n        });\n        return path;\n    };\n    return Line;\n}(GridBase));\nexport default Line;\n//# sourceMappingURL=line.js.map"]},"metadata":{},"sourceType":"module"}