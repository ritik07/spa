{"ast":null,"code":"import { Quad as QuadUtil, Cubic as CubicUtil, Arc as EllipseArcUtil } from '@antv/g-math';\nimport { path2Segments } from '@antv/path-util';\nimport { isNumberEqual, max, min } from '@antv/util';\nimport { mergeArrowBBox } from './util';\nfunction getPathBox(segments, lineWidth) {\n  var xArr = [];\n  var yArr = [];\n  var segmentsWithAngle = [];\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    var currentPoint = segment.currentPoint,\n      params = segment.params,\n      prePoint = segment.prePoint;\n    var box = void 0;\n    switch (segment.command) {\n      case 'Q':\n        box = QuadUtil.box(prePoint[0], prePoint[1], params[1], params[2], params[3], params[4]);\n        break;\n      case 'C':\n        box = CubicUtil.box(prePoint[0], prePoint[1], params[1], params[2], params[3], params[4], params[5], params[6]);\n        break;\n      case 'A':\n        var arcParams = segment.arcParams;\n        box = EllipseArcUtil.box(arcParams.cx, arcParams.cy, arcParams.rx, arcParams.ry, arcParams.xRotation, arcParams.startAngle, arcParams.endAngle);\n        break;\n      default:\n        xArr.push(currentPoint[0]);\n        yArr.push(currentPoint[1]);\n        break;\n    }\n    if (box) {\n      segment.box = box;\n      xArr.push(box.x, box.x + box.width);\n      yArr.push(box.y, box.y + box.height);\n    }\n    if (lineWidth && (segment.command === 'L' || segment.command === 'M') && segment.prePoint && segment.nextPoint) {\n      segmentsWithAngle.push(segment);\n    }\n  }\n  // bbox calculation should ignore NaN for path attribute\n  // ref: https://github.com/antvis/g/issues/210\n  // ref: https://github.com/antvis/G2/issues/3109\n  xArr = xArr.filter(function (item) {\n    return !Number.isNaN(item) && item !== Infinity && item !== -Infinity;\n  });\n  yArr = yArr.filter(function (item) {\n    return !Number.isNaN(item) && item !== Infinity && item !== -Infinity;\n  });\n  var minX = min(xArr);\n  var minY = min(yArr);\n  var maxX = max(xArr);\n  var maxY = max(yArr);\n  if (segmentsWithAngle.length === 0) {\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n  for (var i = 0; i < segmentsWithAngle.length; i++) {\n    var segment = segmentsWithAngle[i];\n    var currentPoint = segment.currentPoint;\n    var extra = void 0;\n    if (currentPoint[0] === minX) {\n      extra = getExtraFromSegmentWithAngle(segment, lineWidth);\n      minX = minX - extra.xExtra;\n    } else if (currentPoint[0] === maxX) {\n      extra = getExtraFromSegmentWithAngle(segment, lineWidth);\n      maxX = maxX + extra.xExtra;\n    }\n    if (currentPoint[1] === minY) {\n      extra = getExtraFromSegmentWithAngle(segment, lineWidth);\n      minY = minY - extra.yExtra;\n    } else if (currentPoint[1] === maxY) {\n      extra = getExtraFromSegmentWithAngle(segment, lineWidth);\n      maxY = maxY + extra.yExtra;\n    }\n  }\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getExtraFromSegmentWithAngle(segment, lineWidth) {\n  var prePoint = segment.prePoint,\n    currentPoint = segment.currentPoint,\n    nextPoint = segment.nextPoint;\n  var currentAndPre = Math.pow(currentPoint[0] - prePoint[0], 2) + Math.pow(currentPoint[1] - prePoint[1], 2);\n  var currentAndNext = Math.pow(currentPoint[0] - nextPoint[0], 2) + Math.pow(currentPoint[1] - nextPoint[1], 2);\n  var preAndNext = Math.pow(prePoint[0] - nextPoint[0], 2) + Math.pow(prePoint[1] - nextPoint[1], 2);\n  // 以 currentPoint 为顶点的夹角\n  var currentAngle = Math.acos((currentAndPre + currentAndNext - preAndNext) / (2 * Math.sqrt(currentAndPre) * Math.sqrt(currentAndNext)));\n  // 夹角为空、 0 或 PI 时，不需要计算夹角处的额外宽度\n  // 注意: 由于计算精度问题，夹角为 0 的情况计算出来的角度可能是一个很小的值，还需要判断其与 0 是否近似相等\n  if (!currentAngle || Math.sin(currentAngle) === 0 || isNumberEqual(currentAngle, 0)) {\n    return {\n      xExtra: 0,\n      yExtra: 0\n    };\n  }\n  var xAngle = Math.abs(Math.atan2(nextPoint[1] - currentPoint[1], nextPoint[0] - currentPoint[0]));\n  var yAngle = Math.abs(Math.atan2(nextPoint[0] - currentPoint[0], nextPoint[1] - currentPoint[1]));\n  // 将夹角转为锐角\n  xAngle = xAngle > Math.PI / 2 ? Math.PI - xAngle : xAngle;\n  yAngle = yAngle > Math.PI / 2 ? Math.PI - yAngle : yAngle;\n  // 这里不考虑在水平和垂直方向的投影，直接使用最大差值\n  // 由于上层统一加减了二分之一线宽，这里需要进行弥补\n  var extra = {\n    // 水平方向投影\n    xExtra: Math.cos(currentAngle / 2 - xAngle) * (lineWidth / 2 * (1 / Math.sin(currentAngle / 2))) - lineWidth / 2 || 0,\n    // 垂直方向投影\n    yExtra: Math.cos(yAngle - currentAngle / 2) * (lineWidth / 2 * (1 / Math.sin(currentAngle / 2))) - lineWidth / 2 || 0\n  };\n  return extra;\n}\nexport default function (shape) {\n  var attrs = shape.attr();\n  var path = attrs.path,\n    stroke = attrs.stroke;\n  var lineWidth = stroke ? attrs.lineWidth : 0; // 只有有 stroke 时，lineWidth 才生效\n  var segments = shape.get('segments') || path2Segments(path);\n  var _a = getPathBox(segments, lineWidth),\n    x = _a.x,\n    y = _a.y,\n    width = _a.width,\n    height = _a.height;\n  var bbox = {\n    minX: x,\n    minY: y,\n    maxX: x + width,\n    maxY: y + height\n  };\n  bbox = mergeArrowBBox(shape, bbox);\n  return {\n    x: bbox.minX,\n    y: bbox.minY,\n    width: bbox.maxX - bbox.minX,\n    height: bbox.maxY - bbox.minY\n  };\n}","map":{"version":3,"sources":["../../src/bbox/path.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Quad as QuadUtil, Cubic as CubicUtil, Arc as EllipseArcUtil } from '@antv/g-math';\nimport { path2Segments } from '@antv/path-util';\nimport { isNumberEqual, max, min } from '@antv/util';\nimport { mergeArrowBBox } from './util';\nfunction getPathBox(segments, lineWidth) {\n    var xArr = [];\n    var yArr = [];\n    var segmentsWithAngle = [];\n    for (var i = 0; i < segments.length; i++) {\n        var segment = segments[i];\n        var currentPoint = segment.currentPoint, params = segment.params, prePoint = segment.prePoint;\n        var box = void 0;\n        switch (segment.command) {\n            case 'Q':\n                box = QuadUtil.box(prePoint[0], prePoint[1], params[1], params[2], params[3], params[4]);\n                break;\n            case 'C':\n                box = CubicUtil.box(prePoint[0], prePoint[1], params[1], params[2], params[3], params[4], params[5], params[6]);\n                break;\n            case 'A':\n                var arcParams = segment.arcParams;\n                box = EllipseArcUtil.box(arcParams.cx, arcParams.cy, arcParams.rx, arcParams.ry, arcParams.xRotation, arcParams.startAngle, arcParams.endAngle);\n                break;\n            default:\n                xArr.push(currentPoint[0]);\n                yArr.push(currentPoint[1]);\n                break;\n        }\n        if (box) {\n            segment.box = box;\n            xArr.push(box.x, box.x + box.width);\n            yArr.push(box.y, box.y + box.height);\n        }\n        if (lineWidth && (segment.command === 'L' || segment.command === 'M') && segment.prePoint && segment.nextPoint) {\n            segmentsWithAngle.push(segment);\n        }\n    }\n    // bbox calculation should ignore NaN for path attribute\n    // ref: https://github.com/antvis/g/issues/210\n    // ref: https://github.com/antvis/G2/issues/3109\n    xArr = xArr.filter(function (item) { return !Number.isNaN(item) && item !== Infinity && item !== -Infinity; });\n    yArr = yArr.filter(function (item) { return !Number.isNaN(item) && item !== Infinity && item !== -Infinity; });\n    var minX = min(xArr);\n    var minY = min(yArr);\n    var maxX = max(xArr);\n    var maxY = max(yArr);\n    if (segmentsWithAngle.length === 0) {\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    }\n    for (var i = 0; i < segmentsWithAngle.length; i++) {\n        var segment = segmentsWithAngle[i];\n        var currentPoint = segment.currentPoint;\n        var extra = void 0;\n        if (currentPoint[0] === minX) {\n            extra = getExtraFromSegmentWithAngle(segment, lineWidth);\n            minX = minX - extra.xExtra;\n        }\n        else if (currentPoint[0] === maxX) {\n            extra = getExtraFromSegmentWithAngle(segment, lineWidth);\n            maxX = maxX + extra.xExtra;\n        }\n        if (currentPoint[1] === minY) {\n            extra = getExtraFromSegmentWithAngle(segment, lineWidth);\n            minY = minY - extra.yExtra;\n        }\n        else if (currentPoint[1] === maxY) {\n            extra = getExtraFromSegmentWithAngle(segment, lineWidth);\n            maxY = maxY + extra.yExtra;\n        }\n    }\n    return {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY,\n    };\n}\nfunction getExtraFromSegmentWithAngle(segment, lineWidth) {\n    var prePoint = segment.prePoint, currentPoint = segment.currentPoint, nextPoint = segment.nextPoint;\n    var currentAndPre = Math.pow(currentPoint[0] - prePoint[0], 2) + Math.pow(currentPoint[1] - prePoint[1], 2);\n    var currentAndNext = Math.pow(currentPoint[0] - nextPoint[0], 2) + Math.pow(currentPoint[1] - nextPoint[1], 2);\n    var preAndNext = Math.pow(prePoint[0] - nextPoint[0], 2) + Math.pow(prePoint[1] - nextPoint[1], 2);\n    // 以 currentPoint 为顶点的夹角\n    var currentAngle = Math.acos((currentAndPre + currentAndNext - preAndNext) / (2 * Math.sqrt(currentAndPre) * Math.sqrt(currentAndNext)));\n    // 夹角为空、 0 或 PI 时，不需要计算夹角处的额外宽度\n    // 注意: 由于计算精度问题，夹角为 0 的情况计算出来的角度可能是一个很小的值，还需要判断其与 0 是否近似相等\n    if (!currentAngle || Math.sin(currentAngle) === 0 || isNumberEqual(currentAngle, 0)) {\n        return {\n            xExtra: 0,\n            yExtra: 0,\n        };\n    }\n    var xAngle = Math.abs(Math.atan2(nextPoint[1] - currentPoint[1], nextPoint[0] - currentPoint[0]));\n    var yAngle = Math.abs(Math.atan2(nextPoint[0] - currentPoint[0], nextPoint[1] - currentPoint[1]));\n    // 将夹角转为锐角\n    xAngle = xAngle > Math.PI / 2 ? Math.PI - xAngle : xAngle;\n    yAngle = yAngle > Math.PI / 2 ? Math.PI - yAngle : yAngle;\n    // 这里不考虑在水平和垂直方向的投影，直接使用最大差值\n    // 由于上层统一加减了二分之一线宽，这里需要进行弥补\n    var extra = {\n        // 水平方向投影\n        xExtra: Math.cos(currentAngle / 2 - xAngle) * ((lineWidth / 2) * (1 / Math.sin(currentAngle / 2))) - lineWidth / 2 || 0,\n        // 垂直方向投影\n        yExtra: Math.cos(yAngle - currentAngle / 2) * ((lineWidth / 2) * (1 / Math.sin(currentAngle / 2))) - lineWidth / 2 || 0,\n    };\n    return extra;\n}\nexport default function (shape) {\n    var attrs = shape.attr();\n    var path = attrs.path, stroke = attrs.stroke;\n    var lineWidth = stroke ? attrs.lineWidth : 0; // 只有有 stroke 时，lineWidth 才生效\n    var segments = shape.get('segments') || path2Segments(path);\n    var _a = getPathBox(segments, lineWidth), x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n    var bbox = {\n        minX: x,\n        minY: y,\n        maxX: x + width,\n        maxY: y + height,\n    };\n    bbox = mergeArrowBBox(shape, bbox);\n    return {\n        x: bbox.minX,\n        y: bbox.minY,\n        width: bbox.maxX - bbox.minX,\n        height: bbox.maxY - bbox.minY,\n    };\n}\n//# sourceMappingURL=path.js.map"]},"metadata":{},"sourceType":"module"}