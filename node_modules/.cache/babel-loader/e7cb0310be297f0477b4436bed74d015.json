{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { vec2 } from '@antv/matrix-util';\nimport { each, isFunction, isNil, isNumberEqual, isObject } from '@antv/util';\nimport AxisBase from './base';\nimport * as OverlapUtil from './overlap';\nvar Line = /** @class */function (_super) {\n  __extends(Line, _super);\n  function Line() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Line.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      type: 'line',\n      locationType: 'region',\n      /**\n       * 起始点, x, y\n       * @type {object}\n       */\n      start: null,\n      /**\n       * 结束点, x, y\n       * @type {object}\n       */\n      end: null\n    });\n  };\n  // 获取坐标轴线的 path\n  Line.prototype.getLinePath = function () {\n    var start = this.get('start');\n    var end = this.get('end');\n    var path = [];\n    path.push(['M', start.x, start.y]);\n    path.push(['L', end.x, end.y]);\n    return path;\n  };\n  // 重新计算 layout bbox，考虑到 line 不显示\n  Line.prototype.getInnerLayoutBBox = function () {\n    var start = this.get('start');\n    var end = this.get('end');\n    var bbox = _super.prototype.getInnerLayoutBBox.call(this);\n    var minX = Math.min(start.x, end.x, bbox.x);\n    var minY = Math.min(start.y, end.y, bbox.y);\n    var maxX = Math.max(start.x, end.x, bbox.maxX);\n    var maxY = Math.max(start.y, end.y, bbox.maxY);\n    return {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  };\n  Line.prototype.isVertical = function () {\n    var start = this.get('start');\n    var end = this.get('end');\n    return isNumberEqual(start.x, end.x);\n  };\n  Line.prototype.isHorizontal = function () {\n    var start = this.get('start');\n    var end = this.get('end');\n    return isNumberEqual(start.y, end.y);\n  };\n  Line.prototype.getTickPoint = function (tickValue) {\n    var self = this;\n    var start = self.get('start');\n    var end = self.get('end');\n    var regionX = end.x - start.x;\n    var regionY = end.y - start.y;\n    return {\n      x: start.x + regionX * tickValue,\n      y: start.y + regionY * tickValue\n    };\n  };\n  // 直线坐标轴下任一点的向量方向都相同\n  Line.prototype.getSideVector = function (offset) {\n    var axisVector = this.getAxisVector();\n    var normal = vec2.normalize([0, 0], axisVector);\n    var factor = this.get('verticalFactor');\n    var verticalVector = [normal[1], normal[0] * -1]; // 垂直方向，逆时针方向\n    return vec2.scale([0, 0], verticalVector, offset * factor);\n  };\n  // 获取坐标轴的向量\n  Line.prototype.getAxisVector = function () {\n    var start = this.get('start');\n    var end = this.get('end');\n    return [end.x - start.x, end.y - start.y];\n  };\n  Line.prototype.processOverlap = function (labelGroup) {\n    var _this = this;\n    var isVertical = this.isVertical();\n    var isHorizontal = this.isHorizontal();\n    // 非垂直，或者非水平时不处理遮挡问题\n    if (!isVertical && !isHorizontal) {\n      return;\n    }\n    var labelCfg = this.get('label');\n    var titleCfg = this.get('title');\n    var verticalLimitLength = this.get('verticalLimitLength');\n    var labelOffset = labelCfg.offset;\n    var limitLength = verticalLimitLength;\n    var titleHeight = 0;\n    var titleSpacing = 0;\n    if (titleCfg) {\n      titleHeight = titleCfg.style.fontSize;\n      titleSpacing = titleCfg.spacing;\n    }\n    if (limitLength) {\n      limitLength = limitLength - labelOffset - titleSpacing - titleHeight;\n    }\n    var overlapOrder = this.get('overlapOrder');\n    each(overlapOrder, function (name) {\n      if (labelCfg[name] && _this.canProcessOverlap(name)) {\n        _this.autoProcessOverlap(name, labelCfg[name], labelGroup, limitLength);\n      }\n    });\n    if (titleCfg) {\n      if (isNil(titleCfg.offset)) {\n        // 调整 title 的 offset\n        var bbox = labelGroup.getCanvasBBox();\n        var length_1 = isVertical ? bbox.width : bbox.height;\n        // 如果用户没有设置 offset，则自动计算\n        titleCfg.offset = labelOffset + length_1 + titleSpacing + titleHeight / 2;\n      }\n    }\n  };\n  /**\n   * 是否可以执行某一 overlap\n   * @param name\n   */\n  Line.prototype.canProcessOverlap = function (name) {\n    var labelCfg = this.get('label');\n    // 对 autoRotate，如果配置了旋转角度，直接进行固定角度旋转\n    if (name === 'autoRotate') {\n      return isNil(labelCfg.rotate);\n    }\n    // 默认所有 overlap 都可执行\n    return true;\n  };\n  Line.prototype.autoProcessOverlap = function (name, value, labelGroup, limitLength) {\n    var _this = this;\n    var isVertical = this.isVertical();\n    var hasAdjusted = false;\n    var util = OverlapUtil[name];\n    if (value === true) {\n      var labelCfg = this.get('label');\n      // true 形式的配置：使用 overlap 默认的的处理方法进行处理\n      hasAdjusted = util.getDefault()(isVertical, labelGroup, limitLength);\n    } else if (isFunction(value)) {\n      // 回调函数形式的配置： 用户可以传入回调函数\n      hasAdjusted = value(isVertical, labelGroup, limitLength);\n    } else if (isObject(value)) {\n      // object 形式的配置方式：包括 处理方法 type， 和可选参数配置 cfg\n      var overlapCfg = value;\n      if (util[overlapCfg.type]) {\n        hasAdjusted = util[overlapCfg.type](isVertical, labelGroup, limitLength, overlapCfg.cfg);\n      }\n    } else if (util[value]) {\n      // 字符串类型的配置：按照名称执行 overlap 处理方法\n      hasAdjusted = util[value](isVertical, labelGroup, limitLength);\n    }\n    if (name === 'autoRotate') {\n      // 文本旋转后，文本的对齐方式可能就不合适了\n      if (hasAdjusted) {\n        var labels = labelGroup.getChildren();\n        var verticalFactor_1 = this.get('verticalFactor');\n        each(labels, function (label) {\n          var textAlign = label.attr('textAlign');\n          if (textAlign === 'center') {\n            // 居中的文本需要调整旋转度\n            var newAlign = verticalFactor_1 > 0 ? 'end' : 'start';\n            label.attr('textAlign', newAlign);\n          }\n        });\n      }\n    } else if (name === 'autoHide') {\n      var children = labelGroup.getChildren().slice(0); // 复制数组，删除时不会出错\n      each(children, function (label) {\n        if (!label.get('visible')) {\n          if (_this.get('isRegister')) {\n            // 已经注册过了，则删除\n            _this.unregisterElement(label);\n          }\n          label.remove(); // 防止 label 数量太多，所以统一删除\n        }\n      });\n    }\n  };\n\n  return Line;\n}(AxisBase);\nexport default Line;","map":{"version":3,"sources":["../../src/axis/line.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { vec2 } from '@antv/matrix-util';\nimport { each, isFunction, isNil, isNumberEqual, isObject } from '@antv/util';\nimport AxisBase from './base';\nimport * as OverlapUtil from './overlap';\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    function Line() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Line.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { type: 'line', locationType: 'region', \n            /**\n             * 起始点, x, y\n             * @type {object}\n             */\n            start: null, \n            /**\n             * 结束点, x, y\n             * @type {object}\n             */\n            end: null });\n    };\n    // 获取坐标轴线的 path\n    Line.prototype.getLinePath = function () {\n        var start = this.get('start');\n        var end = this.get('end');\n        var path = [];\n        path.push(['M', start.x, start.y]);\n        path.push(['L', end.x, end.y]);\n        return path;\n    };\n    // 重新计算 layout bbox，考虑到 line 不显示\n    Line.prototype.getInnerLayoutBBox = function () {\n        var start = this.get('start');\n        var end = this.get('end');\n        var bbox = _super.prototype.getInnerLayoutBBox.call(this);\n        var minX = Math.min(start.x, end.x, bbox.x);\n        var minY = Math.min(start.y, end.y, bbox.y);\n        var maxX = Math.max(start.x, end.x, bbox.maxX);\n        var maxY = Math.max(start.y, end.y, bbox.maxY);\n        return {\n            x: minX,\n            y: minY,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    };\n    Line.prototype.isVertical = function () {\n        var start = this.get('start');\n        var end = this.get('end');\n        return isNumberEqual(start.x, end.x);\n    };\n    Line.prototype.isHorizontal = function () {\n        var start = this.get('start');\n        var end = this.get('end');\n        return isNumberEqual(start.y, end.y);\n    };\n    Line.prototype.getTickPoint = function (tickValue) {\n        var self = this;\n        var start = self.get('start');\n        var end = self.get('end');\n        var regionX = end.x - start.x;\n        var regionY = end.y - start.y;\n        return {\n            x: start.x + regionX * tickValue,\n            y: start.y + regionY * tickValue,\n        };\n    };\n    // 直线坐标轴下任一点的向量方向都相同\n    Line.prototype.getSideVector = function (offset) {\n        var axisVector = this.getAxisVector();\n        var normal = vec2.normalize([0, 0], axisVector);\n        var factor = this.get('verticalFactor');\n        var verticalVector = [normal[1], normal[0] * -1]; // 垂直方向，逆时针方向\n        return vec2.scale([0, 0], verticalVector, offset * factor);\n    };\n    // 获取坐标轴的向量\n    Line.prototype.getAxisVector = function () {\n        var start = this.get('start');\n        var end = this.get('end');\n        return [end.x - start.x, end.y - start.y];\n    };\n    Line.prototype.processOverlap = function (labelGroup) {\n        var _this = this;\n        var isVertical = this.isVertical();\n        var isHorizontal = this.isHorizontal();\n        // 非垂直，或者非水平时不处理遮挡问题\n        if (!isVertical && !isHorizontal) {\n            return;\n        }\n        var labelCfg = this.get('label');\n        var titleCfg = this.get('title');\n        var verticalLimitLength = this.get('verticalLimitLength');\n        var labelOffset = labelCfg.offset;\n        var limitLength = verticalLimitLength;\n        var titleHeight = 0;\n        var titleSpacing = 0;\n        if (titleCfg) {\n            titleHeight = titleCfg.style.fontSize;\n            titleSpacing = titleCfg.spacing;\n        }\n        if (limitLength) {\n            limitLength = limitLength - labelOffset - titleSpacing - titleHeight;\n        }\n        var overlapOrder = this.get('overlapOrder');\n        each(overlapOrder, function (name) {\n            if (labelCfg[name] && _this.canProcessOverlap(name)) {\n                _this.autoProcessOverlap(name, labelCfg[name], labelGroup, limitLength);\n            }\n        });\n        if (titleCfg) {\n            if (isNil(titleCfg.offset)) {\n                // 调整 title 的 offset\n                var bbox = labelGroup.getCanvasBBox();\n                var length_1 = isVertical ? bbox.width : bbox.height;\n                // 如果用户没有设置 offset，则自动计算\n                titleCfg.offset = labelOffset + length_1 + titleSpacing + titleHeight / 2;\n            }\n        }\n    };\n    /**\n     * 是否可以执行某一 overlap\n     * @param name\n     */\n    Line.prototype.canProcessOverlap = function (name) {\n        var labelCfg = this.get('label');\n        // 对 autoRotate，如果配置了旋转角度，直接进行固定角度旋转\n        if (name === 'autoRotate') {\n            return isNil(labelCfg.rotate);\n        }\n        // 默认所有 overlap 都可执行\n        return true;\n    };\n    Line.prototype.autoProcessOverlap = function (name, value, labelGroup, limitLength) {\n        var _this = this;\n        var isVertical = this.isVertical();\n        var hasAdjusted = false;\n        var util = OverlapUtil[name];\n        if (value === true) {\n            var labelCfg = this.get('label');\n            // true 形式的配置：使用 overlap 默认的的处理方法进行处理\n            hasAdjusted = util.getDefault()(isVertical, labelGroup, limitLength);\n        }\n        else if (isFunction(value)) {\n            // 回调函数形式的配置： 用户可以传入回调函数\n            hasAdjusted = value(isVertical, labelGroup, limitLength);\n        }\n        else if (isObject(value)) {\n            // object 形式的配置方式：包括 处理方法 type， 和可选参数配置 cfg\n            var overlapCfg = value;\n            if (util[overlapCfg.type]) {\n                hasAdjusted = util[overlapCfg.type](isVertical, labelGroup, limitLength, overlapCfg.cfg);\n            }\n        }\n        else if (util[value]) {\n            // 字符串类型的配置：按照名称执行 overlap 处理方法\n            hasAdjusted = util[value](isVertical, labelGroup, limitLength);\n        }\n        if (name === 'autoRotate') {\n            // 文本旋转后，文本的对齐方式可能就不合适了\n            if (hasAdjusted) {\n                var labels = labelGroup.getChildren();\n                var verticalFactor_1 = this.get('verticalFactor');\n                each(labels, function (label) {\n                    var textAlign = label.attr('textAlign');\n                    if (textAlign === 'center') {\n                        // 居中的文本需要调整旋转度\n                        var newAlign = verticalFactor_1 > 0 ? 'end' : 'start';\n                        label.attr('textAlign', newAlign);\n                    }\n                });\n            }\n        }\n        else if (name === 'autoHide') {\n            var children = labelGroup.getChildren().slice(0); // 复制数组，删除时不会出错\n            each(children, function (label) {\n                if (!label.get('visible')) {\n                    if (_this.get('isRegister')) {\n                        // 已经注册过了，则删除\n                        _this.unregisterElement(label);\n                    }\n                    label.remove(); // 防止 label 数量太多，所以统一删除\n                }\n            });\n        }\n    };\n    return Line;\n}(AxisBase));\nexport default Line;\n//# sourceMappingURL=line.js.map"]},"metadata":{},"sourceType":"module"}