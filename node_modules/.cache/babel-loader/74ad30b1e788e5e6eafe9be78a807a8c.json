{"ast":null,"code":"import { createDom } from './dom';\nexport function setShadow(model, context) {\n  var el = model.cfg.el;\n  var attrs = model.attr();\n  var cfg = {\n    dx: attrs.shadowOffsetX,\n    dy: attrs.shadowOffsetY,\n    blur: attrs.shadowBlur,\n    color: attrs.shadowColor\n  };\n  if (!cfg.dx && !cfg.dy && !cfg.blur && !cfg.color) {\n    el.removeAttribute('filter');\n  } else {\n    var id = context.find('filter', cfg);\n    if (!id) {\n      id = context.addShadow(cfg);\n    }\n    el.setAttribute('filter', \"url(#\" + id + \")\");\n  }\n}\nexport function setTransform(model) {\n  var matrix = model.attr().matrix;\n  if (matrix) {\n    var el = model.cfg.el;\n    var transform = [];\n    for (var i = 0; i < 9; i += 3) {\n      transform.push(matrix[i] + \",\" + matrix[i + 1]);\n    }\n    transform = transform.join(',');\n    if (transform.indexOf('NaN') === -1) {\n      el.setAttribute('transform', \"matrix(\" + transform + \")\");\n    } else {\n      console.warn('invalid matrix:', matrix);\n    }\n  }\n}\nexport function setClip(model, context) {\n  var clip = model.getClip();\n  var el = model.get('el');\n  if (!clip) {\n    el.removeAttribute('clip-path');\n  } else if (clip && !el.hasAttribute('clip-path')) {\n    createDom(clip);\n    clip.createPath(context);\n    var id = context.addClip(clip);\n    el.setAttribute('clip-path', \"url(#\" + id + \")\");\n  }\n}","map":{"version":3,"sources":["../../src/util/svg.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,OAAO;AAEjC,OAAM,SAAU,SAAS,CAAC,KAAK,EAAE,OAAO,EAAA;EACtC,IAAM,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE;EACvB,IAAM,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE;EAC1B,IAAM,GAAG,GAAG;IACV,EAAE,EAAE,KAAK,CAAC,aAAa;IACvB,EAAE,EAAE,KAAK,CAAC,aAAa;IACvB,IAAI,EAAE,KAAK,CAAC,UAAU;IACtB,KAAK,EAAE,KAAK,CAAC;GACd;EACD,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;IACjD,EAAE,CAAC,eAAe,CAAC,QAAQ,CAAC;GAC7B,MAAM;IACL,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;IACpC,IAAI,CAAC,EAAE,EAAE;MACP,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC;IAC5B;IACD,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAA,GAAQ,EAAE,GAAA,GAAG,CAAC;EACzC;AACH;AAEA,OAAM,SAAU,YAAY,CAAC,KAAK,EAAA;EACxB,IAAA,MAAM,GAAK,KAAK,CAAC,IAAI,EAAE,CAAA,MAAjB;EACd,IAAI,MAAM,EAAE;IACV,IAAM,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE;IACvB,IAAI,SAAS,GAAQ,EAAE;IACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;MAC7B,SAAS,CAAC,IAAI,CAAI,MAAM,CAAC,CAAC,CAAC,GAAA,GAAA,GAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAG,CAAC;IAChD;IACD,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;IAC/B,IAAI,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;MACnC,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,SAAA,GAAU,SAAS,GAAA,GAAG,CAAC;KACrD,MAAM;MACL,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC;IACxC;EACF;AACH;AAEA,OAAM,SAAU,OAAO,CAAC,KAAK,EAAE,OAAO,EAAA;EACpC,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,EAAE;EAC5B,IAAM,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;EAC1B,IAAI,CAAC,IAAI,EAAE;IACT,EAAE,CAAC,eAAe,CAAC,WAAW,CAAC;GAChC,MAAM,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;IAChD,SAAS,CAAC,IAAI,CAAC;IACf,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IACxB,IAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;IAChC,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,OAAA,GAAQ,EAAE,GAAA,GAAG,CAAC;EAC5C;AACH","sourceRoot":"","sourcesContent":["import { createDom } from './dom';\nexport function setShadow(model, context) {\n    var el = model.cfg.el;\n    var attrs = model.attr();\n    var cfg = {\n        dx: attrs.shadowOffsetX,\n        dy: attrs.shadowOffsetY,\n        blur: attrs.shadowBlur,\n        color: attrs.shadowColor,\n    };\n    if (!cfg.dx && !cfg.dy && !cfg.blur && !cfg.color) {\n        el.removeAttribute('filter');\n    }\n    else {\n        var id = context.find('filter', cfg);\n        if (!id) {\n            id = context.addShadow(cfg);\n        }\n        el.setAttribute('filter', \"url(#\" + id + \")\");\n    }\n}\nexport function setTransform(model) {\n    var matrix = model.attr().matrix;\n    if (matrix) {\n        var el = model.cfg.el;\n        var transform = [];\n        for (var i = 0; i < 9; i += 3) {\n            transform.push(matrix[i] + \",\" + matrix[i + 1]);\n        }\n        transform = transform.join(',');\n        if (transform.indexOf('NaN') === -1) {\n            el.setAttribute('transform', \"matrix(\" + transform + \")\");\n        }\n        else {\n            console.warn('invalid matrix:', matrix);\n        }\n    }\n}\nexport function setClip(model, context) {\n    var clip = model.getClip();\n    var el = model.get('el');\n    if (!clip) {\n        el.removeAttribute('clip-path');\n    }\n    else if (clip && !el.hasAttribute('clip-path')) {\n        createDom(clip);\n        clip.createPath(context);\n        var id = context.addClip(clip);\n        el.setAttribute('clip-path', \"url(#\" + id + \")\");\n    }\n}\n//# sourceMappingURL=svg.js.map"]},"metadata":{},"sourceType":"module"}