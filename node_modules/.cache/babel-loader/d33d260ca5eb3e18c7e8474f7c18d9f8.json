{"ast":null,"code":"function decasteljau(points, t) {\n  var left = [];\n  var right = [];\n  function recurse(points, t) {\n    if (points.length === 1) {\n      left.push(points[0]);\n      right.push(points[0]);\n    } else {\n      var middlePoints = [];\n      for (var i = 0; i < points.length - 1; i++) {\n        if (i === 0) {\n          left.push(points[0]);\n        }\n        if (i === points.length - 2) {\n          right.push(points[i + 1]);\n        }\n        middlePoints[i] = [(1 - t) * points[i][0] + t * points[i + 1][0], (1 - t) * points[i][1] + t * points[i + 1][1]];\n      }\n      recurse(middlePoints, t);\n    }\n  }\n  if (points.length) {\n    recurse(points, t);\n  }\n  return {\n    left: left,\n    right: right.reverse()\n  };\n}\nfunction splitCurve(start, end, count) {\n  var points = [[start[1], start[2]]];\n  count = count || 2;\n  var segments = [];\n  if (end[0] === 'A') {\n    points.push(end[6]);\n    points.push(end[7]);\n  } else if (end[0] === 'C') {\n    points.push([end[1], end[2]]);\n    points.push([end[3], end[4]]);\n    points.push([end[5], end[6]]);\n  } else if (end[0] === 'S' || end[0] === 'Q') {\n    points.push([end[1], end[2]]);\n    points.push([end[3], end[4]]);\n  } else {\n    points.push([end[1], end[2]]);\n  }\n  var leftSegments = points;\n  var t = 1 / count;\n  for (var i = 0; i < count - 1; i++) {\n    var rt = t / (1 - t * i);\n    var split = decasteljau(leftSegments, rt);\n    segments.push(split.left);\n    leftSegments = split.right;\n  }\n  segments.push(leftSegments);\n  var result = segments.map(function (segment) {\n    var cmd = [];\n    if (segment.length === 4) {\n      cmd.push('C');\n      cmd = cmd.concat(segment[2]);\n    }\n    if (segment.length >= 3) {\n      if (segment.length === 3) {\n        cmd.push('Q');\n      }\n      cmd = cmd.concat(segment[1]);\n    }\n    if (segment.length === 2) {\n      cmd.push('L');\n    }\n    cmd = cmd.concat(segment[segment.length - 1]);\n    return cmd;\n  });\n  return result;\n}\nfunction splitSegment(start, end, count) {\n  if (count === 1) {\n    return [[].concat(start)];\n  }\n  var segments = [];\n  if (end[0] === 'L' || end[0] === 'C' || end[0] === 'Q') {\n    segments = segments.concat(splitCurve(start, end, count));\n  } else {\n    var temp = [].concat(start);\n    if (temp[0] === 'M') {\n      temp[0] = 'L';\n    }\n    for (var i = 0; i <= count - 1; i++) {\n      segments.push(temp);\n    }\n  }\n  return segments;\n}\nexport default function fillPath(source, target) {\n  if (source.length === 1) {\n    return source;\n  }\n  var sourceLen = source.length - 1;\n  var targetLen = target.length - 1;\n  var ratio = sourceLen / targetLen;\n  var segmentsToFill = [];\n  if (source.length === 1 && source[0][0] === 'M') {\n    for (var i = 0; i < targetLen - sourceLen; i++) {\n      source.push(source[0]);\n    }\n    return source;\n  }\n  for (var i = 0; i < targetLen; i++) {\n    var index = Math.floor(ratio * i);\n    segmentsToFill[index] = (segmentsToFill[index] || 0) + 1;\n  }\n  var filled = segmentsToFill.reduce(function (filled, count, i) {\n    if (i === sourceLen) {\n      return filled.concat(source[sourceLen]);\n    }\n    return filled.concat(splitSegment(source[i], source[i + 1], count));\n  }, []);\n  filled.unshift(source[0]);\n  if (target[targetLen] === 'Z' || target[targetLen] === 'z') {\n    filled.push('Z');\n  }\n  return filled;\n}","map":{"version":3,"sources":["../src/fill-path.ts"],"names":[],"mappings":"AAAA,SAAS,WAAW,CAAC,MAAM,EAAE,CAAC,EAAA;EAC5B,IAAM,IAAI,GAAG,EAAE;EACf,IAAM,KAAK,GAAG,EAAE;EAEhB,SAAS,OAAO,CAAC,MAAM,EAAE,CAAC,EAAA;IACxB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;MACvB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;MACpB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KACtB,MAAM;MACL,IAAM,YAAY,GAAG,EAAE;MACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1C,IAAI,CAAC,KAAK,CAAC,EAAE;UACX,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACrB;QACD,IAAI,CAAC,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;UAC3B,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1B;QACD,YAAY,CAAC,CAAC,CAAC,GAAG,CAAE,CAAC,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;MACnH;MACD,OAAO,CAAC,YAAY,EAAE,CAAC,CAAC;IACzB;EACH;EACA,IAAI,MAAM,CAAC,MAAM,EAAE;IACjB,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;EACnB;EACD,OAAO;IAAE,IAAI,EAAA,IAAA;IAAE,KAAK,EAAE,KAAK,CAAC,OAAO;EAAE,CAAE;AACzC;AAEA,SAAS,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAA;EACnC,IAAM,MAAM,GAAG,CAAE,CAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAE,CAAE;EACzC,KAAK,GAAG,KAAK,IAAI,CAAC;EAClB,IAAM,QAAQ,GAAG,EAAE;EACnB,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAClB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GACpB,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACzB,MAAM,CAAC,IAAI,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;IAC/B,MAAM,CAAC,IAAI,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;IAC/B,MAAM,CAAC,IAAI,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;GAChC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC3C,MAAM,CAAC,IAAI,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;IAC/B,MAAM,CAAC,IAAI,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;GAChC,MAAM;IACL,MAAM,CAAC,IAAI,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;EAChC;EAED,IAAI,YAAY,GAAG,MAAM;EACzB,IAAM,CAAC,GAAG,CAAC,GAAG,KAAK;EAEnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IAClC,IAAM,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1B,IAAM,KAAK,GAAG,WAAW,CAAC,YAAY,EAAE,EAAE,CAAC;IAC3C,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,YAAY,GAAG,KAAK,CAAC,KAAK;EAC3B;EACD,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;EAC3B,IAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAC,OAAO,EAAA;IAClC,IAAI,GAAG,GAAG,EAAE;IACZ,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;MACxB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;MACb,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7B;IACD,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;MACvB,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QACxB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;MACd;MACD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7B;IACD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;MACxB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;IACd;IACD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC7C,OAAO,GAAG;EACZ,CAAC,CAAC;EACF,OAAO,MAAM;AACf;AAEA,SAAS,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAA;EACrC,IAAI,KAAK,KAAK,CAAC,EAAE;IACf,OAAO,CAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAE;EAC5B;EACD,IAAI,QAAQ,GAAG,EAAE;EACjB,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACtD,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;GAC1D,MAAM;IACL,IAAM,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;IAC7B,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACnB,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG;IACd;IACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;MACnC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;IACpB;EACF;EACD,OAAO,QAAQ;AACjB;AAEA,eAAc,SAAU,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAA;EAC7C,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;IACvB,OAAO,MAAM;EACd;EACD,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC;EACnC,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC;EACnC,IAAM,KAAK,GAAG,SAAS,GAAG,SAAS;EACnC,IAAM,cAAc,GAAG,EAAE;EACzB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;MAC9C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACvB;IACD,OAAO,MAAM;EACd;EACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;IACnC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;EACzD;EACD,IAAM,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,KAAK,EAAE,CAAC,EAAA;IACpD,IAAI,CAAC,KAAK,SAAS,EAAE;MACnB,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACxC;IACD,OAAO,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;EACrE,CAAC,EAAoC,EAAE,CAAC;EACxC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,EAAE;IAC1D,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;EACjB;EACD,OAAO,MAAM;AACf","sourceRoot":"","sourcesContent":["function decasteljau(points, t) {\n    var left = [];\n    var right = [];\n    function recurse(points, t) {\n        if (points.length === 1) {\n            left.push(points[0]);\n            right.push(points[0]);\n        }\n        else {\n            var middlePoints = [];\n            for (var i = 0; i < points.length - 1; i++) {\n                if (i === 0) {\n                    left.push(points[0]);\n                }\n                if (i === points.length - 2) {\n                    right.push(points[i + 1]);\n                }\n                middlePoints[i] = [(1 - t) * points[i][0] + t * points[i + 1][0], (1 - t) * points[i][1] + t * points[i + 1][1]];\n            }\n            recurse(middlePoints, t);\n        }\n    }\n    if (points.length) {\n        recurse(points, t);\n    }\n    return { left: left, right: right.reverse() };\n}\nfunction splitCurve(start, end, count) {\n    var points = [[start[1], start[2]]];\n    count = count || 2;\n    var segments = [];\n    if (end[0] === 'A') {\n        points.push(end[6]);\n        points.push(end[7]);\n    }\n    else if (end[0] === 'C') {\n        points.push([end[1], end[2]]);\n        points.push([end[3], end[4]]);\n        points.push([end[5], end[6]]);\n    }\n    else if (end[0] === 'S' || end[0] === 'Q') {\n        points.push([end[1], end[2]]);\n        points.push([end[3], end[4]]);\n    }\n    else {\n        points.push([end[1], end[2]]);\n    }\n    var leftSegments = points;\n    var t = 1 / count;\n    for (var i = 0; i < count - 1; i++) {\n        var rt = t / (1 - t * i);\n        var split = decasteljau(leftSegments, rt);\n        segments.push(split.left);\n        leftSegments = split.right;\n    }\n    segments.push(leftSegments);\n    var result = segments.map(function (segment) {\n        var cmd = [];\n        if (segment.length === 4) {\n            cmd.push('C');\n            cmd = cmd.concat(segment[2]);\n        }\n        if (segment.length >= 3) {\n            if (segment.length === 3) {\n                cmd.push('Q');\n            }\n            cmd = cmd.concat(segment[1]);\n        }\n        if (segment.length === 2) {\n            cmd.push('L');\n        }\n        cmd = cmd.concat(segment[segment.length - 1]);\n        return cmd;\n    });\n    return result;\n}\nfunction splitSegment(start, end, count) {\n    if (count === 1) {\n        return [[].concat(start)];\n    }\n    var segments = [];\n    if (end[0] === 'L' || end[0] === 'C' || end[0] === 'Q') {\n        segments = segments.concat(splitCurve(start, end, count));\n    }\n    else {\n        var temp = [].concat(start);\n        if (temp[0] === 'M') {\n            temp[0] = 'L';\n        }\n        for (var i = 0; i <= count - 1; i++) {\n            segments.push(temp);\n        }\n    }\n    return segments;\n}\nexport default function fillPath(source, target) {\n    if (source.length === 1) {\n        return source;\n    }\n    var sourceLen = source.length - 1;\n    var targetLen = target.length - 1;\n    var ratio = sourceLen / targetLen;\n    var segmentsToFill = [];\n    if (source.length === 1 && source[0][0] === 'M') {\n        for (var i = 0; i < targetLen - sourceLen; i++) {\n            source.push(source[0]);\n        }\n        return source;\n    }\n    for (var i = 0; i < targetLen; i++) {\n        var index = Math.floor(ratio * i);\n        segmentsToFill[index] = (segmentsToFill[index] || 0) + 1;\n    }\n    var filled = segmentsToFill.reduce(function (filled, count, i) {\n        if (i === sourceLen) {\n            return filled.concat(source[sourceLen]);\n        }\n        return filled.concat(splitSegment(source[i], source[i + 1], count));\n    }, []);\n    filled.unshift(source[0]);\n    if (target[targetLen] === 'Z' || target[targetLen] === 'z') {\n        filled.push('Z');\n    }\n    return filled;\n}\n//# sourceMappingURL=fill-path.js.map"]},"metadata":{},"sourceType":"module"}