{"ast":null,"code":"import { distance, piMod } from './util';\nimport ellipse from './ellipse';\n// 偏导数 x\nfunction derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {\n  return -1 * rx * Math.cos(xRotation) * Math.sin(angle) - ry * Math.sin(xRotation) * Math.cos(angle);\n}\n// 偏导数 y\nfunction derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {\n  return -1 * rx * Math.sin(xRotation) * Math.sin(angle) + ry * Math.cos(xRotation) * Math.cos(angle);\n}\n// x 的极值\nfunction xExtrema(rx, ry, xRotation) {\n  return Math.atan(-ry / rx * Math.tan(xRotation));\n}\n// y 的极值\nfunction yExtrema(rx, ry, xRotation) {\n  return Math.atan(ry / (rx * Math.tan(xRotation)));\n}\n// 根据角度求 x 坐标\nfunction xAt(cx, cy, rx, ry, xRotation, angle) {\n  return rx * Math.cos(xRotation) * Math.cos(angle) - ry * Math.sin(xRotation) * Math.sin(angle) + cx;\n}\n// 根据角度求 y 坐标\nfunction yAt(cx, cy, rx, ry, xRotation, angle) {\n  return rx * Math.sin(xRotation) * Math.cos(angle) + ry * Math.cos(xRotation) * Math.sin(angle) + cy;\n}\n// 获取点在椭圆上的角度\nfunction getAngle(rx, ry, x0, y0) {\n  var angle = Math.atan2(y0 * rx, x0 * ry);\n  // 转换到 0 - 2PI 内\n  return (angle + Math.PI * 2) % (Math.PI * 2);\n}\n// 根据角度获取，x,y\nfunction getPoint(rx, ry, angle) {\n  return {\n    x: rx * Math.cos(angle),\n    y: ry * Math.sin(angle)\n  };\n}\n// 旋转\nfunction rotate(x, y, angle) {\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  return [x * cos - y * sin, x * sin + y * cos];\n}\nexport default {\n  /**\n   * 计算包围盒\n   * @param {number} cx         圆心 x\n   * @param {number} cy         圆心 y\n   * @param {number} rx         x 轴方向的半径\n   * @param {number} ry         y 轴方向的半径\n   * @param {number} xRotation  旋转角度\n   * @param {number} startAngle 起始角度\n   * @param {number} endAngle   结束角度\n   * @return {object} 包围盒对象\n   */\n  box: function (cx, cy, rx, ry, xRotation, startAngle, endAngle) {\n    var xDim = xExtrema(rx, ry, xRotation);\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var xs = [startAngle, endAngle];\n    for (var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {\n      var xAngle = xDim + i;\n      if (startAngle < endAngle) {\n        if (startAngle < xAngle && xAngle < endAngle) {\n          xs.push(xAngle);\n        }\n      } else {\n        if (endAngle < xAngle && xAngle < startAngle) {\n          xs.push(xAngle);\n        }\n      }\n    }\n    for (var i = 0; i < xs.length; i++) {\n      var x = xAt(cx, cy, rx, ry, xRotation, xs[i]);\n      if (x < minX) {\n        minX = x;\n      }\n      if (x > maxX) {\n        maxX = x;\n      }\n    }\n    var yDim = yExtrema(rx, ry, xRotation);\n    var minY = Infinity;\n    var maxY = -Infinity;\n    var ys = [startAngle, endAngle];\n    for (var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {\n      var yAngle = yDim + i;\n      if (startAngle < endAngle) {\n        if (startAngle < yAngle && yAngle < endAngle) {\n          ys.push(yAngle);\n        }\n      } else {\n        if (endAngle < yAngle && yAngle < startAngle) {\n          ys.push(yAngle);\n        }\n      }\n    }\n    for (var i = 0; i < ys.length; i++) {\n      var y = yAt(cx, cy, rx, ry, xRotation, ys[i]);\n      if (y < minY) {\n        minY = y;\n      }\n      if (y > maxY) {\n        maxY = y;\n      }\n    }\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  },\n  /**\n   * 获取圆弧的长度，计算圆弧长度时不考虑旋转角度，\n   * 仅跟 rx, ry, startAngle, endAngle 相关\n   * @param {number} cx         圆心 x\n   * @param {number} cy         圆心 y\n   * @param {number} rx         x 轴方向的半径\n   * @param {number} ry         y 轴方向的半径\n   * @param {number} xRotation  旋转角度\n   * @param {number} startAngle 起始角度\n   * @param {number} endAngle   结束角度\n   */\n  length: function (cx, cy, rx, ry, xRotation, startAngle, endAngle) {},\n  /**\n   * 获取指定点到圆弧的最近距离的点\n   * @param {number} cx         圆心 x\n   * @param {number} cy         圆心 y\n   * @param {number} rx         x 轴方向的半径\n   * @param {number} ry         y 轴方向的半径\n   * @param {number} xRotation  旋转角度\n   * @param {number} startAngle 起始角度\n   * @param {number} endAngle   结束角度\n   * @param {number} x0         指定点的 x\n   * @param {number} y0         指定点的 y\n   * @return {object} 到指定点最近距离的点\n   */\n  nearestPoint: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {\n    // 将最近距离问题转换成到椭圆中心 0,0 没有旋转的椭圆问题\n    var relativeVector = rotate(x0 - cx, y0 - cy, -xRotation);\n    var x1 = relativeVector[0],\n      y1 = relativeVector[1];\n    // 计算点到椭圆的最近的点\n    var relativePoint = ellipse.nearestPoint(0, 0, rx, ry, x1, y1);\n    // 获取点在椭圆上的角度\n    var angle = getAngle(rx, ry, relativePoint.x, relativePoint.y);\n    // 点没有在圆弧上\n    if (angle < startAngle) {\n      // 小于起始圆弧\n      relativePoint = getPoint(rx, ry, startAngle);\n    } else if (angle > endAngle) {\n      // 大于结束圆弧\n      relativePoint = getPoint(rx, ry, endAngle);\n    }\n    // 旋转到 xRotation 的角度\n    var vector = rotate(relativePoint.x, relativePoint.y, xRotation);\n    return {\n      x: vector[0] + cx,\n      y: vector[1] + cy\n    };\n  },\n  pointDistance: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {\n    var nearestPoint = this.nearestPoint(cx, cy, rx, ry, x0, y0);\n    return distance(nearestPoint.x, nearestPoint.y, x0, y0);\n  },\n  pointAt: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {\n    var angle = (endAngle - startAngle) * t + startAngle;\n    return {\n      x: xAt(cx, cy, rx, ry, xRotation, angle),\n      y: yAt(cx, cy, rx, ry, xRotation, angle)\n    };\n  },\n  tangentAngle: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {\n    var angle = (endAngle - startAngle) * t + startAngle;\n    var dx = derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);\n    var dy = derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);\n    return piMod(Math.atan2(dy, dx));\n  }\n};","map":{"version":3,"sources":["../src/arc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { distance, piMod } from './util';\nimport ellipse from './ellipse';\n// 偏导数 x\nfunction derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {\n    return -1 * rx * Math.cos(xRotation) * Math.sin(angle) - ry * Math.sin(xRotation) * Math.cos(angle);\n}\n// 偏导数 y\nfunction derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {\n    return -1 * rx * Math.sin(xRotation) * Math.sin(angle) + ry * Math.cos(xRotation) * Math.cos(angle);\n}\n// x 的极值\nfunction xExtrema(rx, ry, xRotation) {\n    return Math.atan((-ry / rx) * Math.tan(xRotation));\n}\n// y 的极值\nfunction yExtrema(rx, ry, xRotation) {\n    return Math.atan(ry / (rx * Math.tan(xRotation)));\n}\n// 根据角度求 x 坐标\nfunction xAt(cx, cy, rx, ry, xRotation, angle) {\n    return rx * Math.cos(xRotation) * Math.cos(angle) - ry * Math.sin(xRotation) * Math.sin(angle) + cx;\n}\n// 根据角度求 y 坐标\nfunction yAt(cx, cy, rx, ry, xRotation, angle) {\n    return rx * Math.sin(xRotation) * Math.cos(angle) + ry * Math.cos(xRotation) * Math.sin(angle) + cy;\n}\n// 获取点在椭圆上的角度\nfunction getAngle(rx, ry, x0, y0) {\n    var angle = Math.atan2(y0 * rx, x0 * ry);\n    // 转换到 0 - 2PI 内\n    return (angle + Math.PI * 2) % (Math.PI * 2);\n}\n// 根据角度获取，x,y\nfunction getPoint(rx, ry, angle) {\n    return {\n        x: rx * Math.cos(angle),\n        y: ry * Math.sin(angle),\n    };\n}\n// 旋转\nfunction rotate(x, y, angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    return [x * cos - y * sin, x * sin + y * cos];\n}\nexport default {\n    /**\n     * 计算包围盒\n     * @param {number} cx         圆心 x\n     * @param {number} cy         圆心 y\n     * @param {number} rx         x 轴方向的半径\n     * @param {number} ry         y 轴方向的半径\n     * @param {number} xRotation  旋转角度\n     * @param {number} startAngle 起始角度\n     * @param {number} endAngle   结束角度\n     * @return {object} 包围盒对象\n     */\n    box: function (cx, cy, rx, ry, xRotation, startAngle, endAngle) {\n        var xDim = xExtrema(rx, ry, xRotation);\n        var minX = Infinity;\n        var maxX = -Infinity;\n        var xs = [startAngle, endAngle];\n        for (var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {\n            var xAngle = xDim + i;\n            if (startAngle < endAngle) {\n                if (startAngle < xAngle && xAngle < endAngle) {\n                    xs.push(xAngle);\n                }\n            }\n            else {\n                if (endAngle < xAngle && xAngle < startAngle) {\n                    xs.push(xAngle);\n                }\n            }\n        }\n        for (var i = 0; i < xs.length; i++) {\n            var x = xAt(cx, cy, rx, ry, xRotation, xs[i]);\n            if (x < minX) {\n                minX = x;\n            }\n            if (x > maxX) {\n                maxX = x;\n            }\n        }\n        var yDim = yExtrema(rx, ry, xRotation);\n        var minY = Infinity;\n        var maxY = -Infinity;\n        var ys = [startAngle, endAngle];\n        for (var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {\n            var yAngle = yDim + i;\n            if (startAngle < endAngle) {\n                if (startAngle < yAngle && yAngle < endAngle) {\n                    ys.push(yAngle);\n                }\n            }\n            else {\n                if (endAngle < yAngle && yAngle < startAngle) {\n                    ys.push(yAngle);\n                }\n            }\n        }\n        for (var i = 0; i < ys.length; i++) {\n            var y = yAt(cx, cy, rx, ry, xRotation, ys[i]);\n            if (y < minY) {\n                minY = y;\n            }\n            if (y > maxY) {\n                maxY = y;\n            }\n        }\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    },\n    /**\n     * 获取圆弧的长度，计算圆弧长度时不考虑旋转角度，\n     * 仅跟 rx, ry, startAngle, endAngle 相关\n     * @param {number} cx         圆心 x\n     * @param {number} cy         圆心 y\n     * @param {number} rx         x 轴方向的半径\n     * @param {number} ry         y 轴方向的半径\n     * @param {number} xRotation  旋转角度\n     * @param {number} startAngle 起始角度\n     * @param {number} endAngle   结束角度\n     */\n    length: function (cx, cy, rx, ry, xRotation, startAngle, endAngle) { },\n    /**\n     * 获取指定点到圆弧的最近距离的点\n     * @param {number} cx         圆心 x\n     * @param {number} cy         圆心 y\n     * @param {number} rx         x 轴方向的半径\n     * @param {number} ry         y 轴方向的半径\n     * @param {number} xRotation  旋转角度\n     * @param {number} startAngle 起始角度\n     * @param {number} endAngle   结束角度\n     * @param {number} x0         指定点的 x\n     * @param {number} y0         指定点的 y\n     * @return {object} 到指定点最近距离的点\n     */\n    nearestPoint: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {\n        // 将最近距离问题转换成到椭圆中心 0,0 没有旋转的椭圆问题\n        var relativeVector = rotate(x0 - cx, y0 - cy, -xRotation);\n        var x1 = relativeVector[0], y1 = relativeVector[1];\n        // 计算点到椭圆的最近的点\n        var relativePoint = ellipse.nearestPoint(0, 0, rx, ry, x1, y1);\n        // 获取点在椭圆上的角度\n        var angle = getAngle(rx, ry, relativePoint.x, relativePoint.y);\n        // 点没有在圆弧上\n        if (angle < startAngle) {\n            // 小于起始圆弧\n            relativePoint = getPoint(rx, ry, startAngle);\n        }\n        else if (angle > endAngle) {\n            // 大于结束圆弧\n            relativePoint = getPoint(rx, ry, endAngle);\n        }\n        // 旋转到 xRotation 的角度\n        var vector = rotate(relativePoint.x, relativePoint.y, xRotation);\n        return {\n            x: vector[0] + cx,\n            y: vector[1] + cy,\n        };\n    },\n    pointDistance: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {\n        var nearestPoint = this.nearestPoint(cx, cy, rx, ry, x0, y0);\n        return distance(nearestPoint.x, nearestPoint.y, x0, y0);\n    },\n    pointAt: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {\n        var angle = (endAngle - startAngle) * t + startAngle;\n        return {\n            x: xAt(cx, cy, rx, ry, xRotation, angle),\n            y: yAt(cx, cy, rx, ry, xRotation, angle),\n        };\n    },\n    tangentAngle: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {\n        var angle = (endAngle - startAngle) * t + startAngle;\n        var dx = derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);\n        var dy = derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);\n        return piMod(Math.atan2(dy, dx));\n    },\n};\n//# sourceMappingURL=arc.js.map"]},"metadata":{},"sourceType":"module"}