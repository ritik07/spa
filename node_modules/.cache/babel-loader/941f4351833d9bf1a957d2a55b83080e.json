{"ast":null,"code":"import { flatten, isString, valuesOfKey, isNil } from '@antv/util';\nimport { getXDimensionLength } from '../../util/coordinate';\n// 已经排序后的数据查找距离最小的\nfunction findMinDistance(arr, scale) {\n  var count = arr.length;\n  var sourceArr = arr;\n  if (isString(sourceArr[0])) {\n    // 日期类型的 values 经常上文本类型，所以需要转换一下\n    sourceArr = arr.map(function (v) {\n      return scale.translate(v);\n    });\n  }\n  var distance = sourceArr[1] - sourceArr[0];\n  for (var i = 2; i < count; i++) {\n    var tmp = sourceArr[i] - sourceArr[i - 1];\n    if (distance > tmp) {\n      distance = tmp;\n    }\n  }\n  return distance;\n}\nfunction getDodgeCount(dataArray, dodgeBy) {\n  if (dodgeBy) {\n    var mergeData = flatten(dataArray);\n    var values = valuesOfKey(mergeData, dodgeBy);\n    return values.length;\n  }\n  return dataArray.length;\n}\n/** @ignore */\nexport function getDefaultSize(geometry) {\n  var theme = geometry.theme;\n  var coordinate = geometry.coordinate;\n  var xScale = geometry.getXScale();\n  var xValues = xScale.values;\n  var dataArray = geometry.beforeMappingData;\n  var count = xValues.length;\n  var xDimensionLength = getXDimensionLength(geometry.coordinate);\n  // 获取柱宽相关配置项\n  var intervalPadding = geometry.intervalPadding,\n    dodgePadding = geometry.dodgePadding;\n  // 兼容theme配置\n  var maxColumnWidth = geometry.maxColumnWidth || theme.maxColumnWidth;\n  var minColumnWidth = geometry.minColumnWidth || theme.minColumnWidth;\n  var columnWidthRatio = geometry.columnWidthRatio || theme.columnWidthRatio;\n  var multiplePieWidthRatio = geometry.multiplePieWidthRatio || theme.multiplePieWidthRatio;\n  var roseWidthRatio = geometry.roseWidthRatio || theme.roseWidthRatio;\n  // 线性情况下count值\n  if (xScale.isLinear && xValues.length > 1) {\n    // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count\n    xValues.sort();\n    var interval = findMinDistance(xValues, xScale);\n    count = (xScale.max - xScale.min) / interval;\n    if (xValues.length > count) {\n      count = xValues.length;\n    }\n  }\n  var range = xScale.range;\n  var normalizedSize = 1 / count;\n  var wr = 1;\n  if (coordinate.isPolar) {\n    // 极坐标场景\n    if (coordinate.isTransposed && count > 1) {\n      // 极坐标下多层环图\n      wr = multiplePieWidthRatio;\n    } else {\n      wr = roseWidthRatio;\n    }\n  } else {\n    // 非极坐标场景\n    if (xScale.isLinear) {\n      normalizedSize *= range[1] - range[0];\n    }\n    wr = columnWidthRatio;\n  }\n  // 基础柱状图\n  if (!isNil(intervalPadding) && intervalPadding >= 0) {\n    // 配置组间距情况\n    var normalizedIntervalPadding = intervalPadding / xDimensionLength;\n    normalizedSize = (1 - (count - 1) * normalizedIntervalPadding) / count;\n  } else {\n    // 默认情况\n    normalizedSize *= wr;\n  }\n  // 分组柱状图\n  if (geometry.getAdjust('dodge')) {\n    var dodgeAdjust = geometry.getAdjust('dodge');\n    var dodgeBy = dodgeAdjust.dodgeBy;\n    var dodgeCount = getDodgeCount(dataArray, dodgeBy);\n    if (!isNil(dodgePadding) && dodgePadding >= 0) {\n      // 仅配置组内间距情况\n      var normalizedDodgePadding = dodgePadding / xDimensionLength;\n      normalizedSize = (normalizedSize - normalizedDodgePadding * (dodgeCount - 1)) / dodgeCount;\n    } else if (!isNil(intervalPadding) && intervalPadding >= 0) {\n      // 设置组间距但未设置组内间距情况，避免组间距过小导致图形重叠，需乘以wr\n      normalizedSize *= wr;\n      normalizedSize = normalizedSize / dodgeCount;\n    } else {\n      // 组间距和组内间距均未配置\n      normalizedSize = normalizedSize / dodgeCount;\n    }\n    normalizedSize = normalizedSize >= 0 ? normalizedSize : 0;\n  }\n  // 最大和最小限制\n  if (!isNil(maxColumnWidth) && maxColumnWidth >= 0) {\n    var normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\n    if (normalizedSize > normalizedMaxColumnWidth) {\n      normalizedSize = normalizedMaxColumnWidth;\n    }\n  }\n  // \bminColumnWidth可能设置为0\n  if (!isNil(minColumnWidth) && minColumnWidth >= 0) {\n    var normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\n    if (normalizedSize < normalizedMinColumnWidth) {\n      normalizedSize = normalizedMinColumnWidth;\n    }\n  }\n  return normalizedSize;\n}","map":{"version":3,"sources":["../../../src/geometry/util/shape-size.ts"],"names":[],"mappings":"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","sourcesContent":["import { flatten, isString, valuesOfKey, isNil } from '@antv/util';\nimport { getXDimensionLength } from '../../util/coordinate';\n\n// 已经排序后的数据查找距离最小的\nfunction findMinDistance(arr, scale) {\n  const count = arr.length;\n  let sourceArr = arr;\n  if (isString(sourceArr[0])) {\n    // 日期类型的 values 经常上文本类型，所以需要转换一下\n    sourceArr = arr.map((v: string) => {\n      return scale.translate(v);\n    });\n  }\n  let distance = sourceArr[1] - sourceArr[0];\n  for (let i = 2; i < count; i++) {\n    const tmp = sourceArr[i] - sourceArr[i - 1];\n    if (distance > tmp) {\n      distance = tmp;\n    }\n  }\n  return distance;\n}\n\nfunction getDodgeCount(dataArray, dodgeBy) {\n  if (dodgeBy) {\n    const mergeData = flatten(dataArray);\n    const values = valuesOfKey(mergeData, dodgeBy);\n    return values.length;\n  }\n\n  return dataArray.length;\n}\n\n/** @ignore */\nexport function getDefaultSize(geometry): number {\n  const theme = geometry.theme;\n  const coordinate = geometry.coordinate;\n  const xScale = geometry.getXScale();\n  const xValues = xScale.values;\n  const dataArray = geometry.beforeMappingData;\n  let count: number = xValues.length;\n  const xDimensionLength = getXDimensionLength(geometry.coordinate);\n  // 获取柱宽相关配置项\n  const { intervalPadding, dodgePadding } = geometry;\n  // 兼容theme配置\n  const maxColumnWidth = geometry.maxColumnWidth || theme.maxColumnWidth;\n  const minColumnWidth = geometry.minColumnWidth || theme.minColumnWidth;\n  const columnWidthRatio = geometry.columnWidthRatio || theme.columnWidthRatio;\n  const multiplePieWidthRatio = geometry.multiplePieWidthRatio || theme.multiplePieWidthRatio;\n  const roseWidthRatio = geometry.roseWidthRatio || theme.roseWidthRatio;\n\n  // 线性情况下count值\n  if (xScale.isLinear && xValues.length > 1) {\n    // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count\n    xValues.sort();\n    const interval = findMinDistance(xValues, xScale);\n    count = (xScale.max - xScale.min) / interval;\n    if (xValues.length > count) {\n      count = xValues.length;\n    }\n  }\n\n  const range = xScale.range;\n  let normalizedSize = 1 / count;\n  let wr = 1;\n  if (coordinate.isPolar) {\n    // 极坐标场景\n    if (coordinate.isTransposed && count > 1) {\n      // 极坐标下多层环图\n      wr = multiplePieWidthRatio;\n    } else {\n      wr = roseWidthRatio;\n    }\n  } else {\n    // 非极坐标场景\n    if (xScale.isLinear) {\n      normalizedSize *= range[1] - range[0];\n    }\n    wr = columnWidthRatio;\n  }\n\n  // 基础柱状图\n  if (!isNil(intervalPadding) && intervalPadding >= 0) {\n    // 配置组间距情况\n    const normalizedIntervalPadding = intervalPadding / xDimensionLength;\n    normalizedSize = (1 - (count - 1) * normalizedIntervalPadding) / count;\n  } else {\n    // 默认情况\n    normalizedSize *= wr;\n  }\n  // 分组柱状图\n  if (geometry.getAdjust('dodge')) {\n    const dodgeAdjust = geometry.getAdjust('dodge');\n    const dodgeBy = dodgeAdjust.dodgeBy;\n    const dodgeCount = getDodgeCount(dataArray, dodgeBy);\n    if (!isNil(dodgePadding) && dodgePadding >= 0) {\n      // 仅配置组内间距情况\n      const normalizedDodgePadding = dodgePadding / xDimensionLength;\n      normalizedSize = (normalizedSize - normalizedDodgePadding * (dodgeCount - 1)) / dodgeCount;\n    } else if (!isNil(intervalPadding) && intervalPadding >= 0) {\n      // 设置组间距但未设置组内间距情况，避免组间距过小导致图形重叠，需乘以wr\n      normalizedSize *= wr;\n      normalizedSize = normalizedSize / dodgeCount;\n    } else {\n      // 组间距和组内间距均未配置\n      normalizedSize = normalizedSize / dodgeCount;\n    }\n    normalizedSize = normalizedSize >= 0 ? normalizedSize : 0;\n  }\n\n  // 最大和最小限制\n  if (!isNil(maxColumnWidth) && maxColumnWidth >= 0) {\n    const normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\n    if (normalizedSize > normalizedMaxColumnWidth) {\n      normalizedSize = normalizedMaxColumnWidth;\n    }\n  }\n\n  // \bminColumnWidth可能设置为0\n  if (!isNil(minColumnWidth) && minColumnWidth >= 0) {\n    const normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\n    if (normalizedSize < normalizedMinColumnWidth) {\n      normalizedSize = normalizedMinColumnWidth;\n    }\n  }\n\n  return normalizedSize;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}