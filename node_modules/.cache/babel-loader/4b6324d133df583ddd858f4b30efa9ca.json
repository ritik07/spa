{"ast":null,"code":"import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\nimport { getBBoxByArray } from './util';\nexport default {\n  /**\n   * 计算多折线的包围盒\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 包围盒\n   */\n  box: function (points) {\n    var xArr = [];\n    var yArr = [];\n    for (var i = 0; i < points.length; i++) {\n      var point = points[i];\n      xArr.push(point[0]);\n      yArr.push(point[1]);\n    }\n    return getBBoxByArray(xArr, yArr);\n  },\n  /**\n   * 计算多折线的长度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 多条边的长度\n   */\n  length: function (points) {\n    return lengthOfSegment(points);\n  },\n  /**\n   * 根据比例获取多折线的点\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多折线的长度上的比例\n   * @return {object} 根据比例值计算出来的点\n   */\n  pointAt: function (points, t) {\n    return pointAtSegments(points, t);\n  },\n  /**\n   * 指定点到多折线的距离\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} x 指定点的 x\n   * @param {number} y 指定点的 y\n   * @return {number} 点到多折线的距离\n   */\n  pointDistance: function (points, x, y) {\n    return distanceAtSegment(points, x, y);\n  },\n  /**\n   * 根据比例获取多折线的切线角度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多折线的长度上的比例\n   * @return {object} 根据比例值计算出来的角度\n   */\n  tangentAngle: function (points, t) {\n    return angleAtSegments(points, t);\n  }\n};","map":{"version":3,"sources":["../src/polyline.ts"],"names":[],"mappings":"AAAA,SAAS,eAAe,EAAE,eAAe,EAAE,iBAAiB,EAAE,eAAe,QAAQ,YAAY;AACjG,SAAS,cAAc,QAAQ,QAAQ;AAGvC,eAAe;EACb;;;;AAIG;EACH,GAAG,EAAH,UAAI,MAAoB,EAAA;IACtB,IAAM,IAAI,GAAG,EAAE;IACf,IAAM,IAAI,GAAG,EAAE;IACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACtC,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;MACvB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MACnB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpB;IACD,OAAO,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;EACnC,CAAC;EACD;;;;AAIG;EACH,MAAM,EAAN,UAAO,MAAoB,EAAA;IACzB,OAAO,eAAe,CAAC,MAAM,CAAC;EAChC,CAAC;EACD;;;;;AAKG;EACH,OAAO,EAAP,UAAQ,MAAoB,EAAE,CAAS,EAAA;IACrC,OAAO,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;EACnC,CAAC;EACD;;;;;;AAMG;EACH,aAAa,EAAb,UAAc,MAAoB,EAAE,CAAS,EAAE,CAAS,EAAA;IACtD,OAAO,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;EACxC,CAAC;EACD;;;;;AAKG;EACH,YAAY,EAAZ,UAAa,MAAoB,EAAE,CAAS,EAAA;IAC1C,OAAO,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;EACnC;CACD","sourceRoot":"","sourcesContent":["import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\nimport { getBBoxByArray } from './util';\nexport default {\n    /**\n     * 计算多折线的包围盒\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @return {object} 包围盒\n     */\n    box: function (points) {\n        var xArr = [];\n        var yArr = [];\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i];\n            xArr.push(point[0]);\n            yArr.push(point[1]);\n        }\n        return getBBoxByArray(xArr, yArr);\n    },\n    /**\n     * 计算多折线的长度\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @return {object} 多条边的长度\n     */\n    length: function (points) {\n        return lengthOfSegment(points);\n    },\n    /**\n     * 根据比例获取多折线的点\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} t 在多折线的长度上的比例\n     * @return {object} 根据比例值计算出来的点\n     */\n    pointAt: function (points, t) {\n        return pointAtSegments(points, t);\n    },\n    /**\n     * 指定点到多折线的距离\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} x 指定点的 x\n     * @param {number} y 指定点的 y\n     * @return {number} 点到多折线的距离\n     */\n    pointDistance: function (points, x, y) {\n        return distanceAtSegment(points, x, y);\n    },\n    /**\n     * 根据比例获取多折线的切线角度\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} t 在多折线的长度上的比例\n     * @return {object} 根据比例值计算出来的角度\n     */\n    tangentAngle: function (points, t) {\n        return angleAtSegments(points, t);\n    },\n};\n//# sourceMappingURL=polyline.js.map"]},"metadata":{},"sourceType":"module"}