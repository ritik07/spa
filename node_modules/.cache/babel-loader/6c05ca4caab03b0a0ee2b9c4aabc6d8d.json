{"ast":null,"code":"/**\n * @fileoverview 图片\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { isString, isNil } from '../util/util';\nfunction isCanvas(dom) {\n  return dom instanceof HTMLElement && isString(dom.nodeName) && dom.nodeName.toUpperCase() === 'CANVAS';\n}\nvar ImageShape = /** @class */function (_super) {\n  __extends(ImageShape, _super);\n  function ImageShape() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ImageShape.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    return __assign(__assign({}, attrs), {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    });\n  };\n  ImageShape.prototype.initAttrs = function (attrs) {\n    this._setImage(attrs.img);\n  };\n  // image 不计算 stroke\n  ImageShape.prototype.isStroke = function () {\n    return false;\n  };\n  // 仅仅使用包围盒检测来进行拾取\n  // 所以不需要复写 isInStrokeOrPath 的方法\n  ImageShape.prototype.isOnlyHitBox = function () {\n    return true;\n  };\n  ImageShape.prototype._afterLoading = function () {\n    if (this.get('toDraw') === true) {\n      var canvas = this.get('canvas');\n      if (canvas) {\n        // 这段应该改成局部渲染\n        canvas.draw();\n      } else {\n        // 这种方式如果发生遮挡会出现问题\n        this.createPath(this.get('context'));\n      }\n    }\n  };\n  ImageShape.prototype._setImage = function (img) {\n    var _this = this;\n    var attrs = this.attrs;\n    if (isString(img)) {\n      var image_1 = new Image();\n      image_1.onload = function () {\n        // 图片未加载完，则已经被销毁\n        if (_this.destroyed) {\n          return false;\n        }\n        // 缓存原始地址，可以做对比，防止重复加载图片\n        // 如果考虑到在加载过程中可能替换 img 属性，则情况更加复杂\n        // this.set('imgSrc', img);\n        // 这里会循环调用 _setImage 方法，但不会再走这个分支\n        _this.attr('img', image_1);\n        _this.set('loading', false);\n        _this._afterLoading();\n        var callback = _this.get('callback');\n        if (callback) {\n          callback.call(_this);\n        }\n      };\n      // 设置跨域\n      image_1.crossOrigin = 'Anonymous';\n      image_1.src = img;\n      // loading 过程中不绘制\n      this.set('loading', true);\n    } else if (img instanceof Image) {\n      // 如果是一个 image 对象，则设置宽高\n      if (!attrs.width) {\n        attrs.width = img.width;\n      }\n      if (!attrs.height) {\n        attrs.height = img.height;\n      }\n    } else if (isCanvas(img)) {\n      // 如果设置了 canvas 对象\n      if (!attrs.width) {\n        attrs.width = Number(img.getAttribute('width'));\n      }\n      if (!attrs.height) {\n        attrs.height, Number(img.getAttribute('height'));\n      }\n    }\n  };\n  ImageShape.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n    // 如果加载的已经是当前图片，则不再处理\n    if (name === 'img') {\n      // 可以加缓冲，&& this.get('imgSrc') !== value\n      this._setImage(value);\n    }\n  };\n  ImageShape.prototype.createPath = function (context) {\n    // 正在加载则不绘制\n    if (this.get('loading')) {\n      this.set('toDraw', true); // 加载完成后绘制\n      this.set('context', context);\n      return;\n    }\n    var attrs = this.attr();\n    var x = attrs.x,\n      y = attrs.y,\n      width = attrs.width,\n      height = attrs.height,\n      sx = attrs.sx,\n      sy = attrs.sy,\n      swidth = attrs.swidth,\n      sheight = attrs.sheight;\n    var img = attrs.img;\n    if (img instanceof Image || isCanvas(img)) {\n      if (!isNil(sx) && !isNil(sy) && !isNil(swidth) && !isNil(sheight)) {\n        context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);\n      } else {\n        context.drawImage(img, x, y, width, height);\n      }\n    }\n  };\n  return ImageShape;\n}(ShapeBase);\nexport default ImageShape;","map":{"version":3,"sources":["../../src/shape/image.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileoverview 图片\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { isString, isNil } from '../util/util';\nfunction isCanvas(dom) {\n    return dom instanceof HTMLElement && isString(dom.nodeName) && dom.nodeName.toUpperCase() === 'CANVAS';\n}\nvar ImageShape = /** @class */ (function (_super) {\n    __extends(ImageShape, _super);\n    function ImageShape() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ImageShape.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        return __assign(__assign({}, attrs), { x: 0, y: 0, width: 0, height: 0 });\n    };\n    ImageShape.prototype.initAttrs = function (attrs) {\n        this._setImage(attrs.img);\n    };\n    // image 不计算 stroke\n    ImageShape.prototype.isStroke = function () {\n        return false;\n    };\n    // 仅仅使用包围盒检测来进行拾取\n    // 所以不需要复写 isInStrokeOrPath 的方法\n    ImageShape.prototype.isOnlyHitBox = function () {\n        return true;\n    };\n    ImageShape.prototype._afterLoading = function () {\n        if (this.get('toDraw') === true) {\n            var canvas = this.get('canvas');\n            if (canvas) {\n                // 这段应该改成局部渲染\n                canvas.draw();\n            }\n            else {\n                // 这种方式如果发生遮挡会出现问题\n                this.createPath(this.get('context'));\n            }\n        }\n    };\n    ImageShape.prototype._setImage = function (img) {\n        var _this = this;\n        var attrs = this.attrs;\n        if (isString(img)) {\n            var image_1 = new Image();\n            image_1.onload = function () {\n                // 图片未加载完，则已经被销毁\n                if (_this.destroyed) {\n                    return false;\n                }\n                // 缓存原始地址，可以做对比，防止重复加载图片\n                // 如果考虑到在加载过程中可能替换 img 属性，则情况更加复杂\n                // this.set('imgSrc', img);\n                // 这里会循环调用 _setImage 方法，但不会再走这个分支\n                _this.attr('img', image_1);\n                _this.set('loading', false);\n                _this._afterLoading();\n                var callback = _this.get('callback');\n                if (callback) {\n                    callback.call(_this);\n                }\n            };\n            // 设置跨域\n            image_1.crossOrigin = 'Anonymous';\n            image_1.src = img;\n            // loading 过程中不绘制\n            this.set('loading', true);\n        }\n        else if (img instanceof Image) {\n            // 如果是一个 image 对象，则设置宽高\n            if (!attrs.width) {\n                attrs.width = img.width;\n            }\n            if (!attrs.height) {\n                attrs.height = img.height;\n            }\n        }\n        else if (isCanvas(img)) {\n            // 如果设置了 canvas 对象\n            if (!attrs.width) {\n                attrs.width = Number(img.getAttribute('width'));\n            }\n            if (!attrs.height) {\n                attrs.height, Number(img.getAttribute('height'));\n            }\n        }\n    };\n    ImageShape.prototype.onAttrChange = function (name, value, originValue) {\n        _super.prototype.onAttrChange.call(this, name, value, originValue);\n        // 如果加载的已经是当前图片，则不再处理\n        if (name === 'img') {\n            // 可以加缓冲，&& this.get('imgSrc') !== value\n            this._setImage(value);\n        }\n    };\n    ImageShape.prototype.createPath = function (context) {\n        // 正在加载则不绘制\n        if (this.get('loading')) {\n            this.set('toDraw', true); // 加载完成后绘制\n            this.set('context', context);\n            return;\n        }\n        var attrs = this.attr();\n        var x = attrs.x, y = attrs.y, width = attrs.width, height = attrs.height, sx = attrs.sx, sy = attrs.sy, swidth = attrs.swidth, sheight = attrs.sheight;\n        var img = attrs.img;\n        if (img instanceof Image || isCanvas(img)) {\n            if (!isNil(sx) && !isNil(sy) && !isNil(swidth) && !isNil(sheight)) {\n                context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);\n            }\n            else {\n                context.drawImage(img, x, y, width, height);\n            }\n        }\n    };\n    return ImageShape;\n}(ShapeBase));\nexport default ImageShape;\n//# sourceMappingURL=image.js.map"]},"metadata":{},"sourceType":"module"}