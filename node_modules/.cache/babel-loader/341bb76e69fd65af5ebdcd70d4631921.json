{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\nvar ListState = /** @class */function (_super) {\n  __extends(ListState, _super);\n  function ListState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = '';\n    _this.ignoreItemStates = [];\n    return _this;\n  }\n  /** 获取触发的列表组件 */\n  ListState.prototype.getTriggerListInfo = function () {\n    var delegateObject = getDelegationObject(this.context);\n    var info = null;\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component\n      };\n    }\n    return info;\n  };\n  // 获取所有允许执行 Action 的组件\n  ListState.prototype.getAllowComponents = function () {\n    var _this = this;\n    var view = this.context.view;\n    var components = getComponents(view);\n    var rst = [];\n    each(components, function (component) {\n      if (component.isList() && _this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  };\n  /** 是否存在指定的状态 */\n  ListState.prototype.hasState = function (list, item) {\n    return list.hasState(item, this.stateName);\n  };\n  /** 清理组件的状态 */\n  ListState.prototype.clearAllComponentsState = function () {\n    var _this = this;\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(_this.stateName);\n    });\n  };\n  // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n  ListState.prototype.allowSetStateByElement = function (component) {\n    var field = component.get('field');\n    if (!field) {\n      return false;\n    }\n    if (this.cfg && this.cfg.componentNames) {\n      var name_1 = component.get('name');\n      // 如果配置了限制的 component name，则要进行检测\n      if (this.cfg.componentNames.indexOf(name_1) === -1) {\n        return false;\n      }\n    }\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  };\n  // 检测是否允许触发对应的状态改变事件\n  ListState.prototype.allowSetStateByItem = function (item, list) {\n    var ignoreStates = this.ignoreItemStates;\n    if (ignoreStates.length) {\n      var filterStates = ignoreStates.filter(function (state) {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n    return true; // 没有定义忽略的状态时，允许\n  };\n  // 设置组件的 item active\n  ListState.prototype.setStateByElement = function (component, element, enable) {\n    var field = component.get('field');\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    var value = getElementValue(element, field);\n    var text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  };\n  // 设置状态\n  ListState.prototype.setStateEnable = function (enable) {\n    var _this = this;\n    var element = getCurrentElement(this.context);\n    if (element) {\n      // trigger by element\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        _this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      var delegateObject = getDelegationObject(this.context);\n      if (isList(delegateObject)) {\n        var item = delegateObject.item,\n          component = delegateObject.component;\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  };\n  // 多个 item 设置状态\n  ListState.prototype.setItemsState = function (list, name, enable) {\n    var _this = this;\n    var items = list.getItems();\n    each(items, function (item) {\n      if (item.name === name) {\n        _this.setItemState(list, item, enable);\n      }\n    });\n  };\n  // 单个 item 设置状态\n  ListState.prototype.setItemState = function (list, item, enable) {\n    list.setItemState(item, this.stateName, enable);\n  };\n  /**\n   * 设置状态\n   */\n  ListState.prototype.setState = function () {\n    this.setStateEnable(true);\n  };\n  /**\n   * 取消状态\n   */\n  ListState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n  /**\n   * 切换状态\n   */\n  ListState.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      var list = triggerInfo.list,\n        item = triggerInfo.item;\n      var enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  };\n  /**\n   * 取消状态\n   */\n  ListState.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  };\n  return ListState;\n}(Action);\nexport default ListState;","map":{"version":3,"sources":["../../../../src/interaction/action/component/list-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element';\nimport { LooseObject } from '../../../interface';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n\n/** @ignore */\ninterface ListStateCfg {\n  componentNames: string[];\n}\n\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\nclass ListState extends Action<ListStateCfg> {\n  protected stateName: string = '';\n  protected ignoreItemStates = [];\n\n  /** 获取触发的列表组件 */\n  protected getTriggerListInfo() {\n    const delegateObject = getDelegationObject(this.context);\n    let info: LooseObject = null;\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component,\n      };\n    }\n    return info;\n  }\n  // 获取所有允许执行 Action 的组件\n  protected getAllowComponents() {\n    const view = this.context.view;\n    const components = getComponents(view);\n    const rst = [];\n    each(components, (component) => {\n      if (component.isList() && this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  }\n\n  /** 是否存在指定的状态 */\n  protected hasState(list: IList, item: ListItem) {\n    return list.hasState(item, this.stateName);\n  }\n\n  /** 清理组件的状态 */\n  protected clearAllComponentsState() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(this.stateName);\n    });\n  }\n\n  // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n  protected allowSetStateByElement(component): boolean {\n    const field = component.get('field');\n    if (!field) {\n      return false;\n    }\n    if (this.cfg && this.cfg.componentNames) {\n      const name = component.get('name');\n      // 如果配置了限制的 component name，则要进行检测\n      if (this.cfg.componentNames.indexOf(name) === -1) {\n        return false;\n      }\n    }\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  }\n  // 检测是否允许触发对应的状态改变事件\n  private allowSetStateByItem(item: ListItem, list: IList) {\n    const ignoreStates = this.ignoreItemStates;\n    if (ignoreStates.length) {\n      const filterStates = ignoreStates.filter((state) => {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n    return true; // 没有定义忽略的状态时，允许\n  }\n\n  // 设置组件的 item active\n  private setStateByElement(component, element: Element, enable: boolean) {\n    const field = component.get('field');\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    const value = getElementValue(element, field);\n    const text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  }\n\n  // 设置状态\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // trigger by element\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      const delegateObject = getDelegationObject(this.context);\n      if (isList(delegateObject)) {\n        const { item, component } = delegateObject;\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  }\n\n  // 多个 item 设置状态\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    const items = list.getItems();\n    each(items, (item) => {\n      if (item.name === name) {\n        this.setItemState(list, item, enable);\n      }\n    });\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    list.setItemState(item, this.stateName, enable);\n  }\n\n  /**\n   * 设置状态\n   */\n  public setState() {\n    this.setStateEnable(true);\n  }\n\n  /**\n   * 取消状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n      const enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  }\n\n  /**\n   * 取消状态\n   */\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  }\n}\n\nexport default ListState;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}