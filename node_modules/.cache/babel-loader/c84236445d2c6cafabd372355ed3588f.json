{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, get, isArray } from '@antv/util';\nimport { getAngleByPoint } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport PolarLabel from './polar';\n/**\n * 饼图 label\n */\nvar PieLabel = /** @class */function (_super) {\n  __extends(PieLabel, _super);\n  function PieLabel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.defaultLayout = 'distribute';\n    return _this;\n  }\n  PieLabel.prototype.getDefaultLabelCfg = function (offset, position) {\n    var cfg = _super.prototype.getDefaultLabelCfg.call(this, offset, position);\n    return deepMix({}, cfg, get(this.geometry.theme, 'pieLabels', {}));\n  };\n  /** @override */\n  PieLabel.prototype.getLabelOffset = function (offset) {\n    return _super.prototype.getLabelOffset.call(this, offset) || 0;\n  };\n  PieLabel.prototype.getLabelRotate = function (angle, offset, isLabelLimit) {\n    var rotate;\n    if (offset < 0) {\n      rotate = angle;\n      if (rotate > Math.PI / 2) {\n        rotate = rotate - Math.PI;\n      }\n      if (rotate < -Math.PI / 2) {\n        rotate = rotate + Math.PI;\n      }\n    }\n    return rotate;\n  };\n  PieLabel.prototype.getLabelAlign = function (point) {\n    var coordinate = this.getCoordinate();\n    var center = coordinate.getCenter();\n    var align;\n    if (point.angle <= Math.PI / 2 && point.x >= center.x) {\n      align = 'left';\n    } else {\n      align = 'right';\n    }\n    if (point.offset <= 0) {\n      if (align === 'right') {\n        align = 'left';\n      } else {\n        align = 'right';\n      }\n    }\n    return align;\n  };\n  PieLabel.prototype.getArcPoint = function (point) {\n    return point;\n  };\n  PieLabel.prototype.getPointAngle = function (point) {\n    var coordinate = this.getCoordinate();\n    var startPoint = {\n      x: isArray(point.x) ? point.x[0] : point.x,\n      y: point.y[0]\n    };\n    var endPoint = {\n      x: isArray(point.x) ? point.x[1] : point.x,\n      y: point.y[1]\n    };\n    var angle;\n    var startAngle = getAngleByPoint(coordinate, startPoint);\n    if (point.points && point.points[0].y === point.points[1].y) {\n      angle = startAngle;\n    } else {\n      var endAngle = getAngleByPoint(coordinate, endPoint);\n      if (startAngle >= endAngle) {\n        // 100% pie slice\n        endAngle = endAngle + Math.PI * 2;\n      }\n      angle = startAngle + (endAngle - startAngle) / 2;\n    }\n    return angle;\n  };\n  /** @override */\n  PieLabel.prototype.getCirclePoint = function (angle, offset) {\n    var coordinate = this.getCoordinate();\n    var center = coordinate.getCenter();\n    var r = coordinate.getRadius() + offset;\n    return __assign(__assign({}, polarToCartesian(center.x, center.y, r, angle)), {\n      angle: angle,\n      r: r\n    });\n  };\n  return PieLabel;\n}(PolarLabel);\nexport default PieLabel;","map":{"version":3,"sources":["../../../src/geometry/label/pie.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, get, isArray } from '@antv/util';\nimport { getAngleByPoint } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport { LabelItem } from './interface';\nimport PolarLabel from './polar';\n\n/**\n * 饼图 label\n */\nexport default class PieLabel extends PolarLabel {\n  public defaultLayout = 'distribute';\n\n  protected getDefaultLabelCfg(offset?: number, position?: string) {\n    const cfg = super.getDefaultLabelCfg(offset, position);\n    return deepMix({}, cfg, get(this.geometry.theme, 'pieLabels', {}));\n  }\n\n  /** @override */\n  protected getLabelOffset(offset: string | number): number {\n    return super.getLabelOffset(offset) || 0;\n  }\n\n  protected getLabelRotate(angle: number, offset: number, isLabelLimit: boolean) {\n    let rotate;\n    if (offset < 0) {\n      rotate = angle;\n      if (rotate > Math.PI / 2) {\n        rotate = rotate - Math.PI;\n      }\n      if (rotate < -Math.PI / 2) {\n        rotate = rotate + Math.PI;\n      }\n    }\n    return rotate;\n  }\n\n  protected getLabelAlign(point: LabelItem) {\n    const coordinate = this.getCoordinate();\n    const center = coordinate.getCenter();\n\n    let align;\n    if (point.angle <= Math.PI / 2 && point.x >= center.x) {\n      align = 'left';\n    } else {\n      align = 'right';\n    }\n    if (point.offset <= 0) {\n      if (align === 'right') {\n        align = 'left';\n      } else {\n        align = 'right';\n      }\n    }\n    return align;\n  }\n\n  protected getArcPoint(point) {\n    return point;\n  }\n\n  protected getPointAngle(point) {\n    const coordinate = this.getCoordinate();\n    const startPoint = {\n      x: isArray(point.x) ? point.x[0] : point.x,\n      y: point.y[0],\n    };\n    const endPoint = {\n      x: isArray(point.x) ? point.x[1] : point.x,\n      y: point.y[1],\n    };\n    let angle;\n    const startAngle = getAngleByPoint(coordinate, startPoint);\n    if (point.points && point.points[0].y === point.points[1].y) {\n      angle = startAngle;\n    } else {\n      let endAngle = getAngleByPoint(coordinate, endPoint);\n      if (startAngle >= endAngle) {\n        // 100% pie slice\n        endAngle = endAngle + Math.PI * 2;\n      }\n      angle = startAngle + (endAngle - startAngle) / 2;\n    }\n    return angle;\n  }\n\n  /** @override */\n  protected getCirclePoint(angle: number, offset: number) {\n    const coordinate = this.getCoordinate();\n    const center = coordinate.getCenter();\n    const r = coordinate.getRadius() + offset;\n    return {\n      ...polarToCartesian(center.x, center.y, r, angle),\n      angle,\n      r,\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}