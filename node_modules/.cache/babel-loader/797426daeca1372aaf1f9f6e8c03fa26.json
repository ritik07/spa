{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { addEventListener } from '@antv/dom-util';\nimport { clamp, deepMix, get, noop } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nvar DEFAULT_STYLE = {\n  trackColor: 'rgba(0,0,0,0)',\n  thumbColor: 'rgba(0,0,0,0.15)',\n  size: 8,\n  lineCap: 'round'\n};\nexport var DEFAULT_THEME = {\n  // 默认样式\n  default: DEFAULT_STYLE,\n  // 鼠标 hover 的样式\n  hover: {\n    thumbColor: 'rgba(0,0,0,0.2)'\n  }\n};\nvar Scrollbar = /** @class */function (_super) {\n  __extends(Scrollbar, _super);\n  function Scrollbar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.clearEvents = noop;\n    _this.onStartEvent = function (isMobile) {\n      return function (e) {\n        _this.isMobile = isMobile;\n        e.originalEvent.preventDefault();\n        var clientX = isMobile ? get(e.originalEvent, 'touches.0.clientX') : e.clientX;\n        var clientY = isMobile ? get(e.originalEvent, 'touches.0.clientY') : e.clientY;\n        // 将开始的点记录下来\n        _this.startPos = _this.cfg.isHorizontal ? clientX : clientY;\n        _this.bindLaterEvent();\n      };\n    };\n    _this.bindLaterEvent = function () {\n      var containerDOM = _this.getContainerDOM();\n      var events = [];\n      if (_this.isMobile) {\n        events = [addEventListener(containerDOM, 'touchmove', _this.onMouseMove), addEventListener(containerDOM, 'touchend', _this.onMouseUp), addEventListener(containerDOM, 'touchcancel', _this.onMouseUp)];\n      } else {\n        events = [addEventListener(containerDOM, 'mousemove', _this.onMouseMove), addEventListener(containerDOM, 'mouseup', _this.onMouseUp),\n        // 为了保证划出 canvas containerDom 时还没触发 mouseup\n        addEventListener(containerDOM, 'mouseleave', _this.onMouseUp)];\n      }\n      _this.clearEvents = function () {\n        events.forEach(function (e) {\n          e.remove();\n        });\n      };\n    };\n    // 拖拽滑块的事件回调\n    // 这里是 dom 原生事件，绑定在 dom 元素上的\n    _this.onMouseMove = function (e) {\n      var _a = _this.cfg,\n        isHorizontal = _a.isHorizontal,\n        thumbOffset = _a.thumbOffset;\n      e.preventDefault();\n      var clientX = _this.isMobile ? get(e, 'touches.0.clientX') : e.clientX;\n      var clientY = _this.isMobile ? get(e, 'touches.0.clientY') : e.clientY;\n      // 鼠标松开的位置\n      var endPos = isHorizontal ? clientX : clientY;\n      // 滑块需要移动的距离, 由于这里是对滑块监听，所以移动的距离就是 diffDis, 如果监听对象是 container dom，则需要算比例\n      var diff = endPos - _this.startPos;\n      // 更新 _startPos\n      _this.startPos = endPos;\n      _this.updateThumbOffset(thumbOffset + diff);\n    };\n    _this.onMouseUp = function (e) {\n      e.preventDefault();\n      _this.clearEvents();\n    };\n    // 点击滑道的事件回调,移动滑块位置\n    _this.onTrackClick = function (e) {\n      var _a = _this.cfg,\n        isHorizontal = _a.isHorizontal,\n        x = _a.x,\n        y = _a.y,\n        thumbLen = _a.thumbLen;\n      var containerDOM = _this.getContainerDOM();\n      var rect = containerDOM.getBoundingClientRect();\n      var clientX = e.clientX,\n        clientY = e.clientY;\n      var offset = isHorizontal ? clientX - rect.left - x - thumbLen / 2 : clientY - rect.top - y - thumbLen / 2;\n      var newOffset = _this.validateRange(offset);\n      _this.updateThumbOffset(newOffset);\n    };\n    _this.onThumbMouseOver = function () {\n      var thumbColor = _this.cfg.theme.hover.thumbColor;\n      _this.getElementByLocalId('thumb').attr('stroke', thumbColor);\n      _this.draw();\n    };\n    _this.onThumbMouseOut = function () {\n      var thumbColor = _this.cfg.theme.default.thumbColor;\n      _this.getElementByLocalId('thumb').attr('stroke', thumbColor);\n      _this.draw();\n    };\n    return _this;\n  }\n  Scrollbar.prototype.setRange = function (min, max) {\n    this.set('minLimit', min);\n    this.set('maxLimit', max);\n    var curValue = this.getValue();\n    var newValue = clamp(curValue, min, max);\n    if (curValue !== newValue && !this.get('isInit')) {\n      this.setValue(newValue);\n    }\n  };\n  Scrollbar.prototype.getRange = function () {\n    var min = this.get('minLimit') || 0;\n    var max = this.get('maxLimit') || 1;\n    return {\n      min: min,\n      max: max\n    };\n  };\n  Scrollbar.prototype.setValue = function (value) {\n    var range = this.getRange();\n    var originalValue = this.getValue();\n    this.update({\n      thumbOffset: (this.get('trackLen') - this.get('thumbLen')) * clamp(value, range.min, range.max)\n    });\n    this.delegateEmit('valuechange', {\n      originalValue: originalValue,\n      value: this.getValue()\n    });\n  };\n  Scrollbar.prototype.getValue = function () {\n    return clamp(this.get('thumbOffset') / (this.get('trackLen') - this.get('thumbLen')), 0, 1);\n  };\n  Scrollbar.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'scrollbar',\n      isHorizontal: true,\n      minThumbLen: 20,\n      thumbOffset: 0,\n      theme: DEFAULT_THEME\n    });\n  };\n  Scrollbar.prototype.renderInner = function (group) {\n    this.renderTrackShape(group);\n    this.renderThumbShape(group);\n  };\n  Scrollbar.prototype.applyOffset = function () {\n    this.moveElementTo(this.get('group'), {\n      x: this.get('x'),\n      y: this.get('y')\n    });\n  };\n  Scrollbar.prototype.initEvent = function () {\n    this.bindEvents();\n  };\n  // 创建滑道的 shape\n  Scrollbar.prototype.renderTrackShape = function (group) {\n    var _a = this.cfg,\n      trackLen = _a.trackLen,\n      _b = _a.theme,\n      theme = _b === void 0 ? {\n        default: {}\n      } : _b;\n    var _c = deepMix({}, DEFAULT_THEME, theme).default,\n      lineCap = _c.lineCap,\n      trackColor = _c.trackColor,\n      themeSize = _c.size;\n    var size = get(this.cfg, 'size', themeSize);\n    var attrs = this.get('isHorizontal') ? {\n      x1: 0 + size / 2,\n      y1: size / 2,\n      x2: trackLen - size / 2,\n      y2: size / 2,\n      lineWidth: size,\n      stroke: trackColor,\n      lineCap: lineCap\n    } : {\n      x1: size / 2,\n      y1: 0 + size / 2,\n      x2: size / 2,\n      y2: trackLen - size / 2,\n      lineWidth: size,\n      stroke: trackColor,\n      lineCap: lineCap\n    };\n    return this.addShape(group, {\n      id: this.getElementId('track'),\n      name: 'track',\n      type: 'line',\n      attrs: attrs\n    });\n  };\n  // 创建滑块的 shape\n  Scrollbar.prototype.renderThumbShape = function (group) {\n    var _a = this.cfg,\n      thumbOffset = _a.thumbOffset,\n      thumbLen = _a.thumbLen,\n      theme = _a.theme;\n    var _b = deepMix({}, DEFAULT_THEME, theme).default,\n      themeSize = _b.size,\n      lineCap = _b.lineCap,\n      thumbColor = _b.thumbColor;\n    var size = get(this.cfg, 'size', themeSize);\n    var attrs = this.get('isHorizontal') ? {\n      x1: thumbOffset + size / 2,\n      y1: size / 2,\n      x2: thumbOffset + thumbLen - size / 2,\n      y2: size / 2,\n      lineWidth: size,\n      stroke: thumbColor,\n      lineCap: lineCap,\n      cursor: 'default'\n    } : {\n      x1: size / 2,\n      y1: thumbOffset + size / 2,\n      x2: size / 2,\n      y2: thumbOffset + thumbLen - size / 2,\n      lineWidth: size,\n      stroke: thumbColor,\n      lineCap: lineCap,\n      cursor: 'default'\n    };\n    return this.addShape(group, {\n      id: this.getElementId('thumb'),\n      name: 'thumb',\n      type: 'line',\n      attrs: attrs\n    });\n  };\n  Scrollbar.prototype.bindEvents = function () {\n    var group = this.get('group');\n    group.on('mousedown', this.onStartEvent(false));\n    group.on('mouseup', this.onMouseUp);\n    group.on('touchstart', this.onStartEvent(true));\n    group.on('touchend', this.onMouseUp);\n    var trackShape = group.findById(this.getElementId('track'));\n    trackShape.on('click', this.onTrackClick);\n    var thumbShape = group.findById(this.getElementId('thumb'));\n    thumbShape.on('mouseover', this.onThumbMouseOver);\n    thumbShape.on('mouseout', this.onThumbMouseOut);\n  };\n  Scrollbar.prototype.getContainerDOM = function () {\n    var container = this.get('container');\n    var canvas = container && container.get('canvas');\n    return canvas && canvas.get('container');\n  };\n  Scrollbar.prototype.validateRange = function (offset) {\n    var _a = this.cfg,\n      thumbLen = _a.thumbLen,\n      trackLen = _a.trackLen;\n    var newOffset = offset;\n    if (offset + thumbLen > trackLen) {\n      newOffset = trackLen - thumbLen;\n    } else if (offset + thumbLen < thumbLen) {\n      newOffset = 0;\n    }\n    return newOffset;\n  };\n  Scrollbar.prototype.draw = function () {\n    var container = this.get('container');\n    var canvas = container && container.get('canvas');\n    if (canvas) {\n      canvas.draw();\n    }\n  };\n  Scrollbar.prototype.updateThumbOffset = function (offset) {\n    var _a = this.cfg,\n      thumbOffset = _a.thumbOffset,\n      isHorizontal = _a.isHorizontal,\n      thumbLen = _a.thumbLen,\n      size = _a.size;\n    var newOffset = this.validateRange(offset);\n    if (newOffset === thumbOffset) {\n      // 如果更新后的 offset 与原值相同，则不改变\n      return;\n    }\n    var thumbShape = this.getElementByLocalId('thumb');\n    if (isHorizontal) {\n      thumbShape.attr({\n        x1: newOffset + size / 2,\n        x2: newOffset + thumbLen - size / 2\n      });\n    } else {\n      thumbShape.attr({\n        y1: newOffset + size / 2,\n        y2: newOffset + thumbLen - size / 2\n      });\n    }\n    this.emitOffsetChange(newOffset);\n  };\n  Scrollbar.prototype.emitOffsetChange = function (offset) {\n    var _a = this.cfg,\n      originalValue = _a.thumbOffset,\n      trackLen = _a.trackLen,\n      thumbLen = _a.thumbLen;\n    this.cfg.thumbOffset = offset;\n    // 发送事件\n    this.emit('scrollchange', {\n      thumbOffset: offset,\n      ratio: clamp(offset / (trackLen - thumbLen), 0, 1)\n    });\n    this.delegateEmit('valuechange', {\n      originalValue: originalValue,\n      value: offset\n    });\n  };\n  return Scrollbar;\n}(GroupComponent);\nexport { Scrollbar };","map":{"version":3,"sources":["../../src/scrollbar/scrollbar.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { addEventListener } from '@antv/dom-util';\nimport { clamp, deepMix, get, noop } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nvar DEFAULT_STYLE = {\n    trackColor: 'rgba(0,0,0,0)',\n    thumbColor: 'rgba(0,0,0,0.15)',\n    size: 8,\n    lineCap: 'round',\n};\nexport var DEFAULT_THEME = {\n    // 默认样式\n    default: DEFAULT_STYLE,\n    // 鼠标 hover 的样式\n    hover: {\n        thumbColor: 'rgba(0,0,0,0.2)',\n    },\n};\nvar Scrollbar = /** @class */ (function (_super) {\n    __extends(Scrollbar, _super);\n    function Scrollbar() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.clearEvents = noop;\n        _this.onStartEvent = function (isMobile) { return function (e) {\n            _this.isMobile = isMobile;\n            e.originalEvent.preventDefault();\n            var clientX = isMobile ? get(e.originalEvent, 'touches.0.clientX') : e.clientX;\n            var clientY = isMobile ? get(e.originalEvent, 'touches.0.clientY') : e.clientY;\n            // 将开始的点记录下来\n            _this.startPos = _this.cfg.isHorizontal ? clientX : clientY;\n            _this.bindLaterEvent();\n        }; };\n        _this.bindLaterEvent = function () {\n            var containerDOM = _this.getContainerDOM();\n            var events = [];\n            if (_this.isMobile) {\n                events = [\n                    addEventListener(containerDOM, 'touchmove', _this.onMouseMove),\n                    addEventListener(containerDOM, 'touchend', _this.onMouseUp),\n                    addEventListener(containerDOM, 'touchcancel', _this.onMouseUp),\n                ];\n            }\n            else {\n                events = [\n                    addEventListener(containerDOM, 'mousemove', _this.onMouseMove),\n                    addEventListener(containerDOM, 'mouseup', _this.onMouseUp),\n                    // 为了保证划出 canvas containerDom 时还没触发 mouseup\n                    addEventListener(containerDOM, 'mouseleave', _this.onMouseUp),\n                ];\n            }\n            _this.clearEvents = function () {\n                events.forEach(function (e) {\n                    e.remove();\n                });\n            };\n        };\n        // 拖拽滑块的事件回调\n        // 这里是 dom 原生事件，绑定在 dom 元素上的\n        _this.onMouseMove = function (e) {\n            var _a = _this.cfg, isHorizontal = _a.isHorizontal, thumbOffset = _a.thumbOffset;\n            e.preventDefault();\n            var clientX = _this.isMobile ? get(e, 'touches.0.clientX') : e.clientX;\n            var clientY = _this.isMobile ? get(e, 'touches.0.clientY') : e.clientY;\n            // 鼠标松开的位置\n            var endPos = isHorizontal ? clientX : clientY;\n            // 滑块需要移动的距离, 由于这里是对滑块监听，所以移动的距离就是 diffDis, 如果监听对象是 container dom，则需要算比例\n            var diff = endPos - _this.startPos;\n            // 更新 _startPos\n            _this.startPos = endPos;\n            _this.updateThumbOffset(thumbOffset + diff);\n        };\n        _this.onMouseUp = function (e) {\n            e.preventDefault();\n            _this.clearEvents();\n        };\n        // 点击滑道的事件回调,移动滑块位置\n        _this.onTrackClick = function (e) {\n            var _a = _this.cfg, isHorizontal = _a.isHorizontal, x = _a.x, y = _a.y, thumbLen = _a.thumbLen;\n            var containerDOM = _this.getContainerDOM();\n            var rect = containerDOM.getBoundingClientRect();\n            var clientX = e.clientX, clientY = e.clientY;\n            var offset = isHorizontal ? clientX - rect.left - x - thumbLen / 2 : clientY - rect.top - y - thumbLen / 2;\n            var newOffset = _this.validateRange(offset);\n            _this.updateThumbOffset(newOffset);\n        };\n        _this.onThumbMouseOver = function () {\n            var thumbColor = _this.cfg.theme.hover.thumbColor;\n            _this.getElementByLocalId('thumb').attr('stroke', thumbColor);\n            _this.draw();\n        };\n        _this.onThumbMouseOut = function () {\n            var thumbColor = _this.cfg.theme.default.thumbColor;\n            _this.getElementByLocalId('thumb').attr('stroke', thumbColor);\n            _this.draw();\n        };\n        return _this;\n    }\n    Scrollbar.prototype.setRange = function (min, max) {\n        this.set('minLimit', min);\n        this.set('maxLimit', max);\n        var curValue = this.getValue();\n        var newValue = clamp(curValue, min, max);\n        if (curValue !== newValue && !this.get('isInit')) {\n            this.setValue(newValue);\n        }\n    };\n    Scrollbar.prototype.getRange = function () {\n        var min = this.get('minLimit') || 0;\n        var max = this.get('maxLimit') || 1;\n        return { min: min, max: max };\n    };\n    Scrollbar.prototype.setValue = function (value) {\n        var range = this.getRange();\n        var originalValue = this.getValue();\n        this.update({\n            thumbOffset: (this.get('trackLen') - this.get('thumbLen')) * clamp(value, range.min, range.max),\n        });\n        this.delegateEmit('valuechange', {\n            originalValue: originalValue,\n            value: this.getValue(),\n        });\n    };\n    Scrollbar.prototype.getValue = function () {\n        return clamp(this.get('thumbOffset') / (this.get('trackLen') - this.get('thumbLen')), 0, 1);\n    };\n    Scrollbar.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { name: 'scrollbar', isHorizontal: true, minThumbLen: 20, thumbOffset: 0, theme: DEFAULT_THEME });\n    };\n    Scrollbar.prototype.renderInner = function (group) {\n        this.renderTrackShape(group);\n        this.renderThumbShape(group);\n    };\n    Scrollbar.prototype.applyOffset = function () {\n        this.moveElementTo(this.get('group'), {\n            x: this.get('x'),\n            y: this.get('y'),\n        });\n    };\n    Scrollbar.prototype.initEvent = function () {\n        this.bindEvents();\n    };\n    // 创建滑道的 shape\n    Scrollbar.prototype.renderTrackShape = function (group) {\n        var _a = this.cfg, trackLen = _a.trackLen, _b = _a.theme, theme = _b === void 0 ? { default: {} } : _b;\n        var _c = deepMix({}, DEFAULT_THEME, theme).default, lineCap = _c.lineCap, trackColor = _c.trackColor, themeSize = _c.size;\n        var size = get(this.cfg, 'size', themeSize);\n        var attrs = this.get('isHorizontal')\n            ? {\n                x1: 0 + size / 2,\n                y1: size / 2,\n                x2: trackLen - size / 2,\n                y2: size / 2,\n                lineWidth: size,\n                stroke: trackColor,\n                lineCap: lineCap,\n            }\n            : {\n                x1: size / 2,\n                y1: 0 + size / 2,\n                x2: size / 2,\n                y2: trackLen - size / 2,\n                lineWidth: size,\n                stroke: trackColor,\n                lineCap: lineCap,\n            };\n        return this.addShape(group, {\n            id: this.getElementId('track'),\n            name: 'track',\n            type: 'line',\n            attrs: attrs,\n        });\n    };\n    // 创建滑块的 shape\n    Scrollbar.prototype.renderThumbShape = function (group) {\n        var _a = this.cfg, thumbOffset = _a.thumbOffset, thumbLen = _a.thumbLen, theme = _a.theme;\n        var _b = deepMix({}, DEFAULT_THEME, theme).default, themeSize = _b.size, lineCap = _b.lineCap, thumbColor = _b.thumbColor;\n        var size = get(this.cfg, 'size', themeSize);\n        var attrs = this.get('isHorizontal')\n            ? {\n                x1: thumbOffset + size / 2,\n                y1: size / 2,\n                x2: thumbOffset + thumbLen - size / 2,\n                y2: size / 2,\n                lineWidth: size,\n                stroke: thumbColor,\n                lineCap: lineCap,\n                cursor: 'default',\n            }\n            : {\n                x1: size / 2,\n                y1: thumbOffset + size / 2,\n                x2: size / 2,\n                y2: thumbOffset + thumbLen - size / 2,\n                lineWidth: size,\n                stroke: thumbColor,\n                lineCap: lineCap,\n                cursor: 'default',\n            };\n        return this.addShape(group, {\n            id: this.getElementId('thumb'),\n            name: 'thumb',\n            type: 'line',\n            attrs: attrs,\n        });\n    };\n    Scrollbar.prototype.bindEvents = function () {\n        var group = this.get('group');\n        group.on('mousedown', this.onStartEvent(false));\n        group.on('mouseup', this.onMouseUp);\n        group.on('touchstart', this.onStartEvent(true));\n        group.on('touchend', this.onMouseUp);\n        var trackShape = group.findById(this.getElementId('track'));\n        trackShape.on('click', this.onTrackClick);\n        var thumbShape = group.findById(this.getElementId('thumb'));\n        thumbShape.on('mouseover', this.onThumbMouseOver);\n        thumbShape.on('mouseout', this.onThumbMouseOut);\n    };\n    Scrollbar.prototype.getContainerDOM = function () {\n        var container = this.get('container');\n        var canvas = container && container.get('canvas');\n        return canvas && canvas.get('container');\n    };\n    Scrollbar.prototype.validateRange = function (offset) {\n        var _a = this.cfg, thumbLen = _a.thumbLen, trackLen = _a.trackLen;\n        var newOffset = offset;\n        if (offset + thumbLen > trackLen) {\n            newOffset = trackLen - thumbLen;\n        }\n        else if (offset + thumbLen < thumbLen) {\n            newOffset = 0;\n        }\n        return newOffset;\n    };\n    Scrollbar.prototype.draw = function () {\n        var container = this.get('container');\n        var canvas = container && container.get('canvas');\n        if (canvas) {\n            canvas.draw();\n        }\n    };\n    Scrollbar.prototype.updateThumbOffset = function (offset) {\n        var _a = this.cfg, thumbOffset = _a.thumbOffset, isHorizontal = _a.isHorizontal, thumbLen = _a.thumbLen, size = _a.size;\n        var newOffset = this.validateRange(offset);\n        if (newOffset === thumbOffset) {\n            // 如果更新后的 offset 与原值相同，则不改变\n            return;\n        }\n        var thumbShape = this.getElementByLocalId('thumb');\n        if (isHorizontal) {\n            thumbShape.attr({\n                x1: newOffset + size / 2,\n                x2: newOffset + thumbLen - size / 2,\n            });\n        }\n        else {\n            thumbShape.attr({\n                y1: newOffset + size / 2,\n                y2: newOffset + thumbLen - size / 2,\n            });\n        }\n        this.emitOffsetChange(newOffset);\n    };\n    Scrollbar.prototype.emitOffsetChange = function (offset) {\n        var _a = this.cfg, originalValue = _a.thumbOffset, trackLen = _a.trackLen, thumbLen = _a.thumbLen;\n        this.cfg.thumbOffset = offset;\n        // 发送事件\n        this.emit('scrollchange', {\n            thumbOffset: offset,\n            ratio: clamp(offset / (trackLen - thumbLen), 0, 1),\n        });\n        this.delegateEmit('valuechange', {\n            originalValue: originalValue,\n            value: offset,\n        });\n    };\n    return Scrollbar;\n}(GroupComponent));\nexport { Scrollbar };\n//# sourceMappingURL=scrollbar.js.map"]},"metadata":{},"sourceType":"module"}