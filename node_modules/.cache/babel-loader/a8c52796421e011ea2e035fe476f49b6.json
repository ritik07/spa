{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { each, isString, mix, isFunction } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport Theme from '../util/theme';\nvar GridBase = /** @class */function (_super) {\n  __extends(GridBase, _super);\n  function GridBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  GridBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'grid',\n      line: {},\n      alternateColor: null,\n      capture: false,\n      items: [],\n      closed: false,\n      defaultCfg: {\n        line: {\n          type: 'line',\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          }\n        }\n      }\n    });\n  };\n  /**\n   * 获取栅格线的类型\n   * @return {string} 栅格线类型\n   */\n  GridBase.prototype.getLineType = function () {\n    var line = this.get('line') || this.get('defaultCfg').line;\n    return line.type;\n  };\n  GridBase.prototype.renderInner = function (group) {\n    this.drawGrid(group);\n  };\n  GridBase.prototype.getAlternatePath = function (prePoints, points) {\n    var regionPath = this.getGridPath(prePoints);\n    var reversePoints = points.slice(0).reverse();\n    var nextPath = this.getGridPath(reversePoints, true);\n    var closed = this.get('closed');\n    if (closed) {\n      regionPath = regionPath.concat(nextPath);\n    } else {\n      nextPath[0][0] = 'L'; // 更新第一个节点\n      regionPath = regionPath.concat(nextPath);\n      regionPath.push(['Z']);\n    }\n    return regionPath;\n  };\n  // 获取路径的配置项\n  GridBase.prototype.getPathStyle = function () {\n    return this.get('line').style;\n  };\n  // 绘制栅格\n  GridBase.prototype.drawGrid = function (group) {\n    var _this = this;\n    var line = this.get('line');\n    var items = this.get('items');\n    var alternateColor = this.get('alternateColor');\n    var preItem = null;\n    each(items, function (item, index) {\n      var id = item.id || index;\n      // 绘制栅格线\n      if (line) {\n        var style = _this.getPathStyle();\n        style = isFunction(style) ? style(item, index, items) : style;\n        var lineId = _this.getElementId(\"line-\" + id);\n        var gridPath = _this.getGridPath(item.points);\n        _this.addShape(group, {\n          type: 'path',\n          name: 'grid-line',\n          id: lineId,\n          attrs: mix({\n            path: gridPath\n          }, style)\n        });\n      }\n      // 如果存在 alternateColor 则绘制矩形\n      // 从第二个栅格线开始绘制\n      if (alternateColor && index > 0) {\n        var regionId = _this.getElementId(\"region-\" + id);\n        var isEven = index % 2 === 0;\n        if (isString(alternateColor)) {\n          // 如果颜色是单值，则是仅绘制偶数时的区域\n          if (isEven) {\n            _this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\n          }\n        } else {\n          var color = isEven ? alternateColor[1] : alternateColor[0];\n          _this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\n        }\n      }\n      preItem = item;\n    });\n  };\n  // 绘制栅格线间的间隔\n  GridBase.prototype.drawAlternateRegion = function (id, group, prePoints, points, color) {\n    var regionPath = this.getAlternatePath(prePoints, points);\n    this.addShape(group, {\n      type: 'path',\n      id: id,\n      name: 'grid-region',\n      attrs: {\n        path: regionPath,\n        fill: color\n      }\n    });\n  };\n  return GridBase;\n}(GroupComponent);\nexport default GridBase;","map":{"version":3,"sources":["../../src/grid/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { each, isString, mix, isFunction } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport Theme from '../util/theme';\nvar GridBase = /** @class */ (function (_super) {\n    __extends(GridBase, _super);\n    function GridBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GridBase.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { name: 'grid', line: {}, alternateColor: null, capture: false, items: [], closed: false, defaultCfg: {\n                line: {\n                    type: 'line',\n                    style: {\n                        lineWidth: 1,\n                        stroke: Theme.lineColor,\n                    },\n                },\n            } });\n    };\n    /**\n     * 获取栅格线的类型\n     * @return {string} 栅格线类型\n     */\n    GridBase.prototype.getLineType = function () {\n        var line = this.get('line') || this.get('defaultCfg').line;\n        return line.type;\n    };\n    GridBase.prototype.renderInner = function (group) {\n        this.drawGrid(group);\n    };\n    GridBase.prototype.getAlternatePath = function (prePoints, points) {\n        var regionPath = this.getGridPath(prePoints);\n        var reversePoints = points.slice(0).reverse();\n        var nextPath = this.getGridPath(reversePoints, true);\n        var closed = this.get('closed');\n        if (closed) {\n            regionPath = regionPath.concat(nextPath);\n        }\n        else {\n            nextPath[0][0] = 'L'; // 更新第一个节点\n            regionPath = regionPath.concat(nextPath);\n            regionPath.push(['Z']);\n        }\n        return regionPath;\n    };\n    // 获取路径的配置项\n    GridBase.prototype.getPathStyle = function () {\n        return this.get('line').style;\n    };\n    // 绘制栅格\n    GridBase.prototype.drawGrid = function (group) {\n        var _this = this;\n        var line = this.get('line');\n        var items = this.get('items');\n        var alternateColor = this.get('alternateColor');\n        var preItem = null;\n        each(items, function (item, index) {\n            var id = item.id || index;\n            // 绘制栅格线\n            if (line) {\n                var style = _this.getPathStyle();\n                style = isFunction(style) ? style(item, index, items) : style;\n                var lineId = _this.getElementId(\"line-\" + id);\n                var gridPath = _this.getGridPath(item.points);\n                _this.addShape(group, {\n                    type: 'path',\n                    name: 'grid-line',\n                    id: lineId,\n                    attrs: mix({\n                        path: gridPath,\n                    }, style),\n                });\n            }\n            // 如果存在 alternateColor 则绘制矩形\n            // 从第二个栅格线开始绘制\n            if (alternateColor && index > 0) {\n                var regionId = _this.getElementId(\"region-\" + id);\n                var isEven = index % 2 === 0;\n                if (isString(alternateColor)) {\n                    // 如果颜色是单值，则是仅绘制偶数时的区域\n                    if (isEven) {\n                        _this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\n                    }\n                }\n                else {\n                    var color = isEven ? alternateColor[1] : alternateColor[0];\n                    _this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\n                }\n            }\n            preItem = item;\n        });\n    };\n    // 绘制栅格线间的间隔\n    GridBase.prototype.drawAlternateRegion = function (id, group, prePoints, points, color) {\n        var regionPath = this.getAlternatePath(prePoints, points);\n        this.addShape(group, {\n            type: 'path',\n            id: id,\n            name: 'grid-region',\n            attrs: {\n                path: regionPath,\n                fill: color,\n            },\n        });\n    };\n    return GridBase;\n}(GroupComponent));\nexport default GridBase;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}