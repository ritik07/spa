{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isEqual, isFunction, isNumber, isObject, isArray, noop, mix, upperFirst, uniqueId } from '@antv/util';\nimport { ext } from '@antv/matrix-util';\nimport { removeFromArray, isParent } from '../util/util';\nimport { multiplyMatrix, multiplyVec2, invert } from '../util/matrix';\nimport Base from './base';\nvar transform = ext.transform;\nvar MATRIX = 'matrix';\nvar CLONE_CFGS = ['zIndex', 'capture', 'visible', 'type'];\n// 可以在 toAttrs 中设置，但不属于绘图属性的字段\nvar RESERVED_PORPS = ['repeat'];\nvar DELEGATION_SPLIT = ':';\nvar WILDCARD = '*';\n// 需要考虑数组嵌套数组的场景\n// 数组嵌套对象的场景不考虑\nfunction _cloneArrayAttr(arr) {\n  var result = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (isArray(arr[i])) {\n      result.push([].concat(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nfunction getFormatFromAttrs(toAttrs, shape) {\n  var fromAttrs = {};\n  var attrs = shape.attrs;\n  for (var k in toAttrs) {\n    fromAttrs[k] = attrs[k];\n  }\n  return fromAttrs;\n}\nfunction getFormatToAttrs(props, shape) {\n  var toAttrs = {};\n  var attrs = shape.attr();\n  each(props, function (v, k) {\n    if (RESERVED_PORPS.indexOf(k) === -1 && !isEqual(attrs[k], v)) {\n      toAttrs[k] = v;\n    }\n  });\n  return toAttrs;\n}\nfunction checkExistedAttrs(animations, animation) {\n  if (animation.onFrame) {\n    return animations;\n  }\n  var startTime = animation.startTime,\n    delay = animation.delay,\n    duration = animation.duration;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  each(animations, function (item) {\n    // 后一个动画开始执行的时间 < 前一个动画的结束时间 && 后一个动画的执行时间 > 前一个动画的延迟\n    if (startTime + delay < item.startTime + item.delay + item.duration && duration > item.delay) {\n      each(animation.toAttrs, function (v, k) {\n        if (hasOwnProperty.call(item.toAttrs, k)) {\n          delete item.toAttrs[k];\n          delete item.fromAttrs[k];\n        }\n      });\n    }\n  });\n  return animations;\n}\nvar Element = /** @class */function (_super) {\n  __extends(Element, _super);\n  function Element(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @protected\n     * 图形属性\n     * @type {ShapeAttrs}\n     */\n    _this.attrs = {};\n    var attrs = _this.getDefaultAttrs();\n    mix(attrs, cfg.attrs);\n    _this.attrs = attrs;\n    _this.initAttrs(attrs);\n    _this.initAnimate(); // 初始化动画\n    return _this;\n  }\n  // override\n  Element.prototype.getDefaultCfg = function () {\n    return {\n      visible: true,\n      capture: true,\n      zIndex: 0\n    };\n  };\n  /**\n   * @protected\n   * 获取默认的属相\n   */\n  Element.prototype.getDefaultAttrs = function () {\n    return {\n      matrix: this.getDefaultMatrix(),\n      opacity: 1\n    };\n  };\n  /**\n   * @protected\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  Element.prototype.onCanvasChange = function (changeType) {};\n  /**\n   * @protected\n   * 初始化属性，有些属性需要加工\n   * @param {object} attrs 属性值\n   */\n  Element.prototype.initAttrs = function (attrs) {};\n  /**\n   * @protected\n   * 初始化动画\n   */\n  Element.prototype.initAnimate = function () {\n    this.set('animable', true);\n    this.set('animating', false);\n  };\n  Element.prototype.isGroup = function () {\n    return false;\n  };\n  Element.prototype.getParent = function () {\n    return this.get('parent');\n  };\n  Element.prototype.getCanvas = function () {\n    return this.get('canvas');\n  };\n  Element.prototype.attr = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var name = args[0],\n      value = args[1];\n    if (!name) return this.attrs;\n    if (isObject(name)) {\n      for (var k in name) {\n        this.setAttr(k, name[k]);\n      }\n      this.afterAttrsChange(name);\n      return this;\n    }\n    if (args.length === 2) {\n      this.setAttr(name, value);\n      this.afterAttrsChange((_a = {}, _a[name] = value, _a));\n      return this;\n    }\n    return this.attrs[name];\n  };\n  // 是否被裁剪，被裁剪则不显示，不参与拾取\n  Element.prototype.isClipped = function (refX, refY) {\n    var clip = this.getClip();\n    return clip && !clip.isHit(refX, refY);\n  };\n  /**\n   * 内部设置属性值的接口\n   * @param {string} name 属性名\n   * @param {any} value 属性值\n   */\n  Element.prototype.setAttr = function (name, value) {\n    var originValue = this.attrs[name];\n    if (originValue !== value) {\n      this.attrs[name] = value;\n      this.onAttrChange(name, value, originValue);\n    }\n  };\n  /**\n   * @protected\n   * 属性值发生改变\n   * @param {string} name 属性名\n   * @param {any} value 属性值\n   * @param {any} originValue 属性值\n   */\n  Element.prototype.onAttrChange = function (name, value, originValue) {\n    if (name === 'matrix') {\n      this.set('totalMatrix', null);\n    }\n  };\n  /**\n   * 属性更改后需要做的事情\n   * @protected\n   */\n  Element.prototype.afterAttrsChange = function (targetAttrs) {\n    if (this.cfg.isClipShape) {\n      var applyTo = this.cfg.applyTo;\n      if (applyTo) {\n        applyTo.onCanvasChange('clip');\n      }\n    } else {\n      this.onCanvasChange('attr');\n    }\n  };\n  Element.prototype.show = function () {\n    // 不是高频操作直接使用 set\n    this.set('visible', true);\n    this.onCanvasChange('show');\n    return this;\n  };\n  Element.prototype.hide = function () {\n    // 不是高频操作直接使用 set\n    this.set('visible', false);\n    this.onCanvasChange('hide');\n    return this;\n  };\n  Element.prototype.setZIndex = function (zIndex) {\n    this.set('zIndex', zIndex);\n    var parent = this.getParent();\n    if (parent) {\n      // 改变 zIndex 不应该立即触发渲染 (调用 onCanvasChange('zIndex'))，需要经过 sort 再触发\n      parent.sort();\n    }\n    return this;\n  };\n  Element.prototype.toFront = function () {\n    var parent = this.getParent();\n    if (!parent) {\n      return;\n    }\n    var children = parent.getChildren();\n    var el = this.get('el');\n    var index = children.indexOf(this);\n    children.splice(index, 1);\n    children.push(this);\n    this.onCanvasChange('zIndex');\n  };\n  Element.prototype.toBack = function () {\n    var parent = this.getParent();\n    if (!parent) {\n      return;\n    }\n    var children = parent.getChildren();\n    var el = this.get('el');\n    var index = children.indexOf(this);\n    children.splice(index, 1);\n    children.unshift(this);\n    this.onCanvasChange('zIndex');\n  };\n  Element.prototype.remove = function (destroy) {\n    if (destroy === void 0) {\n      destroy = true;\n    }\n    var parent = this.getParent();\n    if (parent) {\n      removeFromArray(parent.getChildren(), this);\n      if (!parent.get('clearing')) {\n        // 如果父元素正在清理，当前元素不触发 remove\n        this.onCanvasChange('remove');\n      }\n    } else {\n      this.onCanvasChange('remove');\n    }\n    if (destroy) {\n      this.destroy();\n    }\n  };\n  Element.prototype.resetMatrix = function () {\n    this.attr(MATRIX, this.getDefaultMatrix());\n    this.onCanvasChange('matrix');\n  };\n  Element.prototype.getMatrix = function () {\n    return this.attr(MATRIX);\n  };\n  Element.prototype.setMatrix = function (m) {\n    this.attr(MATRIX, m);\n    this.onCanvasChange('matrix');\n  };\n  // 获取总的 matrix\n  Element.prototype.getTotalMatrix = function () {\n    var totalMatrix = this.cfg.totalMatrix;\n    if (!totalMatrix) {\n      var currentMatrix = this.attr('matrix');\n      var parentMatrix = this.cfg.parentMatrix;\n      if (parentMatrix && currentMatrix) {\n        totalMatrix = multiplyMatrix(parentMatrix, currentMatrix);\n      } else {\n        totalMatrix = currentMatrix || parentMatrix;\n      }\n      this.set('totalMatrix', totalMatrix);\n    }\n    return totalMatrix;\n  };\n  // 上层分组设置 matrix\n  Element.prototype.applyMatrix = function (matrix) {\n    var currentMatrix = this.attr('matrix');\n    var totalMatrix = null;\n    if (matrix && currentMatrix) {\n      totalMatrix = multiplyMatrix(matrix, currentMatrix);\n    } else {\n      totalMatrix = currentMatrix || matrix;\n    }\n    this.set('totalMatrix', totalMatrix);\n    this.set('parentMatrix', matrix);\n  };\n  /**\n   * @protected\n   * 获取默认的矩阵\n   * @returns {number[]|null} 默认的矩阵\n   */\n  Element.prototype.getDefaultMatrix = function () {\n    return null;\n  };\n  // 将向量应用设置的矩阵\n  Element.prototype.applyToMatrix = function (v) {\n    var matrix = this.attr('matrix');\n    if (matrix) {\n      return multiplyVec2(matrix, v);\n    }\n    return v;\n  };\n  // 根据设置的矩阵，将向量转换相对于图形/分组的位置\n  Element.prototype.invertFromMatrix = function (v) {\n    var matrix = this.attr('matrix');\n    if (matrix) {\n      var invertMatrix = invert(matrix);\n      if (invertMatrix) {\n        return multiplyVec2(invertMatrix, v);\n      }\n    }\n    return v;\n  };\n  // 设置 clip\n  Element.prototype.setClip = function (clipCfg) {\n    var canvas = this.getCanvas();\n    // 应该只设置当前元素的 clip，不应该去修改 clip 本身，方便 clip 被复用\n    // TODO: setClip 的传参既 shape 配置，也支持 shape 对象\n    // const preShape = this.get('clipShape');\n    // if (preShape) {\n    //   // 将之前的 clipShape 销毁\n    //   preShape.destroy();\n    // }\n    var clipShape = null;\n    // 如果配置项为 null，则不移除 clipShape\n    if (clipCfg) {\n      var ShapeBase = this.getShapeBase();\n      var shapeType = upperFirst(clipCfg.type);\n      var Cons = ShapeBase[shapeType];\n      if (Cons) {\n        clipShape = new Cons({\n          type: clipCfg.type,\n          isClipShape: true,\n          applyTo: this,\n          attrs: clipCfg.attrs,\n          canvas: canvas\n        });\n      }\n    }\n    this.set('clipShape', clipShape);\n    this.onCanvasChange('clip');\n    return clipShape;\n  };\n  Element.prototype.getClip = function () {\n    // 高频率调用的地方直接使用 this.cfg.xxx\n    var clipShape = this.cfg.clipShape;\n    // 未设置时返回 Null，保证一致性\n    if (!clipShape) {\n      return null;\n    }\n    return clipShape;\n  };\n  Element.prototype.clone = function () {\n    var _this = this;\n    var originAttrs = this.attrs;\n    var attrs = {};\n    each(originAttrs, function (i, k) {\n      if (isArray(originAttrs[k])) {\n        attrs[k] = _cloneArrayAttr(originAttrs[k]);\n      } else {\n        attrs[k] = originAttrs[k];\n      }\n    });\n    var cons = this.constructor;\n    // @ts-ignore\n    var clone = new cons({\n      attrs: attrs\n    });\n    each(CLONE_CFGS, function (cfgName) {\n      clone.set(cfgName, _this.get(cfgName));\n    });\n    return clone;\n  };\n  Element.prototype.destroy = function () {\n    var destroyed = this.destroyed;\n    if (destroyed) {\n      return;\n    }\n    this.attrs = {};\n    _super.prototype.destroy.call(this);\n    // this.onCanvasChange('destroy');\n  };\n  /**\n   * 是否处于动画暂停状态\n   * @return {boolean} 是否处于动画暂停状态\n   */\n  Element.prototype.isAnimatePaused = function () {\n    return this.get('_pause').isPaused;\n  };\n  /**\n   * 执行动画，支持多种函数签名\n   * 1. animate(toAttrs: ElementAttrs, duration: number, easing?: string, callback?: () => void, delay?: number)\n   * 2. animate(onFrame: OnFrame, duration: number, easing?: string, callback?: () => void, delay?: number)\n   * 3. animate(toAttrs: ElementAttrs, cfg: AnimateCfg)\n   * 4. animate(onFrame: OnFrame, cfg: AnimateCfg)\n   * 各个参数的含义为:\n   *   toAttrs  动画最终状态\n   *   onFrame  自定义帧动画函数\n   *   duration 动画执行时间\n   *   easing   动画缓动效果\n   *   callback 动画执行后的回调\n   *   delay    动画延迟时间\n   */\n  Element.prototype.animate = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this.get('timeline') && !this.get('canvas')) {\n      return;\n    }\n    this.set('animating', true);\n    var timeline = this.get('timeline');\n    if (!timeline) {\n      timeline = this.get('canvas').get('timeline');\n      this.set('timeline', timeline);\n    }\n    var animations = this.get('animations') || [];\n    // 初始化 tick\n    if (!timeline.timer) {\n      timeline.initTimer();\n    }\n    var toAttrs = args[0],\n      duration = args[1],\n      _a = args[2],\n      easing = _a === void 0 ? 'easeLinear' : _a,\n      _b = args[3],\n      callback = _b === void 0 ? noop : _b,\n      _c = args[4],\n      delay = _c === void 0 ? 0 : _c;\n    var onFrame;\n    var repeat;\n    var pauseCallback;\n    var resumeCallback;\n    var animateCfg;\n    // 第二个参数，既可以是动画最终状态 toAttrs，也可以是自定义帧动画函数 onFrame\n    if (isFunction(toAttrs)) {\n      onFrame = toAttrs;\n      toAttrs = {};\n    } else if (isObject(toAttrs) && toAttrs.onFrame) {\n      // 兼容 3.0 中的写法，onFrame 和 repeat 可在 toAttrs 中设置\n      onFrame = toAttrs.onFrame;\n      repeat = toAttrs.repeat;\n    }\n    // 第二个参数，既可以是执行时间 duration，也可以是动画参数 animateCfg\n    if (isObject(duration)) {\n      animateCfg = duration;\n      duration = animateCfg.duration;\n      easing = animateCfg.easing || 'easeLinear';\n      delay = animateCfg.delay || 0;\n      // animateCfg 中的设置优先级更高\n      repeat = animateCfg.repeat || repeat || false;\n      callback = animateCfg.callback || noop;\n      pauseCallback = animateCfg.pauseCallback || noop;\n      resumeCallback = animateCfg.resumeCallback || noop;\n    } else {\n      // 第四个参数，既可以是回调函数 callback，也可以是延迟时间 delay\n      if (isNumber(callback)) {\n        delay = callback;\n        callback = null;\n      }\n      // 第三个参数，既可以是缓动参数 easing，也可以是回调函数 callback\n      if (isFunction(easing)) {\n        callback = easing;\n        easing = 'easeLinear';\n      } else {\n        easing = easing || 'easeLinear';\n      }\n    }\n    var formatToAttrs = getFormatToAttrs(toAttrs, this);\n    var animation = {\n      fromAttrs: getFormatFromAttrs(formatToAttrs, this),\n      toAttrs: formatToAttrs,\n      duration: duration,\n      easing: easing,\n      repeat: repeat,\n      callback: callback,\n      pauseCallback: pauseCallback,\n      resumeCallback: resumeCallback,\n      delay: delay,\n      startTime: timeline.getTime(),\n      id: uniqueId(),\n      onFrame: onFrame,\n      pathFormatted: false\n    };\n    // 如果动画元素队列中已经有这个图形了\n    if (animations.length > 0) {\n      // 先检查是否需要合并属性。若有相同的动画，将该属性从前一个动画中删除,直接用后一个动画中\n      animations = checkExistedAttrs(animations, animation);\n    } else {\n      // 否则将图形添加到动画元素队列\n      timeline.addAnimator(this);\n    }\n    animations.push(animation);\n    this.set('animations', animations);\n    this.set('_pause', {\n      isPaused: false\n    });\n  };\n  /**\n   * 停止动画\n   * @param {boolean} toEnd 是否到动画的最终状态\n   */\n  Element.prototype.stopAnimate = function (toEnd) {\n    var _this = this;\n    if (toEnd === void 0) {\n      toEnd = true;\n    }\n    var animations = this.get('animations');\n    each(animations, function (animation) {\n      // 将动画执行到最后一帧\n      if (toEnd) {\n        if (animation.onFrame) {\n          _this.attr(animation.onFrame(1));\n        } else {\n          _this.attr(animation.toAttrs);\n        }\n      }\n      if (animation.callback) {\n        // 动画停止时的回调\n        animation.callback();\n      }\n    });\n    this.set('animating', false);\n    this.set('animations', []);\n  };\n  /**\n   * 暂停动画\n   */\n  Element.prototype.pauseAnimate = function () {\n    var timeline = this.get('timeline');\n    var animations = this.get('animations');\n    var pauseTime = timeline.getTime();\n    each(animations, function (animation) {\n      animation._paused = true;\n      animation._pauseTime = pauseTime;\n      if (animation.pauseCallback) {\n        // 动画暂停时的回调\n        animation.pauseCallback();\n      }\n    });\n    // 记录下是在什么时候暂停的\n    this.set('_pause', {\n      isPaused: true,\n      pauseTime: pauseTime\n    });\n    return this;\n  };\n  /**\n   * 恢复动画\n   */\n  Element.prototype.resumeAnimate = function () {\n    var timeline = this.get('timeline');\n    var current = timeline.getTime();\n    var animations = this.get('animations');\n    var pauseTime = this.get('_pause').pauseTime;\n    // 之后更新属性需要计算动画已经执行的时长，如果暂停了，就把初始时间调后\n    each(animations, function (animation) {\n      animation.startTime = animation.startTime + (current - pauseTime);\n      animation._paused = false;\n      animation._pauseTime = null;\n      if (animation.resumeCallback) {\n        animation.resumeCallback();\n      }\n    });\n    this.set('_pause', {\n      isPaused: false\n    });\n    this.set('animations', animations);\n    return this;\n  };\n  /**\n   * 触发委托事件\n   * @param  {string}     type 事件类型\n   * @param  {GraphEvent} eventObj 事件对象\n   */\n  Element.prototype.emitDelegation = function (type, eventObj) {\n    var _this = this;\n    var paths = eventObj.propagationPath;\n    var events = this.getEvents();\n    var relativeShape;\n    if (type === 'mouseenter') {\n      relativeShape = eventObj.fromShape;\n    } else if (type === 'mouseleave') {\n      relativeShape = eventObj.toShape;\n    }\n    var _loop_1 = function (i) {\n      var element = paths[i];\n      // 暂定跟 name 绑定\n      var name_1 = element.get('name');\n      if (name_1) {\n        // 第一个 mouseenter 和 mouseleave 的停止即可，因为后面的都是前面的 Parent\n        if (\n        // 只有 element 是 Group 或者 Canvas 的时候，才需要判断 isParent\n        (element.isGroup() || element.isCanvas && element.isCanvas()) && relativeShape && isParent(element, relativeShape)) {\n          return \"break\";\n        }\n        if (isArray(name_1)) {\n          each(name_1, function (subName) {\n            _this.emitDelegateEvent(element, subName, eventObj);\n          });\n        } else {\n          this_1.emitDelegateEvent(element, name_1, eventObj);\n        }\n      }\n    };\n    var this_1 = this;\n    // 至少有一个对象，且第一个对象为 shape\n    for (var i = 0; i < paths.length; i++) {\n      var state_1 = _loop_1(i);\n      if (state_1 === \"break\") break;\n    }\n  };\n  Element.prototype.emitDelegateEvent = function (element, name, eventObj) {\n    var events = this.getEvents();\n    // 事件委托的形式 name:type\n    var eventName = name + DELEGATION_SPLIT + eventObj.type;\n    if (events[eventName] || events[WILDCARD]) {\n      // 对于通配符 *，事件名称 = 委托事件名称\n      eventObj.name = eventName;\n      eventObj.currentTarget = element;\n      eventObj.delegateTarget = this;\n      // 将委托事件的监听对象 delegateObject 挂载到事件对象上\n      eventObj.delegateObject = element.get('delegateObject');\n      this.emit(eventName, eventObj);\n    }\n  };\n  /**\n   * 移动元素\n   * @param {number} translateX 水平移动距离\n   * @param {number} translateY 垂直移动距离\n   * @return {IElement} 元素\n   */\n  Element.prototype.translate = function (translateX, translateY) {\n    if (translateX === void 0) {\n      translateX = 0;\n    }\n    if (translateY === void 0) {\n      translateY = 0;\n    }\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['t', translateX, translateY]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 移动元素到目标位置\n   * @param {number} targetX 目标位置的水平坐标\n   * @param {number} targetX 目标位置的垂直坐标\n   * @return {IElement} 元素\n   */\n  Element.prototype.move = function (targetX, targetY) {\n    var x = this.attr('x') || 0;\n    var y = this.attr('y') || 0;\n    this.translate(targetX - x, targetY - y);\n    return this;\n  };\n  /**\n   * 移动元素到目标位置，等价于 move 方法。由于 moveTo 的语义性更强，因此在文档中推荐使用 moveTo 方法\n   * @param {number} targetX 目标位置的 x 轴坐标\n   * @param {number} targetY 目标位置的 y 轴坐标\n   * @return {IElement} 元素\n   */\n  Element.prototype.moveTo = function (targetX, targetY) {\n    return this.move(targetX, targetY);\n  };\n  /**\n   * 缩放元素\n   * @param {number} ratioX 水平缩放比例\n   * @param {number} ratioY 垂直缩放比例\n   * @return {IElement} 元素\n   */\n  Element.prototype.scale = function (ratioX, ratioY) {\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['s', ratioX, ratioY || ratioX]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 以画布左上角 (0, 0) 为中心旋转元素\n   * @param {number} radian 旋转角度(弧度值)\n   * @return {IElement} 元素\n   */\n  Element.prototype.rotate = function (radian) {\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['r', radian]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 以起始点为中心旋转元素\n   * @param {number} radian 旋转角度(弧度值)\n   * @return {IElement} 元素\n   */\n  Element.prototype.rotateAtStart = function (rotate) {\n    var _a = this.attr(),\n      x = _a.x,\n      y = _a.y;\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['t', -x, -y], ['r', rotate], ['t', x, y]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 以任意点 (x, y) 为中心旋转元素\n   * @param {number} radian 旋转角度(弧度值)\n   * @return {IElement} 元素\n   */\n  Element.prototype.rotateAtPoint = function (x, y, rotate) {\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['t', -x, -y], ['r', rotate], ['t', x, y]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  return Element;\n}(Base);\nexport default Element;","map":{"version":3,"sources":["../../src/abstract/element.ts"],"names":[],"mappings":";AAAA,SAAS,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,QAAQ,QAAQ,YAAY;AACpH,SAAS,GAAG,QAAQ,mBAAmB;AAGvC,SAAS,eAAe,EAAE,QAAQ,QAAQ,cAAc;AACxD,SAAS,cAAc,EAAE,YAAY,EAAE,MAAM,QAAQ,gBAAgB;AACrE,OAAO,IAAI,MAAM,QAAQ;AAGjB,IAAA,SAAS,GAAK,GAAG,CAAA,SAAR;AAEjB,IAAM,MAAM,GAAG,QAAQ;AACvB,IAAM,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC;AAE3D;AACA,IAAM,cAAc,GAAG,CAAC,QAAQ,CAAC;AAEjC,IAAM,gBAAgB,GAAG,GAAG;AAC5B,IAAM,QAAQ,GAAG,GAAG;AAEpB;AACA;AACA,SAAS,eAAe,CAAC,GAAG,EAAA;EAC1B,IAAM,MAAM,GAAG,EAAE;EACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;MACnB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KAC/B,MAAM;MACL,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpB;EACF;EACD,OAAO,MAAM;AACf;AAEA,SAAS,kBAAkB,CAAC,OAAO,EAAE,KAAK,EAAA;EACxC,IAAM,SAAS,GAAG,CAAA,CAAE;EACpB,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK;EACzB,KAAK,IAAM,CAAC,IAAI,OAAO,EAAE;IACvB,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;EACxB;EACD,OAAO,SAAS;AAClB;AAEA,SAAS,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAA;EACpC,IAAM,OAAO,GAAG,CAAA,CAAE;EAClB,IAAM,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE;EAC1B,IAAI,CAAC,KAAK,EAAE,UAAC,CAAC,EAAE,CAAC,EAAA;IACf,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;MAC7D,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IACf;EACH,CAAC,CAAC;EACF,OAAO,OAAO;AAChB;AAEA,SAAS,iBAAiB,CAAC,UAAuB,EAAE,SAAoB,EAAA;EACtE,IAAI,SAAS,CAAC,OAAO,EAAE;IACrB,OAAO,UAAU;EAClB;EACO,IAAA,SAAS,GAAsB,SAAS,CAAA,SAA/B;IAAE,KAAK,GAAe,SAAS,CAAA,KAAxB;IAAE,QAAQ,GAAK,SAAS,CAAA,QAAd;EAClC,IAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc;EACtD,IAAI,CAAC,UAAU,EAAE,UAAC,IAAI,EAAA;IACpB;IACA,IAAI,SAAS,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,EAAE;MAC5F,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,UAAC,CAAC,EAAE,CAAC,EAAA;QAC3B,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE;UACxC,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;UACtB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QACzB;MACH,CAAC,CAAC;IACH;EACH,CAAC,CAAC;EAEF,OAAO,UAAU;AACnB;AAEA,IAAA,OAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+B,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;EAQ7B,SAAA,OAAA,CAAY,GAAG,EAAA;IAAf,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,GAAG,CAAC,IAAA,IAAA;IARZ;;;;AAIG;IACH,KAAA,CAAA,KAAK,GAAe,CAAA,CAAE;IAIpB,IAAM,KAAK,GAAG,KAAI,CAAC,eAAe,EAAE;IACpC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC;IACrB,KAAI,CAAC,KAAK,GAAG,KAAK;IAClB,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IACrB,KAAI,CAAC,WAAW,EAAE,CAAC,CAAC;;EACtB;EAEA;EACA,OAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACE,OAAO;MACL,OAAO,EAAE,IAAI;MACb,OAAO,EAAE,IAAI;MACb,MAAM,EAAE;KACT;EACH,CAAC;EAED;;;AAGG;EACH,OAAA,CAAA,SAAA,CAAA,eAAe,GAAf,YAAA;IACE,OAAO;MACL,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAE;MAC/B,OAAO,EAAE;KACV;EACH,CAAC;EAKD;;;;AAIG;EACH,OAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,UAAsB,EAAA,CAAG,CAAC;EAEzC;;;;AAIG;EACH,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,KAAiB,EAAA,CAAG,CAAC;EAE/B;;;AAGG;EACH,OAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC;IAC1B,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC;EAC9B,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,OAAO,KAAK;EACd,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;EAC3B,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;EAC3B,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,YAAA;;IAAK,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAO,EAAP,EAAA,GAAA,SAAA,CAAA,MAAO,EAAP,EAAA,EAAO,EAAA;MAAP,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACI,IAAA,IAAI,GAAW,IAAI,CAAA,CAAA,CAAf;MAAE,KAAK,GAAI,IAAI,CAAA,CAAA,CAAR;IAClB,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,CAAC,KAAK;IAC5B,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;MAClB,KAAK,IAAM,CAAC,IAAI,IAAI,EAAE;QACpB,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;MACzB;MACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;MAC3B,OAAO,IAAI;IACZ;IACD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;MACrB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;MACzB,IAAI,CAAC,gBAAgB,EAAA,EAAA,GAAA,CAAA,CAAA,EACnB,EAAA,CAAC,IAAI,CAAA,GAAG,KAAK,E,IACb;MACF,OAAO,IAAI;IACZ;IACD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;EACzB,CAAC;EAOD;EACA,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,IAAI,EAAE,IAAI,EAAA;IAClB,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE;IAC3B,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;EACxC,CAAC;EAED;;;;AAIG;EACH,OAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,IAAY,EAAE,KAAU,EAAA;IAC9B,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACpC,IAAI,WAAW,KAAK,KAAK,EAAE;MACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK;MACxB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC;IAC5C;EACH,CAAC;EAED;;;;;;AAMG;EACH,OAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,IAAY,EAAE,KAAU,EAAE,WAAgB,EAAA;IACrD,IAAI,IAAI,KAAK,QAAQ,EAAE;MACrB,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC;IAC9B;EACH,CAAC;EAED;;;AAGG;EACH,OAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UAAiB,WAAW,EAAA;IAC1B,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE;MACxB,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO;MAChC,IAAI,OAAO,EAAE;QACX,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC;MAC/B;KACF,MAAM;MACL,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;IAC5B;EACH,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,YAAA;IACE;IACA,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC;IACzB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;IAC3B,OAAO,IAAI;EACb,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,YAAA;IACE;IACA,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC;IAC1B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;IAC3B,OAAO,IAAI;EACb,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,MAAc,EAAA;IACtB,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC;IAC1B,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAI,MAAM,EAAE;MACV;MACA,MAAM,CAAC,IAAI,EAAE;IACd;IACD,OAAO,IAAI;EACb,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAI,CAAC,MAAM,EAAE;MACX;IACD;IACD,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE;IACrC,IAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IACzB,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;IACpC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;IACzB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;IACnB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;EAC/B,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAI,CAAC,MAAM,EAAE;MACX;IACD;IACD,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE;IACrC,IAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IACzB,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;IACpC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;IACzB,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;IACtB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;EAC/B,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,OAAc,EAAA;IAAd,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA,IAAc;IAAA;IACnB,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAI,MAAM,EAAE;MACV,eAAe,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC;MAC3C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;QAC3B;QACA,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;MAC9B;KACF,MAAM;MACL,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;IAC9B;IACD,IAAI,OAAO,EAAE;MACX,IAAI,CAAC,OAAO,EAAE;IACf;EACH,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1C,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;EAC/B,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;EAC1B,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,CAAW,EAAA;IACnB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IACpB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;EAC/B,CAAC;EAED;EACA,OAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACE,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW;IACtC,IAAI,CAAC,WAAW,EAAE;MAChB,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;MACzC,IAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY;MAC1C,IAAI,YAAY,IAAI,aAAa,EAAE;QACjC,WAAW,GAAG,cAAc,CAAC,YAAY,EAAE,aAAa,CAAC;OAC1D,MAAM;QACL,WAAW,GAAG,aAAa,IAAI,YAAY;MAC5C;MACD,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC;IACrC;IACD,OAAO,WAAW;EACpB,CAAC;EAED;EACA,OAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,MAAgB,EAAA;IAC1B,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzC,IAAI,WAAW,GAAG,IAAI;IACtB,IAAI,MAAM,IAAI,aAAa,EAAE;MAC3B,WAAW,GAAG,cAAc,CAAC,MAAM,EAAE,aAAa,CAAC;KACpD,MAAM;MACL,WAAW,GAAG,aAAa,IAAI,MAAM;IACtC;IACD,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC;IACpC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC;EAClC,CAAC;EAED;;;;AAIG;EACH,OAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,YAAA;IACE,OAAO,IAAI;EACb,CAAC;EAED;EACA,OAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,CAAW,EAAA;IACvB,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;IAClC,IAAI,MAAM,EAAE;MACV,OAAO,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/B;IACD,OAAO,CAAC;EACV,CAAC;EAED;EACA,OAAA,CAAA,SAAA,CAAA,gBAAgB,GAAhB,UAAiB,CAAW,EAAA;IAC1B,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;IAClC,IAAI,MAAM,EAAE;MACV,IAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;MACnC,IAAI,YAAY,EAAE;QAChB,OAAO,YAAY,CAAC,YAAY,EAAE,CAAC,CAAC;MACrC;IACF;IACD,OAAO,CAAC;EACV,CAAC;EAED;EACA,OAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,OAAgB,EAAA;IACtB,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,GAAG,IAAI;IACpB;IACA,IAAI,OAAO,EAAE;MACX,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE;MACrC,IAAM,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC;MAC1C,IAAM,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC;MACjC,IAAI,IAAI,EAAE;QACR,SAAS,GAAG,IAAI,IAAI,CAAC;UACnB,IAAI,EAAE,OAAO,CAAC,IAAI;UAClB,WAAW,EAAE,IAAI;UACjB,OAAO,EAAE,IAAI;UACb,KAAK,EAAE,OAAO,CAAC,KAAK;UACpB,MAAM,EAAA;SACP,CAAC;MACH;IACF;IAED,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC;IAChC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;IAC3B,OAAO,SAAS;EAClB,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE;IACA,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS;IACpC;IACA,IAAI,CAAC,SAAS,EAAE;MACd,OAAO,IAAI;IACZ;IACD,OAAO,SAAS;EAClB,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACE,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK;IAC9B,IAAM,KAAK,GAAG,CAAA,CAAE;IAChB,IAAI,CAAC,WAAW,EAAE,UAAC,CAAC,EAAE,CAAC,EAAA;MACrB,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;QAC3B,KAAK,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;OAC3C,MAAM;QACL,KAAK,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC;MAC1B;IACH,CAAC,CAAC;IACF,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW;IAC7B;IACA,IAAM,KAAK,GAAG,IAAI,IAAI,CAAC;MAAE,KAAK,EAAA;IAAA,CAAE,CAAC;IACjC,IAAI,CAAC,UAAU,EAAE,UAAC,OAAO,EAAA;MACvB,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,KAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC,CAAC;IACF,OAAO,KAAK;EACd,CAAC;EAED,OAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS;IAChC,IAAI,SAAS,EAAE;MACb;IACD;IACD,IAAI,CAAC,KAAK,GAAG,CAAA,CAAE;IACf,MAAA,CAAA,SAAA,CAAM,OAAO,CAAA,IAAA,CAAA,IAAA,CAAE;IACf;EACF,CAAC;EAED;;;AAGG;EACH,OAAA,CAAA,SAAA,CAAA,eAAe,GAAf,YAAA;IACE,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,QAAQ;EACpC,CAAC;EAED;;;;;;;;;;;;;AAaG;EACH,OAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IAAQ,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAO,EAAP,EAAA,GAAA,SAAA,CAAA,MAAO,EAAP,EAAA,EAAO,EAAA;MAAP,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACN,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;MAChD;IACD;IACD,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC;IAC3B,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;IACnC,IAAI,CAAC,QAAQ,EAAE;MACb,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC;MAC7C,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC;IAC/B;IACD,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE;IAC7C;IACA,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;MACnB,QAAQ,CAAC,SAAS,EAAE;IACrB;IACI,IAAA,OAAO,GAAiE,IAAI,CAAA,CAAA,CAArE;MAAE,QAAQ,GAAuD,IAAI,CAAA,CAAA,CAA3D;MAAE,EAAA,GAAqD,IAAI,CAAA,CAAA,CAApC;MAArB,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,YAAY,GAAA,EAAA;MAAE,EAAA,GAA8B,IAAI,CAAA,CAAA,CAAnB;MAAf,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,EAAA;MAAE,EAAA,GAAa,IAAI,CAAA,CAAA,CAAR;MAAT,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAC,GAAA,EAAA;IACzE,IAAI,OAAgB;IACpB,IAAI,MAAe;IACnB,IAAI,aAAa;IACjB,IAAI,cAAc;IAClB,IAAI,UAAsB;IAC1B;IACA,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;MACvB,OAAO,GAAG,OAAkB;MAC5B,OAAO,GAAG,CAAA,CAAE;KACb,MAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAK,OAAe,CAAC,OAAO,EAAE;MACxD;MACA,OAAO,GAAI,OAAe,CAAC,OAAkB;MAC7C,MAAM,GAAI,OAAe,CAAC,MAAM;IACjC;IACD;IACA,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE;MACtB,UAAU,GAAG,QAAsB;MACnC,QAAQ,GAAG,UAAU,CAAC,QAAQ;MAC9B,MAAM,GAAG,UAAU,CAAC,MAAM,IAAI,YAAY;MAC1C,KAAK,GAAG,UAAU,CAAC,KAAK,IAAI,CAAC;MAC7B;MACA,MAAM,GAAG,UAAU,CAAC,MAAM,IAAI,MAAM,IAAI,KAAK;MAC7C,QAAQ,GAAG,UAAU,CAAC,QAAQ,IAAI,IAAI;MACtC,aAAa,GAAG,UAAU,CAAC,aAAa,IAAI,IAAI;MAChD,cAAc,GAAG,UAAU,CAAC,cAAc,IAAI,IAAI;KACnD,MAAM;MACL;MACA,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACtB,KAAK,GAAG,QAAQ;QAChB,QAAQ,GAAG,IAAI;MAChB;MACD;MACA,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE;QACtB,QAAQ,GAAG,MAAM;QACjB,MAAM,GAAG,YAAY;OACtB,MAAM;QACL,MAAM,GAAG,MAAM,IAAI,YAAY;MAChC;IACF;IACD,IAAM,aAAa,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC;IACrD,IAAM,SAAS,GAAc;MAC3B,SAAS,EAAE,kBAAkB,CAAC,aAAa,EAAE,IAAI,CAAC;MAClD,OAAO,EAAE,aAAa;MACtB,QAAQ,EAAA,QAAA;MACR,MAAM,EAAA,MAAA;MACN,MAAM,EAAA,MAAA;MACN,QAAQ,EAAA,QAAA;MACR,aAAa,EAAA,aAAA;MACb,cAAc,EAAA,cAAA;MACd,KAAK,EAAA,KAAA;MACL,SAAS,EAAE,QAAQ,CAAC,OAAO,EAAE;MAC7B,EAAE,EAAE,QAAQ,EAAE;MACd,OAAO,EAAA,OAAA;MACP,aAAa,EAAE;KAChB;IACD;IACA,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;MACzB;MACA,UAAU,GAAG,iBAAiB,CAAC,UAAU,EAAE,SAAS,CAAC;KACtD,MAAM;MACL;MACA,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC;IAC3B;IACD,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC;IAClC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;MAAE,QAAQ,EAAE;IAAK,CAAE,CAAC;EACzC,CAAC;EAED;;;AAGG;EACH,OAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,KAAY,EAAA;IAAxB,IAAA,KAAA,GAAA,IAAA;IAAY,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;MAAA,KAAA,GAAA,IAAY;IAAA;IACtB,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC;IACzC,IAAI,CAAC,UAAU,EAAE,UAAC,SAAoB,EAAA;MACpC;MACA,IAAI,KAAK,EAAE;QACT,IAAI,SAAS,CAAC,OAAO,EAAE;UACrB,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SAChC,MAAM;UACL,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;QAC7B;MACF;MACD,IAAI,SAAS,CAAC,QAAQ,EAAE;QACtB;QACA,SAAS,CAAC,QAAQ,EAAE;MACrB;IACH,CAAC,CAAC;IACF,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC;IAC5B,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE,CAAC;EAC5B,CAAC;EAED;;AAEG;EACH,OAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,YAAA;IACE,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;IACrC,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC;IACzC,IAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,EAAE;IACpC,IAAI,CAAC,UAAU,EAAE,UAAC,SAAoB,EAAA;MACpC,SAAS,CAAC,OAAO,GAAG,IAAI;MACxB,SAAS,CAAC,UAAU,GAAG,SAAS;MAChC,IAAI,SAAS,CAAC,aAAa,EAAE;QAC3B;QACA,SAAS,CAAC,aAAa,EAAE;MAC1B;IACH,CAAC,CAAC;IACF;IACA,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;MACjB,QAAQ,EAAE,IAAI;MACd,SAAS,EAAA;KACV,CAAC;IACF,OAAO,IAAI;EACb,CAAC;EAED;;AAEG;EACH,OAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACE,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;IACrC,IAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,EAAE;IAClC,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC;IACzC,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS;IAC9C;IACA,IAAI,CAAC,UAAU,EAAE,UAAC,SAAoB,EAAA;MACpC,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,IAAI,OAAO,GAAG,SAAS,CAAC;MACjE,SAAS,CAAC,OAAO,GAAG,KAAK;MACzB,SAAS,CAAC,UAAU,GAAG,IAAI;MAC3B,IAAI,SAAS,CAAC,cAAc,EAAE;QAC5B,SAAS,CAAC,cAAc,EAAE;MAC3B;IACH,CAAC,CAAC;IACF,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;MACjB,QAAQ,EAAE;KACX,CAAC;IACF,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC;IAClC,OAAO,IAAI;EACb,CAAC;EAED;;;;AAIG;EACH,OAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,IAAY,EAAE,QAAoB,EAAA;IAAjD,IAAA,KAAA,GAAA,IAAA;IACE,IAAM,KAAK,GAAG,QAAQ,CAAC,eAAe;IACtC,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAI,aAAa;IACjB,IAAI,IAAI,KAAK,YAAY,EAAE;MACzB,aAAa,GAAG,QAAQ,CAAC,SAAS;KACnC,MAAM,IAAI,IAAI,KAAK,YAAY,EAAE;MAChC,aAAa,GAAG,QAAQ,CAAC,OAAO;IACjC;4BAEQ,CAAC,EAAA;MACR,IAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC;MACxB;MACA,IAAM,MAAI,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;MAChC,IAAI,MAAI,EAAE;QACR;QACA;QACE;QACA,CAAC,OAAO,CAAC,OAAO,EAAE,IAAK,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,EAAG,KAC9D,aAAa,IACb,QAAQ,CAAC,OAAO,EAAE,aAAa,CAAC,EAChC;;QAED;QACD,IAAI,OAAO,CAAC,MAAI,CAAC,EAAE;UACjB,IAAI,CAAC,MAAI,EAAE,UAAC,OAAO,EAAA;YACjB,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;UACpD,CAAC,CAAC;SACH,MAAM;UACL,MAAA,CAAK,iBAAiB,CAAC,OAAO,EAAE,MAAI,EAAE,QAAQ,CAAC;QAChD;MACF;;;IAtBH;IACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAA;4BAA5B,CAAC,CAAA;;IAsBT;EACH,CAAC;EAEO,OAAA,CAAA,SAAA,CAAA,iBAAiB,GAAzB,UAA0B,OAAO,EAAE,IAAY,EAAE,QAAoB,EAAA;IACnE,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B;IACA,IAAM,SAAS,GAAG,IAAI,GAAG,gBAAgB,GAAG,QAAQ,CAAC,IAAI;IACzD,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;MACzC;MACA,QAAQ,CAAC,IAAI,GAAG,SAAS;MACzB,QAAQ,CAAC,aAAa,GAAG,OAAO;MAChC,QAAQ,CAAC,cAAc,GAAG,IAAI;MAC9B;MACA,QAAQ,CAAC,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;MACvD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC;IAC/B;EACH,CAAC;EAED;;;;;AAKG;EACH,OAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,UAAsB,EAAE,UAAsB,EAAA;IAA9C,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA;MAAA,UAAA,GAAA,CAAsB;IAAA;IAAE,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA;MAAA,UAAA,GAAA,CAAsB;IAAA;IACtD,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAM,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;IACpE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;IACzB,OAAO,IAAI;EACb,CAAC;EAED;;;;;AAKG;EACH,OAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,UAAK,OAAe,EAAE,OAAe,EAAA;IACnC,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IAC7B,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IAC7B,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC;IACxC,OAAO,IAAI;EACb,CAAC;EAED;;;;;AAKG;EACH,OAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,OAAe,EAAE,OAAe,EAAA;IACrC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC;EACpC,CAAC;EAED;;;;;AAKG;EACH,OAAA,CAAA,SAAA,CAAA,KAAK,GAAL,UAAM,MAAc,EAAE,MAAe,EAAA;IACnC,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAM,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;IACtE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;IACzB,OAAO,IAAI;EACb,CAAC;EAED;;;;AAIG;EACH,OAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,MAAc,EAAA;IACnB,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAM,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;IACpD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;IACzB,OAAO,IAAI;EACb,CAAC;EAED;;;;AAIG;EACH,OAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,MAAc,EAAA;IACpB,IAAA,EAAA,GAAW,IAAI,CAAC,IAAI,EAAE;MAApB,CAAC,GAAA,EAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAgB;IAC5B,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAM,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE,CAClC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACb,CAAC,GAAG,EAAE,MAAM,CAAC,EACb,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ,CAAC;IACF,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;IACzB,OAAO,IAAI;EACb,CAAC;EAED;;;;AAIG;EACH,OAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,CAAS,EAAE,CAAS,EAAE,MAAc,EAAA;IAChD,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;IAC/B,IAAM,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE,CAClC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACb,CAAC,GAAG,EAAE,MAAM,CAAC,EACb,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ,CAAC;IACF,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;IACzB,OAAO,IAAI;EACb,CAAC;EACH,OAAA,OAAC;AAAD,CAAC,CA1qB8B,IAAI,CAAA;AA4qBnC,eAAe,OAAO","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { each, isEqual, isFunction, isNumber, isObject, isArray, noop, mix, upperFirst, uniqueId } from '@antv/util';\nimport { ext } from '@antv/matrix-util';\nimport { removeFromArray, isParent } from '../util/util';\nimport { multiplyMatrix, multiplyVec2, invert } from '../util/matrix';\nimport Base from './base';\nvar transform = ext.transform;\nvar MATRIX = 'matrix';\nvar CLONE_CFGS = ['zIndex', 'capture', 'visible', 'type'];\n// 可以在 toAttrs 中设置，但不属于绘图属性的字段\nvar RESERVED_PORPS = ['repeat'];\nvar DELEGATION_SPLIT = ':';\nvar WILDCARD = '*';\n// 需要考虑数组嵌套数组的场景\n// 数组嵌套对象的场景不考虑\nfunction _cloneArrayAttr(arr) {\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        if (isArray(arr[i])) {\n            result.push([].concat(arr[i]));\n        }\n        else {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nfunction getFormatFromAttrs(toAttrs, shape) {\n    var fromAttrs = {};\n    var attrs = shape.attrs;\n    for (var k in toAttrs) {\n        fromAttrs[k] = attrs[k];\n    }\n    return fromAttrs;\n}\nfunction getFormatToAttrs(props, shape) {\n    var toAttrs = {};\n    var attrs = shape.attr();\n    each(props, function (v, k) {\n        if (RESERVED_PORPS.indexOf(k) === -1 && !isEqual(attrs[k], v)) {\n            toAttrs[k] = v;\n        }\n    });\n    return toAttrs;\n}\nfunction checkExistedAttrs(animations, animation) {\n    if (animation.onFrame) {\n        return animations;\n    }\n    var startTime = animation.startTime, delay = animation.delay, duration = animation.duration;\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    each(animations, function (item) {\n        // 后一个动画开始执行的时间 < 前一个动画的结束时间 && 后一个动画的执行时间 > 前一个动画的延迟\n        if (startTime + delay < item.startTime + item.delay + item.duration && duration > item.delay) {\n            each(animation.toAttrs, function (v, k) {\n                if (hasOwnProperty.call(item.toAttrs, k)) {\n                    delete item.toAttrs[k];\n                    delete item.fromAttrs[k];\n                }\n            });\n        }\n    });\n    return animations;\n}\nvar Element = /** @class */ (function (_super) {\n    __extends(Element, _super);\n    function Element(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        /**\n         * @protected\n         * 图形属性\n         * @type {ShapeAttrs}\n         */\n        _this.attrs = {};\n        var attrs = _this.getDefaultAttrs();\n        mix(attrs, cfg.attrs);\n        _this.attrs = attrs;\n        _this.initAttrs(attrs);\n        _this.initAnimate(); // 初始化动画\n        return _this;\n    }\n    // override\n    Element.prototype.getDefaultCfg = function () {\n        return {\n            visible: true,\n            capture: true,\n            zIndex: 0,\n        };\n    };\n    /**\n     * @protected\n     * 获取默认的属相\n     */\n    Element.prototype.getDefaultAttrs = function () {\n        return {\n            matrix: this.getDefaultMatrix(),\n            opacity: 1,\n        };\n    };\n    /**\n     * @protected\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    Element.prototype.onCanvasChange = function (changeType) { };\n    /**\n     * @protected\n     * 初始化属性，有些属性需要加工\n     * @param {object} attrs 属性值\n     */\n    Element.prototype.initAttrs = function (attrs) { };\n    /**\n     * @protected\n     * 初始化动画\n     */\n    Element.prototype.initAnimate = function () {\n        this.set('animable', true);\n        this.set('animating', false);\n    };\n    Element.prototype.isGroup = function () {\n        return false;\n    };\n    Element.prototype.getParent = function () {\n        return this.get('parent');\n    };\n    Element.prototype.getCanvas = function () {\n        return this.get('canvas');\n    };\n    Element.prototype.attr = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var name = args[0], value = args[1];\n        if (!name)\n            return this.attrs;\n        if (isObject(name)) {\n            for (var k in name) {\n                this.setAttr(k, name[k]);\n            }\n            this.afterAttrsChange(name);\n            return this;\n        }\n        if (args.length === 2) {\n            this.setAttr(name, value);\n            this.afterAttrsChange((_a = {},\n                _a[name] = value,\n                _a));\n            return this;\n        }\n        return this.attrs[name];\n    };\n    // 是否被裁剪，被裁剪则不显示，不参与拾取\n    Element.prototype.isClipped = function (refX, refY) {\n        var clip = this.getClip();\n        return clip && !clip.isHit(refX, refY);\n    };\n    /**\n     * 内部设置属性值的接口\n     * @param {string} name 属性名\n     * @param {any} value 属性值\n     */\n    Element.prototype.setAttr = function (name, value) {\n        var originValue = this.attrs[name];\n        if (originValue !== value) {\n            this.attrs[name] = value;\n            this.onAttrChange(name, value, originValue);\n        }\n    };\n    /**\n     * @protected\n     * 属性值发生改变\n     * @param {string} name 属性名\n     * @param {any} value 属性值\n     * @param {any} originValue 属性值\n     */\n    Element.prototype.onAttrChange = function (name, value, originValue) {\n        if (name === 'matrix') {\n            this.set('totalMatrix', null);\n        }\n    };\n    /**\n     * 属性更改后需要做的事情\n     * @protected\n     */\n    Element.prototype.afterAttrsChange = function (targetAttrs) {\n        if (this.cfg.isClipShape) {\n            var applyTo = this.cfg.applyTo;\n            if (applyTo) {\n                applyTo.onCanvasChange('clip');\n            }\n        }\n        else {\n            this.onCanvasChange('attr');\n        }\n    };\n    Element.prototype.show = function () {\n        // 不是高频操作直接使用 set\n        this.set('visible', true);\n        this.onCanvasChange('show');\n        return this;\n    };\n    Element.prototype.hide = function () {\n        // 不是高频操作直接使用 set\n        this.set('visible', false);\n        this.onCanvasChange('hide');\n        return this;\n    };\n    Element.prototype.setZIndex = function (zIndex) {\n        this.set('zIndex', zIndex);\n        var parent = this.getParent();\n        if (parent) {\n            // 改变 zIndex 不应该立即触发渲染 (调用 onCanvasChange('zIndex'))，需要经过 sort 再触发\n            parent.sort();\n        }\n        return this;\n    };\n    Element.prototype.toFront = function () {\n        var parent = this.getParent();\n        if (!parent) {\n            return;\n        }\n        var children = parent.getChildren();\n        var el = this.get('el');\n        var index = children.indexOf(this);\n        children.splice(index, 1);\n        children.push(this);\n        this.onCanvasChange('zIndex');\n    };\n    Element.prototype.toBack = function () {\n        var parent = this.getParent();\n        if (!parent) {\n            return;\n        }\n        var children = parent.getChildren();\n        var el = this.get('el');\n        var index = children.indexOf(this);\n        children.splice(index, 1);\n        children.unshift(this);\n        this.onCanvasChange('zIndex');\n    };\n    Element.prototype.remove = function (destroy) {\n        if (destroy === void 0) { destroy = true; }\n        var parent = this.getParent();\n        if (parent) {\n            removeFromArray(parent.getChildren(), this);\n            if (!parent.get('clearing')) {\n                // 如果父元素正在清理，当前元素不触发 remove\n                this.onCanvasChange('remove');\n            }\n        }\n        else {\n            this.onCanvasChange('remove');\n        }\n        if (destroy) {\n            this.destroy();\n        }\n    };\n    Element.prototype.resetMatrix = function () {\n        this.attr(MATRIX, this.getDefaultMatrix());\n        this.onCanvasChange('matrix');\n    };\n    Element.prototype.getMatrix = function () {\n        return this.attr(MATRIX);\n    };\n    Element.prototype.setMatrix = function (m) {\n        this.attr(MATRIX, m);\n        this.onCanvasChange('matrix');\n    };\n    // 获取总的 matrix\n    Element.prototype.getTotalMatrix = function () {\n        var totalMatrix = this.cfg.totalMatrix;\n        if (!totalMatrix) {\n            var currentMatrix = this.attr('matrix');\n            var parentMatrix = this.cfg.parentMatrix;\n            if (parentMatrix && currentMatrix) {\n                totalMatrix = multiplyMatrix(parentMatrix, currentMatrix);\n            }\n            else {\n                totalMatrix = currentMatrix || parentMatrix;\n            }\n            this.set('totalMatrix', totalMatrix);\n        }\n        return totalMatrix;\n    };\n    // 上层分组设置 matrix\n    Element.prototype.applyMatrix = function (matrix) {\n        var currentMatrix = this.attr('matrix');\n        var totalMatrix = null;\n        if (matrix && currentMatrix) {\n            totalMatrix = multiplyMatrix(matrix, currentMatrix);\n        }\n        else {\n            totalMatrix = currentMatrix || matrix;\n        }\n        this.set('totalMatrix', totalMatrix);\n        this.set('parentMatrix', matrix);\n    };\n    /**\n     * @protected\n     * 获取默认的矩阵\n     * @returns {number[]|null} 默认的矩阵\n     */\n    Element.prototype.getDefaultMatrix = function () {\n        return null;\n    };\n    // 将向量应用设置的矩阵\n    Element.prototype.applyToMatrix = function (v) {\n        var matrix = this.attr('matrix');\n        if (matrix) {\n            return multiplyVec2(matrix, v);\n        }\n        return v;\n    };\n    // 根据设置的矩阵，将向量转换相对于图形/分组的位置\n    Element.prototype.invertFromMatrix = function (v) {\n        var matrix = this.attr('matrix');\n        if (matrix) {\n            var invertMatrix = invert(matrix);\n            if (invertMatrix) {\n                return multiplyVec2(invertMatrix, v);\n            }\n        }\n        return v;\n    };\n    // 设置 clip\n    Element.prototype.setClip = function (clipCfg) {\n        var canvas = this.getCanvas();\n        // 应该只设置当前元素的 clip，不应该去修改 clip 本身，方便 clip 被复用\n        // TODO: setClip 的传参既 shape 配置，也支持 shape 对象\n        // const preShape = this.get('clipShape');\n        // if (preShape) {\n        //   // 将之前的 clipShape 销毁\n        //   preShape.destroy();\n        // }\n        var clipShape = null;\n        // 如果配置项为 null，则不移除 clipShape\n        if (clipCfg) {\n            var ShapeBase = this.getShapeBase();\n            var shapeType = upperFirst(clipCfg.type);\n            var Cons = ShapeBase[shapeType];\n            if (Cons) {\n                clipShape = new Cons({\n                    type: clipCfg.type,\n                    isClipShape: true,\n                    applyTo: this,\n                    attrs: clipCfg.attrs,\n                    canvas: canvas,\n                });\n            }\n        }\n        this.set('clipShape', clipShape);\n        this.onCanvasChange('clip');\n        return clipShape;\n    };\n    Element.prototype.getClip = function () {\n        // 高频率调用的地方直接使用 this.cfg.xxx\n        var clipShape = this.cfg.clipShape;\n        // 未设置时返回 Null，保证一致性\n        if (!clipShape) {\n            return null;\n        }\n        return clipShape;\n    };\n    Element.prototype.clone = function () {\n        var _this = this;\n        var originAttrs = this.attrs;\n        var attrs = {};\n        each(originAttrs, function (i, k) {\n            if (isArray(originAttrs[k])) {\n                attrs[k] = _cloneArrayAttr(originAttrs[k]);\n            }\n            else {\n                attrs[k] = originAttrs[k];\n            }\n        });\n        var cons = this.constructor;\n        // @ts-ignore\n        var clone = new cons({ attrs: attrs });\n        each(CLONE_CFGS, function (cfgName) {\n            clone.set(cfgName, _this.get(cfgName));\n        });\n        return clone;\n    };\n    Element.prototype.destroy = function () {\n        var destroyed = this.destroyed;\n        if (destroyed) {\n            return;\n        }\n        this.attrs = {};\n        _super.prototype.destroy.call(this);\n        // this.onCanvasChange('destroy');\n    };\n    /**\n     * 是否处于动画暂停状态\n     * @return {boolean} 是否处于动画暂停状态\n     */\n    Element.prototype.isAnimatePaused = function () {\n        return this.get('_pause').isPaused;\n    };\n    /**\n     * 执行动画，支持多种函数签名\n     * 1. animate(toAttrs: ElementAttrs, duration: number, easing?: string, callback?: () => void, delay?: number)\n     * 2. animate(onFrame: OnFrame, duration: number, easing?: string, callback?: () => void, delay?: number)\n     * 3. animate(toAttrs: ElementAttrs, cfg: AnimateCfg)\n     * 4. animate(onFrame: OnFrame, cfg: AnimateCfg)\n     * 各个参数的含义为:\n     *   toAttrs  动画最终状态\n     *   onFrame  自定义帧动画函数\n     *   duration 动画执行时间\n     *   easing   动画缓动效果\n     *   callback 动画执行后的回调\n     *   delay    动画延迟时间\n     */\n    Element.prototype.animate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this.get('timeline') && !this.get('canvas')) {\n            return;\n        }\n        this.set('animating', true);\n        var timeline = this.get('timeline');\n        if (!timeline) {\n            timeline = this.get('canvas').get('timeline');\n            this.set('timeline', timeline);\n        }\n        var animations = this.get('animations') || [];\n        // 初始化 tick\n        if (!timeline.timer) {\n            timeline.initTimer();\n        }\n        var toAttrs = args[0], duration = args[1], _a = args[2], easing = _a === void 0 ? 'easeLinear' : _a, _b = args[3], callback = _b === void 0 ? noop : _b, _c = args[4], delay = _c === void 0 ? 0 : _c;\n        var onFrame;\n        var repeat;\n        var pauseCallback;\n        var resumeCallback;\n        var animateCfg;\n        // 第二个参数，既可以是动画最终状态 toAttrs，也可以是自定义帧动画函数 onFrame\n        if (isFunction(toAttrs)) {\n            onFrame = toAttrs;\n            toAttrs = {};\n        }\n        else if (isObject(toAttrs) && toAttrs.onFrame) {\n            // 兼容 3.0 中的写法，onFrame 和 repeat 可在 toAttrs 中设置\n            onFrame = toAttrs.onFrame;\n            repeat = toAttrs.repeat;\n        }\n        // 第二个参数，既可以是执行时间 duration，也可以是动画参数 animateCfg\n        if (isObject(duration)) {\n            animateCfg = duration;\n            duration = animateCfg.duration;\n            easing = animateCfg.easing || 'easeLinear';\n            delay = animateCfg.delay || 0;\n            // animateCfg 中的设置优先级更高\n            repeat = animateCfg.repeat || repeat || false;\n            callback = animateCfg.callback || noop;\n            pauseCallback = animateCfg.pauseCallback || noop;\n            resumeCallback = animateCfg.resumeCallback || noop;\n        }\n        else {\n            // 第四个参数，既可以是回调函数 callback，也可以是延迟时间 delay\n            if (isNumber(callback)) {\n                delay = callback;\n                callback = null;\n            }\n            // 第三个参数，既可以是缓动参数 easing，也可以是回调函数 callback\n            if (isFunction(easing)) {\n                callback = easing;\n                easing = 'easeLinear';\n            }\n            else {\n                easing = easing || 'easeLinear';\n            }\n        }\n        var formatToAttrs = getFormatToAttrs(toAttrs, this);\n        var animation = {\n            fromAttrs: getFormatFromAttrs(formatToAttrs, this),\n            toAttrs: formatToAttrs,\n            duration: duration,\n            easing: easing,\n            repeat: repeat,\n            callback: callback,\n            pauseCallback: pauseCallback,\n            resumeCallback: resumeCallback,\n            delay: delay,\n            startTime: timeline.getTime(),\n            id: uniqueId(),\n            onFrame: onFrame,\n            pathFormatted: false,\n        };\n        // 如果动画元素队列中已经有这个图形了\n        if (animations.length > 0) {\n            // 先检查是否需要合并属性。若有相同的动画，将该属性从前一个动画中删除,直接用后一个动画中\n            animations = checkExistedAttrs(animations, animation);\n        }\n        else {\n            // 否则将图形添加到动画元素队列\n            timeline.addAnimator(this);\n        }\n        animations.push(animation);\n        this.set('animations', animations);\n        this.set('_pause', { isPaused: false });\n    };\n    /**\n     * 停止动画\n     * @param {boolean} toEnd 是否到动画的最终状态\n     */\n    Element.prototype.stopAnimate = function (toEnd) {\n        var _this = this;\n        if (toEnd === void 0) { toEnd = true; }\n        var animations = this.get('animations');\n        each(animations, function (animation) {\n            // 将动画执行到最后一帧\n            if (toEnd) {\n                if (animation.onFrame) {\n                    _this.attr(animation.onFrame(1));\n                }\n                else {\n                    _this.attr(animation.toAttrs);\n                }\n            }\n            if (animation.callback) {\n                // 动画停止时的回调\n                animation.callback();\n            }\n        });\n        this.set('animating', false);\n        this.set('animations', []);\n    };\n    /**\n     * 暂停动画\n     */\n    Element.prototype.pauseAnimate = function () {\n        var timeline = this.get('timeline');\n        var animations = this.get('animations');\n        var pauseTime = timeline.getTime();\n        each(animations, function (animation) {\n            animation._paused = true;\n            animation._pauseTime = pauseTime;\n            if (animation.pauseCallback) {\n                // 动画暂停时的回调\n                animation.pauseCallback();\n            }\n        });\n        // 记录下是在什么时候暂停的\n        this.set('_pause', {\n            isPaused: true,\n            pauseTime: pauseTime,\n        });\n        return this;\n    };\n    /**\n     * 恢复动画\n     */\n    Element.prototype.resumeAnimate = function () {\n        var timeline = this.get('timeline');\n        var current = timeline.getTime();\n        var animations = this.get('animations');\n        var pauseTime = this.get('_pause').pauseTime;\n        // 之后更新属性需要计算动画已经执行的时长，如果暂停了，就把初始时间调后\n        each(animations, function (animation) {\n            animation.startTime = animation.startTime + (current - pauseTime);\n            animation._paused = false;\n            animation._pauseTime = null;\n            if (animation.resumeCallback) {\n                animation.resumeCallback();\n            }\n        });\n        this.set('_pause', {\n            isPaused: false,\n        });\n        this.set('animations', animations);\n        return this;\n    };\n    /**\n     * 触发委托事件\n     * @param  {string}     type 事件类型\n     * @param  {GraphEvent} eventObj 事件对象\n     */\n    Element.prototype.emitDelegation = function (type, eventObj) {\n        var _this = this;\n        var paths = eventObj.propagationPath;\n        var events = this.getEvents();\n        var relativeShape;\n        if (type === 'mouseenter') {\n            relativeShape = eventObj.fromShape;\n        }\n        else if (type === 'mouseleave') {\n            relativeShape = eventObj.toShape;\n        }\n        var _loop_1 = function (i) {\n            var element = paths[i];\n            // 暂定跟 name 绑定\n            var name_1 = element.get('name');\n            if (name_1) {\n                // 第一个 mouseenter 和 mouseleave 的停止即可，因为后面的都是前面的 Parent\n                if (\n                // 只有 element 是 Group 或者 Canvas 的时候，才需要判断 isParent\n                (element.isGroup() || (element.isCanvas && element.isCanvas())) &&\n                    relativeShape &&\n                    isParent(element, relativeShape)) {\n                    return \"break\";\n                }\n                if (isArray(name_1)) {\n                    each(name_1, function (subName) {\n                        _this.emitDelegateEvent(element, subName, eventObj);\n                    });\n                }\n                else {\n                    this_1.emitDelegateEvent(element, name_1, eventObj);\n                }\n            }\n        };\n        var this_1 = this;\n        // 至少有一个对象，且第一个对象为 shape\n        for (var i = 0; i < paths.length; i++) {\n            var state_1 = _loop_1(i);\n            if (state_1 === \"break\")\n                break;\n        }\n    };\n    Element.prototype.emitDelegateEvent = function (element, name, eventObj) {\n        var events = this.getEvents();\n        // 事件委托的形式 name:type\n        var eventName = name + DELEGATION_SPLIT + eventObj.type;\n        if (events[eventName] || events[WILDCARD]) {\n            // 对于通配符 *，事件名称 = 委托事件名称\n            eventObj.name = eventName;\n            eventObj.currentTarget = element;\n            eventObj.delegateTarget = this;\n            // 将委托事件的监听对象 delegateObject 挂载到事件对象上\n            eventObj.delegateObject = element.get('delegateObject');\n            this.emit(eventName, eventObj);\n        }\n    };\n    /**\n     * 移动元素\n     * @param {number} translateX 水平移动距离\n     * @param {number} translateY 垂直移动距离\n     * @return {IElement} 元素\n     */\n    Element.prototype.translate = function (translateX, translateY) {\n        if (translateX === void 0) { translateX = 0; }\n        if (translateY === void 0) { translateY = 0; }\n        var matrix = this.getMatrix();\n        var newMatrix = transform(matrix, [['t', translateX, translateY]]);\n        this.setMatrix(newMatrix);\n        return this;\n    };\n    /**\n     * 移动元素到目标位置\n     * @param {number} targetX 目标位置的水平坐标\n     * @param {number} targetX 目标位置的垂直坐标\n     * @return {IElement} 元素\n     */\n    Element.prototype.move = function (targetX, targetY) {\n        var x = this.attr('x') || 0;\n        var y = this.attr('y') || 0;\n        this.translate(targetX - x, targetY - y);\n        return this;\n    };\n    /**\n     * 移动元素到目标位置，等价于 move 方法。由于 moveTo 的语义性更强，因此在文档中推荐使用 moveTo 方法\n     * @param {number} targetX 目标位置的 x 轴坐标\n     * @param {number} targetY 目标位置的 y 轴坐标\n     * @return {IElement} 元素\n     */\n    Element.prototype.moveTo = function (targetX, targetY) {\n        return this.move(targetX, targetY);\n    };\n    /**\n     * 缩放元素\n     * @param {number} ratioX 水平缩放比例\n     * @param {number} ratioY 垂直缩放比例\n     * @return {IElement} 元素\n     */\n    Element.prototype.scale = function (ratioX, ratioY) {\n        var matrix = this.getMatrix();\n        var newMatrix = transform(matrix, [['s', ratioX, ratioY || ratioX]]);\n        this.setMatrix(newMatrix);\n        return this;\n    };\n    /**\n     * 以画布左上角 (0, 0) 为中心旋转元素\n     * @param {number} radian 旋转角度(弧度值)\n     * @return {IElement} 元素\n     */\n    Element.prototype.rotate = function (radian) {\n        var matrix = this.getMatrix();\n        var newMatrix = transform(matrix, [['r', radian]]);\n        this.setMatrix(newMatrix);\n        return this;\n    };\n    /**\n     * 以起始点为中心旋转元素\n     * @param {number} radian 旋转角度(弧度值)\n     * @return {IElement} 元素\n     */\n    Element.prototype.rotateAtStart = function (rotate) {\n        var _a = this.attr(), x = _a.x, y = _a.y;\n        var matrix = this.getMatrix();\n        var newMatrix = transform(matrix, [\n            ['t', -x, -y],\n            ['r', rotate],\n            ['t', x, y],\n        ]);\n        this.setMatrix(newMatrix);\n        return this;\n    };\n    /**\n     * 以任意点 (x, y) 为中心旋转元素\n     * @param {number} radian 旋转角度(弧度值)\n     * @return {IElement} 元素\n     */\n    Element.prototype.rotateAtPoint = function (x, y, rotate) {\n        var matrix = this.getMatrix();\n        var newMatrix = transform(matrix, [\n            ['t', -x, -y],\n            ['r', rotate],\n            ['t', x, y],\n        ]);\n        this.setMatrix(newMatrix);\n        return this;\n    };\n    return Element;\n}(Base));\nexport default Element;\n//# sourceMappingURL=element.js.map"]},"metadata":{},"sourceType":"module"}