{"ast":null,"code":"import { BBox } from '../../../../util/bbox';\nimport { findLabelTextShape } from '../../util';\nfunction shouldInShapeSingle(geometry, label, shape) {\n  var coordinate = geometry.coordinate;\n  var textShape = findLabelTextShape(label);\n  var textBBox = BBox.fromObject(textShape.getCanvasBBox());\n  var shapeBBox = BBox.fromObject(shape.getBBox());\n  return coordinate.isTransposed ? shapeBBox.height >= textBBox.height : shapeBBox.width >= textBBox.width;\n}\nfunction shouldInShape(geometry, labels, shapes) {\n  var isStack = !!geometry.getAdjust('stack');\n  return isStack || labels.every(function (label, index) {\n    var shape = shapes[index];\n    return shouldInShapeSingle(geometry, label, shape);\n  });\n}\nfunction moveInShape(geometry, label, shape) {\n  var coordinate = geometry.coordinate;\n  var shapeBBox = BBox.fromObject(shape.getBBox());\n  var textShape = findLabelTextShape(label);\n  if (coordinate.isTransposed) {\n    // 水平方向：条形图系列\n    textShape.attr({\n      x: shapeBBox.minX + shapeBBox.width / 2,\n      textAlign: 'center'\n    });\n  } else {\n    // 垂直方向：柱形图系列\n    textShape.attr({\n      y: shapeBBox.minY + shapeBBox.height / 2,\n      textBaseline: 'middle'\n    });\n  }\n}\n/**\n * 适用于 interval geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n */\nexport function intervalAdjustPosition(items, labels, shapes) {\n  var _a;\n  if (shapes.length === 0) {\n    return;\n  }\n  var element = (_a = shapes[0]) === null || _a === void 0 ? void 0 : _a.get('element');\n  var geometry = element === null || element === void 0 ? void 0 : element.geometry;\n  if (!geometry || geometry.type !== 'interval') {\n    return;\n  }\n  var inShape = shouldInShape(geometry, labels, shapes);\n  if (inShape) {\n    shapes.forEach(function (shape, index) {\n      var label = labels[index];\n      moveInShape(geometry, label, shape);\n    });\n  }\n}","map":{"version":3,"sources":["../../../../../src/geometry/label/layout/interval/adjust-position.ts"],"names":[],"mappings":"AACA,SAAS,IAAI,QAAQ,uBAAuB;AAI5C,SAAS,kBAAkB,QAAQ,YAAY;AAE/C,SAAS,mBAAmB,CAAC,QAAkB,EAAE,KAAa,EAAE,KAAe,EAAA;EAC7E,IAAM,UAAU,GAAG,QAAQ,CAAC,UAAU;EACtC,IAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC;EAC3C,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;EAC3D,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;EAElD,OAAO,UAAU,CAAC,YAAY,GAAG,SAAS,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;AAC1G;AAEA,SAAS,aAAa,CAAC,QAAkB,EAAE,MAAgB,EAAE,MAA2B,EAAA;EACtF,IAAM,OAAO,GAAG,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;EAE7C,OACE,OAAO,IACP,MAAM,CAAC,KAAK,CAAC,UAAC,KAAa,EAAE,KAAa,EAAA;IACxC,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC3B,OAAO,mBAAmB,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC;EACpD,CAAC,CAAC;AAEN;AAEA,SAAS,WAAW,CAAC,QAAkB,EAAE,KAAa,EAAE,KAAe,EAAA;EACrE,IAAM,UAAU,GAAG,QAAQ,CAAC,UAAU;EACtC,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;EAClD,IAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC;EAE3C,IAAI,UAAU,CAAC,YAAY,EAAE;IAC3B;IACA,SAAS,CAAC,IAAI,CAAC;MACb,CAAC,EAAE,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,KAAK,GAAG,CAAC;MACvC,SAAS,EAAE;KACZ,CAAC;GACH,MAAM;IACL;IACA,SAAS,CAAC,IAAI,CAAC;MACb,CAAC,EAAE,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC;MACxC,YAAY,EAAE;KACf,CAAC;EACH;AACH;AAEA;;;;;AAKG;AACH,OAAM,SAAU,sBAAsB,CAAC,KAAkB,EAAE,MAAgB,EAAE,MAA2B,EAAA;;EACtG,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;IACvB;EACD;EACD,IAAM,OAAO,GAAY,CAAA,EAAA,GAAA,MAAM,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAC,SAAS,CAAC;EAClD,IAAM,QAAQ,GAAa,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,QAAQ;EAC5C,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;IAC7C;EACD;EAED,IAAM,OAAO,GAAG,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC;EACvD,IAAI,OAAO,EAAE;IACX,MAAM,CAAC,OAAO,CAAC,UAAC,KAAsB,EAAE,KAAa,EAAA;MACnD,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;MAC3B,WAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC;IACrC,CAAC,CAAC;EACH;AACH","sourcesContent":["import { IElement, IGroup, IShape } from '../../../../dependents';\nimport { BBox } from '../../../../util/bbox';\nimport Geometry from '../../../base';\nimport Element from '../../../element';\nimport { LabelItem } from '../../interface';\nimport { findLabelTextShape } from '../../util';\n\nfunction shouldInShapeSingle(geometry: Geometry, label: IGroup, shape: IElement): boolean {\n  const coordinate = geometry.coordinate;\n  const textShape = findLabelTextShape(label);\n  const textBBox = BBox.fromObject(textShape.getCanvasBBox());\n  const shapeBBox = BBox.fromObject(shape.getBBox());\n\n  return coordinate.isTransposed ? shapeBBox.height >= textBBox.height : shapeBBox.width >= textBBox.width;\n}\n\nfunction shouldInShape(geometry: Geometry, labels: IGroup[], shapes: IShape[] | IGroup[]): boolean {\n  const isStack = !!geometry.getAdjust('stack');\n\n  return (\n    isStack ||\n    labels.every((label: IGroup, index: number) => {\n      const shape = shapes[index];\n      return shouldInShapeSingle(geometry, label, shape);\n    })\n  );\n}\n\nfunction moveInShape(geometry: Geometry, label: IGroup, shape: IElement): void {\n  const coordinate = geometry.coordinate;\n  const shapeBBox = BBox.fromObject(shape.getBBox());\n  const textShape = findLabelTextShape(label);\n\n  if (coordinate.isTransposed) {\n    // 水平方向：条形图系列\n    textShape.attr({\n      x: shapeBBox.minX + shapeBBox.width / 2,\n      textAlign: 'center',\n    });\n  } else {\n    // 垂直方向：柱形图系列\n    textShape.attr({\n      y: shapeBBox.minY + shapeBBox.height / 2,\n      textBaseline: 'middle',\n    });\n  }\n}\n\n/**\n * 适用于 interval geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n */\nexport function intervalAdjustPosition(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[]) {\n  if (shapes.length === 0) {\n    return;\n  }\n  const element: Element = shapes[0]?.get('element');\n  const geometry: Geometry = element?.geometry;\n  if (!geometry || geometry.type !== 'interval') {\n    return;\n  }\n\n  const inShape = shouldInShape(geometry, labels, shapes);\n  if (inShape) {\n    shapes.forEach((shape: IShape | IGroup, index: number) => {\n      const label = labels[index];\n      moveInShape(geometry, label, shape);\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}