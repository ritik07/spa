{"ast":null,"code":"var GraphEvent = /** @class */function () {\n  function GraphEvent(type, event) {\n    /**\n     * 是否允许冒泡\n     * @type {boolean}\n     */\n    this.bubbles = true;\n    /**\n     * 触发对象\n     * @type {object}\n     */\n    this.target = null;\n    /**\n     * 监听对象\n     * @type {object}\n     */\n    this.currentTarget = null;\n    /**\n     * 委托对象\n     * @type {object}\n     */\n    this.delegateTarget = null;\n    /**\n     * 委托事件监听对象的代理对象，即 ev.delegateObject = ev.currentTarget.get('delegateObject')\n     * @type {object}\n     */\n    this.delegateObject = null;\n    /**\n     * 是否阻止了原生事件\n     * @type {boolean}\n     */\n    this.defaultPrevented = false;\n    /**\n     * 是否阻止传播（向上冒泡）\n     * @type {boolean}\n     */\n    this.propagationStopped = false;\n    /**\n     * 触发事件的图形\n     * @type {IShape}\n     */\n    this.shape = null;\n    /**\n     * 开始触发事件的图形\n     * @type {IShape}\n     */\n    this.fromShape = null;\n    /**\n     * 事件结束时的触发图形\n     * @type {IShape}\n     */\n    this.toShape = null;\n    // 触发事件的路径\n    this.propagationPath = [];\n    this.type = type;\n    this.name = type;\n    this.originalEvent = event;\n    this.timeStamp = event.timeStamp;\n  }\n  /**\n   * 阻止浏览器默认的行为\n   */\n  GraphEvent.prototype.preventDefault = function () {\n    this.defaultPrevented = true;\n    if (this.originalEvent.preventDefault) {\n      this.originalEvent.preventDefault();\n    }\n  };\n  /**\n   * 阻止冒泡\n   */\n  GraphEvent.prototype.stopPropagation = function () {\n    this.propagationStopped = true;\n  };\n  GraphEvent.prototype.toString = function () {\n    var type = this.type;\n    return \"[Event (type=\" + type + \")]\";\n  };\n  GraphEvent.prototype.save = function () {};\n  GraphEvent.prototype.restore = function () {};\n  return GraphEvent;\n}();\nexport default GraphEvent;","map":{"version":3,"sources":["../../src/event/graph-event.ts"],"names":[],"mappings":"AAGA,IAAA,UAAA,GAAA,aAAA,YAAA;EAiGE,SAAA,UAAA,CAAY,IAAI,EAAE,KAAK,EAAA;IAlEvB;;;AAGG;IACH,IAAA,CAAA,OAAO,GAAY,IAAI;IACvB;;;AAGG;IACH,IAAA,CAAA,MAAM,GAAgB,IAAI;IAC1B;;;AAGG;IACH,IAAA,CAAA,aAAa,GAAgB,IAAI;IACjC;;;AAGG;IACH,IAAA,CAAA,cAAc,GAAgB,IAAI;IAClC;;;AAGG;IACH,IAAA,CAAA,cAAc,GAAW,IAAI;IAC7B;;;AAGG;IACH,IAAA,CAAA,gBAAgB,GAAY,KAAK;IACjC;;;AAGG;IACH,IAAA,CAAA,kBAAkB,GAAY,KAAK;IACnC;;;AAGG;IACH,IAAA,CAAA,KAAK,GAAW,IAAI;IACpB;;;AAGG;IACH,IAAA,CAAA,SAAS,GAAW,IAAI;IACxB;;;AAGG;IACH,IAAA,CAAA,OAAO,GAAW,IAAI;IActB;IACA,IAAA,CAAA,eAAe,GAAU,EAAE;IAGzB,IAAI,CAAC,IAAI,GAAG,IAAI;IAChB,IAAI,CAAC,IAAI,GAAG,IAAI;IAChB,IAAI,CAAC,aAAa,GAAG,KAAK;IAC1B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS;EAClC;EAEA;;AAEG;EACH,UAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACE,IAAI,CAAC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE;MACrC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE;IACpC;EACH,CAAC;EAED;;AAEG;EACH,UAAA,CAAA,SAAA,CAAA,eAAe,GAAf,YAAA;IACE,IAAI,CAAC,kBAAkB,GAAG,IAAI;EAChC,CAAC;EAED,UAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI;IACtB,OAAO,eAAA,GAAgB,IAAI,GAAA,IAAI;EACjC,CAAC;EAED,UAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,YAAA,CAAQ,CAAC;EAET,UAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA,CAAW,CAAC;EACd,OAAA,UAAC;AAAD,CAAC,EAAA;AAED,eAAe,UAAU","sourceRoot":"","sourcesContent":["var GraphEvent = /** @class */ (function () {\n    function GraphEvent(type, event) {\n        /**\n         * 是否允许冒泡\n         * @type {boolean}\n         */\n        this.bubbles = true;\n        /**\n         * 触发对象\n         * @type {object}\n         */\n        this.target = null;\n        /**\n         * 监听对象\n         * @type {object}\n         */\n        this.currentTarget = null;\n        /**\n         * 委托对象\n         * @type {object}\n         */\n        this.delegateTarget = null;\n        /**\n         * 委托事件监听对象的代理对象，即 ev.delegateObject = ev.currentTarget.get('delegateObject')\n         * @type {object}\n         */\n        this.delegateObject = null;\n        /**\n         * 是否阻止了原生事件\n         * @type {boolean}\n         */\n        this.defaultPrevented = false;\n        /**\n         * 是否阻止传播（向上冒泡）\n         * @type {boolean}\n         */\n        this.propagationStopped = false;\n        /**\n         * 触发事件的图形\n         * @type {IShape}\n         */\n        this.shape = null;\n        /**\n         * 开始触发事件的图形\n         * @type {IShape}\n         */\n        this.fromShape = null;\n        /**\n         * 事件结束时的触发图形\n         * @type {IShape}\n         */\n        this.toShape = null;\n        // 触发事件的路径\n        this.propagationPath = [];\n        this.type = type;\n        this.name = type;\n        this.originalEvent = event;\n        this.timeStamp = event.timeStamp;\n    }\n    /**\n     * 阻止浏览器默认的行为\n     */\n    GraphEvent.prototype.preventDefault = function () {\n        this.defaultPrevented = true;\n        if (this.originalEvent.preventDefault) {\n            this.originalEvent.preventDefault();\n        }\n    };\n    /**\n     * 阻止冒泡\n     */\n    GraphEvent.prototype.stopPropagation = function () {\n        this.propagationStopped = true;\n    };\n    GraphEvent.prototype.toString = function () {\n        var type = this.type;\n        return \"[Event (type=\" + type + \")]\";\n    };\n    GraphEvent.prototype.save = function () { };\n    GraphEvent.prototype.restore = function () { };\n    return GraphEvent;\n}());\nexport default GraphEvent;\n//# sourceMappingURL=graph-event.js.map"]},"metadata":{},"sourceType":"module"}