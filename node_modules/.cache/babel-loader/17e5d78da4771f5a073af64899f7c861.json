{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { detect } from 'detect-browser';\nimport Container from './container';\nimport { isBrowser, isNil, isString } from '../util/util';\nimport Timeline from '../animate/timeline';\nimport EventController from '../event/event-contoller';\nvar PX_SUFFIX = 'px';\nvar browser = detect();\nvar isFirefox = browser && browser.name === 'firefox';\nvar Canvas = /** @class */function (_super) {\n  __extends(Canvas, _super);\n  function Canvas(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.initContainer();\n    _this.initDom();\n    _this.initEvents();\n    _this.initTimeline();\n    return _this;\n  }\n  Canvas.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    // set default cursor style for canvas\n    cfg['cursor'] = 'default';\n    // CSS transform 目前尚未经过长时间验证，为了避免影响上层业务，默认关闭，上层按需开启\n    cfg['supportCSSTransform'] = false;\n    return cfg;\n  };\n  /**\n   * @protected\n   * 初始化容器\n   */\n  Canvas.prototype.initContainer = function () {\n    var container = this.get('container');\n    if (isString(container)) {\n      container = document.getElementById(container);\n      this.set('container', container);\n    }\n  };\n  /**\n   * @protected\n   * 初始化 DOM\n   */\n  Canvas.prototype.initDom = function () {\n    var el = this.createDom();\n    this.set('el', el);\n    // 附加到容器\n    var container = this.get('container');\n    container.appendChild(el);\n    // 设置初始宽度\n    this.setDOMSize(this.get('width'), this.get('height'));\n  };\n  /**\n   * @protected\n   * 初始化绑定的事件\n   */\n  Canvas.prototype.initEvents = function () {\n    var eventController = new EventController({\n      canvas: this\n    });\n    eventController.init();\n    this.set('eventController', eventController);\n  };\n  /**\n   * @protected\n   * 初始化时间轴\n   */\n  Canvas.prototype.initTimeline = function () {\n    var timeline = new Timeline(this);\n    this.set('timeline', timeline);\n  };\n  /**\n   * @protected\n   * 修改画布对应的 DOM 的大小\n   * @param {number} width  宽度\n   * @param {number} height 高度\n   */\n  Canvas.prototype.setDOMSize = function (width, height) {\n    var el = this.get('el');\n    if (isBrowser) {\n      el.style.width = width + PX_SUFFIX;\n      el.style.height = height + PX_SUFFIX;\n    }\n  };\n  // 实现接口\n  Canvas.prototype.changeSize = function (width, height) {\n    this.setDOMSize(width, height);\n    this.set('width', width);\n    this.set('height', height);\n    this.onCanvasChange('changeSize');\n  };\n  /**\n   * 获取当前的渲染引擎\n   * @return {Renderer} 返回当前的渲染引擎\n   */\n  Canvas.prototype.getRenderer = function () {\n    return this.get('renderer');\n  };\n  /**\n   * 获取画布的 cursor 样式\n   * @return {Cursor}\n   */\n  Canvas.prototype.getCursor = function () {\n    return this.get('cursor');\n  };\n  /**\n   * 设置画布的 cursor 样式\n   * @param {Cursor} cursor  cursor 样式\n   */\n  Canvas.prototype.setCursor = function (cursor) {\n    this.set('cursor', cursor);\n    var el = this.get('el');\n    if (isBrowser && el) {\n      // 直接设置样式，不等待鼠标移动时再设置\n      el.style.cursor = cursor;\n    }\n  };\n  // 实现接口\n  Canvas.prototype.getPointByEvent = function (ev) {\n    var supportCSSTransform = this.get('supportCSSTransform');\n    if (supportCSSTransform) {\n      // For Firefox <= 38\n      if (isFirefox && !isNil(ev.layerX) && ev.layerX !== ev.offsetX) {\n        return {\n          x: ev.layerX,\n          y: ev.layerY\n        };\n      }\n      if (!isNil(ev.offsetX)) {\n        // For IE6+, Firefox >= 39, Chrome, Safari, Opera\n        return {\n          x: ev.offsetX,\n          y: ev.offsetY\n        };\n      }\n    }\n    // should calculate by self for other cases, like Safari in ios\n    // TODO: support CSS transform\n    var _a = this.getClientByEvent(ev),\n      clientX = _a.x,\n      clientY = _a.y;\n    return this.getPointByClient(clientX, clientY);\n  };\n  // 获取 touch 事件的 clientX 和 clientY 需要单独处理\n  Canvas.prototype.getClientByEvent = function (ev) {\n    var clientInfo = ev;\n    if (ev.touches) {\n      if (ev.type === 'touchend') {\n        clientInfo = ev.changedTouches[0];\n      } else {\n        clientInfo = ev.touches[0];\n      }\n    }\n    return {\n      x: clientInfo.clientX,\n      y: clientInfo.clientY\n    };\n  };\n  // 实现接口\n  Canvas.prototype.getPointByClient = function (clientX, clientY) {\n    var el = this.get('el');\n    var bbox = el.getBoundingClientRect();\n    return {\n      x: clientX - bbox.left,\n      y: clientY - bbox.top\n    };\n  };\n  // 实现接口\n  Canvas.prototype.getClientByPoint = function (x, y) {\n    var el = this.get('el');\n    var bbox = el.getBoundingClientRect();\n    return {\n      x: x + bbox.left,\n      y: y + bbox.top\n    };\n  };\n  // 实现接口\n  Canvas.prototype.draw = function () {};\n  /**\n   * @protected\n   * 销毁 DOM 容器\n   */\n  Canvas.prototype.removeDom = function () {\n    var el = this.get('el');\n    el.parentNode.removeChild(el);\n  };\n  /**\n   * @protected\n   * 清理所有的事件\n   */\n  Canvas.prototype.clearEvents = function () {\n    var eventController = this.get('eventController');\n    eventController.destroy();\n  };\n  Canvas.prototype.isCanvas = function () {\n    return true;\n  };\n  Canvas.prototype.getParent = function () {\n    return null;\n  };\n  Canvas.prototype.destroy = function () {\n    var timeline = this.get('timeline');\n    if (this.get('destroyed')) {\n      return;\n    }\n    this.clear();\n    // 同初始化时相反顺序调用\n    if (timeline) {\n      // 画布销毁时自动停止动画\n      timeline.stop();\n    }\n    this.clearEvents();\n    this.removeDom();\n    _super.prototype.destroy.call(this);\n  };\n  return Canvas;\n}(Container);\nexport default Canvas;","map":{"version":3,"sources":["../../src/abstract/canvas.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { detect } from 'detect-browser';\nimport Container from './container';\nimport { isBrowser, isNil, isString } from '../util/util';\nimport Timeline from '../animate/timeline';\nimport EventController from '../event/event-contoller';\nvar PX_SUFFIX = 'px';\nvar browser = detect();\nvar isFirefox = browser && browser.name === 'firefox';\nvar Canvas = /** @class */ (function (_super) {\n    __extends(Canvas, _super);\n    function Canvas(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.initContainer();\n        _this.initDom();\n        _this.initEvents();\n        _this.initTimeline();\n        return _this;\n    }\n    Canvas.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        // set default cursor style for canvas\n        cfg['cursor'] = 'default';\n        // CSS transform 目前尚未经过长时间验证，为了避免影响上层业务，默认关闭，上层按需开启\n        cfg['supportCSSTransform'] = false;\n        return cfg;\n    };\n    /**\n     * @protected\n     * 初始化容器\n     */\n    Canvas.prototype.initContainer = function () {\n        var container = this.get('container');\n        if (isString(container)) {\n            container = document.getElementById(container);\n            this.set('container', container);\n        }\n    };\n    /**\n     * @protected\n     * 初始化 DOM\n     */\n    Canvas.prototype.initDom = function () {\n        var el = this.createDom();\n        this.set('el', el);\n        // 附加到容器\n        var container = this.get('container');\n        container.appendChild(el);\n        // 设置初始宽度\n        this.setDOMSize(this.get('width'), this.get('height'));\n    };\n    /**\n     * @protected\n     * 初始化绑定的事件\n     */\n    Canvas.prototype.initEvents = function () {\n        var eventController = new EventController({\n            canvas: this,\n        });\n        eventController.init();\n        this.set('eventController', eventController);\n    };\n    /**\n     * @protected\n     * 初始化时间轴\n     */\n    Canvas.prototype.initTimeline = function () {\n        var timeline = new Timeline(this);\n        this.set('timeline', timeline);\n    };\n    /**\n     * @protected\n     * 修改画布对应的 DOM 的大小\n     * @param {number} width  宽度\n     * @param {number} height 高度\n     */\n    Canvas.prototype.setDOMSize = function (width, height) {\n        var el = this.get('el');\n        if (isBrowser) {\n            el.style.width = width + PX_SUFFIX;\n            el.style.height = height + PX_SUFFIX;\n        }\n    };\n    // 实现接口\n    Canvas.prototype.changeSize = function (width, height) {\n        this.setDOMSize(width, height);\n        this.set('width', width);\n        this.set('height', height);\n        this.onCanvasChange('changeSize');\n    };\n    /**\n     * 获取当前的渲染引擎\n     * @return {Renderer} 返回当前的渲染引擎\n     */\n    Canvas.prototype.getRenderer = function () {\n        return this.get('renderer');\n    };\n    /**\n     * 获取画布的 cursor 样式\n     * @return {Cursor}\n     */\n    Canvas.prototype.getCursor = function () {\n        return this.get('cursor');\n    };\n    /**\n     * 设置画布的 cursor 样式\n     * @param {Cursor} cursor  cursor 样式\n     */\n    Canvas.prototype.setCursor = function (cursor) {\n        this.set('cursor', cursor);\n        var el = this.get('el');\n        if (isBrowser && el) {\n            // 直接设置样式，不等待鼠标移动时再设置\n            el.style.cursor = cursor;\n        }\n    };\n    // 实现接口\n    Canvas.prototype.getPointByEvent = function (ev) {\n        var supportCSSTransform = this.get('supportCSSTransform');\n        if (supportCSSTransform) {\n            // For Firefox <= 38\n            if (isFirefox && !isNil(ev.layerX) && ev.layerX !== ev.offsetX) {\n                return {\n                    x: ev.layerX,\n                    y: ev.layerY,\n                };\n            }\n            if (!isNil(ev.offsetX)) {\n                // For IE6+, Firefox >= 39, Chrome, Safari, Opera\n                return {\n                    x: ev.offsetX,\n                    y: ev.offsetY,\n                };\n            }\n        }\n        // should calculate by self for other cases, like Safari in ios\n        // TODO: support CSS transform\n        var _a = this.getClientByEvent(ev), clientX = _a.x, clientY = _a.y;\n        return this.getPointByClient(clientX, clientY);\n    };\n    // 获取 touch 事件的 clientX 和 clientY 需要单独处理\n    Canvas.prototype.getClientByEvent = function (ev) {\n        var clientInfo = ev;\n        if (ev.touches) {\n            if (ev.type === 'touchend') {\n                clientInfo = ev.changedTouches[0];\n            }\n            else {\n                clientInfo = ev.touches[0];\n            }\n        }\n        return {\n            x: clientInfo.clientX,\n            y: clientInfo.clientY,\n        };\n    };\n    // 实现接口\n    Canvas.prototype.getPointByClient = function (clientX, clientY) {\n        var el = this.get('el');\n        var bbox = el.getBoundingClientRect();\n        return {\n            x: clientX - bbox.left,\n            y: clientY - bbox.top,\n        };\n    };\n    // 实现接口\n    Canvas.prototype.getClientByPoint = function (x, y) {\n        var el = this.get('el');\n        var bbox = el.getBoundingClientRect();\n        return {\n            x: x + bbox.left,\n            y: y + bbox.top,\n        };\n    };\n    // 实现接口\n    Canvas.prototype.draw = function () { };\n    /**\n     * @protected\n     * 销毁 DOM 容器\n     */\n    Canvas.prototype.removeDom = function () {\n        var el = this.get('el');\n        el.parentNode.removeChild(el);\n    };\n    /**\n     * @protected\n     * 清理所有的事件\n     */\n    Canvas.prototype.clearEvents = function () {\n        var eventController = this.get('eventController');\n        eventController.destroy();\n    };\n    Canvas.prototype.isCanvas = function () {\n        return true;\n    };\n    Canvas.prototype.getParent = function () {\n        return null;\n    };\n    Canvas.prototype.destroy = function () {\n        var timeline = this.get('timeline');\n        if (this.get('destroyed')) {\n            return;\n        }\n        this.clear();\n        // 同初始化时相反顺序调用\n        if (timeline) {\n            // 画布销毁时自动停止动画\n            timeline.stop();\n        }\n        this.clearEvents();\n        this.removeDom();\n        _super.prototype.destroy.call(this);\n    };\n    return Canvas;\n}(Container));\nexport default Canvas;\n//# sourceMappingURL=canvas.js.map"]},"metadata":{},"sourceType":"module"}