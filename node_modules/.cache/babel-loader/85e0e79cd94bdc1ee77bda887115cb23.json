{"ast":null,"code":"import isFunction from './is-function';\n/**\n * _.memoize(calColor);\n * _.memoize(calColor, (...args) => args[0]);\n * @param f\n * @param resolver\n */\nexport default (function (f, resolver) {\n  if (!isFunction(f)) {\n    throw new TypeError('Expected a function');\n  }\n  var memoized = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    // 使用方法构造 key，如果不存在 resolver，则直接取第一个参数作为 key\n    var key = resolver ? resolver.apply(this, args) : args[0];\n    var cache = memoized.cache;\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = f.apply(this, args);\n    // 缓存起来\n    cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new Map();\n  return memoized;\n});","map":{"version":3,"sources":["../src/memoize.ts"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,eAAe;AAEtC;;;;;AAKG;AACH,gBAAe,UAAC,CAAW,EAAE,QAAqC,EAAA;EAChE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IAClB,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC;EAC3C;EAED,IAAM,QAAQ,GAAG,YAAA;IAAS,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAO,EAAP,EAAA,GAAA,SAAA,CAAA,MAAO,EAAP,EAAA,EAAO,EAAA;MAAP,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACxB;IACA,IAAM,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IAC3D,IAAM,KAAK,GAAG,QAAQ,CAAC,KAAK;IAE5B,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;MAClB,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;IACtB;IACD,IAAM,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;IAClC;IACA,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC;IACtB,OAAO,MAAM;EACf,CAAC;EAED,QAAQ,CAAC,KAAK,GAAG,IAAI,GAAG,EAAE;EAE1B,OAAO,QAAQ;AACjB,CAAC","sourceRoot":"","sourcesContent":["import isFunction from './is-function';\n/**\n * _.memoize(calColor);\n * _.memoize(calColor, (...args) => args[0]);\n * @param f\n * @param resolver\n */\nexport default (function (f, resolver) {\n    if (!isFunction(f)) {\n        throw new TypeError('Expected a function');\n    }\n    var memoized = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // 使用方法构造 key，如果不存在 resolver，则直接取第一个参数作为 key\n        var key = resolver ? resolver.apply(this, args) : args[0];\n        var cache = memoized.cache;\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        var result = f.apply(this, args);\n        // 缓存起来\n        cache.set(key, result);\n        return result;\n    };\n    memoized.cache = new Map();\n    return memoized;\n});\n//# sourceMappingURL=memoize.js.map"]},"metadata":{},"sourceType":"module"}