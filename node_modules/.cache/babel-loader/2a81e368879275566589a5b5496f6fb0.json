{"ast":null,"code":"import { assign, isEmpty, isFunction, isNil, isNumber, isObject, isString, map } from '@antv/util';\nimport { getTickMethod } from './tick-method/register';\nvar Scale = /** @class */function () {\n  function Scale(cfg) {\n    /**\n     * 度量的类型\n     */\n    this.type = 'base';\n    /**\n     * 是否分类类型的度量\n     */\n    this.isCategory = false;\n    /**\n     * 是否线性度量，有linear, time 度量\n     */\n    this.isLinear = false;\n    /**\n     * 是否连续类型的度量，linear,time,log, pow, quantile, quantize 都支持\n     */\n    this.isContinuous = false;\n    /**\n     * 是否是常量的度量，传入和传出一致\n     */\n    this.isIdentity = false;\n    this.values = [];\n    this.range = [0, 1];\n    this.ticks = [];\n    this.__cfg__ = cfg;\n    this.initCfg();\n    this.init();\n  }\n  // 对于原始值的必要转换，如分类、时间字段需转换成数值，用transform/map命名可能更好\n  Scale.prototype.translate = function (v) {\n    return v;\n  };\n  /** 重新初始化 */\n  Scale.prototype.change = function (cfg) {\n    // 覆盖配置项，而不替代\n    assign(this.__cfg__, cfg);\n    this.init();\n  };\n  Scale.prototype.clone = function () {\n    return this.constructor(this.__cfg__);\n  };\n  /** 获取坐标轴需要的ticks */\n  Scale.prototype.getTicks = function () {\n    var _this = this;\n    return map(this.ticks, function (tick, idx) {\n      if (isObject(tick)) {\n        // 仅当符合Tick类型时才有意义\n        return tick;\n      }\n      return {\n        text: _this.getText(tick, idx),\n        tickValue: tick,\n        value: _this.scale(tick)\n      };\n    });\n  };\n  /** 获取Tick的格式化结果 */\n  Scale.prototype.getText = function (value, key) {\n    var formatter = this.formatter;\n    var res = formatter ? formatter(value, key) : value;\n    if (isNil(res) || !isFunction(res.toString)) {\n      return '';\n    }\n    return res.toString();\n  };\n  // 获取配置项中的值，当前 scale 上的值可能会被修改\n  Scale.prototype.getConfig = function (key) {\n    return this.__cfg__[key];\n  };\n  // scale初始化\n  Scale.prototype.init = function () {\n    assign(this, this.__cfg__);\n    this.setDomain();\n    if (isEmpty(this.getConfig('ticks'))) {\n      this.ticks = this.calculateTicks();\n    }\n  };\n  // 子类上覆盖某些属性，不能直接在类上声明，否则会被覆盖\n  Scale.prototype.initCfg = function () {};\n  Scale.prototype.setDomain = function () {};\n  Scale.prototype.calculateTicks = function () {\n    var tickMethod = this.tickMethod;\n    var ticks = [];\n    if (isString(tickMethod)) {\n      var method = getTickMethod(tickMethod);\n      if (!method) {\n        throw new Error('There is no method to to calculate ticks!');\n      }\n      ticks = method(this);\n    } else if (isFunction(tickMethod)) {\n      ticks = tickMethod(this);\n    }\n    return ticks;\n  };\n  // range 的最小值\n  Scale.prototype.rangeMin = function () {\n    return this.range[0];\n  };\n  // range 的最大值\n  Scale.prototype.rangeMax = function () {\n    return this.range[1];\n  };\n  /** 定义域转 0~1 */\n  Scale.prototype.calcPercent = function (value, min, max) {\n    if (isNumber(value)) {\n      return (value - min) / (max - min);\n    }\n    return NaN;\n  };\n  /** 0~1转定义域 */\n  Scale.prototype.calcValue = function (percent, min, max) {\n    return min + percent * (max - min);\n  };\n  return Scale;\n}();\nexport default Scale;","map":{"version":3,"sources":["../src/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { assign, isEmpty, isFunction, isNil, isNumber, isObject, isString, map } from '@antv/util';\nimport { getTickMethod } from './tick-method/register';\nvar Scale = /** @class */ (function () {\n    function Scale(cfg) {\n        /**\n         * 度量的类型\n         */\n        this.type = 'base';\n        /**\n         * 是否分类类型的度量\n         */\n        this.isCategory = false;\n        /**\n         * 是否线性度量，有linear, time 度量\n         */\n        this.isLinear = false;\n        /**\n         * 是否连续类型的度量，linear,time,log, pow, quantile, quantize 都支持\n         */\n        this.isContinuous = false;\n        /**\n         * 是否是常量的度量，传入和传出一致\n         */\n        this.isIdentity = false;\n        this.values = [];\n        this.range = [0, 1];\n        this.ticks = [];\n        this.__cfg__ = cfg;\n        this.initCfg();\n        this.init();\n    }\n    // 对于原始值的必要转换，如分类、时间字段需转换成数值，用transform/map命名可能更好\n    Scale.prototype.translate = function (v) {\n        return v;\n    };\n    /** 重新初始化 */\n    Scale.prototype.change = function (cfg) {\n        // 覆盖配置项，而不替代\n        assign(this.__cfg__, cfg);\n        this.init();\n    };\n    Scale.prototype.clone = function () {\n        return this.constructor(this.__cfg__);\n    };\n    /** 获取坐标轴需要的ticks */\n    Scale.prototype.getTicks = function () {\n        var _this = this;\n        return map(this.ticks, function (tick, idx) {\n            if (isObject(tick)) {\n                // 仅当符合Tick类型时才有意义\n                return tick;\n            }\n            return {\n                text: _this.getText(tick, idx),\n                tickValue: tick,\n                value: _this.scale(tick),\n            };\n        });\n    };\n    /** 获取Tick的格式化结果 */\n    Scale.prototype.getText = function (value, key) {\n        var formatter = this.formatter;\n        var res = formatter ? formatter(value, key) : value;\n        if (isNil(res) || !isFunction(res.toString)) {\n            return '';\n        }\n        return res.toString();\n    };\n    // 获取配置项中的值，当前 scale 上的值可能会被修改\n    Scale.prototype.getConfig = function (key) {\n        return this.__cfg__[key];\n    };\n    // scale初始化\n    Scale.prototype.init = function () {\n        assign(this, this.__cfg__);\n        this.setDomain();\n        if (isEmpty(this.getConfig('ticks'))) {\n            this.ticks = this.calculateTicks();\n        }\n    };\n    // 子类上覆盖某些属性，不能直接在类上声明，否则会被覆盖\n    Scale.prototype.initCfg = function () { };\n    Scale.prototype.setDomain = function () { };\n    Scale.prototype.calculateTicks = function () {\n        var tickMethod = this.tickMethod;\n        var ticks = [];\n        if (isString(tickMethod)) {\n            var method = getTickMethod(tickMethod);\n            if (!method) {\n                throw new Error('There is no method to to calculate ticks!');\n            }\n            ticks = method(this);\n        }\n        else if (isFunction(tickMethod)) {\n            ticks = tickMethod(this);\n        }\n        return ticks;\n    };\n    // range 的最小值\n    Scale.prototype.rangeMin = function () {\n        return this.range[0];\n    };\n    // range 的最大值\n    Scale.prototype.rangeMax = function () {\n        return this.range[1];\n    };\n    /** 定义域转 0~1 */\n    Scale.prototype.calcPercent = function (value, min, max) {\n        if (isNumber(value)) {\n            return (value - min) / (max - min);\n        }\n        return NaN;\n    };\n    /** 0~1转定义域 */\n    Scale.prototype.calcValue = function (percent, min, max) {\n        return min + percent * (max - min);\n    };\n    return Scale;\n}());\nexport default Scale;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}