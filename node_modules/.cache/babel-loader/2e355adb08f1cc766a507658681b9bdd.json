{"ast":null,"code":"import { each, isArray } from '@antv/util';\nimport { catmullRom2bezier, getLinePath } from '../../geometry/shape/util/path';\nimport { toPoints } from '../../util/bbox';\nimport { isPolygonsIntersect } from '@antv/path-util';\nfunction getMaskBBox(context, tolerance) {\n  var event = context.event;\n  var maskShape = event.target;\n  var maskBBox = maskShape.getCanvasBBox();\n  // 如果 bbox 过小则不返回\n  if (!(maskBBox.width >= tolerance || maskBBox.height >= tolerance)) {\n    return null;\n  }\n  return maskBBox;\n}\nfunction getMaskPath(context, tolerance) {\n  var event = context.event;\n  var maskShape = event.target;\n  var maskBBox = maskShape.getCanvasBBox();\n  // 如果 bbox 过小则不返回\n  if (!(maskBBox.width >= tolerance || maskBBox.height >= tolerance)) {\n    return null;\n  }\n  return maskShape.attr('path');\n}\n/**\n * 获取当前事件相关的图表元素\n * @param context 交互的上下文\n * @ignore\n */\nexport function getCurrentElement(context) {\n  var event = context.event;\n  var element;\n  var target = event.target;\n  if (target) {\n    element = target.get('element');\n  }\n  return element;\n}\n/**\n * 获取委托对象\n * @param context 上下文\n * @ignore\n */\nexport function getDelegationObject(context) {\n  var event = context.event;\n  var target = event.target;\n  var delegateObject;\n  if (target) {\n    delegateObject = target.get('delegateObject');\n  }\n  return delegateObject;\n}\nexport function isElementChange(context) {\n  var event = context.event.gEvent;\n  // 在同一个 element 内部移动，label 和 shape 之间\n  if (event && event.fromShape && event.toShape && event.fromShape.get('element') === event.toShape.get('element')) {\n    return false;\n  }\n  return true;\n}\n/**\n * 是否是列表组件\n * @param delegateObject 委托对象\n * @ignore\n */\nexport function isList(delegateObject) {\n  return delegateObject && delegateObject.component && delegateObject.component.isList();\n}\n/**\n * 是否是滑块组件\n * @param delegateObject 委托对象\n * @ignore\n */\nexport function isSlider(delegateObject) {\n  return delegateObject && delegateObject.component && delegateObject.component.isSlider();\n}\n/**\n * 是否由 mask 触发\n * @param context 上下文\n * @ignore\n */\nexport function isMask(context) {\n  var event = context.event;\n  var target = event.target;\n  return target && target.get('name') === 'mask';\n}\n/**\n * 获取被遮挡的 elements\n * @param context 上下文\n * @ignore\n */\nexport function getMaskedElements(context, tolerance) {\n  var target = context.event.target;\n  if (target.get('type') === 'path') {\n    var maskPath = getMaskPath(context, tolerance);\n    if (!maskPath) {\n      return;\n    }\n    return getElementsByPath(context.view, maskPath);\n  }\n  var maskBBox = getMaskBBox(context, tolerance);\n  // 如果 bbox 过小则不返回\n  if (!maskBBox) {\n    return null;\n  }\n  return getIntersectElements(context.view, maskBBox);\n}\n/**\n * @ignore\n */\nexport function getSiblingMaskElements(context, sibling, tolerance) {\n  var maskBBox = getMaskBBox(context, tolerance);\n  // 如果 bbox 过小则不返回\n  if (!maskBBox) {\n    return null;\n  }\n  var view = context.view;\n  var start = getSiblingPoint(view, sibling, {\n    x: maskBBox.x,\n    y: maskBBox.y\n  });\n  var end = getSiblingPoint(view, sibling, {\n    x: maskBBox.maxX,\n    y: maskBBox.maxY\n  });\n  var box = {\n    minX: start.x,\n    minY: start.y,\n    maxX: end.x,\n    maxY: end.y\n  };\n  return getIntersectElements(sibling, box);\n}\n/**\n * 获取所有的图表元素\n * @param view View/Chart\n * @ignore\n */\nexport function getElements(view) {\n  var geometries = view.geometries;\n  var rst = [];\n  each(geometries, function (geom) {\n    var elements = geom.elements;\n    rst = rst.concat(elements);\n  });\n  if (view.views && view.views.length) {\n    each(view.views, function (subView) {\n      rst = rst.concat(getElements(subView));\n    });\n  }\n  return rst;\n}\n/**\n * 获取所有的图表元素\n * @param view View/Chart\n * @param field 字段名\n * @param value 字段值\n * @ignore\n */\nexport function getElementsByField(view, field, value) {\n  var elements = getElements(view);\n  return elements.filter(function (el) {\n    return getElementValue(el, field) === value;\n  });\n}\n/**\n * 根据状态名获取图表元素\n * @param view View/Chart\n * @param stateName 状态名\n * @ignore\n */\nexport function getElementsByState(view, stateName) {\n  var geometries = view.geometries;\n  var rst = [];\n  each(geometries, function (geom) {\n    var elements = geom.getElementsBy(function (el) {\n      return el.hasState(stateName);\n    });\n    rst = rst.concat(elements);\n  });\n  return rst;\n}\n/**\n * 获取图表元素对应字段的值\n * @param element 图表元素\n * @param field 字段名\n * @ignore\n */\nexport function getElementValue(element, field) {\n  var model = element.getModel();\n  var record = model.data;\n  var value;\n  if (isArray(record)) {\n    value = record[0][field];\n  } else {\n    value = record[field];\n  }\n  return value;\n}\n/**\n * 两个包围盒是否相交\n * @param box1 包围盒1\n * @param box2 包围盒2\n * @ignore\n */\nexport function intersectRect(box1, box2) {\n  return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);\n}\n/**\n * 获取包围盒内的图表元素\n * @param view View/Chart\n * @param box 包围盒\n * @ignore\n */\nexport function getIntersectElements(view, box) {\n  var elements = getElements(view);\n  var rst = [];\n  each(elements, function (el) {\n    var shape = el.shape;\n    var shapeBBox = shape.getCanvasBBox();\n    if (intersectRect(box, shapeBBox)) {\n      rst.push(el);\n    }\n  });\n  return rst;\n}\nfunction pathToPoints(path) {\n  var points = [];\n  each(path, function (seg) {\n    var command = seg[0];\n    if (command !== 'A') {\n      for (var i = 1; i < seg.length; i = i + 2) {\n        points.push([seg[i], seg[i + 1]]);\n      }\n    } else {\n      var length_1 = seg.length;\n      points.push([seg[length_1 - 2], seg[length_1 - 1]]);\n    }\n  });\n  return points;\n}\n/**\n * 获取包围盒内的图表元素\n * @param view View/Chart\n * @param path 路径\n * @ignore\n */\nexport function getElementsByPath(view, path) {\n  var elements = getElements(view);\n  var points = pathToPoints(path);\n  var rst = elements.filter(function (el) {\n    var shape = el.shape;\n    var shapePoints;\n    if (shape.get('type') === 'path') {\n      shapePoints = pathToPoints(shape.attr('path'));\n    } else {\n      var shapeBBox = shape.getCanvasBBox();\n      shapePoints = toPoints(shapeBBox);\n    }\n    return isPolygonsIntersect(points, shapePoints);\n  });\n  return rst;\n}\n/**\n * 获取当前 View 的所有组件\n * @param view View/Chart\n * @ignore\n */\nexport function getComponents(view) {\n  return view.getComponents().map(function (co) {\n    return co.component;\n  });\n}\n/** @ignore */\nexport function distance(p1, p2) {\n  var dx = p2.x - p1.x;\n  var dy = p2.y - p1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n/** @ignore */\nexport function getSpline(points, z) {\n  if (points.length <= 2) {\n    return getLinePath(points, false);\n  }\n  var first = points[0];\n  var arr = [];\n  each(points, function (point) {\n    arr.push(point.x);\n    arr.push(point.y);\n  });\n  var path = catmullRom2bezier(arr, z, null);\n  path.unshift(['M', first.x, first.y]);\n  return path;\n}\n/**\n * 检测点是否在包围盒内\n * @param box 包围盒\n * @param point 点\n * @ignore\n */\nexport function isInBox(box, point) {\n  return box.x <= point.x && box.maxX >= point.x && box.y <= point.y && box.maxY > point.y;\n}\n/**\n * 获取同 view 同一级的 views\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getSilbings(view) {\n  var parent = view.parent;\n  var siblings = null;\n  if (parent) {\n    siblings = parent.views.filter(function (sub) {\n      return sub !== view;\n    });\n  }\n  return siblings;\n}\nfunction point2Normalize(view, point) {\n  var coord = view.getCoordinate();\n  return coord.invert(point);\n}\n/**\n * 将 view 上的一点转换成另一个 view 的点\n * @param view 当前的 view\n * @param sibling 同一层级的 view\n * @param point 指定点\n * @ignore\n */\nexport function getSiblingPoint(view, sibling, point) {\n  var normalPoint = point2Normalize(view, point);\n  return sibling.getCoordinate().convert(normalPoint);\n}\n/**\n * 是否在记录中，临时因为所有的 view 中的数据不是引用，而使用的方法\n * 不同 view 上对数据的引用不相等，导致无法直接用 includes\n * 假设 x, y 值相等时是同一条数据，这个假设不完全正确，而改成 isEqual 则成本太高\n * 后面改成同一个引用时可以修改回来\n * @param records\n * @param record\n * @param xFiled\n * @param yField\n * @returns\n * @ignore\n */\nexport function isInRecords(records, record, xFiled, yField) {\n  var isIn = false;\n  each(records, function (r) {\n    if (r[xFiled] === record[xFiled] && r[yField] === record[yField]) {\n      isIn = true;\n      return false;\n    }\n  });\n  return isIn;\n}\n// 级联获取 field 对应的 scale，如果 view 上没有，遍历子 view\nexport function getScaleByField(view, field) {\n  var scale = view.getScaleByField(field);\n  if (!scale && view.views) {\n    each(view.views, function (subView) {\n      scale = getScaleByField(subView, field);\n      if (scale) {\n        return false; // 终止循环\n      }\n    });\n  }\n\n  return scale;\n}","map":{"version":3,"sources":["../../../src/interaction/action/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, isArray } from '@antv/util';\nimport { View } from '../../chart';\nimport { BBox, PathCommand, Point } from '../../dependents';\nimport Geometry from '../../geometry/base';\nimport Element from '../../geometry/element/';\nimport { catmullRom2bezier, getLinePath } from '../../geometry/shape/util/path';\nimport { toPoints } from '../../util/bbox';\nimport { isPolygonsIntersect } from '@antv/path-util';\nimport { ComponentOption, IInteractionContext, LooseObject } from '../../interface';\n\nfunction getMaskBBox(context: IInteractionContext, tolerance: number) {\n  const event = context.event;\n  const maskShape = event.target;\n  const maskBBox = maskShape.getCanvasBBox();\n  // 如果 bbox 过小则不返回\n  if (!(maskBBox.width >= tolerance || maskBBox.height >= tolerance)) {\n    return null;\n  }\n  return maskBBox;\n}\n\nfunction getMaskPath(context: IInteractionContext, tolerance: number) {\n  const event = context.event;\n  const maskShape = event.target;\n  const maskBBox = maskShape.getCanvasBBox();\n  // 如果 bbox 过小则不返回\n  if (!(maskBBox.width >= tolerance || maskBBox.height >= tolerance)) {\n    return null;\n  }\n  return maskShape.attr('path');\n}\n\n/**\n * 获取当前事件相关的图表元素\n * @param context 交互的上下文\n * @ignore\n */\nexport function getCurrentElement(context: IInteractionContext): Element {\n  const event = context.event;\n  let element;\n  const target = event.target;\n  if (target) {\n    element = target.get('element');\n  }\n  return element;\n}\n\n/**\n * 获取委托对象\n * @param context 上下文\n * @ignore\n */\nexport function getDelegationObject(context: IInteractionContext): LooseObject {\n  const event = context.event;\n  const target = event.target;\n  let delegateObject;\n  if (target) {\n    delegateObject = target.get('delegateObject');\n  }\n  return delegateObject;\n}\n\nexport function isElementChange(context: IInteractionContext) {\n  const event = context.event.gEvent;\n  // 在同一个 element 内部移动，label 和 shape 之间\n  if (event && event.fromShape && event.toShape && event.fromShape.get('element') === event.toShape.get('element')) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * 是否是列表组件\n * @param delegateObject 委托对象\n * @ignore\n */\nexport function isList(delegateObject: LooseObject): boolean {\n  return delegateObject && delegateObject.component && delegateObject.component.isList();\n}\n\n/**\n * 是否是滑块组件\n * @param delegateObject 委托对象\n * @ignore\n */\nexport function isSlider(delegateObject: LooseObject): boolean {\n  return delegateObject && delegateObject.component && delegateObject.component.isSlider();\n}\n\n/**\n * 是否由 mask 触发\n * @param context 上下文\n * @ignore\n */\nexport function isMask(context: IInteractionContext): boolean {\n  const event = context.event;\n  const target = event.target;\n  return target && target.get('name') === 'mask';\n}\n\n/**\n * 获取被遮挡的 elements\n * @param context 上下文\n * @ignore\n */\nexport function getMaskedElements(context: IInteractionContext, tolerance: number): Element[] {\n  const target = context.event.target;\n  if (target.get('type') === 'path') {\n    const maskPath = getMaskPath(context, tolerance);\n    if (!maskPath) {\n      return;\n    }\n    return getElementsByPath(context.view, maskPath);\n  }\n  const maskBBox = getMaskBBox(context, tolerance);\n  // 如果 bbox 过小则不返回\n  if (!maskBBox) {\n    return null;\n  }\n  return getIntersectElements(context.view, maskBBox);\n}\n\n/**\n * @ignore\n */\nexport function getSiblingMaskElements(context: IInteractionContext, sibling: View, tolerance: number) {\n  const maskBBox = getMaskBBox(context, tolerance);\n  // 如果 bbox 过小则不返回\n  if (!maskBBox) {\n    return null;\n  }\n  const view = context.view;\n  const start = getSiblingPoint(view, sibling, { x: maskBBox.x, y: maskBBox.y });\n  const end = getSiblingPoint(view, sibling, { x: maskBBox.maxX, y: maskBBox.maxY });\n  const box = {\n    minX: start.x,\n    minY: start.y,\n    maxX: end.x,\n    maxY: end.y,\n  };\n  return getIntersectElements(sibling, box);\n}\n\n/**\n * 获取所有的图表元素\n * @param view View/Chart\n * @ignore\n */\nexport function getElements(view: View): Element[] {\n  const geometries = view.geometries;\n  let rst: Element[] = [];\n  each(geometries, (geom: Geometry) => {\n    const elements = geom.elements;\n    rst = rst.concat(elements);\n  });\n  if (view.views && view.views.length) {\n    each(view.views, (subView) => {\n      rst = rst.concat(getElements(subView));\n    });\n  }\n  return rst;\n}\n\n/**\n * 获取所有的图表元素\n * @param view View/Chart\n * @param field 字段名\n * @param value 字段值\n * @ignore\n */\nexport function getElementsByField(view: View, field: string, value: any) {\n  const elements = getElements(view);\n  return elements.filter((el) => {\n    return getElementValue(el, field) === value;\n  });\n}\n\n/**\n * 根据状态名获取图表元素\n * @param view View/Chart\n * @param stateName 状态名\n * @ignore\n */\nexport function getElementsByState(view: View, stateName: string): Element[] {\n  const geometries = view.geometries;\n  let rst: Element[] = [];\n  each(geometries, (geom: Geometry) => {\n    const elements = geom.getElementsBy((el) => el.hasState(stateName));\n    rst = rst.concat(elements);\n  });\n  return rst;\n}\n\n/**\n * 获取图表元素对应字段的值\n * @param element 图表元素\n * @param field 字段名\n * @ignore\n */\nexport function getElementValue(element: Element, field) {\n  const model = element.getModel();\n  const record = model.data;\n  let value;\n  if (isArray(record)) {\n    value = record[0][field];\n  } else {\n    value = record[field];\n  }\n  return value;\n}\n\n/**\n * 两个包围盒是否相交\n * @param box1 包围盒1\n * @param box2 包围盒2\n * @ignore\n */\nexport function intersectRect(box1, box2) {\n  return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);\n}\n\n/**\n * 获取包围盒内的图表元素\n * @param view View/Chart\n * @param box 包围盒\n * @ignore\n */\nexport function getIntersectElements(view: View, box) {\n  const elements = getElements(view);\n  const rst = [];\n  each(elements, (el) => {\n    const shape = el.shape;\n    const shapeBBox = shape.getCanvasBBox();\n    if (intersectRect(box, shapeBBox)) {\n      rst.push(el);\n    }\n  });\n  return rst;\n}\nfunction pathToPoints(path: any[]) {\n  const points = [];\n  each(path, (seg) => {\n    const command = seg[0];\n    if (command !== 'A') {\n      for (let i = 1; i < seg.length; i = i + 2) {\n        points.push([seg[i], seg[i + 1]]);\n      }\n    } else {\n      const length = seg.length;\n      points.push([seg[length - 2], seg[length - 1]]);\n    }\n  });\n  return points;\n}\n/**\n * 获取包围盒内的图表元素\n * @param view View/Chart\n * @param path 路径\n * @ignore\n */\nexport function getElementsByPath(view: View, path: any[]) {\n  const elements = getElements(view);\n  const points = pathToPoints(path);\n  const rst = elements.filter((el: Element) => {\n    const shape = el.shape;\n    let shapePoints;\n    if (shape.get('type') === 'path') {\n      shapePoints = pathToPoints(shape.attr('path'));\n    } else {\n      const shapeBBox = shape.getCanvasBBox();\n      shapePoints = toPoints(shapeBBox);\n    }\n    return isPolygonsIntersect(points, shapePoints);\n  });\n  return rst;\n}\n\n/**\n * 获取当前 View 的所有组件\n * @param view View/Chart\n * @ignore\n */\nexport function getComponents(view) {\n  return view.getComponents().map((co: ComponentOption) => co.component);\n}\n\n/** @ignore */\nexport function distance(p1: Point, p2: Point) {\n  const dx = p2.x - p1.x;\n  const dy = p2.y - p1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n/** @ignore */\nexport function getSpline(points: Point[], z: boolean): PathCommand[] {\n  if (points.length <= 2) {\n    return getLinePath(points, false);\n  }\n  const first = points[0];\n  const arr = [];\n  each(points, (point) => {\n    arr.push(point.x);\n    arr.push(point.y);\n  });\n  const path = catmullRom2bezier(arr, z, null);\n  path.unshift(['M', first.x, first.y]);\n  return path;\n}\n\n/**\n * 检测点是否在包围盒内\n * @param box 包围盒\n * @param point 点\n * @ignore\n */\nexport function isInBox(box: BBox, point: Point) {\n  return box.x <= point.x && box.maxX >= point.x && box.y <= point.y && box.maxY > point.y;\n}\n\n/**\n * 获取同 view 同一级的 views\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getSilbings(view: View): View[] {\n  const parent = view.parent;\n  let siblings = null;\n  if (parent) {\n    siblings = parent.views.filter((sub) => sub !== view);\n  }\n  return siblings;\n}\n\nfunction point2Normalize(view: View, point: Point): Point {\n  const coord = view.getCoordinate();\n  return coord.invert(point);\n}\n/**\n * 将 view 上的一点转换成另一个 view 的点\n * @param view 当前的 view\n * @param sibling 同一层级的 view\n * @param point 指定点\n * @ignore\n */\nexport function getSiblingPoint(view: View, sibling: View, point: Point): Point {\n  const normalPoint = point2Normalize(view, point);\n  return sibling.getCoordinate().convert(normalPoint);\n}\n\n/**\n * 是否在记录中，临时因为所有的 view 中的数据不是引用，而使用的方法\n * 不同 view 上对数据的引用不相等，导致无法直接用 includes\n * 假设 x, y 值相等时是同一条数据，这个假设不完全正确，而改成 isEqual 则成本太高\n * 后面改成同一个引用时可以修改回来\n * @param records\n * @param record\n * @param xFiled\n * @param yField\n * @returns\n * @ignore\n */\nexport function isInRecords(records: object[], record: object, xFiled: string, yField: string) {\n  let isIn = false;\n  each(records, (r) => {\n    if (r[xFiled] === record[xFiled] && r[yField] === record[yField]) {\n      isIn = true;\n      return false;\n    }\n  });\n  return isIn;\n}\n\n// 级联获取 field 对应的 scale，如果 view 上没有，遍历子 view\nexport function getScaleByField(view: View, field: string) {\n  let scale = view.getScaleByField(field);\n  if (!scale && view.views) {\n    each(view.views, (subView) => {\n      scale = getScaleByField(subView, field);\n      if (scale) {\n        return false; // 终止循环\n      }\n    });\n  }\n  return scale;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}