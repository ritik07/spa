{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nimport { MarkerSymbols } from '../../../util/marker';\nimport { getStyle } from '../util/get-style';\nexport var SHAPES = ['circle', 'square', 'bowtie', 'diamond', 'hexagon', 'triangle', 'triangle-down'];\nexport var HOLLOW_SHAPES = ['cross', 'tick', 'plus', 'hyphen', 'line'];\n/**\n * @ignore\n * Draws points\n * @param shape\n * @param cfg\n * @param container\n * @param shapeName\n * @param isStroke\n * @returns points\n */\nexport function drawPoints(shape, cfg, container, shapeName, isStroke) {\n  var e_1, _a;\n  var style = getStyle(cfg, isStroke, !isStroke, 'r');\n  var points = shape.parsePoints(cfg.points);\n  var pointPosition = points[0];\n  if (cfg.isStack) {\n    pointPosition = points[1];\n  } else if (points.length > 1) {\n    var group = container.addGroup();\n    try {\n      for (var points_1 = __values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {\n        var point = points_1_1.value;\n        group.addShape({\n          type: 'marker',\n          attrs: __assign(__assign(__assign({}, style), {\n            symbol: MarkerSymbols[shapeName] || shapeName\n          }), point)\n        });\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (points_1_1 && !points_1_1.done && (_a = points_1.return)) _a.call(points_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return group;\n  }\n  return container.addShape({\n    type: 'marker',\n    attrs: __assign(__assign(__assign({}, style), {\n      symbol: MarkerSymbols[shapeName] || shapeName\n    }), pointPosition)\n  });\n}","map":{"version":3,"sources":["../../../../src/geometry/shape/point/util.ts"],"names":[],"mappings":";AAEA,SAAS,aAAa,QAAQ,sBAAsB;AACpD,SAAS,QAAQ,QAAQ,mBAAmB;AAE5C,OAAO,IAAM,MAAM,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,eAAe,CAAC;AACvG,OAAO,IAAM,aAAa,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC;AAExE;;;;;;;;;AASG;AACH,OAAM,SAAU,UAAU,CACxB,KAAK,EACL,GAAc,EACd,SAAiB,EACjB,SAAiB,EACjB,QAAiB,EAAA;;EAEjB,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC;EACrD,IAAM,MAAM,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC;EAC5C,IAAI,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC;EAC7B,IAAI,GAAG,CAAC,OAAO,EAAE;IACf,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC;GAC1B,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;IAC5B,IAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,EAAE;;MAClC,KAAoB,IAAA,QAAA,GAAA,QAAA,CAAA,MAAM,CAAA,EAAA,UAAA,GAAA,QAAA,CAAA,IAAA,EAAA,EAAA,CAAA,UAAA,CAAA,IAAA,EAAA,UAAA,GAAA,QAAA,CAAA,IAAA,EAAA,EAAE;QAAvB,IAAM,KAAK,GAAA,UAAA,CAAA,KAAA;QACd,KAAK,CAAC,QAAQ,CAAC;UACb,IAAI,EAAE,QAAQ;UACd,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,KAAK,CAAA,EAAA;YACR,MAAM,EAAE,aAAa,CAAC,SAAS,CAAC,IAAI;UAAS,CAAA,CAAA,EAC1C,KAAK;SAEX,CAAC;MACH;;;;;;;;;;;;IACD,OAAO,KAAK;EACb;EAED,OAAO,SAAS,CAAC,QAAQ,CAAC;IACxB,IAAI,EAAE,QAAQ;IACd,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,KAAK,CAAA,EAAA;MACR,MAAM,EAAE,aAAa,CAAC,SAAS,CAAC,IAAI;IAAS,CAAA,CAAA,EAC1C,aAAa;GAEnB,CAAC;AACJ","sourcesContent":["import { IGroup, IShape } from '../../../dependents';\nimport { ShapeInfo } from '../../../interface';\nimport { MarkerSymbols } from '../../../util/marker';\nimport { getStyle } from '../util/get-style';\n\nexport const SHAPES = ['circle', 'square', 'bowtie', 'diamond', 'hexagon', 'triangle', 'triangle-down'];\nexport const HOLLOW_SHAPES = ['cross', 'tick', 'plus', 'hyphen', 'line'];\n\n/**\n * @ignore\n * Draws points\n * @param shape\n * @param cfg\n * @param container\n * @param shapeName\n * @param isStroke\n * @returns points\n */\nexport function drawPoints(\n  shape,\n  cfg: ShapeInfo,\n  container: IGroup,\n  shapeName: string,\n  isStroke: boolean\n): IShape | IGroup {\n  const style = getStyle(cfg, isStroke, !isStroke, 'r');\n  const points = shape.parsePoints(cfg.points);\n  let pointPosition = points[0];\n  if (cfg.isStack) {\n    pointPosition = points[1];\n  } else if (points.length > 1) {\n    const group = container.addGroup();\n    for (const point of points) {\n      group.addShape({\n        type: 'marker',\n        attrs: {\n          ...style,\n          symbol: MarkerSymbols[shapeName] || shapeName,\n          ...point,\n        },\n      });\n    }\n    return group;\n  }\n\n  return container.addShape({\n    type: 'marker',\n    attrs: {\n      ...style,\n      symbol: MarkerSymbols[shapeName] || shapeName,\n      ...pointPosition,\n    },\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}