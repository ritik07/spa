{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\nvar Path = /** @class */function (_super) {\n  __extends(Path, _super);\n  function Path(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.type = 'path';\n    _this.shapeType = 'line';\n    var _a = cfg.connectNulls,\n      connectNulls = _a === void 0 ? false : _a,\n      _b = cfg.showSinglePoint,\n      showSinglePoint = _b === void 0 ? true : _b;\n    _this.connectNulls = connectNulls;\n    _this.showSinglePoint = showSinglePoint;\n    return _this;\n  }\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n  Path.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    var e_1, _a, e_2, _b, e_3, _c;\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    // Path 的每个 element 对应一组数据\n    var keyData = new Map();\n    var keyIndex = new Map();\n    var keys = [];\n    var index = 0;\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      var key = this.getElementId(mappingData);\n      keys.push(key);\n      keyData.set(key, mappingData);\n      keyIndex.set(key, index);\n      index++;\n    }\n    this.elements = new Array(index);\n    var _d = diff(this.lastElementsMap, keys),\n      added = _d.added,\n      updated = _d.updated,\n      removed = _d.removed;\n    try {\n      for (var added_1 = __values(added), added_1_1 = added_1.next(); !added_1_1.done; added_1_1 = added_1.next()) {\n        var key = added_1_1.value;\n        var mappingData = keyData.get(key);\n        var shapeFactory = this.getShapeFactory();\n        var shapeCfg = this.getShapeInfo(mappingData);\n        var i = keyIndex.get(key);\n        var element = new Element({\n          shapeFactory: shapeFactory,\n          container: this.container,\n          offscreenGroup: this.getOffscreenGroup(),\n          elementIndex: i\n        });\n        element.geometry = this;\n        element.animate = this.animateOption;\n        element.draw(shapeCfg, isUpdate); // 绘制 shape\n        this.elementsMap[key] = element;\n        this.elements[i] = element;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (added_1_1 && !added_1_1.done && (_a = added_1.return)) _a.call(added_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    try {\n      for (var updated_1 = __values(updated), updated_1_1 = updated_1.next(); !updated_1_1.done; updated_1_1 = updated_1.next()) {\n        var key = updated_1_1.value;\n        var mappingData = keyData.get(key);\n        var element = this.lastElementsMap[key];\n        var i = keyIndex.get(key);\n        var shapeCfg = this.getShapeInfo(mappingData);\n        var preShapeCfg = element.getModel();\n        if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n          element.animate = this.animateOption;\n          // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n          element.update(shapeCfg); // 更新对应的 element\n        }\n\n        this.elementsMap[key] = element;\n        this.elements[i] = element;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (updated_1_1 && !updated_1_1.done && (_b = updated_1.return)) _b.call(updated_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    try {\n      for (var removed_1 = __values(removed), removed_1_1 = removed_1.next(); !removed_1_1.done; removed_1_1 = removed_1.next()) {\n        var key = removed_1_1.value;\n        var element = this.lastElementsMap[key];\n        // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n        element.animate = this.animateOption;\n        element.destroy();\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (removed_1_1 && !removed_1_1.done && (_c = removed_1.return)) _c.call(removed_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n  Path.prototype.getPointsAndData = function (mappingData) {\n    var points = [];\n    var data = [];\n    for (var i = 0, len = mappingData.length; i < len; i++) {\n      var obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n    return {\n      points: points,\n      data: data\n    };\n  };\n  Path.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n    var _a = this.getPointsAndData(mappingData),\n      points = _a.points,\n      data = _a.data;\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n    return shapeCfg;\n  };\n  return Path;\n}(Geometry);\nexport default Path;","map":{"version":3,"sources":["../../src/geometry/path.ts"],"names":[],"mappings":"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","sourcesContent":["import { FIELD_ORIGIN } from '../constant';\nimport { MappingDatum, ShapeInfo } from '../interface';\nimport Geometry, { GeometryCfg } from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n\n/** Path 构造函数参数类型 */\nexport interface PathCfg extends GeometryCfg {\n  /** 是否连接空值 */\n  connectNulls?: boolean;\n  /** 单个孤立数据点是否展示 */\n  showSinglePoint?: boolean;\n}\n\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\nexport default class Path extends Geometry {\n  public readonly type: string = 'path';\n  public readonly shapeType: string = 'line';\n  /** 是否连接空值 */\n  public connectNulls: boolean;\n  /** 单个孤立数据点是否展示 */\n  public showSinglePoint: boolean;\n\n  constructor(cfg: PathCfg) {\n    super(cfg);\n\n    const { connectNulls = false, showSinglePoint = true } = cfg;\n    this.connectNulls = connectNulls;\n    this.showSinglePoint = showSinglePoint;\n  }\n\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n  protected updateElements(mappingDataArray: MappingDatum[][], isUpdate: boolean = false) {\n    // Path 的每个 element 对应一组数据\n    const keyData = new Map<string, MappingDatum[]>();\n    const keyIndex = new Map<string, number>();\n    const keys: string[] = [];\n\n    let index = 0;\n    for (let i = 0; i < mappingDataArray.length; i++) {\n      const mappingData = mappingDataArray[i];\n      const key = this.getElementId(mappingData);\n      keys.push(key);\n      keyData.set(key, mappingData);\n      keyIndex.set(key, index);\n      index++;\n    }\n\n    this.elements = new Array(index);\n\n    const { added, updated, removed } = diff(this.lastElementsMap, keys);\n\n    for (const key of added) {\n      const mappingData = keyData.get(key);\n      const shapeFactory = this.getShapeFactory();\n      const shapeCfg = this.getShapeInfo(mappingData);\n      const i = keyIndex.get(key);\n      const element = new Element({\n        shapeFactory,\n        container: this.container,\n        offscreenGroup: this.getOffscreenGroup(),\n        elementIndex: i,\n      });\n      element.geometry = this;\n      element.animate = this.animateOption;\n      element.draw(shapeCfg, isUpdate); // 绘制 shape\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (const key of updated) {\n      const mappingData = keyData.get(key);\n      const element = this.lastElementsMap[key];\n      const i = keyIndex.get(key);\n      const shapeCfg = this.getShapeInfo(mappingData);\n      const preShapeCfg = element.getModel();\n      if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n        element.animate = this.animateOption;\n        // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n        element.update(shapeCfg); // 更新对应的 element\n      }\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (const key of removed) {\n      const element = this.lastElementsMap[key];\n      // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n      element.animate = this.animateOption;\n      element.destroy();\n    }\n  }\n\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n  protected getPointsAndData(mappingData: MappingDatum[]) {\n    const points = [];\n    const data = [];\n\n    for (let i = 0, len = mappingData.length; i < len; i++) {\n      const obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y,\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n\n    return {\n      points,\n      data,\n    };\n  }\n\n  private getShapeInfo(mappingData: MappingDatum[]): ShapeInfo {\n    const shapeCfg = this.getDrawCfg(mappingData[0]);\n    const { points, data } = this.getPointsAndData(mappingData);\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n\n    return shapeCfg;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}