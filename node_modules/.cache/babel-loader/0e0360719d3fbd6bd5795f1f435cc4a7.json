{"ast":null,"code":"import { getLogPositiveMin, log } from '../util/math';\n/**\n * 计算 log 的 ticks，考虑 min = 0 的场景\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\nexport default function calculateLogTicks(cfg) {\n  var base = cfg.base,\n    tickCount = cfg.tickCount,\n    min = cfg.min,\n    max = cfg.max,\n    values = cfg.values;\n  var minTick;\n  var maxTick = log(base, max);\n  if (min > 0) {\n    minTick = Math.floor(log(base, min));\n  } else {\n    var positiveMin = getLogPositiveMin(values, base, max);\n    minTick = Math.floor(log(base, positiveMin));\n  }\n  var count = maxTick - minTick;\n  var avg = Math.ceil(count / tickCount);\n  var ticks = [];\n  for (var i = minTick; i < maxTick + avg; i = i + avg) {\n    ticks.push(Math.pow(base, i));\n  }\n  if (min <= 0) {\n    // 最小值 <= 0 时显示 0\n    ticks.unshift(0);\n  }\n  return ticks;\n}","map":{"version":3,"sources":["../../src/tick-method/log.ts"],"names":[],"mappings":"AAEA,SAAS,iBAAiB,EAAE,GAAG,QAAQ,cAAc;AAErD;;;;AAIG;AACH,eAAc,SAAU,iBAAiB,CAAC,GAAgB,EAAA;EAChD,IAAA,IAAI,GAAkC,GAAG,CAAA,IAArC;IAAE,SAAS,GAAuB,GAAG,CAAA,SAA1B;IAAE,GAAG,GAAkB,GAAG,CAAA,GAArB;IAAE,GAAG,GAAa,GAAG,CAAA,GAAhB;IAAE,MAAM,GAAK,GAAG,CAAA,MAAR;EACzC,IAAI,OAAO;EACX,IAAM,OAAO,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC;EAC9B,IAAI,GAAG,GAAG,CAAC,EAAE;IACX,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;GACrC,MAAM;IACL,IAAM,WAAW,GAAG,iBAAiB,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC;IACxD,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;EAC7C;EACD,IAAM,KAAK,GAAG,OAAO,GAAG,OAAO;EAC/B,IAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;EACxC,IAAM,KAAK,GAAG,EAAE;EAChB,KAAK,IAAI,CAAC,GAAG,OAAO,EAAE,CAAC,GAAG,OAAO,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE;IACpD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EAC9B;EACD,IAAI,GAAG,IAAI,CAAC,EAAE;IACZ;IACA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;EACjB;EACD,OAAO,KAAK;AACd","sourceRoot":"","sourcesContent":["import { getLogPositiveMin, log } from '../util/math';\n/**\n * 计算 log 的 ticks，考虑 min = 0 的场景\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\nexport default function calculateLogTicks(cfg) {\n    var base = cfg.base, tickCount = cfg.tickCount, min = cfg.min, max = cfg.max, values = cfg.values;\n    var minTick;\n    var maxTick = log(base, max);\n    if (min > 0) {\n        minTick = Math.floor(log(base, min));\n    }\n    else {\n        var positiveMin = getLogPositiveMin(values, base, max);\n        minTick = Math.floor(log(base, positiveMin));\n    }\n    var count = maxTick - minTick;\n    var avg = Math.ceil(count / tickCount);\n    var ticks = [];\n    for (var i = minTick; i < maxTick + avg; i = i + avg) {\n        ticks.push(Math.pow(base, i));\n    }\n    if (min <= 0) {\n        // 最小值 <= 0 时显示 0\n        ticks.unshift(0);\n    }\n    return ticks;\n}\n//# sourceMappingURL=log.js.map"]},"metadata":{},"sourceType":"module"}