{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Base } from '@antv/g-base';\nimport { deepMix, each, hasKey, isObject } from '@antv/util';\nvar LOCATION_FIELD_MAP = {\n  none: [],\n  point: ['x', 'y'],\n  region: ['start', 'end'],\n  points: ['points'],\n  circle: ['center', 'radius', 'startAngle', 'endAngle']\n};\nvar Component = /** @class */function (_super) {\n  __extends(Component, _super);\n  function Component(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.initCfg();\n    return _this;\n  }\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  Component.prototype.getDefaultCfg = function () {\n    return {\n      id: '',\n      name: '',\n      type: '',\n      locationType: 'none',\n      offsetX: 0,\n      offsetY: 0,\n      animate: false,\n      capture: true,\n      updateAutoRender: false,\n      animateOption: {\n        appear: null,\n        update: {\n          duration: 400,\n          easing: 'easeQuadInOut'\n        },\n        enter: {\n          duration: 400,\n          easing: 'easeQuadInOut'\n        },\n        leave: {\n          duration: 350,\n          easing: 'easeQuadIn'\n        }\n      },\n      events: null,\n      defaultCfg: {},\n      visible: true\n    };\n  };\n  /**\n   * 清理组件的内容，一般配合 render 使用\n   * @example\n   * axis.clear();\n   * axis.render();\n   */\n  Component.prototype.clear = function () {};\n  /**\n   * 更新组件\n   * @param {object} cfg 更新属性\n   */\n  Component.prototype.update = function (cfg) {\n    var _this = this;\n    var defaultCfg = this.get('defaultCfg') || {};\n    each(cfg, function (value, name) {\n      var originCfg = _this.get(name);\n      var newCfg = value;\n      if (originCfg !== value) {\n        // 判断两者是否相等，主要是进行 null 的判定\n        if (isObject(value) && defaultCfg[name]) {\n          // 新设置的属性与默认值进行合并\n          newCfg = deepMix({}, defaultCfg[name], value);\n        }\n        _this.set(name, newCfg);\n      }\n    });\n    this.updateInner(cfg);\n    this.afterUpdate(cfg);\n  };\n  // 更新内部\n  Component.prototype.updateInner = function (cfg) {};\n  Component.prototype.afterUpdate = function (cfg) {\n    // 更新时考虑显示、隐藏\n    if (hasKey(cfg, 'visible')) {\n      if (cfg.visible) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n    // 更新时考虑capture\n    if (hasKey(cfg, 'capture')) {\n      this.setCapture(cfg.capture);\n    }\n  };\n  Component.prototype.getLayoutBBox = function () {\n    return this.getBBox(); // 默认返回 getBBox，不同的组件内部单独实现\n  };\n\n  Component.prototype.getLocationType = function () {\n    return this.get('locationType');\n  };\n  Component.prototype.getOffset = function () {\n    return {\n      offsetX: this.get('offsetX'),\n      offsetY: this.get('offsetY')\n    };\n  };\n  // 默认使用 update\n  Component.prototype.setOffset = function (offsetX, offsetY) {\n    this.update({\n      offsetX: offsetX,\n      offsetY: offsetY\n    });\n  };\n  Component.prototype.setLocation = function (cfg) {\n    var location = __assign({}, cfg);\n    this.update(location);\n  };\n  // 实现 ILocation 接口的 getLocation\n  Component.prototype.getLocation = function () {\n    var _this = this;\n    var location = {};\n    var locationType = this.get('locationType');\n    var fields = LOCATION_FIELD_MAP[locationType];\n    each(fields, function (field) {\n      location[field] = _this.get(field);\n    });\n    return location;\n  };\n  Component.prototype.isList = function () {\n    return false;\n  };\n  Component.prototype.isSlider = function () {\n    return false;\n  };\n  /**\n   * @protected\n   * 初始化，用于具体的组件继承\n   */\n  Component.prototype.init = function () {};\n  // 将组件默认的配置项设置合并到传入的配置项\n  Component.prototype.initCfg = function () {\n    var _this = this;\n    var defaultCfg = this.get('defaultCfg');\n    each(defaultCfg, function (value, name) {\n      var cfg = _this.get(name);\n      if (isObject(cfg)) {\n        var newCfg = deepMix({}, value, cfg);\n        _this.set(name, newCfg);\n      }\n    });\n  };\n  return Component;\n}(Base);\nexport default Component;","map":{"version":3,"sources":["../../src/abstract/component.ts"],"names":[],"mappings":";AAAA,SAAS,IAAI,QAAQ,cAAc;AACnC,SAAS,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,QAAQ,YAAY;AAG5D,IAAM,kBAAkB,GAAG;EACzB,IAAI,EAAE,EAAE;EACR,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;EACjB,MAAM,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC;EACxB,MAAM,EAAE,CAAC,QAAQ,CAAC;EAClB,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU;CACtD;AAED,IAAA,SAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAwE,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;EACtE,SAAA,SAAA,CAAY,GAAM,EAAA;IAAlB,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,GAAG,CAAC,IAAA,IAAA;IACV,KAAI,CAAC,OAAO,EAAE;;EAChB;EACA;;;;AAIG;EACI,SAAA,CAAA,SAAA,CAAA,aAAa,GAApB,YAAA;IACE,OAAO;MACL,EAAE,EAAE,EAAE;MACN,IAAI,EAAE,EAAE;MACR,IAAI,EAAE,EAAE;MACR,YAAY,EAAE,MAAM;MACpB,OAAO,EAAE,CAAC;MACV,OAAO,EAAE,CAAC;MACV,OAAO,EAAE,KAAK;MACd,OAAO,EAAE,IAAI;MACb,gBAAgB,EAAE,KAAK;MACvB,aAAa,EAAE;QACb,MAAM,EAAE,IAAI;QACZ,MAAM,EAAE;UACN,QAAQ,EAAE,GAAG;UACb,MAAM,EAAE;SACT;QACD,KAAK,EAAE;UACL,QAAQ,EAAE,GAAG;UACb,MAAM,EAAE;SACT;QACD,KAAK,EAAE;UACL,QAAQ,EAAE,GAAG;UACb,MAAM,EAAE;QACT;OACF;MACD,MAAM,EAAE,IAAI;MACZ,UAAU,EAAE,CAAA,CAAE;MACd,OAAO,EAAE;KACV;EACH,CAAC;EAED;;;;;AAKG;EACI,SAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,YAAA,CAAgB,CAAC;EAEjB;;;AAGG;EACI,SAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,GAAe,EAAA;IAA7B,IAAA,KAAA,GAAA,IAAA;IACE,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAA,CAAE;IAC/C,IAAI,CAAC,GAAG,EAAE,UAAC,KAAK,EAAE,IAAI,EAAA;MACpB,IAAM,SAAS,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC;MAChC,IAAI,MAAM,GAAG,KAAK;MAClB,IAAI,SAAS,KAAK,KAAK,EAAE;QACvB;QACA,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;UACvC;UACA,MAAM,GAAG,OAAO,CAAC,CAAA,CAAE,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;QAC9C;QACD,KAAI,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC;MACvB;IACH,CAAC,CAAC;IACF,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;IACrB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;EACvB,CAAC;EACD;EACU,SAAA,CAAA,SAAA,CAAA,WAAW,GAArB,UAAsB,GAAe,EAAA,CAErC,CAAC;EAES,SAAA,CAAA,SAAA,CAAA,WAAW,GAArB,UAAsB,GAAe,EAAA;IACnC;IACA,IAAI,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,EAAE;MAC1B,IAAI,GAAG,CAAC,OAAO,EAAE;QACf,IAAI,CAAC,IAAI,EAAE;OACZ,MAAM;QACL,IAAI,CAAC,IAAI,EAAE;MACZ;IACF;IACD;IACA,IAAI,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,EAAE;MAC1B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC;IAC7B;EACH,CAAC;EAIM,SAAA,CAAA,SAAA,CAAA,aAAa,GAApB,YAAA;IACE,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;EACzB,CAAC;;EAEM,SAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,YAAA;IACE,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC;EACjC,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,YAAA;IACE,OAAO;MACL,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;MAC5B,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS;KAC5B;EACH,CAAC;EAED;EACO,SAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UAAiB,OAAe,EAAE,OAAe,EAAA;IAC/C,IAAI,CAAC,MAAM,CAAC;MACV,OAAO,EAAA,OAAA;MACP,OAAO,EAAA;KACH,CAAC;EACT,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,UAAmB,GAAgB,EAAA;IACjC,IAAM,QAAQ,GAAG,QAAA,CAAA,CAAA,CAAA,EAAK,GAAG,CAAgB;IACzC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;EACvB,CAAC;EAED;EACO,SAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACE,IAAM,QAAQ,GAAG,CAAA,CAAiB;IAClC,IAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC;IAC7C,IAAM,MAAM,GAAG,kBAAkB,CAAC,YAAY,CAAC;IAC/C,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK,EAAA;MACjB,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC;IACnC,CAAC,CAAC;IACF,OAAO,QAAQ;EACjB,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,OAAO,KAAK;EACd,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,YAAA;IACE,OAAO,KAAK;EACd,CAAC;EAED;;;AAGG;EACI,SAAA,CAAA,SAAA,CAAA,IAAI,GAAX,YAAA,CAAe,CAAC;EAmBhB;EACQ,SAAA,CAAA,SAAA,CAAA,OAAO,GAAf,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACE,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC;IACzC,IAAI,CAAC,UAAU,EAAE,UAAC,KAAK,EAAE,IAAI,EAAA;MAC3B,IAAM,GAAG,GAAG,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC;MAC1B,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;QACjB,IAAM,MAAM,GAAG,OAAO,CAAC,CAAA,CAAE,EAAE,KAAK,EAAE,GAAG,CAAC;QACtC,KAAI,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC;MACvB;IACH,CAAC,CAAC;EACJ,CAAC;EACH,OAAA,SAAC;AAAD,CAAC,CA9KuE,IAAI,CAAA;AAgL5E,eAAe,SAAS","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { Base } from '@antv/g-base';\nimport { deepMix, each, hasKey, isObject } from '@antv/util';\nvar LOCATION_FIELD_MAP = {\n    none: [],\n    point: ['x', 'y'],\n    region: ['start', 'end'],\n    points: ['points'],\n    circle: ['center', 'radius', 'startAngle', 'endAngle'],\n};\nvar Component = /** @class */ (function (_super) {\n    __extends(Component, _super);\n    function Component(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.initCfg();\n        return _this;\n    }\n    /**\n     * @protected\n     * 默认的配置项\n     * @returns {object} 默认的配置项\n     */\n    Component.prototype.getDefaultCfg = function () {\n        return {\n            id: '',\n            name: '',\n            type: '',\n            locationType: 'none',\n            offsetX: 0,\n            offsetY: 0,\n            animate: false,\n            capture: true,\n            updateAutoRender: false,\n            animateOption: {\n                appear: null,\n                update: {\n                    duration: 400,\n                    easing: 'easeQuadInOut',\n                },\n                enter: {\n                    duration: 400,\n                    easing: 'easeQuadInOut',\n                },\n                leave: {\n                    duration: 350,\n                    easing: 'easeQuadIn',\n                },\n            },\n            events: null,\n            defaultCfg: {},\n            visible: true,\n        };\n    };\n    /**\n     * 清理组件的内容，一般配合 render 使用\n     * @example\n     * axis.clear();\n     * axis.render();\n     */\n    Component.prototype.clear = function () { };\n    /**\n     * 更新组件\n     * @param {object} cfg 更新属性\n     */\n    Component.prototype.update = function (cfg) {\n        var _this = this;\n        var defaultCfg = this.get('defaultCfg') || {};\n        each(cfg, function (value, name) {\n            var originCfg = _this.get(name);\n            var newCfg = value;\n            if (originCfg !== value) {\n                // 判断两者是否相等，主要是进行 null 的判定\n                if (isObject(value) && defaultCfg[name]) {\n                    // 新设置的属性与默认值进行合并\n                    newCfg = deepMix({}, defaultCfg[name], value);\n                }\n                _this.set(name, newCfg);\n            }\n        });\n        this.updateInner(cfg);\n        this.afterUpdate(cfg);\n    };\n    // 更新内部\n    Component.prototype.updateInner = function (cfg) {\n    };\n    Component.prototype.afterUpdate = function (cfg) {\n        // 更新时考虑显示、隐藏\n        if (hasKey(cfg, 'visible')) {\n            if (cfg.visible) {\n                this.show();\n            }\n            else {\n                this.hide();\n            }\n        }\n        // 更新时考虑capture\n        if (hasKey(cfg, 'capture')) {\n            this.setCapture(cfg.capture);\n        }\n    };\n    Component.prototype.getLayoutBBox = function () {\n        return this.getBBox(); // 默认返回 getBBox，不同的组件内部单独实现\n    };\n    Component.prototype.getLocationType = function () {\n        return this.get('locationType');\n    };\n    Component.prototype.getOffset = function () {\n        return {\n            offsetX: this.get('offsetX'),\n            offsetY: this.get('offsetY'),\n        };\n    };\n    // 默认使用 update\n    Component.prototype.setOffset = function (offsetX, offsetY) {\n        this.update({\n            offsetX: offsetX,\n            offsetY: offsetY,\n        });\n    };\n    Component.prototype.setLocation = function (cfg) {\n        var location = __assign({}, cfg);\n        this.update(location);\n    };\n    // 实现 ILocation 接口的 getLocation\n    Component.prototype.getLocation = function () {\n        var _this = this;\n        var location = {};\n        var locationType = this.get('locationType');\n        var fields = LOCATION_FIELD_MAP[locationType];\n        each(fields, function (field) {\n            location[field] = _this.get(field);\n        });\n        return location;\n    };\n    Component.prototype.isList = function () {\n        return false;\n    };\n    Component.prototype.isSlider = function () {\n        return false;\n    };\n    /**\n     * @protected\n     * 初始化，用于具体的组件继承\n     */\n    Component.prototype.init = function () { };\n    // 将组件默认的配置项设置合并到传入的配置项\n    Component.prototype.initCfg = function () {\n        var _this = this;\n        var defaultCfg = this.get('defaultCfg');\n        each(defaultCfg, function (value, name) {\n            var cfg = _this.get(name);\n            if (isObject(cfg)) {\n                var newCfg = deepMix({}, value, cfg);\n                _this.set(name, newCfg);\n            }\n        });\n    };\n    return Component;\n}(Base));\nexport default Component;\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}