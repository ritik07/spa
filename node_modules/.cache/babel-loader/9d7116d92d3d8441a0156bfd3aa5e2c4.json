{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport TransformAction from './scale-transform';\n/**\n * 缩放 Scale 的 Action\n * @ignore\n */\nvar ScaleTranslate = /** @class */function (_super) {\n  __extends(ScaleTranslate, _super);\n  function ScaleTranslate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.zoomRatio = 0.05;\n    return _this;\n    // 平移分类的度量\n    // private translateCategory(dim, scale, normalPoint) {\n    // }\n  }\n  /**\n   * 缩小\n   */\n  ScaleTranslate.prototype.zoomIn = function () {\n    this.zoom(this.zoomRatio);\n  };\n  ScaleTranslate.prototype.zoom = function (scale) {\n    var _this = this;\n    var dims = this.dims;\n    each(dims, function (dim) {\n      _this.zoomDim(dim, scale);\n    });\n    this.context.view.render(true);\n  };\n  /**\n   * 放大\n   */\n  ScaleTranslate.prototype.zoomOut = function () {\n    this.zoom(-1 * this.zoomRatio);\n  };\n  // 缩放度量\n  ScaleTranslate.prototype.zoomDim = function (dim, dRatio) {\n    if (this.hasDim(dim)) {\n      var scale = this.getScale(dim);\n      if (scale.isLinear) {\n        this.zoomLinear(dim, scale, dRatio);\n      }\n      //  else { // 暂时仅处理连续字段\n      // this.zoomCategory(dim, scale, normalPoint);\n      // }\n    }\n  };\n  // linear 度量平移\n  ScaleTranslate.prototype.zoomLinear = function (dim, scale, dRatio) {\n    var view = this.context.view;\n    // 只有第一次缓存，否则无法回滚\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min: scale.min,\n        max: scale.max\n      };\n    }\n    // 使用使用原始度量作为缩放标准\n    var scaleDef = this.cacheScaleDefs[dim];\n    var range = scaleDef.max - scaleDef.min;\n    var min = scale.min,\n      max = scale.max;\n    var d = dRatio * range;\n    var toMin = min - d;\n    var toMax = max + d;\n    var curRange = toMax - toMin;\n    var scaled = curRange / range;\n    if (toMax > toMin && scaled < 100 && scaled > 0.01) {\n      view.scale(scale.field, {\n        // @ts-ignore\n        nice: false,\n        min: min - d,\n        max: max + d\n      });\n    }\n  };\n  return ScaleTranslate;\n}(TransformAction);\nexport default ScaleTranslate;","map":{"version":3,"sources":["../../../../src/interaction/action/view/scale-zoom.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, throttle } from '@antv/util';\nimport TransformAction from './scale-transform';\n\n/**\n * 缩放 Scale 的 Action\n * @ignore\n */\nclass ScaleTranslate extends TransformAction {\n  private zoomRatio = 0.05;\n  /**\n   * 缩小\n   */\n  public zoomIn() {\n    this.zoom(this.zoomRatio);\n  }\n\n  private zoom(scale) {\n    const dims = this.dims;\n    each(dims, (dim) => {\n      this.zoomDim(dim, scale);\n    });\n    this.context.view.render(true);\n  }\n\n  /**\n   * 放大\n   */\n  public zoomOut() {\n    this.zoom(-1 * this.zoomRatio);\n  }\n\n  // 缩放度量\n  private zoomDim(dim, dRatio) {\n    if (this.hasDim(dim)) {\n      const scale = this.getScale(dim);\n      if (scale.isLinear) {\n        this.zoomLinear(dim, scale, dRatio);\n      }\n      //  else { // 暂时仅处理连续字段\n      // this.zoomCategory(dim, scale, normalPoint);\n      // }\n    }\n  }\n  // linear 度量平移\n  private zoomLinear(dim, scale, dRatio) {\n    const view = this.context.view;\n    // 只有第一次缓存，否则无法回滚\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min: scale.min,\n        max: scale.max,\n      };\n    }\n    // 使用使用原始度量作为缩放标准\n    const scaleDef = this.cacheScaleDefs[dim];\n    const range = scaleDef.max - scaleDef.min;\n    const { min, max } = scale;\n    const d = dRatio * range;\n    const toMin = min - d;\n    const toMax = max + d;\n    const curRange = toMax - toMin;\n    const scaled = curRange / range;\n    if (toMax > toMin && scaled < 100 && scaled > 0.01) {\n      view.scale(scale.field, {\n        // @ts-ignore\n        nice: false,\n        min: min - d,\n        max: max + d,\n      });\n    }\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n}\n\nexport default ScaleTranslate;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}