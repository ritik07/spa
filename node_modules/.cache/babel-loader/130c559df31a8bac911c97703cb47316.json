{"ast":null,"code":"import CallbackAction from './callback';\nimport { get } from '@antv/util';\n// Action 类的缓存\nvar ActionCache = {};\n/**\n * 根据名称获取 Action 实例\n * @param actionName - action 的名称\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createAction(actionName, context) {\n  var actionOption = ActionCache[actionName];\n  var action = null;\n  if (actionOption) {\n    var ActionClass = actionOption.ActionClass,\n      cfg = actionOption.cfg;\n    action = new ActionClass(context, cfg);\n    action.name = actionName;\n    action.init();\n  }\n  return action;\n}\n/**\n * 根据 action 的 name 获取定义的类\n * @param actionName action 的 name\n */\nexport function getActionClass(actionName) {\n  var actionOption = ActionCache[actionName];\n  return get(actionOption, 'ActionClass');\n}\n/**\n * 注册 Action\n * @param actionName - action 的名称\n * @param ActionClass - 继承自 action 的类\n */\nexport function registerAction(actionName, ActionClass, cfg) {\n  ActionCache[actionName] = {\n    ActionClass: ActionClass,\n    cfg: cfg\n  };\n}\n/**\n * 取消注册 Action\n * @param actionName action 名称\n */\nexport function unregisterAction(actionName) {\n  delete ActionCache[actionName];\n}\n/**\n * 根据回调函数获取 Action 实例\n * @param callback - action 的回调函数\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createCallbackAction(callback, context) {\n  var action = new CallbackAction(context);\n  action.callback = callback;\n  action.name = 'callback';\n  return action;\n}","map":{"version":3,"sources":["../../../src/interaction/action/register.ts"],"names":[],"mappings":"AAEA,OAAO,cAAc,MAAM,YAAY;AACvC,SAAS,GAAG,QAAQ,YAAY;AAWhC;AACA,IAAM,WAAW,GAAiC,CAAA,CAAE;AAEpD;;;;;AAKG;AACH,OAAM,SAAU,YAAY,CAAC,UAAkB,EAAE,OAA4B,EAAA;EAC3E,IAAM,YAAY,GAAG,WAAW,CAAC,UAAU,CAAC;EAC5C,IAAI,MAAM,GAAG,IAAI;EACjB,IAAI,YAAY,EAAE;IACR,IAAA,WAAW,GAAU,YAAY,CAAA,WAAtB;MAAE,GAAG,GAAK,YAAY,CAAA,GAAjB;IACxB,MAAM,GAAG,IAAI,WAAW,CAAC,OAAO,EAAE,GAAG,CAAC;IACtC,MAAM,CAAC,IAAI,GAAG,UAAU;IACxB,MAAM,CAAC,IAAI,EAAE;EACd;EACD,OAAO,MAAM;AACf;AAEA;;;AAGG;AACH,OAAM,SAAU,cAAc,CAAC,UAAkB,EAAA;EAC/C,IAAM,YAAY,GAAG,WAAW,CAAC,UAAU,CAAC;EAC5C,OAAO,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC;AACzC;AAEA;;;;AAIG;AACH,OAAM,SAAU,cAAc,CAAC,UAAkB,EAAE,WAA8B,EAAE,GAAiB,EAAA;EAClG,WAAW,CAAC,UAAU,CAAC,GAAG;IACxB,WAAW,EAAA,WAAA;IACX,GAAG,EAAA;GACJ;AACH;AAEA;;;AAGG;AACH,OAAM,SAAU,gBAAgB,CAAC,UAAkB,EAAA;EACjD,OAAO,WAAW,CAAC,UAAU,CAAC;AAChC;AAEA;;;;;AAKG;AACH,OAAM,SAAU,oBAAoB,CAAC,QAAwB,EAAE,OAA4B,EAAA;EACzF,IAAM,MAAM,GAAG,IAAI,cAAc,CAAC,OAAO,CAAC;EAC1C,MAAM,CAAC,QAAQ,GAAG,QAAQ;EAC1B,MAAM,CAAC,IAAI,GAAG,UAAU;EACxB,OAAO,MAAM;AACf","sourcesContent":["import { ActionCallback, IInteractionContext, LooseObject } from '../../interface';\nimport Action from './base';\nimport CallbackAction from './callback';\nimport { get } from '@antv/util';\n\n/** Action 构造函数 */\ntype ActionConstructor = new (context: IInteractionContext, cfg?: LooseObject) => Action;\n\n/** @ignore */\ninterface ActionOption {\n  ActionClass: ActionConstructor;\n  cfg: LooseObject;\n}\n\n// Action 类的缓存\nconst ActionCache: Record<string, ActionOption> = {};\n\n/**\n * 根据名称获取 Action 实例\n * @param actionName - action 的名称\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createAction(actionName: string, context: IInteractionContext): Action {\n  const actionOption = ActionCache[actionName];\n  let action = null;\n  if (actionOption) {\n    const { ActionClass, cfg } = actionOption;\n    action = new ActionClass(context, cfg);\n    action.name = actionName;\n    action.init();\n  }\n  return action;\n}\n\n/**\n * 根据 action 的 name 获取定义的类\n * @param actionName action 的 name\n */\nexport function getActionClass(actionName: string): ActionConstructor {\n  const actionOption = ActionCache[actionName];\n  return get(actionOption, 'ActionClass');\n}\n\n/**\n * 注册 Action\n * @param actionName - action 的名称\n * @param ActionClass - 继承自 action 的类\n */\nexport function registerAction(actionName: string, ActionClass: ActionConstructor, cfg?: LooseObject) {\n  ActionCache[actionName] = {\n    ActionClass,\n    cfg,\n  };\n}\n\n/**\n * 取消注册 Action\n * @param actionName action 名称\n */\nexport function unregisterAction(actionName: string) {\n  delete ActionCache[actionName];\n}\n\n/**\n * 根据回调函数获取 Action 实例\n * @param callback - action 的回调函数\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createCallbackAction(callback: ActionCallback, context: IInteractionContext): CallbackAction {\n  const action = new CallbackAction(context);\n  action.callback = callback;\n  action.name = 'callback';\n  return action;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}