{"ast":null,"code":"import { MIN_CHART_HEIGHT, MIN_CHART_WIDTH } from '../constant';\n/**\n * get the element's bounding size\n * @param ele dom element\n * @returns the element width and height\n */\nfunction getElementSize(ele) {\n  var style = getComputedStyle(ele);\n  return {\n    width: (ele.clientWidth || parseInt(style.width, 10)) - parseInt(style.paddingLeft, 10) - parseInt(style.paddingRight, 10),\n    height: (ele.clientHeight || parseInt(style.height, 10)) - parseInt(style.paddingTop, 10) - parseInt(style.paddingBottom, 10)\n  };\n}\n/**\n * is value a valid number\n * @param v the input value\n * @returns whether it is a number\n */\nfunction isNumber(v) {\n  return typeof v === 'number' && !isNaN(v);\n}\n/**\n * @ignore\n * calculate the chart size\n * @param ele DOM element\n * @param autoFit should auto fit\n * @param width chart width which is set by user\n * @param height chart height which is set by user\n * @returns the chart width and height\n */\nexport function getChartSize(ele, autoFit, width, height) {\n  var w = width;\n  var h = height;\n  if (autoFit) {\n    var size = getElementSize(ele);\n    w = size.width ? size.width : w;\n    h = size.height ? size.height : h;\n  }\n  return {\n    width: Math.max(isNumber(w) ? w : MIN_CHART_WIDTH, MIN_CHART_WIDTH),\n    height: Math.max(isNumber(h) ? h : MIN_CHART_HEIGHT, MIN_CHART_HEIGHT)\n  };\n}\n/**\n * @ignore\n * remove html element from its parent\n * @param dom\n */\nexport function removeDom(dom) {\n  var parent = dom.parentNode;\n  if (parent) {\n    parent.removeChild(dom);\n  }\n}\n/** @ignore */\nexport { createDom, modifyCSS } from '@antv/dom-util';","map":{"version":3,"sources":["../../src/util/dom.ts"],"names":[],"mappings":"AAAA,SAAS,gBAAgB,EAAE,eAAe,QAAQ,aAAa;AAG/D;;;;AAIG;AACH,SAAS,cAAc,CAAC,GAAgB,EAAA;EACtC,IAAM,KAAK,GAAG,gBAAgB,CAAC,GAAG,CAAC;EAEnC,OAAO;IACL,KAAK,EACH,CAAC,GAAG,CAAC,WAAW,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,IAC7C,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,CAAC,GAC/B,QAAQ,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,CAAC;IAClC,MAAM,EACJ,CAAC,GAAG,CAAC,YAAY,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,IAC/C,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC,GAC9B,QAAQ,CAAC,KAAK,CAAC,aAAa,EAAE,EAAE;GACnC;AACH;AAEA;;;;AAIG;AACH,SAAS,QAAQ,CAAC,CAAM,EAAA;EACtB,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3C;AAEA;;;;;;;;AAQG;AACH,OAAM,SAAU,YAAY,CAAC,GAAgB,EAAE,OAAgB,EAAE,KAAa,EAAE,MAAc,EAAA;EAC5F,IAAI,CAAC,GAAG,KAAK;EACb,IAAI,CAAC,GAAG,MAAM;EAEd,IAAI,OAAO,EAAE;IACX,IAAM,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC;IAEhC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC;IAC/B,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC;EAClC;EAED,OAAO;IACL,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,eAAe,EAAE,eAAe,CAAC;IACnE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,gBAAgB,EAAE,gBAAgB;GACtE;AACH;AAEA;;;;AAIG;AACH,OAAM,SAAU,SAAS,CAAC,GAAgB,EAAA;EACxC,IAAM,MAAM,GAAG,GAAG,CAAC,UAAU;EAE7B,IAAI,MAAM,EAAE;IACV,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC;EACxB;AACH;AAEA;AACA,SAAS,SAAS,EAAE,SAAS,QAAQ,gBAAgB","sourcesContent":["import { MIN_CHART_HEIGHT, MIN_CHART_WIDTH } from '../constant';\nimport { Size } from '../interface';\n\n/**\n * get the element's bounding size\n * @param ele dom element\n * @returns the element width and height\n */\nfunction getElementSize(ele: HTMLElement): Size {\n  const style = getComputedStyle(ele);\n\n  return {\n    width:\n      (ele.clientWidth || parseInt(style.width, 10)) -\n      parseInt(style.paddingLeft, 10) -\n      parseInt(style.paddingRight, 10),\n    height:\n      (ele.clientHeight || parseInt(style.height, 10)) -\n      parseInt(style.paddingTop, 10) -\n      parseInt(style.paddingBottom, 10),\n  };\n}\n\n/**\n * is value a valid number\n * @param v the input value\n * @returns whether it is a number\n */\nfunction isNumber(v: any): boolean {\n  return typeof v === 'number' && !isNaN(v);\n}\n\n/**\n * @ignore\n * calculate the chart size\n * @param ele DOM element\n * @param autoFit should auto fit\n * @param width chart width which is set by user\n * @param height chart height which is set by user\n * @returns the chart width and height\n */\nexport function getChartSize(ele: HTMLElement, autoFit: boolean, width: number, height: number): Size {\n  let w = width;\n  let h = height;\n\n  if (autoFit) {\n    const size = getElementSize(ele);\n\n    w = size.width ? size.width : w;\n    h = size.height ? size.height : h;\n  }\n\n  return {\n    width: Math.max(isNumber(w) ? w : MIN_CHART_WIDTH, MIN_CHART_WIDTH),\n    height: Math.max(isNumber(h) ? h : MIN_CHART_HEIGHT, MIN_CHART_HEIGHT),\n  };\n}\n\n/**\n * @ignore\n * remove html element from its parent\n * @param dom\n */\nexport function removeDom(dom: HTMLElement) {\n  const parent = dom.parentNode;\n\n  if (parent) {\n    parent.removeChild(dom);\n  }\n}\n\n/** @ignore */\nexport { createDom, modifyCSS } from '@antv/dom-util';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}