{"ast":null,"code":"import { each, isArray, max, min } from '@antv/util';\nimport { parseStyle } from './parse';\nimport getArcParams from './arc-params';\nimport { mergeRegion, intersectRect } from './util';\nimport * as ArrowUtil from '../util/arrow';\nvar SHAPE_ATTRS_MAP = {\n  fill: 'fillStyle',\n  stroke: 'strokeStyle',\n  opacity: 'globalAlpha'\n};\nexport function applyAttrsToContext(context, element) {\n  var attrs = element.attr();\n  for (var k in attrs) {\n    var v = attrs[k];\n    // 转换一下不与 canvas 兼容的属性名\n    var name_1 = SHAPE_ATTRS_MAP[k] ? SHAPE_ATTRS_MAP[k] : k;\n    if (name_1 === 'matrix' && v) {\n      // 设置矩阵\n      context.transform(v[0], v[1], v[3], v[4], v[6], v[7]);\n    } else if (name_1 === 'lineDash' && context.setLineDash) {\n      // 设置虚线，只支持数组形式，非数组形式不做任何操作\n      isArray(v) && context.setLineDash(v);\n    } else {\n      if (name_1 === 'strokeStyle' || name_1 === 'fillStyle') {\n        // 如果存在渐变、pattern 这个开销有些大\n        // 可以考虑缓存机制，通过 hasUpdate 来避免一些运算\n        v = parseStyle(context, element, v);\n      } else if (name_1 === 'globalAlpha') {\n        // opacity 效果可以叠加，子元素的 opacity 需要与父元素 opacity 相乘\n        v = v * context.globalAlpha;\n      }\n      context[name_1] = v;\n    }\n  }\n}\nexport function drawChildren(context, children, region) {\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n    if (child.cfg.visible) {\n      child.draw(context, region);\n    } else {\n      child.skipDraw();\n    }\n  }\n}\n// 这个地方的逻辑比较复杂，简单画了一张图：https://www.yuque.com/antv/ou292n/pcgt5g#OW1QE\nexport function checkRefresh(canvas, children, region) {\n  var refreshElements = canvas.get('refreshElements');\n  // 先遍历需要刷新的元素，将这些元素的父元素也设置 refresh\n  each(refreshElements, function (el) {\n    if (el !== canvas) {\n      var parent_1 = el.cfg.parent;\n      while (parent_1 && parent_1 !== canvas && !parent_1.cfg.refresh) {\n        parent_1.cfg.refresh = true;\n        parent_1 = parent_1.cfg.parent;\n      }\n    }\n  });\n  if (refreshElements[0] === canvas) {\n    setChildrenRefresh(children, region);\n  } else {\n    // 检查所有子元素是否可以刷新\n    checkChildrenRefresh(children, region);\n  }\n}\n// 检查所有的子元素是否应该更新\nexport function checkChildrenRefresh(children, region) {\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n    if (child.cfg.visible) {\n      // 先判断 hasChanged，因为它的优先级判断应该高于 refresh\n      if (child.cfg.hasChanged) {\n        // 如果节点发生了 change，则需要级联设置子元素的 refresh\n        child.cfg.refresh = true;\n        if (child.isGroup()) {\n          setChildrenRefresh(child.cfg.children, region);\n        }\n      } else if (child.cfg.refresh) {\n        // 如果当前图形/分组 refresh = true，说明其子节点存在 changed\n        if (child.isGroup()) {\n          checkChildrenRefresh(child.cfg.children, region);\n        }\n      } else {\n        // 这个分支说明此次局部刷新，所有的节点和父元素没有发生变化，仅需要检查包围盒（缓存）是否相交即可\n        var refresh = checkElementRefresh(child, region);\n        child.cfg.refresh = refresh;\n        if (refresh && child.isGroup()) {\n          // 如果需要刷新，说明子元素也需要刷新，继续进行判定\n          checkChildrenRefresh(child.cfg.children, region);\n        }\n      }\n    }\n  }\n}\n// 由于对改变的图形放入 refreshElements 时做了优化，判定父元素 changed 时不加入\n// 那么有可能会出现 elements 都为空，所以最终 group\nexport function clearChanged(elements) {\n  for (var i = 0; i < elements.length; i++) {\n    var el = elements[i];\n    el.cfg.hasChanged = false;\n    // 级联清理\n    if (el.isGroup() && !el.destroyed) {\n      clearChanged(el.cfg.children);\n    }\n  }\n}\n// 当某个父元素发生改变时，调用这个方法级联设置 refresh\nfunction setChildrenRefresh(children, region) {\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n    // let refresh = true;\n    // 获取缓存的 bbox，如果这个 bbox 还存在则说明父元素不是矩阵发生了改变\n    // const bbox = child.cfg.canvasBBox;\n    // if (bbox) {\n    //   // 如果这时候\n    //   refresh = intersectRect(bbox, region);\n    // }\n    child.cfg.refresh = true;\n    // 如果需要刷新当前节点，所有的子元素设置 refresh\n    if (child.isGroup()) {\n      setChildrenRefresh(child.get('children'), region);\n    }\n  }\n}\nfunction checkElementRefresh(shape, region) {\n  var bbox = shape.cfg.cacheCanvasBBox;\n  var isAllow = shape.cfg.isInView && bbox && intersectRect(bbox, region);\n  return isAllow;\n}\n// 绘制 path\nexport function drawPath(shape, context, attrs, arcParamsCache) {\n  var path = attrs.path,\n    startArrow = attrs.startArrow,\n    endArrow = attrs.endArrow;\n  if (!path) {\n    return;\n  }\n  var currentPoint = [0, 0]; // 当前图形\n  var startMovePoint = [0, 0]; // 开始 M 的点，可能会有多个\n  var distance = {\n    dx: 0,\n    dy: 0\n  };\n  context.beginPath();\n  for (var i = 0; i < path.length; i++) {\n    var params = path[i];\n    var command = params[0];\n    if (i === 0 && startArrow && startArrow.d) {\n      var tangent = shape.getStartTangent();\n      distance = ArrowUtil.getShortenOffset(tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1], startArrow.d);\n    } else if (i === path.length - 2 && path[i + 1][0] === 'Z' && endArrow && endArrow.d) {\n      // 为了防止结尾为 Z 的 segment 缩短不起效，需要取最后两个 segment 特殊处理\n      var lastPath = path[i + 1];\n      if (lastPath[0] === 'Z') {\n        var tangent = shape.getEndTangent();\n        distance = ArrowUtil.getShortenOffset(tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1], endArrow.d);\n      }\n    } else if (i === path.length - 1 && endArrow && endArrow.d) {\n      if (path[0] !== 'Z') {\n        var tangent = shape.getEndTangent();\n        distance = ArrowUtil.getShortenOffset(tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1], endArrow.d);\n      }\n    }\n    var dx = distance.dx,\n      dy = distance.dy;\n    // V,H,S,T 都在前面被转换成标准形式\n    switch (command) {\n      case 'M':\n        context.moveTo(params[1] - dx, params[2] - dy);\n        startMovePoint = [params[1], params[2]];\n        break;\n      case 'L':\n        context.lineTo(params[1] - dx, params[2] - dy);\n        break;\n      case 'Q':\n        context.quadraticCurveTo(params[1], params[2], params[3] - dx, params[4] - dy);\n        break;\n      case 'C':\n        context.bezierCurveTo(params[1], params[2], params[3], params[4], params[5] - dx, params[6] - dy);\n        break;\n      case 'A':\n        {\n          var arcParams = void 0;\n          // 为了加速绘制，可以提供参数的缓存，各个图形自己缓存\n          if (arcParamsCache) {\n            arcParams = arcParamsCache[i];\n            if (!arcParams) {\n              arcParams = getArcParams(currentPoint, params);\n              arcParamsCache[i] = arcParams;\n            }\n          } else {\n            arcParams = getArcParams(currentPoint, params);\n          }\n          var cx = arcParams.cx,\n            cy = arcParams.cy,\n            rx = arcParams.rx,\n            ry = arcParams.ry,\n            startAngle = arcParams.startAngle,\n            endAngle = arcParams.endAngle,\n            xRotation = arcParams.xRotation,\n            sweepFlag = arcParams.sweepFlag;\n          // 直接使用椭圆的 api\n          if (context.ellipse) {\n            context.ellipse(cx, cy, rx, ry, xRotation, startAngle, endAngle, 1 - sweepFlag);\n          } else {\n            var r = rx > ry ? rx : ry;\n            var scaleX = rx > ry ? 1 : rx / ry;\n            var scaleY = rx > ry ? ry / rx : 1;\n            context.translate(cx, cy);\n            context.rotate(xRotation);\n            context.scale(scaleX, scaleY);\n            context.arc(0, 0, r, startAngle, endAngle, 1 - sweepFlag);\n            context.scale(1 / scaleX, 1 / scaleY);\n            context.rotate(-xRotation);\n            context.translate(-cx, -cy);\n          }\n          break;\n        }\n      case 'Z':\n        context.closePath();\n        break;\n      default:\n        break;\n    }\n    // 有了 Z 后，当前节点从开始 M 的点开始\n    if (command === 'Z') {\n      currentPoint = startMovePoint;\n    } else {\n      var len = params.length;\n      currentPoint = [params[len - 2], params[len - 1]];\n    }\n  }\n}\n// 刷新图形元素(Shape 或者 Group)\nexport function refreshElement(element, changeType) {\n  var canvas = element.get('canvas');\n  // 只有存在于 canvas 上时生效\n  if (canvas) {\n    if (changeType === 'remove') {\n      // 一旦 remove，则无法在 element 上拿到包围盒\n      // destroy 后所有属性都拿不到，所以需要暂存一下\n      // 这是一段 hack 的代码\n      element._cacheCanvasBBox = element.get('cacheCanvasBBox');\n    }\n    // 防止反复刷新\n    if (!element.get('hasChanged')) {\n      // 但是始终要标记为 hasChanged，便于后面进行局部渲染\n      element.set('hasChanged', true);\n      // 本来只有局部渲染模式下，才需要记录更新的元素队列\n      // if (canvas.get('localRefresh')) {\n      //   canvas.refreshElement(element, changeType, canvas);\n      // }\n      // 但对于 https://github.com/antvis/g/issues/422 的场景，全局渲染的模式下也需要记录更新的元素队列\n      // 如果当前元素的父元素发生了改变，可以不放入队列，这句话大概能够提升 15% 的初次渲染性能\n      if (!(element.cfg.parent && element.cfg.parent.get('hasChanged'))) {\n        canvas.refreshElement(element, changeType, canvas);\n        if (canvas.get('autoDraw')) {\n          canvas.draw();\n        }\n      }\n    }\n  }\n}\nexport function getRefreshRegion(element) {\n  var region;\n  if (!element.destroyed) {\n    var cacheBox = element.get('cacheCanvasBBox');\n    var validCache = cacheBox && !!(cacheBox.width && cacheBox.height);\n    var bbox = element.getCanvasBBox();\n    var validBBox = bbox && !!(bbox.width && bbox.height);\n    // 是否是有效 bbox 判定，一些 NaN 或者 宽高为 0 的情况过滤掉\n    if (validCache && validBBox) {\n      region = mergeRegion(cacheBox, bbox);\n    } else if (validCache) {\n      region = cacheBox;\n    } else if (validBBox) {\n      region = bbox;\n    }\n  } else {\n    // 因为元素已经销毁所以无法获取到缓存的包围盒\n    region = element['_cacheCanvasBBox'];\n  }\n  return region;\n}\nexport function getMergedRegion(elements) {\n  if (!elements.length) {\n    return null;\n  }\n  var minXArr = [];\n  var minYArr = [];\n  var maxXArr = [];\n  var maxYArr = [];\n  each(elements, function (el) {\n    var region = getRefreshRegion(el);\n    if (region) {\n      minXArr.push(region.minX);\n      minYArr.push(region.minY);\n      maxXArr.push(region.maxX);\n      maxYArr.push(region.maxY);\n    }\n  });\n  return {\n    minX: min(minXArr),\n    minY: min(minYArr),\n    maxX: max(maxXArr),\n    maxY: max(maxYArr)\n  };\n}\nexport function mergeView(region, viewRegion) {\n  if (!region || !viewRegion) {\n    return null;\n  }\n  // 不相交，则直接返回 null\n  if (!intersectRect(region, viewRegion)) {\n    return null;\n  }\n  return {\n    minX: Math.max(region.minX, viewRegion.minX),\n    minY: Math.max(region.minY, viewRegion.minY),\n    maxX: Math.min(region.maxX, viewRegion.maxX),\n    maxY: Math.min(region.maxY, viewRegion.maxY)\n  };\n}","map":{"version":3,"sources":["../../src/util/draw.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { each, isArray, max, min } from '@antv/util';\nimport { parseStyle } from './parse';\nimport getArcParams from './arc-params';\nimport { mergeRegion, intersectRect } from './util';\nimport * as ArrowUtil from '../util/arrow';\nvar SHAPE_ATTRS_MAP = {\n    fill: 'fillStyle',\n    stroke: 'strokeStyle',\n    opacity: 'globalAlpha',\n};\nexport function applyAttrsToContext(context, element) {\n    var attrs = element.attr();\n    for (var k in attrs) {\n        var v = attrs[k];\n        // 转换一下不与 canvas 兼容的属性名\n        var name_1 = SHAPE_ATTRS_MAP[k] ? SHAPE_ATTRS_MAP[k] : k;\n        if (name_1 === 'matrix' && v) {\n            // 设置矩阵\n            context.transform(v[0], v[1], v[3], v[4], v[6], v[7]);\n        }\n        else if (name_1 === 'lineDash' && context.setLineDash) {\n            // 设置虚线，只支持数组形式，非数组形式不做任何操作\n            isArray(v) && context.setLineDash(v);\n        }\n        else {\n            if (name_1 === 'strokeStyle' || name_1 === 'fillStyle') {\n                // 如果存在渐变、pattern 这个开销有些大\n                // 可以考虑缓存机制，通过 hasUpdate 来避免一些运算\n                v = parseStyle(context, element, v);\n            }\n            else if (name_1 === 'globalAlpha') {\n                // opacity 效果可以叠加，子元素的 opacity 需要与父元素 opacity 相乘\n                v = v * context.globalAlpha;\n            }\n            context[name_1] = v;\n        }\n    }\n}\nexport function drawChildren(context, children, region) {\n    for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        if (child.cfg.visible) {\n            child.draw(context, region);\n        }\n        else {\n            child.skipDraw();\n        }\n    }\n}\n// 这个地方的逻辑比较复杂，简单画了一张图：https://www.yuque.com/antv/ou292n/pcgt5g#OW1QE\nexport function checkRefresh(canvas, children, region) {\n    var refreshElements = canvas.get('refreshElements');\n    // 先遍历需要刷新的元素，将这些元素的父元素也设置 refresh\n    each(refreshElements, function (el) {\n        if (el !== canvas) {\n            var parent_1 = el.cfg.parent;\n            while (parent_1 && parent_1 !== canvas && !parent_1.cfg.refresh) {\n                parent_1.cfg.refresh = true;\n                parent_1 = parent_1.cfg.parent;\n            }\n        }\n    });\n    if (refreshElements[0] === canvas) {\n        setChildrenRefresh(children, region);\n    }\n    else {\n        // 检查所有子元素是否可以刷新\n        checkChildrenRefresh(children, region);\n    }\n}\n// 检查所有的子元素是否应该更新\nexport function checkChildrenRefresh(children, region) {\n    for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        if (child.cfg.visible) {\n            // 先判断 hasChanged，因为它的优先级判断应该高于 refresh\n            if (child.cfg.hasChanged) {\n                // 如果节点发生了 change，则需要级联设置子元素的 refresh\n                child.cfg.refresh = true;\n                if (child.isGroup()) {\n                    setChildrenRefresh(child.cfg.children, region);\n                }\n            }\n            else if (child.cfg.refresh) {\n                // 如果当前图形/分组 refresh = true，说明其子节点存在 changed\n                if (child.isGroup()) {\n                    checkChildrenRefresh(child.cfg.children, region);\n                }\n            }\n            else {\n                // 这个分支说明此次局部刷新，所有的节点和父元素没有发生变化，仅需要检查包围盒（缓存）是否相交即可\n                var refresh = checkElementRefresh(child, region);\n                child.cfg.refresh = refresh;\n                if (refresh && child.isGroup()) {\n                    // 如果需要刷新，说明子元素也需要刷新，继续进行判定\n                    checkChildrenRefresh(child.cfg.children, region);\n                }\n            }\n        }\n    }\n}\n// 由于对改变的图形放入 refreshElements 时做了优化，判定父元素 changed 时不加入\n// 那么有可能会出现 elements 都为空，所以最终 group\nexport function clearChanged(elements) {\n    for (var i = 0; i < elements.length; i++) {\n        var el = elements[i];\n        el.cfg.hasChanged = false;\n        // 级联清理\n        if (el.isGroup() && !el.destroyed) {\n            clearChanged(el.cfg.children);\n        }\n    }\n}\n// 当某个父元素发生改变时，调用这个方法级联设置 refresh\nfunction setChildrenRefresh(children, region) {\n    for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        // let refresh = true;\n        // 获取缓存的 bbox，如果这个 bbox 还存在则说明父元素不是矩阵发生了改变\n        // const bbox = child.cfg.canvasBBox;\n        // if (bbox) {\n        //   // 如果这时候\n        //   refresh = intersectRect(bbox, region);\n        // }\n        child.cfg.refresh = true;\n        // 如果需要刷新当前节点，所有的子元素设置 refresh\n        if (child.isGroup()) {\n            setChildrenRefresh(child.get('children'), region);\n        }\n    }\n}\nfunction checkElementRefresh(shape, region) {\n    var bbox = shape.cfg.cacheCanvasBBox;\n    var isAllow = shape.cfg.isInView && bbox && intersectRect(bbox, region);\n    return isAllow;\n}\n// 绘制 path\nexport function drawPath(shape, context, attrs, arcParamsCache) {\n    var path = attrs.path, startArrow = attrs.startArrow, endArrow = attrs.endArrow;\n    if (!path) {\n        return;\n    }\n    var currentPoint = [0, 0]; // 当前图形\n    var startMovePoint = [0, 0]; // 开始 M 的点，可能会有多个\n    var distance = {\n        dx: 0,\n        dy: 0,\n    };\n    context.beginPath();\n    for (var i = 0; i < path.length; i++) {\n        var params = path[i];\n        var command = params[0];\n        if (i === 0 && startArrow && startArrow.d) {\n            var tangent = shape.getStartTangent();\n            distance = ArrowUtil.getShortenOffset(tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1], startArrow.d);\n        }\n        else if (i === path.length - 2 && path[i + 1][0] === 'Z' && endArrow && endArrow.d) {\n            // 为了防止结尾为 Z 的 segment 缩短不起效，需要取最后两个 segment 特殊处理\n            var lastPath = path[i + 1];\n            if (lastPath[0] === 'Z') {\n                var tangent = shape.getEndTangent();\n                distance = ArrowUtil.getShortenOffset(tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1], endArrow.d);\n            }\n        }\n        else if (i === path.length - 1 && endArrow && endArrow.d) {\n            if (path[0] !== 'Z') {\n                var tangent = shape.getEndTangent();\n                distance = ArrowUtil.getShortenOffset(tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1], endArrow.d);\n            }\n        }\n        var dx = distance.dx, dy = distance.dy;\n        // V,H,S,T 都在前面被转换成标准形式\n        switch (command) {\n            case 'M':\n                context.moveTo(params[1] - dx, params[2] - dy);\n                startMovePoint = [params[1], params[2]];\n                break;\n            case 'L':\n                context.lineTo(params[1] - dx, params[2] - dy);\n                break;\n            case 'Q':\n                context.quadraticCurveTo(params[1], params[2], params[3] - dx, params[4] - dy);\n                break;\n            case 'C':\n                context.bezierCurveTo(params[1], params[2], params[3], params[4], params[5] - dx, params[6] - dy);\n                break;\n            case 'A': {\n                var arcParams = void 0;\n                // 为了加速绘制，可以提供参数的缓存，各个图形自己缓存\n                if (arcParamsCache) {\n                    arcParams = arcParamsCache[i];\n                    if (!arcParams) {\n                        arcParams = getArcParams(currentPoint, params);\n                        arcParamsCache[i] = arcParams;\n                    }\n                }\n                else {\n                    arcParams = getArcParams(currentPoint, params);\n                }\n                var cx = arcParams.cx, cy = arcParams.cy, rx = arcParams.rx, ry = arcParams.ry, startAngle = arcParams.startAngle, endAngle = arcParams.endAngle, xRotation = arcParams.xRotation, sweepFlag = arcParams.sweepFlag;\n                // 直接使用椭圆的 api\n                if (context.ellipse) {\n                    context.ellipse(cx, cy, rx, ry, xRotation, startAngle, endAngle, 1 - sweepFlag);\n                }\n                else {\n                    var r = rx > ry ? rx : ry;\n                    var scaleX = rx > ry ? 1 : rx / ry;\n                    var scaleY = rx > ry ? ry / rx : 1;\n                    context.translate(cx, cy);\n                    context.rotate(xRotation);\n                    context.scale(scaleX, scaleY);\n                    context.arc(0, 0, r, startAngle, endAngle, 1 - sweepFlag);\n                    context.scale(1 / scaleX, 1 / scaleY);\n                    context.rotate(-xRotation);\n                    context.translate(-cx, -cy);\n                }\n                break;\n            }\n            case 'Z':\n                context.closePath();\n                break;\n            default:\n                break;\n        }\n        // 有了 Z 后，当前节点从开始 M 的点开始\n        if (command === 'Z') {\n            currentPoint = startMovePoint;\n        }\n        else {\n            var len = params.length;\n            currentPoint = [params[len - 2], params[len - 1]];\n        }\n    }\n}\n// 刷新图形元素(Shape 或者 Group)\nexport function refreshElement(element, changeType) {\n    var canvas = element.get('canvas');\n    // 只有存在于 canvas 上时生效\n    if (canvas) {\n        if (changeType === 'remove') {\n            // 一旦 remove，则无法在 element 上拿到包围盒\n            // destroy 后所有属性都拿不到，所以需要暂存一下\n            // 这是一段 hack 的代码\n            element._cacheCanvasBBox = element.get('cacheCanvasBBox');\n        }\n        // 防止反复刷新\n        if (!element.get('hasChanged')) {\n            // 但是始终要标记为 hasChanged，便于后面进行局部渲染\n            element.set('hasChanged', true);\n            // 本来只有局部渲染模式下，才需要记录更新的元素队列\n            // if (canvas.get('localRefresh')) {\n            //   canvas.refreshElement(element, changeType, canvas);\n            // }\n            // 但对于 https://github.com/antvis/g/issues/422 的场景，全局渲染的模式下也需要记录更新的元素队列\n            // 如果当前元素的父元素发生了改变，可以不放入队列，这句话大概能够提升 15% 的初次渲染性能\n            if (!(element.cfg.parent && element.cfg.parent.get('hasChanged'))) {\n                canvas.refreshElement(element, changeType, canvas);\n                if (canvas.get('autoDraw')) {\n                    canvas.draw();\n                }\n            }\n        }\n    }\n}\nexport function getRefreshRegion(element) {\n    var region;\n    if (!element.destroyed) {\n        var cacheBox = element.get('cacheCanvasBBox');\n        var validCache = cacheBox && !!(cacheBox.width && cacheBox.height);\n        var bbox = element.getCanvasBBox();\n        var validBBox = bbox && !!(bbox.width && bbox.height);\n        // 是否是有效 bbox 判定，一些 NaN 或者 宽高为 0 的情况过滤掉\n        if (validCache && validBBox) {\n            region = mergeRegion(cacheBox, bbox);\n        }\n        else if (validCache) {\n            region = cacheBox;\n        }\n        else if (validBBox) {\n            region = bbox;\n        }\n    }\n    else {\n        // 因为元素已经销毁所以无法获取到缓存的包围盒\n        region = element['_cacheCanvasBBox'];\n    }\n    return region;\n}\nexport function getMergedRegion(elements) {\n    if (!elements.length) {\n        return null;\n    }\n    var minXArr = [];\n    var minYArr = [];\n    var maxXArr = [];\n    var maxYArr = [];\n    each(elements, function (el) {\n        var region = getRefreshRegion(el);\n        if (region) {\n            minXArr.push(region.minX);\n            minYArr.push(region.minY);\n            maxXArr.push(region.maxX);\n            maxYArr.push(region.maxY);\n        }\n    });\n    return {\n        minX: min(minXArr),\n        minY: min(minYArr),\n        maxX: max(maxXArr),\n        maxY: max(maxYArr),\n    };\n}\nexport function mergeView(region, viewRegion) {\n    if (!region || !viewRegion) {\n        return null;\n    }\n    // 不相交，则直接返回 null\n    if (!intersectRect(region, viewRegion)) {\n        return null;\n    }\n    return {\n        minX: Math.max(region.minX, viewRegion.minX),\n        minY: Math.max(region.minY, viewRegion.minY),\n        maxX: Math.min(region.maxX, viewRegion.maxX),\n        maxY: Math.min(region.maxY, viewRegion.maxY),\n    };\n}\n//# sourceMappingURL=draw.js.map"]},"metadata":{},"sourceType":"module"}