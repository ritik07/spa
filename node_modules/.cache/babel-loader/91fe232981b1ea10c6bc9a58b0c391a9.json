{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Cubic as CubicUtil } from '@antv/g-math';\nimport { each, isNil } from '@antv/util';\nimport ShapeBase from './base';\nimport { path2Absolute, path2Segments } from '@antv/path-util';\nimport { drawPath } from '../util/draw';\nimport isPointInPath from '../util/in-path/point-in-path';\nimport isInPolygon from '../util/in-path/polygon';\nimport PathUtil from '../util/path';\nimport * as ArrowUtil from '../util/arrow';\n// 是否在多个多边形内部\nfunction isInPolygons(polygons, x, y) {\n  var isHit = false;\n  for (var i = 0; i < polygons.length; i++) {\n    var points = polygons[i];\n    isHit = isInPolygon(points, x, y);\n    if (isHit) {\n      break;\n    }\n  }\n  return isHit;\n}\nvar Path = /** @class */function (_super) {\n  __extends(Path, _super);\n  function Path() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Path.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    return __assign(__assign({}, attrs), {\n      startArrow: false,\n      endArrow: false\n    });\n  };\n  Path.prototype.initAttrs = function (attrs) {\n    this._setPathArr(attrs.path);\n    this.setArrow();\n  };\n  // 更新属性时，检测是否更改了 path\n  Path.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n    if (name === 'path') {\n      this._setPathArr(value);\n    }\n    // 由于箭头的绘制依赖于 line 的诸多 attrs，因此这里不再对每个 attr 进行判断，attr 每次变化都会影响箭头的更新\n    this.setArrow();\n  };\n  // 将 path 转换成绝对路径\n  Path.prototype._setPathArr = function (path) {\n    // 转换 path 的格式\n    this.attrs.path = path2Absolute(path);\n    var hasArc = PathUtil.hasArc(path);\n    // 为了加速 path 的绘制、拾取和计算，这个地方可以缓存很多东西\n    // 这些缓存都是第一次需要时计算和存储，虽然增加了复杂度，但是频繁调用的方法，性能有很大提升\n    this.set('hasArc', hasArc);\n    this.set('paramsCache', {}); // 清理缓存\n    this.set('segments', null); // 延迟生成 path，在动画场景下可能不会有拾取\n    this.set('curve', null);\n    this.set('tCache', null);\n    this.set('totalLength', null);\n  };\n  Path.prototype.getSegments = function () {\n    var segments = this.get('segements');\n    if (!segments) {\n      segments = path2Segments(this.attr('path'));\n      this.set('segments', segments);\n    }\n    return segments;\n  };\n  Path.prototype.setArrow = function () {\n    var attrs = this.attr();\n    var startArrow = attrs.startArrow,\n      endArrow = attrs.endArrow;\n    if (startArrow) {\n      var tangent = this.getStartTangent();\n      ArrowUtil.addStartArrow(this, attrs, tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1]);\n    }\n    if (endArrow) {\n      var tangent = this.getEndTangent();\n      ArrowUtil.addEndArrow(this, attrs, tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1]);\n    }\n  };\n  Path.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    var segments = this.getSegments();\n    var hasArc = this.get('hasArc');\n    var isHit = false;\n    if (isStroke) {\n      var length_1 = this.getTotalLength();\n      isHit = PathUtil.isPointInStroke(segments, lineWidth, x, y, length_1);\n    }\n    if (!isHit && isFill) {\n      if (hasArc) {\n        // 存在曲线时，暂时使用 canvas 的 api 计算，后续可以进行多边形切割\n        isHit = isPointInPath(this, x, y);\n      } else {\n        var path = this.attr('path');\n        var extractResutl = PathUtil.extractPolygons(path);\n        // 提取出来的多边形包含闭合的和非闭合的，在这里统一按照多边形处理\n        isHit = isInPolygons(extractResutl.polygons, x, y) || isInPolygons(extractResutl.polylines, x, y);\n      }\n    }\n    return isHit;\n  };\n  Path.prototype.createPath = function (context) {\n    var attrs = this.attr();\n    var paramsCache = this.get('paramsCache'); // 由于计算圆弧的参数成本很大，所以要缓存\n    drawPath(this, context, attrs, paramsCache);\n  };\n  Path.prototype.afterDrawPath = function (context) {\n    var startArrowShape = this.get('startArrowShape');\n    var endArrowShape = this.get('endArrowShape');\n    if (startArrowShape) {\n      startArrowShape.draw(context);\n    }\n    if (endArrowShape) {\n      endArrowShape.draw(context);\n    }\n  };\n  /**\n   * Get total length of path\n   * @return {number} length\n   */\n  Path.prototype.getTotalLength = function () {\n    var totalLength = this.get('totalLength');\n    if (!isNil(totalLength)) {\n      return totalLength;\n    }\n    this._calculateCurve();\n    this._setTcache();\n    return this.get('totalLength');\n  };\n  /**\n   * Get point according to ratio\n   * @param {number} ratio\n   * @return {Point} point\n   */\n  Path.prototype.getPoint = function (ratio) {\n    var tCache = this.get('tCache');\n    if (!tCache) {\n      this._calculateCurve();\n      this._setTcache();\n      tCache = this.get('tCache');\n    }\n    var subt;\n    var index;\n    var curve = this.get('curve');\n    if (!tCache || tCache.length === 0) {\n      if (curve) {\n        return {\n          x: curve[0][1],\n          y: curve[0][2]\n        };\n      }\n      return null;\n    }\n    each(tCache, function (v, i) {\n      if (ratio >= v[0] && ratio <= v[1]) {\n        subt = (ratio - v[0]) / (v[1] - v[0]);\n        index = i;\n      }\n    });\n    var seg = curve[index];\n    if (isNil(seg) || isNil(index)) {\n      return null;\n    }\n    var l = seg.length;\n    var nextSeg = curve[index + 1];\n    return CubicUtil.pointAt(seg[l - 2], seg[l - 1], nextSeg[1], nextSeg[2], nextSeg[3], nextSeg[4], nextSeg[5], nextSeg[6], subt);\n  };\n  Path.prototype._calculateCurve = function () {\n    var path = this.attr().path;\n    this.set('curve', PathUtil.pathToCurve(path));\n  };\n  Path.prototype._setTcache = function () {\n    var totalLength = 0;\n    var tempLength = 0;\n    // 每段 curve 对应起止点的长度比例列表，形如: [[0, 0.25], [0.25, 0.6]. [0.6, 0.9], [0.9, 1]]\n    var tCache = [];\n    var segmentT;\n    var segmentL;\n    var segmentN;\n    var l;\n    var curve = this.get('curve');\n    if (!curve) {\n      return;\n    }\n    each(curve, function (segment, i) {\n      segmentN = curve[i + 1];\n      l = segment.length;\n      if (segmentN) {\n        totalLength += CubicUtil.length(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]) || 0;\n      }\n    });\n    this.set('totalLength', totalLength);\n    if (totalLength === 0) {\n      this.set('tCache', []);\n      return;\n    }\n    each(curve, function (segment, i) {\n      segmentN = curve[i + 1];\n      l = segment.length;\n      if (segmentN) {\n        segmentT = [];\n        segmentT[0] = tempLength / totalLength;\n        segmentL = CubicUtil.length(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);\n        // 当 path 不连续时，segmentL 可能为空，为空时需要作为 0 处理\n        tempLength += segmentL || 0;\n        segmentT[1] = tempLength / totalLength;\n        tCache.push(segmentT);\n      }\n    });\n    this.set('tCache', tCache);\n  };\n  /**\n   * Get start tangent vector\n   * @return {Array}\n   */\n  Path.prototype.getStartTangent = function () {\n    var segments = this.getSegments();\n    var result;\n    if (segments.length > 1) {\n      var startPoint = segments[0].currentPoint;\n      var endPoint = segments[1].currentPoint;\n      var tangent = segments[1].startTangent;\n      result = [];\n      if (tangent) {\n        result.push([startPoint[0] - tangent[0], startPoint[1] - tangent[1]]);\n        result.push([startPoint[0], startPoint[1]]);\n      } else {\n        result.push([endPoint[0], endPoint[1]]);\n        result.push([startPoint[0], startPoint[1]]);\n      }\n    }\n    return result;\n  };\n  /**\n   * Get end tangent vector\n   * @return {Array}\n   */\n  Path.prototype.getEndTangent = function () {\n    var segments = this.getSegments();\n    var length = segments.length;\n    var result;\n    if (length > 1) {\n      var startPoint = segments[length - 2].currentPoint;\n      var endPoint = segments[length - 1].currentPoint;\n      var tangent = segments[length - 1].endTangent;\n      result = [];\n      if (tangent) {\n        result.push([endPoint[0] - tangent[0], endPoint[1] - tangent[1]]);\n        result.push([endPoint[0], endPoint[1]]);\n      } else {\n        result.push([startPoint[0], startPoint[1]]);\n        result.push([endPoint[0], endPoint[1]]);\n      }\n    }\n    return result;\n  };\n  return Path;\n}(ShapeBase);\nexport default Path;","map":{"version":3,"sources":["../../src/shape/path.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { Cubic as CubicUtil } from '@antv/g-math';\nimport { each, isNil } from '@antv/util';\nimport ShapeBase from './base';\nimport { path2Absolute, path2Segments } from '@antv/path-util';\nimport { drawPath } from '../util/draw';\nimport isPointInPath from '../util/in-path/point-in-path';\nimport isInPolygon from '../util/in-path/polygon';\nimport PathUtil from '../util/path';\nimport * as ArrowUtil from '../util/arrow';\n// 是否在多个多边形内部\nfunction isInPolygons(polygons, x, y) {\n    var isHit = false;\n    for (var i = 0; i < polygons.length; i++) {\n        var points = polygons[i];\n        isHit = isInPolygon(points, x, y);\n        if (isHit) {\n            break;\n        }\n    }\n    return isHit;\n}\nvar Path = /** @class */ (function (_super) {\n    __extends(Path, _super);\n    function Path() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Path.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        return __assign(__assign({}, attrs), { startArrow: false, endArrow: false });\n    };\n    Path.prototype.initAttrs = function (attrs) {\n        this._setPathArr(attrs.path);\n        this.setArrow();\n    };\n    // 更新属性时，检测是否更改了 path\n    Path.prototype.onAttrChange = function (name, value, originValue) {\n        _super.prototype.onAttrChange.call(this, name, value, originValue);\n        if (name === 'path') {\n            this._setPathArr(value);\n        }\n        // 由于箭头的绘制依赖于 line 的诸多 attrs，因此这里不再对每个 attr 进行判断，attr 每次变化都会影响箭头的更新\n        this.setArrow();\n    };\n    // 将 path 转换成绝对路径\n    Path.prototype._setPathArr = function (path) {\n        // 转换 path 的格式\n        this.attrs.path = path2Absolute(path);\n        var hasArc = PathUtil.hasArc(path);\n        // 为了加速 path 的绘制、拾取和计算，这个地方可以缓存很多东西\n        // 这些缓存都是第一次需要时计算和存储，虽然增加了复杂度，但是频繁调用的方法，性能有很大提升\n        this.set('hasArc', hasArc);\n        this.set('paramsCache', {}); // 清理缓存\n        this.set('segments', null); // 延迟生成 path，在动画场景下可能不会有拾取\n        this.set('curve', null);\n        this.set('tCache', null);\n        this.set('totalLength', null);\n    };\n    Path.prototype.getSegments = function () {\n        var segments = this.get('segements');\n        if (!segments) {\n            segments = path2Segments(this.attr('path'));\n            this.set('segments', segments);\n        }\n        return segments;\n    };\n    Path.prototype.setArrow = function () {\n        var attrs = this.attr();\n        var startArrow = attrs.startArrow, endArrow = attrs.endArrow;\n        if (startArrow) {\n            var tangent = this.getStartTangent();\n            ArrowUtil.addStartArrow(this, attrs, tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1]);\n        }\n        if (endArrow) {\n            var tangent = this.getEndTangent();\n            ArrowUtil.addEndArrow(this, attrs, tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1]);\n        }\n    };\n    Path.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n        var segments = this.getSegments();\n        var hasArc = this.get('hasArc');\n        var isHit = false;\n        if (isStroke) {\n            var length_1 = this.getTotalLength();\n            isHit = PathUtil.isPointInStroke(segments, lineWidth, x, y, length_1);\n        }\n        if (!isHit && isFill) {\n            if (hasArc) {\n                // 存在曲线时，暂时使用 canvas 的 api 计算，后续可以进行多边形切割\n                isHit = isPointInPath(this, x, y);\n            }\n            else {\n                var path = this.attr('path');\n                var extractResutl = PathUtil.extractPolygons(path);\n                // 提取出来的多边形包含闭合的和非闭合的，在这里统一按照多边形处理\n                isHit = isInPolygons(extractResutl.polygons, x, y) || isInPolygons(extractResutl.polylines, x, y);\n            }\n        }\n        return isHit;\n    };\n    Path.prototype.createPath = function (context) {\n        var attrs = this.attr();\n        var paramsCache = this.get('paramsCache'); // 由于计算圆弧的参数成本很大，所以要缓存\n        drawPath(this, context, attrs, paramsCache);\n    };\n    Path.prototype.afterDrawPath = function (context) {\n        var startArrowShape = this.get('startArrowShape');\n        var endArrowShape = this.get('endArrowShape');\n        if (startArrowShape) {\n            startArrowShape.draw(context);\n        }\n        if (endArrowShape) {\n            endArrowShape.draw(context);\n        }\n    };\n    /**\n     * Get total length of path\n     * @return {number} length\n     */\n    Path.prototype.getTotalLength = function () {\n        var totalLength = this.get('totalLength');\n        if (!isNil(totalLength)) {\n            return totalLength;\n        }\n        this._calculateCurve();\n        this._setTcache();\n        return this.get('totalLength');\n    };\n    /**\n     * Get point according to ratio\n     * @param {number} ratio\n     * @return {Point} point\n     */\n    Path.prototype.getPoint = function (ratio) {\n        var tCache = this.get('tCache');\n        if (!tCache) {\n            this._calculateCurve();\n            this._setTcache();\n            tCache = this.get('tCache');\n        }\n        var subt;\n        var index;\n        var curve = this.get('curve');\n        if (!tCache || tCache.length === 0) {\n            if (curve) {\n                return {\n                    x: curve[0][1],\n                    y: curve[0][2],\n                };\n            }\n            return null;\n        }\n        each(tCache, function (v, i) {\n            if (ratio >= v[0] && ratio <= v[1]) {\n                subt = (ratio - v[0]) / (v[1] - v[0]);\n                index = i;\n            }\n        });\n        var seg = curve[index];\n        if (isNil(seg) || isNil(index)) {\n            return null;\n        }\n        var l = seg.length;\n        var nextSeg = curve[index + 1];\n        return CubicUtil.pointAt(seg[l - 2], seg[l - 1], nextSeg[1], nextSeg[2], nextSeg[3], nextSeg[4], nextSeg[5], nextSeg[6], subt);\n    };\n    Path.prototype._calculateCurve = function () {\n        var path = this.attr().path;\n        this.set('curve', PathUtil.pathToCurve(path));\n    };\n    Path.prototype._setTcache = function () {\n        var totalLength = 0;\n        var tempLength = 0;\n        // 每段 curve 对应起止点的长度比例列表，形如: [[0, 0.25], [0.25, 0.6]. [0.6, 0.9], [0.9, 1]]\n        var tCache = [];\n        var segmentT;\n        var segmentL;\n        var segmentN;\n        var l;\n        var curve = this.get('curve');\n        if (!curve) {\n            return;\n        }\n        each(curve, function (segment, i) {\n            segmentN = curve[i + 1];\n            l = segment.length;\n            if (segmentN) {\n                totalLength +=\n                    CubicUtil.length(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]) || 0;\n            }\n        });\n        this.set('totalLength', totalLength);\n        if (totalLength === 0) {\n            this.set('tCache', []);\n            return;\n        }\n        each(curve, function (segment, i) {\n            segmentN = curve[i + 1];\n            l = segment.length;\n            if (segmentN) {\n                segmentT = [];\n                segmentT[0] = tempLength / totalLength;\n                segmentL = CubicUtil.length(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);\n                // 当 path 不连续时，segmentL 可能为空，为空时需要作为 0 处理\n                tempLength += segmentL || 0;\n                segmentT[1] = tempLength / totalLength;\n                tCache.push(segmentT);\n            }\n        });\n        this.set('tCache', tCache);\n    };\n    /**\n     * Get start tangent vector\n     * @return {Array}\n     */\n    Path.prototype.getStartTangent = function () {\n        var segments = this.getSegments();\n        var result;\n        if (segments.length > 1) {\n            var startPoint = segments[0].currentPoint;\n            var endPoint = segments[1].currentPoint;\n            var tangent = segments[1].startTangent;\n            result = [];\n            if (tangent) {\n                result.push([startPoint[0] - tangent[0], startPoint[1] - tangent[1]]);\n                result.push([startPoint[0], startPoint[1]]);\n            }\n            else {\n                result.push([endPoint[0], endPoint[1]]);\n                result.push([startPoint[0], startPoint[1]]);\n            }\n        }\n        return result;\n    };\n    /**\n     * Get end tangent vector\n     * @return {Array}\n     */\n    Path.prototype.getEndTangent = function () {\n        var segments = this.getSegments();\n        var length = segments.length;\n        var result;\n        if (length > 1) {\n            var startPoint = segments[length - 2].currentPoint;\n            var endPoint = segments[length - 1].currentPoint;\n            var tangent = segments[length - 1].endTangent;\n            result = [];\n            if (tangent) {\n                result.push([endPoint[0] - tangent[0], endPoint[1] - tangent[1]]);\n                result.push([endPoint[0], endPoint[1]]);\n            }\n            else {\n                result.push([startPoint[0], startPoint[1]]);\n                result.push([endPoint[0], endPoint[1]]);\n            }\n        }\n        return result;\n    };\n    return Path;\n}(ShapeBase));\nexport default Path;\n//# sourceMappingURL=path.js.map"]},"metadata":{},"sourceType":"module"}