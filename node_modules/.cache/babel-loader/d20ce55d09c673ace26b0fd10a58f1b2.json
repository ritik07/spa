{"ast":null,"code":"import { __values } from \"tslib\";\nimport { isObject, each, find, get } from '@antv/util';\nimport { polarToCartesian } from '../../../../util/graphics';\n/** label text和line距离 4px */\nvar MARGIN = 4;\nfunction antiCollision(labelShapes, labels, lineHeight, plotRange, center, isRight) {\n  var e_1, _a;\n  // adjust y position of labels to avoid overlapping\n  var overlapping = true;\n  var start = plotRange.start;\n  var end = plotRange.end;\n  var startY = Math.min(start.y, end.y);\n  var totalHeight = Math.abs(start.y - end.y);\n  var i;\n  var maxY = 0;\n  var minY = Number.MIN_VALUE;\n  var boxes = labels.map(function (label) {\n    if (label.y > maxY) {\n      maxY = label.y;\n    }\n    if (label.y < minY) {\n      minY = label.y;\n    }\n    return {\n      size: lineHeight,\n      targets: [label.y - startY]\n    };\n  });\n  minY -= startY;\n  if (maxY - startY > totalHeight) {\n    totalHeight = maxY - startY;\n  }\n  while (overlapping) {\n    /* eslint no-loop-func: 0 */\n    boxes.forEach(function (box) {\n      var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);\n      // box.pos = Math.max(0, target - box.size / 2);\n    });\n    // detect overlapping and join boxes\n    overlapping = false;\n    i = boxes.length;\n    while (i--) {\n      if (i > 0) {\n        var previousBox = boxes[i - 1];\n        var box = boxes[i];\n        if (previousBox.pos + previousBox.size > box.pos) {\n          // overlapping\n          previousBox.size += box.size;\n          previousBox.targets = previousBox.targets.concat(box.targets);\n          // overflow, shift up\n          if (previousBox.pos + previousBox.size > totalHeight) {\n            previousBox.pos = totalHeight - previousBox.size;\n          }\n          boxes.splice(i, 1); // removing box\n          overlapping = true;\n        }\n      }\n    }\n  }\n  i = 0;\n  // step 4: normalize y and adjust x\n  boxes.forEach(function (b) {\n    var posInCompositeBox = startY + lineHeight / 2; // middle of the label\n    b.targets.forEach(function () {\n      labels[i].y = b.pos + posInCompositeBox;\n      posInCompositeBox += lineHeight;\n      i++;\n    });\n  });\n  var labelsMap = {};\n  try {\n    for (var labelShapes_1 = __values(labelShapes), labelShapes_1_1 = labelShapes_1.next(); !labelShapes_1_1.done; labelShapes_1_1 = labelShapes_1.next()) {\n      var labelShape = labelShapes_1_1.value;\n      labelsMap[labelShape.get('id')] = labelShape;\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (labelShapes_1_1 && !labelShapes_1_1.done && (_a = labelShapes_1.return)) _a.call(labelShapes_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  // (x - cx)^2 + (y - cy)^2 = totalR^2\n  labels.forEach(function (label) {\n    var rPow2 = label.r * label.r;\n    var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);\n    if (rPow2 < dyPow2) {\n      label.x = center.x;\n    } else {\n      var dx = Math.sqrt(rPow2 - dyPow2);\n      if (!isRight) {\n        // left\n        label.x = center.x - dx;\n      } else {\n        // right\n        label.x = center.x + dx;\n      }\n    }\n    // adjust labelShape\n    var labelShape = labelsMap[label.id];\n    labelShape.attr('x', label.x);\n    labelShape.attr('y', label.y);\n    // because group could not effect text-shape, should set text-shape position manually\n    var textShape = find(labelShape.getChildren(), function (ele) {\n      return ele.get('type') === 'text';\n    });\n    // @ts-ignore\n    if (textShape) {\n      textShape.attr('y', label.y);\n      textShape.attr('x', label.x);\n    }\n  });\n}\nexport function distribute(items, labels, shapes, region) {\n  if (!items.length || !labels.length) {\n    return;\n  }\n  var offset = items[0] ? items[0].offset : 0;\n  var coordinate = labels[0].get('coordinate');\n  var radius = coordinate.getRadius();\n  var center = coordinate.getCenter();\n  if (offset > 0) {\n    // const lineHeight = get(this.geometry.theme, ['pieLabels', 'labelHeight'], 14);\n    var lineHeight_1 = 14; // TODO\n    var totalR = radius + offset;\n    var totalHeight_1 = totalR * 2 + lineHeight_1 * 2;\n    var plotRange_1 = {\n      start: coordinate.start,\n      end: coordinate.end\n    };\n    // step 1: separate labels\n    var halves_1 = [[], [] // right\n    ];\n\n    items.forEach(function (labelItem) {\n      if (!labelItem) {\n        return;\n      }\n      if (labelItem.textAlign === 'right') {\n        // left\n        halves_1[0].push(labelItem);\n      } else {\n        // right or center will be put on the right side\n        halves_1[1].push(labelItem);\n      }\n    });\n    halves_1.forEach(function (half, index) {\n      // step 2: reduce labels\n      var maxLabelsCountForOneSide = totalHeight_1 / lineHeight_1;\n      if (half.length > maxLabelsCountForOneSide) {\n        half.sort(function (a, b) {\n          // sort by percentage DESC\n          return b['..percent'] - a['..percent'];\n        });\n        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);\n      }\n      // step 3: distribute position (x and y)\n      half.sort(function (a, b) {\n        // sort by y ASC\n        return a.y - b.y;\n      });\n      antiCollision(labels, half, lineHeight_1, plotRange_1, center, index);\n    });\n  }\n  // 配置 labelLine\n  each(items, function (item) {\n    if (item && item.labelLine) {\n      var distance = item.offset;\n      var angle = item.angle;\n      // 贴近圆周\n      var startPoint = polarToCartesian(center.x, center.y, radius, angle);\n      var innerPoint = polarToCartesian(center.x, center.y, radius + distance / 2, angle);\n      var itemX = item.x + get(item, 'offsetX', 0);\n      var itemY = item.y + get(item, 'offsetY', 0);\n      var endPoint = {\n        x: itemX - Math.cos(angle) * MARGIN,\n        y: itemY - Math.sin(angle) * MARGIN\n      };\n      if (!isObject(item.labelLine)) {\n        // labelLine: true\n        item.labelLine = {};\n      }\n      item.labelLine.path = [\"M \".concat(startPoint.x), \"\".concat(startPoint.y, \" Q\").concat(innerPoint.x), \"\".concat(innerPoint.y, \" \").concat(endPoint.x), endPoint.y].join(',');\n    }\n  });\n}","map":{"version":3,"sources":["../../../../../src/geometry/label/layout/pie/distribute.ts"],"names":[],"mappings":"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","sourcesContent":["import { isObject, each, find, get } from '@antv/util';\n\nimport { BBox, IGroup, IShape } from '../../../../dependents';\nimport { LabelItem } from '../../interface';\n\nimport { polarToCartesian } from '../../../../util/graphics';\nimport { IElement } from '@antv/g-base';\n\n/** label text和line距离 4px */\nconst MARGIN = 4;\n\nfunction antiCollision(labelShapes, labels, lineHeight, plotRange, center, isRight) {\n  // adjust y position of labels to avoid overlapping\n  let overlapping = true;\n  const start = plotRange.start;\n  const end = plotRange.end;\n  const startY = Math.min(start.y, end.y);\n  let totalHeight = Math.abs(start.y - end.y);\n  let i;\n\n  let maxY = 0;\n  let minY = Number.MIN_VALUE;\n  const boxes = labels.map((label) => {\n    if (label.y > maxY) {\n      maxY = label.y;\n    }\n    if (label.y < minY) {\n      minY = label.y;\n    }\n    return {\n      size: lineHeight,\n      targets: [label.y - startY],\n    };\n  });\n  minY -= startY;\n  if (maxY - startY > totalHeight) {\n    totalHeight = maxY - startY;\n  }\n\n  while (overlapping) {\n    /* eslint no-loop-func: 0 */\n    boxes.forEach((box) => {\n      const target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);\n      // box.pos = Math.max(0, target - box.size / 2);\n    });\n\n    // detect overlapping and join boxes\n    overlapping = false;\n    i = boxes.length;\n    while (i--) {\n      if (i > 0) {\n        const previousBox = boxes[i - 1];\n        const box = boxes[i];\n        if (previousBox.pos + previousBox.size > box.pos) {\n          // overlapping\n          previousBox.size += box.size;\n          previousBox.targets = previousBox.targets.concat(box.targets);\n\n          // overflow, shift up\n          if (previousBox.pos + previousBox.size > totalHeight) {\n            previousBox.pos = totalHeight - previousBox.size;\n          }\n          boxes.splice(i, 1); // removing box\n          overlapping = true;\n        }\n      }\n    }\n  }\n\n  i = 0;\n  // step 4: normalize y and adjust x\n  boxes.forEach((b) => {\n    let posInCompositeBox = startY + lineHeight / 2; // middle of the label\n    b.targets.forEach(() => {\n      labels[i].y = b.pos + posInCompositeBox;\n      posInCompositeBox += lineHeight;\n      i++;\n    });\n  });\n\n  const labelsMap = {};\n  for (const labelShape of labelShapes) {\n    labelsMap[labelShape.get('id')] = labelShape;\n  }\n\n  // (x - cx)^2 + (y - cy)^2 = totalR^2\n  labels.forEach((label) => {\n    const rPow2 = label.r * label.r;\n    const dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);\n    if (rPow2 < dyPow2) {\n      label.x = center.x;\n    } else {\n      const dx = Math.sqrt(rPow2 - dyPow2);\n      if (!isRight) {\n        // left\n        label.x = center.x - dx;\n      } else {\n        // right\n        label.x = center.x + dx;\n      }\n    }\n\n    // adjust labelShape\n    const labelShape = labelsMap[label.id];\n    labelShape.attr('x', label.x);\n    labelShape.attr('y', label.y);\n\n    // because group could not effect text-shape, should set text-shape position manually\n    const textShape = find(labelShape.getChildren(), (ele) => ele.get('type') === 'text') as IElement;\n    // @ts-ignore\n    if (textShape) {\n      textShape.attr('y', label.y);\n      textShape.attr('x', label.x);\n    }\n  });\n}\n\nexport function distribute(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[], region: BBox) {\n  if (!items.length || !labels.length) {\n    return;\n  }\n  const offset = items[0] ? items[0].offset : 0;\n  const coordinate = labels[0].get('coordinate');\n  const radius = coordinate.getRadius();\n  const center = coordinate.getCenter();\n\n  if (offset > 0) {\n    // const lineHeight = get(this.geometry.theme, ['pieLabels', 'labelHeight'], 14);\n    const lineHeight = 14; // TODO\n    const totalR = radius + offset;\n    const totalHeight = totalR * 2 + lineHeight * 2;\n    const plotRange = {\n      start: coordinate.start,\n      end: coordinate.end,\n    };\n\n    // step 1: separate labels\n    const halves = [\n      [], // left\n      [], // right\n    ];\n    items.forEach((labelItem) => {\n      if (!labelItem) {\n        return;\n      }\n      if (labelItem.textAlign === 'right') {\n        // left\n        halves[0].push(labelItem);\n      } else {\n        // right or center will be put on the right side\n        halves[1].push(labelItem);\n      }\n    });\n\n    halves.forEach((half, index) => {\n      // step 2: reduce labels\n      const maxLabelsCountForOneSide = totalHeight / lineHeight;\n      if (half.length > maxLabelsCountForOneSide) {\n        half.sort((a, b) => {\n          // sort by percentage DESC\n          return b['..percent'] - a['..percent'];\n        });\n        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);\n      }\n\n      // step 3: distribute position (x and y)\n      half.sort((a, b) => {\n        // sort by y ASC\n        return a.y - b.y;\n      });\n\n      antiCollision(labels, half, lineHeight, plotRange, center, index);\n    });\n  }\n\n  // 配置 labelLine\n  each(items, (item) => {\n    if (item && item.labelLine) {\n      const distance = item.offset;\n      const angle = item.angle;\n      // 贴近圆周\n      const startPoint = polarToCartesian(center.x, center.y, radius, angle);\n      const innerPoint = polarToCartesian(center.x, center.y, radius + distance / 2, angle);\n      const itemX = item.x + get(item, 'offsetX', 0);\n      const itemY = item.y + get(item, 'offsetY', 0);\n      const endPoint = {\n        x: itemX - Math.cos(angle) * MARGIN,\n        y: itemY - Math.sin(angle) * MARGIN,\n      };\n      if (!isObject(item.labelLine)) {\n        // labelLine: true\n        item.labelLine = {};\n      }\n      item.labelLine.path = [\n        `M ${startPoint.x}`,\n        `${startPoint.y} Q${innerPoint.x}`,\n        `${innerPoint.y} ${endPoint.x}`,\n        endPoint.y,\n      ].join(',');\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}