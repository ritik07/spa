{"ast":null,"code":"import { isEqual } from '@antv/util';\nfunction getMinDiff(del, add, modify) {\n  var type = null;\n  var min = modify;\n  if (add < min) {\n    min = add;\n    type = 'add';\n  }\n  if (del < min) {\n    min = del;\n    type = 'del';\n  }\n  return {\n    type: type,\n    min: min\n  };\n}\n/*\n * https://en.wikipedia.org/wiki/Levenshtein_distance\n * 计算两条path的编辑距离\n */\nvar levenshteinDistance = function (source, target) {\n  var sourceLen = source.length;\n  var targetLen = target.length;\n  var sourceSegment, targetSegment;\n  var temp = 0;\n  if (sourceLen === 0 || targetLen === 0) {\n    return null;\n  }\n  var dist = [];\n  for (var i = 0; i <= sourceLen; i++) {\n    dist[i] = [];\n    dist[i][0] = {\n      min: i\n    };\n  }\n  for (var j = 0; j <= targetLen; j++) {\n    dist[0][j] = {\n      min: j\n    };\n  }\n  for (var i = 1; i <= sourceLen; i++) {\n    sourceSegment = source[i - 1];\n    for (var j = 1; j <= targetLen; j++) {\n      targetSegment = target[j - 1];\n      if (isEqual(sourceSegment, targetSegment)) {\n        temp = 0;\n      } else {\n        temp = 1;\n      }\n      var del = dist[i - 1][j].min + 1;\n      var add = dist[i][j - 1].min + 1;\n      var modify = dist[i - 1][j - 1].min + temp;\n      dist[i][j] = getMinDiff(del, add, modify);\n    }\n  }\n  return dist;\n};\nexport default function fillPathByDiff(source, target) {\n  var diffMatrix = levenshteinDistance(source, target);\n  var sourceLen = source.length;\n  var targetLen = target.length;\n  var changes = [];\n  var index = 1;\n  var minPos = 1;\n  // 如果source和target不是完全不相等\n  // @ts-ignore\n  if (diffMatrix[sourceLen][targetLen] !== sourceLen) {\n    // 获取从source到target所需改动\n    for (var i = 1; i <= sourceLen; i++) {\n      var min = diffMatrix[i][i].min;\n      minPos = i;\n      for (var j = index; j <= targetLen; j++) {\n        if (diffMatrix[i][j].min < min) {\n          min = diffMatrix[i][j].min;\n          minPos = j;\n        }\n      }\n      index = minPos;\n      if (diffMatrix[i][index].type) {\n        changes.push({\n          index: i - 1,\n          type: diffMatrix[i][index].type\n        });\n      }\n    }\n    // 对source进行增删path\n    for (var i = changes.length - 1; i >= 0; i--) {\n      index = changes[i].index;\n      if (changes[i].type === 'add') {\n        // @ts-ignore\n        source.splice(index, 0, [].concat(source[index]));\n      } else {\n        // @ts-ignore\n        source.splice(index, 1);\n      }\n    }\n  }\n  // source尾部补齐\n  sourceLen = source.length;\n  if (sourceLen < targetLen) {\n    for (var i = 0; i < targetLen - sourceLen; i++) {\n      if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n        // @ts-ignore\n        source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n      } else {\n        // @ts-ignore\n        source.push(source[sourceLen - 1]);\n      }\n    }\n  }\n  return source;\n}","map":{"version":3,"sources":["../src/fill-path-by-diff.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isEqual } from '@antv/util';\nfunction getMinDiff(del, add, modify) {\n    var type = null;\n    var min = modify;\n    if (add < min) {\n        min = add;\n        type = 'add';\n    }\n    if (del < min) {\n        min = del;\n        type = 'del';\n    }\n    return {\n        type: type,\n        min: min,\n    };\n}\n/*\n * https://en.wikipedia.org/wiki/Levenshtein_distance\n * 计算两条path的编辑距离\n */\nvar levenshteinDistance = function (source, target) {\n    var sourceLen = source.length;\n    var targetLen = target.length;\n    var sourceSegment, targetSegment;\n    var temp = 0;\n    if (sourceLen === 0 || targetLen === 0) {\n        return null;\n    }\n    var dist = [];\n    for (var i = 0; i <= sourceLen; i++) {\n        dist[i] = [];\n        dist[i][0] = { min: i };\n    }\n    for (var j = 0; j <= targetLen; j++) {\n        dist[0][j] = { min: j };\n    }\n    for (var i = 1; i <= sourceLen; i++) {\n        sourceSegment = source[i - 1];\n        for (var j = 1; j <= targetLen; j++) {\n            targetSegment = target[j - 1];\n            if (isEqual(sourceSegment, targetSegment)) {\n                temp = 0;\n            }\n            else {\n                temp = 1;\n            }\n            var del = dist[i - 1][j].min + 1;\n            var add = dist[i][j - 1].min + 1;\n            var modify = dist[i - 1][j - 1].min + temp;\n            dist[i][j] = getMinDiff(del, add, modify);\n        }\n    }\n    return dist;\n};\nexport default function fillPathByDiff(source, target) {\n    var diffMatrix = levenshteinDistance(source, target);\n    var sourceLen = source.length;\n    var targetLen = target.length;\n    var changes = [];\n    var index = 1;\n    var minPos = 1;\n    // 如果source和target不是完全不相等\n    // @ts-ignore\n    if (diffMatrix[sourceLen][targetLen] !== sourceLen) {\n        // 获取从source到target所需改动\n        for (var i = 1; i <= sourceLen; i++) {\n            var min = diffMatrix[i][i].min;\n            minPos = i;\n            for (var j = index; j <= targetLen; j++) {\n                if (diffMatrix[i][j].min < min) {\n                    min = diffMatrix[i][j].min;\n                    minPos = j;\n                }\n            }\n            index = minPos;\n            if (diffMatrix[i][index].type) {\n                changes.push({ index: i - 1, type: diffMatrix[i][index].type });\n            }\n        }\n        // 对source进行增删path\n        for (var i = changes.length - 1; i >= 0; i--) {\n            index = changes[i].index;\n            if (changes[i].type === 'add') {\n                // @ts-ignore\n                source.splice(index, 0, [].concat(source[index]));\n            }\n            else {\n                // @ts-ignore\n                source.splice(index, 1);\n            }\n        }\n    }\n    // source尾部补齐\n    sourceLen = source.length;\n    if (sourceLen < targetLen) {\n        for (var i = 0; i < (targetLen - sourceLen); i++) {\n            if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n                // @ts-ignore\n                source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n            }\n            else {\n                // @ts-ignore\n                source.push(source[sourceLen - 1]);\n            }\n        }\n    }\n    return source;\n}\n//# sourceMappingURL=fill-path-by-diff.js.map"]},"metadata":{},"sourceType":"module"}