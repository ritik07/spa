{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { getElements, getIntersectElements, getMaskedElements, getSiblingMaskElements, getSilbings, isInRecords, isMask } from '../util';\nimport StateBase from './state-base';\n/**\n * @ignore\n * 区域设置状态的基础 Action\n */\nvar ElementRangeState = /** @class */function (_super) {\n  __extends(ElementRangeState, _super);\n  function ElementRangeState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.startPoint = null;\n    _this.endPoint = null;\n    _this.isStarted = false;\n    /**\n     * 是否作用于当前 view 的 siblings，默认是 false 仅作用于自己\n     */\n    _this.effectSiblings = false;\n    /**\n     * 是否受 element 的数据影响，还是受包围盒的影响\n     */\n    _this.effectByRecord = false;\n    return _this;\n  }\n  // 获取当前的位置\n  ElementRangeState.prototype.getCurrentPoint = function () {\n    var event = this.context.event;\n    return {\n      x: event.x,\n      y: event.y\n    };\n  };\n  /**\n   * 开始，记录开始选中的位置\n   */\n  ElementRangeState.prototype.start = function () {\n    this.clear(); // 开始的时候清理之前的状态\n    this.startPoint = this.getCurrentPoint();\n    this.isStarted = true;\n  };\n  ElementRangeState.prototype.getIntersectElements = function () {\n    var elements = null;\n    if (isMask(this.context)) {\n      elements = getMaskedElements(this.context, 10);\n    } else {\n      var startPoint = this.startPoint;\n      var endPoint = this.isStarted ? this.getCurrentPoint() : this.endPoint;\n      // 如果没有开始，则不允许范围设置状态，保护性质\n      if (!startPoint || !endPoint) {\n        return;\n      }\n      // 计算框选区域\n      var box = {\n        minX: Math.min(startPoint.x, endPoint.x),\n        minY: Math.min(startPoint.y, endPoint.y),\n        maxX: Math.max(startPoint.x, endPoint.x),\n        maxY: Math.max(startPoint.y, endPoint.y)\n      };\n      // this.clear(); // 不全部清理，会导致闪烁\n      var view = this.context.view;\n      elements = getIntersectElements(view, box);\n    }\n    return elements;\n  };\n  /**\n   * 选中\n   */\n  ElementRangeState.prototype.setStateEnable = function (enable) {\n    if (this.effectSiblings && !this.effectByRecord) {\n      this.setSiblingsState(enable);\n    } else {\n      var allElements = getElements(this.context.view);\n      var elements = this.getIntersectElements();\n      if (elements && elements.length) {\n        if (this.effectByRecord) {\n          this.setSiblingsStateByRecord(elements, enable);\n        } else {\n          this.setElementsState(elements, enable, allElements);\n        }\n      } else {\n        this.clear();\n      }\n    }\n  };\n  // 根据选中的 element 的数据进行设置状态\n  ElementRangeState.prototype.setSiblingsStateByRecord = function (elements, enable) {\n    var _this = this;\n    var view = this.context.view;\n    var siblings = getSilbings(view);\n    var records = elements.map(function (el) {\n      return el.getModel().data;\n    });\n    var xFiled = view.getXScale().field;\n    var yField = view.getYScales()[0].field;\n    each(siblings, function (sibling) {\n      var allElements = getElements(sibling);\n      var effectElements = allElements.filter(function (el) {\n        var record = el.getModel().data;\n        return isInRecords(records, record, xFiled, yField);\n      });\n      _this.setElementsState(effectElements, enable, allElements);\n    });\n  };\n  // 设置兄弟 view 的状态\n  ElementRangeState.prototype.setSiblingsState = function (enable) {\n    var _this = this;\n    var view = this.context.view;\n    var siblings = getSilbings(view);\n    if (isMask(this.context)) {\n      // 受 mask 影响\n      each(siblings, function (sibling) {\n        var allElements = getElements(sibling);\n        var effectElements = getSiblingMaskElements(_this.context, sibling, 10);\n        if (effectElements && effectElements.length) {\n          _this.setElementsState(effectElements, enable, allElements);\n        } else {\n          _this.clearViewState(sibling);\n        }\n      });\n    }\n  };\n  ElementRangeState.prototype.setElementsState = function (elements, enable, allElements) {\n    var _this = this;\n    each(allElements, function (el) {\n      if (!elements.includes(el)) {\n        _this.setElementState(el, false);\n      } else {\n        _this.setElementState(el, enable);\n      }\n    });\n  };\n  /**\n   * 结束\n   */\n  ElementRangeState.prototype.end = function () {\n    this.isStarted = false;\n    this.endPoint = this.getCurrentPoint();\n  };\n  // 复写 clear\n  ElementRangeState.prototype.clear = function () {\n    var _this = this;\n    var view = this.context.view;\n    // 判断是否影响 siblings\n    if (this.effectSiblings) {\n      var siblings = getSilbings(view);\n      each(siblings, function (sibling) {\n        _this.clearViewState(sibling);\n      });\n    } else {\n      this.clearViewState(view);\n    }\n  };\n  return ElementRangeState;\n}(StateBase);\nexport default ElementRangeState;","map":{"version":3,"sources":["../../../../src/interaction/action/element/range-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport Element from '../../../geometry/element/';\nimport {\n  getElements,\n  getIntersectElements,\n  getMaskedElements,\n  getSiblingMaskElements,\n  getSilbings,\n  isInRecords,\n  isMask,\n} from '../util';\nimport StateBase from './state-base';\n\n/**\n * @ignore\n * 区域设置状态的基础 Action\n */\nclass ElementRangeState extends StateBase {\n  private startPoint = null;\n  private endPoint = null;\n  private isStarted: boolean = false;\n  /**\n   * 是否作用于当前 view 的 siblings，默认是 false 仅作用于自己\n   */\n  protected effectSiblings = false;\n  /**\n   * 是否受 element 的数据影响，还是受包围盒的影响\n   */\n  protected effectByRecord = false;\n  // 获取当前的位置\n  private getCurrentPoint() {\n    const event = this.context.event;\n    return {\n      x: event.x,\n      y: event.y,\n    };\n  }\n\n  /**\n   * 开始，记录开始选中的位置\n   */\n  public start() {\n    this.clear(); // 开始的时候清理之前的状态\n    this.startPoint = this.getCurrentPoint();\n    this.isStarted = true;\n  }\n\n  protected getIntersectElements() {\n    let elements = null;\n    if (isMask(this.context)) {\n      elements = getMaskedElements(this.context, 10);\n    } else {\n      const startPoint = this.startPoint;\n      const endPoint = this.isStarted ? this.getCurrentPoint() : this.endPoint;\n      // 如果没有开始，则不允许范围设置状态，保护性质\n      if (!startPoint || !endPoint) {\n        return;\n      }\n      // 计算框选区域\n      const box = {\n        minX: Math.min(startPoint.x, endPoint.x),\n        minY: Math.min(startPoint.y, endPoint.y),\n        maxX: Math.max(startPoint.x, endPoint.x),\n        maxY: Math.max(startPoint.y, endPoint.y),\n      };\n      // this.clear(); // 不全部清理，会导致闪烁\n      const view = this.context.view;\n      elements = getIntersectElements(view, box);\n    }\n    return elements;\n  }\n  /**\n   * 选中\n   */\n  public setStateEnable(enable: boolean) {\n    if (this.effectSiblings && !this.effectByRecord) {\n      this.setSiblingsState(enable);\n    } else {\n      const allElements = getElements(this.context.view);\n      const elements = this.getIntersectElements();\n      if (elements && elements.length) {\n        if (this.effectByRecord) {\n          this.setSiblingsStateByRecord(elements, enable);\n        } else {\n          this.setElementsState(elements, enable, allElements);\n        }\n      } else {\n        this.clear();\n      }\n    }\n  }\n  // 根据选中的 element 的数据进行设置状态\n  private setSiblingsStateByRecord(elements, enable) {\n    const view = this.context.view;\n    const siblings = getSilbings(view);\n    const records = elements.map((el) => {\n      return el.getModel().data;\n    });\n    const xFiled = view.getXScale().field;\n    const yField = view.getYScales()[0].field;\n    each(siblings, (sibling) => {\n      const allElements = getElements(sibling);\n      const effectElements = allElements.filter((el) => {\n        const record = el.getModel().data;\n        return isInRecords(records, record, xFiled, yField);\n      });\n      this.setElementsState(effectElements, enable, allElements);\n    });\n  }\n\n  // 设置兄弟 view 的状态\n  private setSiblingsState(enable: boolean) {\n    const view = this.context.view;\n    const siblings = getSilbings(view);\n    if (isMask(this.context)) {\n      // 受 mask 影响\n      each(siblings, (sibling) => {\n        const allElements = getElements(sibling);\n        const effectElements = getSiblingMaskElements(this.context, sibling, 10);\n        if (effectElements && effectElements.length) {\n          this.setElementsState(effectElements, enable, allElements);\n        } else {\n          this.clearViewState(sibling);\n        }\n      });\n    }\n  }\n\n  protected setElementsState(elements: Element[], enable, allElements: Element[]) {\n    each(allElements, (el) => {\n      if (!elements.includes(el)) {\n        this.setElementState(el, false);\n      } else {\n        this.setElementState(el, enable);\n      }\n    });\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.isStarted = false;\n    this.endPoint = this.getCurrentPoint();\n  }\n\n  // 复写 clear\n  public clear() {\n    const view = this.context.view;\n    // 判断是否影响 siblings\n    if (this.effectSiblings) {\n      const siblings = getSilbings(view);\n      each(siblings, (sibling) => {\n        this.clearViewState(sibling);\n      });\n    } else {\n      this.clearViewState(view);\n    }\n  }\n}\n\nexport default ElementRangeState;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}