{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport TransformAction from './scale-transform';\n/**\n * 拖拽 Scale 的 Action\n * @ignore\n */\nvar ScaleTranslate = /** @class */function (_super) {\n  __extends(ScaleTranslate, _super);\n  function ScaleTranslate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.startPoint = null;\n    _this.starting = false;\n    _this.startCache = {};\n    return _this;\n  }\n  /**\n   * 开始\n   */\n  ScaleTranslate.prototype.start = function () {\n    var _this = this;\n    this.startPoint = this.context.getCurrentPoint();\n    this.starting = true;\n    var dims = this.dims;\n    each(dims, function (dim) {\n      var scale = _this.getScale(dim);\n      var min = scale.min,\n        max = scale.max,\n        values = scale.values;\n      _this.startCache[dim] = {\n        min: min,\n        max: max,\n        values: values\n      };\n    });\n  };\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n  /**\n   * 结束\n   */\n  ScaleTranslate.prototype.end = function () {\n    this.startPoint = null;\n    this.starting = false;\n    this.startCache = {};\n  };\n  /**\n   * 平移\n   */\n  ScaleTranslate.prototype.translate = function () {\n    var _this = this;\n    if (!this.starting) {\n      return;\n    }\n    var startPoint = this.startPoint;\n    var coord = this.context.view.getCoordinate();\n    var currentPoint = this.context.getCurrentPoint();\n    var normalStart = coord.invert(startPoint);\n    var noramlCurrent = coord.invert(currentPoint);\n    var dx = noramlCurrent.x - normalStart.x;\n    var dy = noramlCurrent.y - normalStart.y;\n    var view = this.context.view;\n    var dims = this.dims;\n    each(dims, function (dim) {\n      _this.translateDim(dim, {\n        x: dx * -1,\n        y: dy * -1\n      });\n    });\n    view.render(true);\n  };\n  // 平移度量\n  ScaleTranslate.prototype.translateDim = function (dim, normalPoint) {\n    if (this.hasDim(dim)) {\n      var scale = this.getScale(dim);\n      if (scale.isLinear) {\n        this.translateLinear(dim, scale, normalPoint);\n      }\n      //  else { // 暂时仅处理连续字段\n      // this.translateCategory(dim, scale, normalPoint);\n      // }\n    }\n  };\n  // linear 度量平移\n  ScaleTranslate.prototype.translateLinear = function (dim, scale, normalPoint) {\n    var view = this.context.view;\n    var _a = this.startCache[dim],\n      min = _a.min,\n      max = _a.max;\n    var range = max - min;\n    var d = normalPoint[dim] * range;\n    // 只有第一次缓存，否则无法回滚\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min: min,\n        max: max\n      };\n    }\n    view.scale(scale.field, {\n      // @ts-ignore\n      nice: false,\n      min: min + d,\n      max: max + d\n    });\n  };\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n  /**\n   * 回滚\n   */\n  ScaleTranslate.prototype.reset = function () {\n    _super.prototype.reset.call(this);\n    this.startPoint = null;\n    this.starting = false;\n  };\n  return ScaleTranslate;\n}(TransformAction);\nexport default ScaleTranslate;","map":{"version":3,"sources":["../../../../src/interaction/action/view/scale-translate.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { Point } from '../../../dependents';\nimport TransformAction from './scale-transform';\n\n/**\n * 拖拽 Scale 的 Action\n * @ignore\n */\nclass ScaleTranslate extends TransformAction {\n  protected startPoint: Point = null;\n  protected starting = false;\n  private startCache = {};\n  /**\n   * 开始\n   */\n  public start() {\n    this.startPoint = this.context.getCurrentPoint();\n    this.starting = true;\n    const dims = this.dims;\n    each(dims, (dim) => {\n      const scale = this.getScale(dim);\n      const { min, max, values } = scale;\n      this.startCache[dim] = { min, max, values };\n    });\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.startPoint = null;\n    this.starting = false;\n    this.startCache = {};\n  }\n\n  /**\n   * 平移\n   */\n  public translate() {\n    if (!this.starting) {\n      return;\n    }\n    const startPoint = this.startPoint;\n    const coord = this.context.view.getCoordinate();\n    const currentPoint = this.context.getCurrentPoint();\n    const normalStart = coord.invert(startPoint);\n    const noramlCurrent = coord.invert(currentPoint);\n    const dx = noramlCurrent.x - normalStart.x;\n    const dy = noramlCurrent.y - normalStart.y;\n    const view = this.context.view;\n    const dims = this.dims;\n    each(dims, (dim) => {\n      this.translateDim(dim, { x: dx * -1, y: dy * -1 });\n    });\n    view.render(true);\n  }\n\n  // 平移度量\n  private translateDim(dim, normalPoint) {\n    if (this.hasDim(dim)) {\n      const scale = this.getScale(dim);\n      if (scale.isLinear) {\n        this.translateLinear(dim, scale, normalPoint);\n      }\n      //  else { // 暂时仅处理连续字段\n      // this.translateCategory(dim, scale, normalPoint);\n      // }\n    }\n  }\n  // linear 度量平移\n  private translateLinear(dim, scale, normalPoint) {\n    const view = this.context.view;\n    const { min, max } = this.startCache[dim];\n    const range = max - min;\n    const d = normalPoint[dim] * range;\n    // 只有第一次缓存，否则无法回滚\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min,\n        max,\n      };\n    }\n    view.scale(scale.field, {\n      // @ts-ignore\n      nice: false,\n      min: min + d,\n      max: max + d,\n    });\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 回滚\n   */\n  public reset() {\n    super.reset();\n    this.startPoint = null;\n    this.starting = false;\n  }\n}\n\nexport default ScaleTranslate;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}