{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { Event } from '../../../chart';\nimport Action from '../base';\nimport { isMask } from '../util';\n// 获取对应的 scale\nfunction getFilter(scale, dim, point1, point2) {\n  var min = Math.min(point1[dim], point2[dim]);\n  var max = Math.max(point1[dim], point2[dim]);\n  var _a = __read(scale.range, 2),\n    rangeMin = _a[0],\n    rangeMax = _a[1];\n  // 约束值在 scale 的 range 之间\n  if (min < rangeMin) {\n    min = rangeMin;\n  }\n  if (max > rangeMax) {\n    max = rangeMax;\n  }\n  // 范围大于整个 view 的范围，则返回 null\n  if (min === rangeMax && max === rangeMax) {\n    return null;\n  }\n  var minValue = scale.invert(min);\n  var maxValue = scale.invert(max);\n  if (scale.isCategory) {\n    var minIndex = scale.values.indexOf(minValue);\n    var maxIndex = scale.values.indexOf(maxValue);\n    var arr_1 = scale.values.slice(minIndex, maxIndex + 1);\n    return function (value) {\n      return arr_1.includes(value);\n    };\n  } else {\n    return function (value) {\n      return value >= minValue && value <= maxValue;\n    };\n  }\n}\n/** range-filter 只用于：brush-filter, brush-x-filter, brush-y-filter */\nvar EVENTS;\n(function (EVENTS) {\n  EVENTS[\"FILTER\"] = \"brush-filter-processing\";\n  EVENTS[\"RESET\"] = \"brush-filter-reset\";\n  EVENTS[\"BEFORE_FILTER\"] = \"brush-filter:beforefilter\";\n  EVENTS[\"AFTER_FILTER\"] = \"brush-filter:afterfilter\";\n  EVENTS[\"BEFORE_RESET\"] = \"brush-filter:beforereset\";\n  EVENTS[\"AFTER_RESET\"] = \"brush-filter:afterreset\";\n})(EVENTS || (EVENTS = {}));\nexport { EVENTS as BRUSH_FILTER_EVENTS };\n/**\n * 范围过滤的 Action\n * @ignore\n */\nvar RangeFilter = /** @class */function (_super) {\n  __extends(RangeFilter, _super);\n  function RangeFilter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 范围过滤生效的字段/维度，可以是 x, y\n     */\n    _this.dims = ['x', 'y'];\n    /** 起始点 */\n    _this.startPoint = null;\n    _this.isStarted = false;\n    return _this;\n  }\n  // x,y 是否生效\n  RangeFilter.prototype.hasDim = function (dim) {\n    return this.dims.includes(dim);\n  };\n  /**\n   * 开始范围过滤，记录范围过滤的起点\n   */\n  RangeFilter.prototype.start = function () {\n    var context = this.context;\n    this.isStarted = true;\n    this.startPoint = context.getCurrentPoint();\n  };\n  /**\n   * 过滤，以开始的点和当前点对数据进行过滤\n   */\n  RangeFilter.prototype.filter = function () {\n    var startPoint;\n    var currentPoint;\n    if (isMask(this.context)) {\n      var maskShape = this.context.event.target;\n      var bbox = maskShape.getCanvasBBox();\n      startPoint = {\n        x: bbox.x,\n        y: bbox.y\n      };\n      currentPoint = {\n        x: bbox.maxX,\n        y: bbox.maxY\n      };\n    } else {\n      if (!this.isStarted) {\n        // 如果没有开始，则不执行过滤\n        return;\n      }\n      startPoint = this.startPoint;\n      currentPoint = this.context.getCurrentPoint();\n    }\n    if (Math.abs(startPoint.x - currentPoint.x) < 5 || Math.abs(startPoint.x - currentPoint.y) < 5) {\n      // 距离过小也不生效\n      return;\n    }\n    var _a = this.context,\n      view = _a.view,\n      event = _a.event;\n    var payload = {\n      view: view,\n      event: event,\n      dims: this.dims\n    };\n    view.emit(EVENTS.BEFORE_FILTER, Event.fromData(view, EVENTS.BEFORE_FILTER, payload));\n    var coord = view.getCoordinate();\n    var normalCurrent = coord.invert(currentPoint);\n    var normalStart = coord.invert(startPoint);\n    // 设置 x 方向的 filter\n    if (this.hasDim('x')) {\n      var xScale = view.getXScale();\n      var filter = getFilter(xScale, 'x', normalCurrent, normalStart);\n      this.filterView(view, xScale.field, filter);\n    }\n    // 设置 y 方向的 filter\n    if (this.hasDim('y')) {\n      var yScale = view.getYScales()[0];\n      var filter = getFilter(yScale, 'y', normalCurrent, normalStart);\n      this.filterView(view, yScale.field, filter);\n    }\n    this.reRender(view, {\n      source: EVENTS.FILTER\n    });\n    view.emit(EVENTS.AFTER_FILTER, Event.fromData(view, EVENTS.AFTER_FILTER, payload));\n  };\n  /**\n   * 结束\n   */\n  RangeFilter.prototype.end = function () {\n    this.isStarted = false;\n  };\n  /**\n   * 取消同当前 Action 相关的过滤，指定的 x,y\n   */\n  RangeFilter.prototype.reset = function () {\n    var view = this.context.view;\n    view.emit(EVENTS.BEFORE_RESET, Event.fromData(view, EVENTS.BEFORE_RESET, {}));\n    this.isStarted = false;\n    if (this.hasDim('x')) {\n      var xScale = view.getXScale();\n      this.filterView(view, xScale.field, null); // 取消过滤\n    }\n\n    if (this.hasDim('y')) {\n      // y 轴过滤仅取第一个 yScale\n      var yScale = view.getYScales()[0];\n      this.filterView(view, yScale.field, null); // 取消过滤\n    }\n\n    this.reRender(view, {\n      source: EVENTS.RESET\n    });\n    view.emit(EVENTS.AFTER_RESET, Event.fromData(view, EVENTS.AFTER_RESET, {}));\n  };\n  /**\n   * 对 view 进行过滤\n   */\n  RangeFilter.prototype.filterView = function (view, field, filter) {\n    view.filter(field, filter);\n  };\n  /**\n   * 重新渲染\n   * @param view\n   */\n  RangeFilter.prototype.reRender = function (view, payload) {\n    view.render(true, payload);\n  };\n  return RangeFilter;\n}(Action);\nexport default RangeFilter;","map":{"version":3,"sources":["../../../../src/interaction/action/data/range-filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Point, Scale } from '../../../dependents';\nimport { FilterCondition, EventPayload } from '../../../interface';\nimport { View, Event } from '../../../chart';\nimport Action from '../base';\nimport { isMask } from '../util';\n\n// 获取对应的 scale\nfunction getFilter(scale: Scale, dim: string, point1: Point, point2: Point): FilterCondition {\n  let min = Math.min(point1[dim], point2[dim]);\n  let max = Math.max(point1[dim], point2[dim]);\n  const [rangeMin, rangeMax] = scale.range;\n  // 约束值在 scale 的 range 之间\n  if (min < rangeMin) {\n    min = rangeMin;\n  }\n  if (max > rangeMax) {\n    max = rangeMax;\n  }\n  // 范围大于整个 view 的范围，则返回 null\n  if (min === rangeMax && max === rangeMax) {\n    return null;\n  }\n  const minValue = scale.invert(min);\n  const maxValue = scale.invert(max);\n  if (scale.isCategory) {\n    const minIndex = scale.values.indexOf(minValue);\n    const maxIndex = scale.values.indexOf(maxValue);\n    const arr = scale.values.slice(minIndex, maxIndex + 1);\n    return (value) => {\n      return arr.includes(value);\n    };\n  } else {\n    return (value) => {\n      return value >= minValue && value <= maxValue;\n    };\n  }\n}\n\n/** range-filter 只用于：brush-filter, brush-x-filter, brush-y-filter */\nenum EVENTS {\n  FILTER = 'brush-filter-processing',\n  RESET = 'brush-filter-reset',\n  BEFORE_FILTER = 'brush-filter:beforefilter',\n  AFTER_FILTER = 'brush-filter:afterfilter',\n  BEFORE_RESET = 'brush-filter:beforereset',\n  AFTER_RESET = 'brush-filter:afterreset',\n}\n\nexport { EVENTS as BRUSH_FILTER_EVENTS };\n\n/**\n * 范围过滤的 Action\n * @ignore\n */\nclass RangeFilter extends Action {\n  /** 允许外部传入 dims */\n  protected cfgFields: ['dims'];\n  /**\n   * 范围过滤生效的字段/维度，可以是 x, y\n   */\n  protected dims: string[] = ['x', 'y'];\n  /** 起始点 */\n  protected startPoint: Point = null;\n\n  private isStarted: boolean = false;\n\n  // x,y 是否生效\n  private hasDim(dim: string) {\n    return this.dims.includes(dim);\n  }\n\n  /**\n   * 开始范围过滤，记录范围过滤的起点\n   */\n  public start() {\n    const context = this.context;\n    this.isStarted = true;\n    this.startPoint = context.getCurrentPoint();\n  }\n\n  /**\n   * 过滤，以开始的点和当前点对数据进行过滤\n   */\n  public filter() {\n    let startPoint;\n    let currentPoint;\n    if (isMask(this.context)) {\n      const maskShape = this.context.event.target;\n      const bbox = maskShape.getCanvasBBox();\n      startPoint = { x: bbox.x, y: bbox.y };\n      currentPoint = { x: bbox.maxX, y: bbox.maxY };\n    } else {\n      if (!this.isStarted) {\n        // 如果没有开始，则不执行过滤\n        return;\n      }\n      startPoint = this.startPoint;\n      currentPoint = this.context.getCurrentPoint();\n    }\n    if (Math.abs(startPoint.x - currentPoint.x) < 5 || Math.abs(startPoint.x - currentPoint.y) < 5) {\n      // 距离过小也不生效\n      return;\n    }\n    const { view, event } = this.context;\n    const payload = { view, event, dims: this.dims };\n    view.emit(EVENTS.BEFORE_FILTER, Event.fromData(view, EVENTS.BEFORE_FILTER, payload));\n\n    const coord = view.getCoordinate();\n    const normalCurrent = coord.invert(currentPoint);\n    const normalStart = coord.invert(startPoint);\n    // 设置 x 方向的 filter\n    if (this.hasDim('x')) {\n      const xScale = view.getXScale();\n      const filter = getFilter(xScale, 'x', normalCurrent, normalStart);\n      this.filterView(view, xScale.field, filter);\n    }\n    // 设置 y 方向的 filter\n    if (this.hasDim('y')) {\n      const yScale = view.getYScales()[0];\n      const filter = getFilter(yScale, 'y', normalCurrent, normalStart);\n      this.filterView(view, yScale.field, filter);\n    }\n    this.reRender(view, { source: EVENTS.FILTER });\n\n    view.emit(EVENTS.AFTER_FILTER, Event.fromData(view, EVENTS.AFTER_FILTER, payload));\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.isStarted = false;\n  }\n\n  /**\n   * 取消同当前 Action 相关的过滤，指定的 x,y\n   */\n  public reset() {\n    const view = this.context.view;\n    view.emit(EVENTS.BEFORE_RESET, Event.fromData(view, EVENTS.BEFORE_RESET, {}));\n\n    this.isStarted = false;\n    if (this.hasDim('x')) {\n      const xScale = view.getXScale();\n      this.filterView(view, xScale.field, null); // 取消过滤\n    }\n    if (this.hasDim('y')) {\n      // y 轴过滤仅取第一个 yScale\n      const yScale = view.getYScales()[0];\n      this.filterView(view, yScale.field, null); // 取消过滤\n    }\n    this.reRender(view, { source: EVENTS.RESET });\n\n    view.emit(EVENTS.AFTER_RESET, Event.fromData(view, EVENTS.AFTER_RESET, {}));\n  }\n\n  /**\n   * 对 view 进行过滤\n   */\n  protected filterView(view: View, field: string, filter: FilterCondition) {\n    view.filter(field, filter);\n  }\n\n  /**\n   * 重新渲染\n   * @param view\n   */\n  protected reRender(view: View, payload?: EventPayload) {\n    view.render(true, payload);\n  }\n}\n\nexport default RangeFilter;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}