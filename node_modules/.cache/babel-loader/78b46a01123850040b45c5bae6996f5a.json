{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { ext, mat3, vec3 } from '@antv/matrix-util';\nimport { assign } from '@antv/util';\n/**\n * Coordinate Base Class\n */\nvar Coordinate = /** @class */function () {\n  function Coordinate(cfg) {\n    // 自身属性\n    this.type = 'coordinate';\n    this.isRect = false;\n    this.isHelix = false;\n    this.isPolar = false;\n    this.isReflectX = false;\n    this.isReflectY = false;\n    var start = cfg.start,\n      end = cfg.end,\n      _a = cfg.matrix,\n      matrix = _a === void 0 ? [1, 0, 0, 0, 1, 0, 0, 0, 1] : _a,\n      _b = cfg.isTransposed,\n      isTransposed = _b === void 0 ? false : _b;\n    this.start = start;\n    this.end = end;\n    this.matrix = matrix;\n    this.originalMatrix = __spreadArray([], matrix); // 去除引用\n    this.isTransposed = isTransposed;\n  }\n  /**\n   * 初始化流程\n   */\n  Coordinate.prototype.initial = function () {\n    // center、width、height\n    this.center = {\n      x: (this.start.x + this.end.x) / 2,\n      y: (this.start.y + this.end.y) / 2\n    };\n    this.width = Math.abs(this.end.x - this.start.x);\n    this.height = Math.abs(this.end.y - this.start.y);\n  };\n  /**\n   * 更新配置\n   * @param cfg\n   */\n  Coordinate.prototype.update = function (cfg) {\n    assign(this, cfg);\n    this.initial();\n  };\n  Coordinate.prototype.convertDim = function (percent, dim) {\n    var _a;\n    var _b = this[dim],\n      start = _b.start,\n      end = _b.end;\n    // 交换\n    if (this.isReflect(dim)) {\n      _a = [end, start], start = _a[0], end = _a[1];\n    }\n    return start + percent * (end - start);\n  };\n  Coordinate.prototype.invertDim = function (value, dim) {\n    var _a;\n    var _b = this[dim],\n      start = _b.start,\n      end = _b.end;\n    // 交换\n    if (this.isReflect(dim)) {\n      _a = [end, start], start = _a[0], end = _a[1];\n    }\n    return (value - start) / (end - start);\n  };\n  /**\n   * 将坐标点进行矩阵变换\n   * @param x   对应 x 轴画布坐标\n   * @param y   对应 y 轴画布坐标\n   * @param tag 默认为 0，可取值 0, 1\n   * @return    返回变换后的三阶向量 [x, y, z]\n   */\n  Coordinate.prototype.applyMatrix = function (x, y, tag) {\n    if (tag === void 0) {\n      tag = 0;\n    }\n    var matrix = this.matrix;\n    var vector = [x, y, tag];\n    vec3.transformMat3(vector, vector, matrix);\n    return vector;\n  };\n  /**\n   * 将坐标点进行矩阵逆变换\n   * @param x   对应 x 轴画布坐标\n   * @param y   对应 y 轴画布坐标\n   * @param tag 默认为 0，可取值 0, 1\n   * @return    返回矩阵逆变换后的三阶向量 [x, y, z]\n   */\n  Coordinate.prototype.invertMatrix = function (x, y, tag) {\n    if (tag === void 0) {\n      tag = 0;\n    }\n    var matrix = this.matrix;\n    var inverted = mat3.invert([0, 0, 0, 0, 0, 0, 0, 0, 0], matrix);\n    var vector = [x, y, tag];\n    if (inverted) {\n      // 如果为空则不进行矩阵变化，防止报错\n      vec3.transformMat3(vector, vector, inverted);\n    }\n    return vector;\n  };\n  /**\n   * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换\n   * @param point 归一化的坐标点\n   * @return      返回进行矩阵变换后的画布坐标\n   */\n  Coordinate.prototype.convert = function (point) {\n    var _a = this.convertPoint(point),\n      x = _a.x,\n      y = _a.y;\n    var vector = this.applyMatrix(x, y, 1);\n    return {\n      x: vector[0],\n      y: vector[1]\n    };\n  };\n  /**\n   * 将进行过矩阵变换画布坐标转换为归一化坐标\n   * @param point 画布坐标\n   * @return      返回归一化的坐标点\n   */\n  Coordinate.prototype.invert = function (point) {\n    var vector = this.invertMatrix(point.x, point.y, 1);\n    return this.invertPoint({\n      x: vector[0],\n      y: vector[1]\n    });\n  };\n  /**\n   * 坐标系旋转变换\n   * @param  radian 旋转弧度\n   * @return        返回坐标系对象\n   */\n  Coordinate.prototype.rotate = function (radian) {\n    var matrix = this.matrix;\n    var center = this.center;\n    ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\n    ext.leftRotate(matrix, matrix, radian);\n    ext.leftTranslate(matrix, matrix, [center.x, center.y]);\n    return this;\n  };\n  /**\n   * 坐标系反射变换\n   * @param dim 反射维度\n   * @return    返回坐标系对象\n   */\n  Coordinate.prototype.reflect = function (dim) {\n    if (dim === 'x') {\n      this.isReflectX = !this.isReflectX;\n    } else {\n      this.isReflectY = !this.isReflectY;\n    }\n    return this;\n  };\n  /**\n   * 坐标系比例变换\n   * @param s1 x 方向缩放比例\n   * @param s2 y 方向缩放比例\n   * @return     返回坐标系对象\n   */\n  Coordinate.prototype.scale = function (s1, s2) {\n    var matrix = this.matrix;\n    var center = this.center;\n    ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\n    ext.leftScale(matrix, matrix, [s1, s2]);\n    ext.leftTranslate(matrix, matrix, [center.x, center.y]);\n    return this;\n  };\n  /**\n   * 坐标系平移变换\n   * @param x x 方向平移像素\n   * @param y y 方向平移像素\n   * @return    返回坐标系对象\n   */\n  Coordinate.prototype.translate = function (x, y) {\n    var matrix = this.matrix;\n    ext.leftTranslate(matrix, matrix, [x, y]);\n    return this;\n  };\n  /**\n   * 将坐标系 x y 两个轴进行转置\n   * @return 返回坐标系对象\n   */\n  Coordinate.prototype.transpose = function () {\n    this.isTransposed = !this.isTransposed;\n    return this;\n  };\n  Coordinate.prototype.getCenter = function () {\n    return this.center;\n  };\n  Coordinate.prototype.getWidth = function () {\n    return this.width;\n  };\n  Coordinate.prototype.getHeight = function () {\n    return this.height;\n  };\n  Coordinate.prototype.getRadius = function () {\n    return this.radius;\n  };\n  /**\n   * whether has reflect\n   * @param dim\n   */\n  Coordinate.prototype.isReflect = function (dim) {\n    return dim === 'x' ? this.isReflectX : this.isReflectY;\n  };\n  /**\n   * 重置 matrix\n   * @param matrix 如果传入，则使用，否则使用构造函数中传入的默认 matrix\n   */\n  Coordinate.prototype.resetMatrix = function (matrix) {\n    // 去除引用关系\n    this.matrix = matrix ? matrix : __spreadArray([], this.originalMatrix);\n  };\n  return Coordinate;\n}();\nexport default Coordinate;","map":{"version":3,"sources":["../../src/coord/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __spreadArray } from \"tslib\";\nimport { ext, mat3, vec3 } from '@antv/matrix-util';\nimport { assign } from '@antv/util';\n/**\n * Coordinate Base Class\n */\nvar Coordinate = /** @class */ (function () {\n    function Coordinate(cfg) {\n        // 自身属性\n        this.type = 'coordinate';\n        this.isRect = false;\n        this.isHelix = false;\n        this.isPolar = false;\n        this.isReflectX = false;\n        this.isReflectY = false;\n        var start = cfg.start, end = cfg.end, _a = cfg.matrix, matrix = _a === void 0 ? [1, 0, 0, 0, 1, 0, 0, 0, 1] : _a, _b = cfg.isTransposed, isTransposed = _b === void 0 ? false : _b;\n        this.start = start;\n        this.end = end;\n        this.matrix = matrix;\n        this.originalMatrix = __spreadArray([], matrix); // 去除引用\n        this.isTransposed = isTransposed;\n    }\n    /**\n     * 初始化流程\n     */\n    Coordinate.prototype.initial = function () {\n        // center、width、height\n        this.center = {\n            x: (this.start.x + this.end.x) / 2,\n            y: (this.start.y + this.end.y) / 2,\n        };\n        this.width = Math.abs(this.end.x - this.start.x);\n        this.height = Math.abs(this.end.y - this.start.y);\n    };\n    /**\n     * 更新配置\n     * @param cfg\n     */\n    Coordinate.prototype.update = function (cfg) {\n        assign(this, cfg);\n        this.initial();\n    };\n    Coordinate.prototype.convertDim = function (percent, dim) {\n        var _a;\n        var _b = this[dim], start = _b.start, end = _b.end;\n        // 交换\n        if (this.isReflect(dim)) {\n            _a = [end, start], start = _a[0], end = _a[1];\n        }\n        return start + percent * (end - start);\n    };\n    Coordinate.prototype.invertDim = function (value, dim) {\n        var _a;\n        var _b = this[dim], start = _b.start, end = _b.end;\n        // 交换\n        if (this.isReflect(dim)) {\n            _a = [end, start], start = _a[0], end = _a[1];\n        }\n        return (value - start) / (end - start);\n    };\n    /**\n     * 将坐标点进行矩阵变换\n     * @param x   对应 x 轴画布坐标\n     * @param y   对应 y 轴画布坐标\n     * @param tag 默认为 0，可取值 0, 1\n     * @return    返回变换后的三阶向量 [x, y, z]\n     */\n    Coordinate.prototype.applyMatrix = function (x, y, tag) {\n        if (tag === void 0) { tag = 0; }\n        var matrix = this.matrix;\n        var vector = [x, y, tag];\n        vec3.transformMat3(vector, vector, matrix);\n        return vector;\n    };\n    /**\n     * 将坐标点进行矩阵逆变换\n     * @param x   对应 x 轴画布坐标\n     * @param y   对应 y 轴画布坐标\n     * @param tag 默认为 0，可取值 0, 1\n     * @return    返回矩阵逆变换后的三阶向量 [x, y, z]\n     */\n    Coordinate.prototype.invertMatrix = function (x, y, tag) {\n        if (tag === void 0) { tag = 0; }\n        var matrix = this.matrix;\n        var inverted = mat3.invert([0, 0, 0, 0, 0, 0, 0, 0, 0], matrix);\n        var vector = [x, y, tag];\n        if (inverted) {\n            // 如果为空则不进行矩阵变化，防止报错\n            vec3.transformMat3(vector, vector, inverted);\n        }\n        return vector;\n    };\n    /**\n     * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换\n     * @param point 归一化的坐标点\n     * @return      返回进行矩阵变换后的画布坐标\n     */\n    Coordinate.prototype.convert = function (point) {\n        var _a = this.convertPoint(point), x = _a.x, y = _a.y;\n        var vector = this.applyMatrix(x, y, 1);\n        return {\n            x: vector[0],\n            y: vector[1],\n        };\n    };\n    /**\n     * 将进行过矩阵变换画布坐标转换为归一化坐标\n     * @param point 画布坐标\n     * @return      返回归一化的坐标点\n     */\n    Coordinate.prototype.invert = function (point) {\n        var vector = this.invertMatrix(point.x, point.y, 1);\n        return this.invertPoint({\n            x: vector[0],\n            y: vector[1],\n        });\n    };\n    /**\n     * 坐标系旋转变换\n     * @param  radian 旋转弧度\n     * @return        返回坐标系对象\n     */\n    Coordinate.prototype.rotate = function (radian) {\n        var matrix = this.matrix;\n        var center = this.center;\n        ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\n        ext.leftRotate(matrix, matrix, radian);\n        ext.leftTranslate(matrix, matrix, [center.x, center.y]);\n        return this;\n    };\n    /**\n     * 坐标系反射变换\n     * @param dim 反射维度\n     * @return    返回坐标系对象\n     */\n    Coordinate.prototype.reflect = function (dim) {\n        if (dim === 'x') {\n            this.isReflectX = !this.isReflectX;\n        }\n        else {\n            this.isReflectY = !this.isReflectY;\n        }\n        return this;\n    };\n    /**\n     * 坐标系比例变换\n     * @param s1 x 方向缩放比例\n     * @param s2 y 方向缩放比例\n     * @return     返回坐标系对象\n     */\n    Coordinate.prototype.scale = function (s1, s2) {\n        var matrix = this.matrix;\n        var center = this.center;\n        ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\n        ext.leftScale(matrix, matrix, [s1, s2]);\n        ext.leftTranslate(matrix, matrix, [center.x, center.y]);\n        return this;\n    };\n    /**\n     * 坐标系平移变换\n     * @param x x 方向平移像素\n     * @param y y 方向平移像素\n     * @return    返回坐标系对象\n     */\n    Coordinate.prototype.translate = function (x, y) {\n        var matrix = this.matrix;\n        ext.leftTranslate(matrix, matrix, [x, y]);\n        return this;\n    };\n    /**\n     * 将坐标系 x y 两个轴进行转置\n     * @return 返回坐标系对象\n     */\n    Coordinate.prototype.transpose = function () {\n        this.isTransposed = !this.isTransposed;\n        return this;\n    };\n    Coordinate.prototype.getCenter = function () {\n        return this.center;\n    };\n    Coordinate.prototype.getWidth = function () {\n        return this.width;\n    };\n    Coordinate.prototype.getHeight = function () {\n        return this.height;\n    };\n    Coordinate.prototype.getRadius = function () {\n        return this.radius;\n    };\n    /**\n     * whether has reflect\n     * @param dim\n     */\n    Coordinate.prototype.isReflect = function (dim) {\n        return dim === 'x' ? this.isReflectX : this.isReflectY;\n    };\n    /**\n     * 重置 matrix\n     * @param matrix 如果传入，则使用，否则使用构造函数中传入的默认 matrix\n     */\n    Coordinate.prototype.resetMatrix = function (matrix) {\n        // 去除引用关系\n        this.matrix = matrix ? matrix : __spreadArray([], this.originalMatrix);\n    };\n    return Coordinate;\n}());\nexport default Coordinate;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}