{"ast":null,"code":"import { __assign, __read, __spreadArray } from \"tslib\";\nimport { each, isNil, some } from '@antv/util';\nimport { getCoordinate } from '../../dependents';\n/**\n * coordinate controller，职责：\n * 1. 创建实例\n * 2. 暂存配置\n */\nvar CoordinateController = /** @class */function () {\n  function CoordinateController(option) {\n    // 设置默认值，并存储配置\n    this.option = this.wrapperOption(option);\n  }\n  /**\n   * 更新配置\n   * @param option\n   */\n  CoordinateController.prototype.update = function (option) {\n    this.option = this.wrapperOption(option);\n    return this;\n  };\n  /**\n   * 是否存在某一个 action\n   * @param actionName\n   */\n  CoordinateController.prototype.hasAction = function (actionName) {\n    var actions = this.option.actions;\n    return some(actions, function (action) {\n      return action[0] === actionName;\n    });\n  };\n  /**\n   * 创建坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n  CoordinateController.prototype.create = function (start, end) {\n    var _a = this.option,\n      type = _a.type,\n      cfg = _a.cfg;\n    var isTheta = type === 'theta';\n    // 1. 起始位置\n    var props = __assign({\n      start: start,\n      end: end\n    }, cfg);\n    // 2. 创建实例\n    var C = getCoordinate(isTheta ? 'polar' : type);\n    this.coordinate = new C(props);\n    // @ts-ignore FIXME coordinate 包问题导致 type 不正确\n    this.coordinate.type = type;\n    // 3. 添加默认 action\n    if (isTheta) {\n      // 不存在 transpose，为其自动设置一个 action\n      if (!this.hasAction('transpose')) {\n        this.transpose();\n      }\n    }\n    // 4. 执行 action\n    this.execActions();\n    return this.coordinate;\n  };\n  /**\n   * 更新坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n  CoordinateController.prototype.adjust = function (start, end) {\n    this.coordinate.update({\n      start: start,\n      end: end\n    });\n    // 更新坐标系大小的时候，需要：\n    // 1. 重置 matrix\n    // 2. 重新执行作用于 matrix 的 action\n    this.coordinate.resetMatrix();\n    this.execActions(['scale', 'rotate', 'translate']);\n    return this.coordinate;\n  };\n  /**\n   * 旋转弧度\n   * @param angle\n   */\n  CoordinateController.prototype.rotate = function (angle) {\n    this.option.actions.push(['rotate', angle]);\n    return this;\n  };\n  /**\n   * 镜像\n   * @param dim\n   */\n  CoordinateController.prototype.reflect = function (dim) {\n    this.option.actions.push(['reflect', dim]);\n    return this;\n  };\n  /**\n   * scale\n   * @param sx\n   * @param sy\n   */\n  CoordinateController.prototype.scale = function (sx, sy) {\n    this.option.actions.push(['scale', sx, sy]);\n    return this;\n  };\n  /**\n   * 对角变换\n   */\n  CoordinateController.prototype.transpose = function () {\n    this.option.actions.push(['transpose']);\n    return this;\n  };\n  /**\n   * 获取配置\n   */\n  CoordinateController.prototype.getOption = function () {\n    return this.option;\n  };\n  /**\n   * 获得 coordinate 实例\n   */\n  CoordinateController.prototype.getCoordinate = function () {\n    return this.coordinate;\n  };\n  /**\n   * 包装配置的默认值\n   * @param option\n   */\n  CoordinateController.prototype.wrapperOption = function (option) {\n    return __assign({\n      type: 'rect',\n      actions: [],\n      cfg: {}\n    }, option);\n  };\n  /**\n   * coordinate 实例执行 actions\n   * @params includeActions 如果没有指定，则执行全部，否则，执行指定的 action\n   */\n  CoordinateController.prototype.execActions = function (includeActions) {\n    var _this = this;\n    var actions = this.option.actions;\n    each(actions, function (action) {\n      var _a;\n      var _b = __read(action),\n        actionName = _b[0],\n        args = _b.slice(1);\n      var shouldExec = isNil(includeActions) ? true : includeActions.includes(actionName);\n      if (shouldExec) {\n        (_a = _this.coordinate)[actionName].apply(_a, __spreadArray([], __read(args), false));\n      }\n    });\n  };\n  return CoordinateController;\n}();\nexport default CoordinateController;","map":{"version":3,"sources":["../../../src/chart/controller/coordinate.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, isNil, some } from '@antv/util';\nimport { Coordinate, getCoordinate, Point } from '../../dependents';\nimport { CoordinateOption } from '../../interface';\n\n/**\n * coordinate controller，职责：\n * 1. 创建实例\n * 2. 暂存配置\n */\nexport default class CoordinateController {\n  private option: CoordinateOption;\n  private coordinate: Coordinate;\n\n  constructor(option?: CoordinateOption) {\n    // 设置默认值，并存储配置\n    this.option = this.wrapperOption(option);\n  }\n\n  /**\n   * 更新配置\n   * @param option\n   */\n  public update(option: CoordinateOption) {\n    this.option = this.wrapperOption(option);\n    return this;\n  }\n\n  /**\n   * 是否存在某一个 action\n   * @param actionName\n   */\n  public hasAction(actionName: string) {\n    const { actions } = this.option;\n\n    return some(actions, (action) => action[0] === actionName);\n  }\n  /**\n   * 创建坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n  public create(start: Point, end: Point) {\n    const { type, cfg } = this.option;\n    const isTheta = type === 'theta';\n\n    // 1. 起始位置\n    const props = {\n      start,\n      end,\n      ...cfg,\n    };\n\n    // 2. 创建实例\n    const C = getCoordinate(isTheta ? 'polar' : type);\n\n    this.coordinate = new C(props);\n\n    // @ts-ignore FIXME coordinate 包问题导致 type 不正确\n    this.coordinate.type = type;\n\n    // 3. 添加默认 action\n    if (isTheta) {\n      // 不存在 transpose，为其自动设置一个 action\n      if (!this.hasAction('transpose')) {\n        this.transpose();\n      }\n    }\n\n    // 4. 执行 action\n    this.execActions();\n\n    return this.coordinate;\n  }\n\n  /**\n   * 更新坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n  public adjust(start: Point, end: Point) {\n    this.coordinate.update({\n      start,\n      end,\n    });\n\n    // 更新坐标系大小的时候，需要：\n    // 1. 重置 matrix\n    // 2. 重新执行作用于 matrix 的 action\n    this.coordinate.resetMatrix();\n    this.execActions(['scale', 'rotate', 'translate']);\n\n    return this.coordinate;\n  }\n\n  /**\n   * 旋转弧度\n   * @param angle\n   */\n  public rotate(angle: number) {\n    this.option.actions.push(['rotate', angle]);\n    return this;\n  }\n\n  /**\n   * 镜像\n   * @param dim\n   */\n  public reflect(dim: 'x' | 'y') {\n    this.option.actions.push(['reflect', dim]);\n    return this;\n  }\n\n  /**\n   * scale\n   * @param sx\n   * @param sy\n   */\n  public scale(sx: number, sy: number) {\n    this.option.actions.push(['scale', sx, sy]);\n    return this;\n  }\n\n  /**\n   * 对角变换\n   */\n  public transpose() {\n    this.option.actions.push(['transpose']);\n    return this;\n  }\n\n  /**\n   * 获取配置\n   */\n  public getOption(): CoordinateOption {\n    return this.option;\n  }\n\n  /**\n   * 获得 coordinate 实例\n   */\n  public getCoordinate() {\n    return this.coordinate;\n  }\n\n  /**\n   * 包装配置的默认值\n   * @param option\n   */\n  private wrapperOption(option: CoordinateOption): CoordinateOption {\n    return {\n      type: 'rect',\n      actions: [],\n      cfg: {},\n      ...option,\n    };\n  }\n\n  /**\n   * coordinate 实例执行 actions\n   * @params includeActions 如果没有指定，则执行全部，否则，执行指定的 action\n   */\n  private execActions(includeActions?: string[]) {\n    const { actions } = this.option;\n\n    each(actions, (action) => {\n      const [actionName, ...args] = action;\n\n      const shouldExec = isNil(includeActions) ? true : includeActions.includes(actionName);\n\n      if (shouldExec) {\n        this.coordinate[actionName](...args);\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}