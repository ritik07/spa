{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { registerShape, registerShapeFactory } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getIntervalRectPath, getRectPoints, getRectWithCornerRadius } from './util';\n/** Interval 的 shape 工厂 */\nvar IntervalShapeFactory = registerShapeFactory('interval', {\n  defaultShapeType: 'rect',\n  getDefaultPoints: function (pointInfo) {\n    return getRectPoints(pointInfo);\n  }\n});\n/** Inerval 默认 shape，填充的矩形 */\nregisterShape('interval', 'rect', {\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, false, true);\n    var group = container;\n    var backgroundCfg = cfg === null || cfg === void 0 ? void 0 : cfg.background;\n    if (backgroundCfg) {\n      group = container.addGroup({\n        name: 'interval-group'\n      });\n      var backgroundStyle = getBackgroundRectStyle(cfg);\n      var backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points), this.coordinate);\n      group.addShape('path', {\n        attrs: __assign(__assign({}, backgroundStyle), {\n          path: backgroundPath\n        }),\n        zIndex: -1,\n        name: BACKGROUND_SHAPE\n      });\n    }\n    var path;\n    if (style.radius && this.coordinate.isRect) {\n      path = getRectWithCornerRadius(this.parsePoints(cfg.points), this.coordinate, style.radius);\n    } else {\n      path = this.parsePath(getIntervalRectPath(cfg.points, style.lineCap, this.coordinate));\n    }\n    var shape = group.addShape('path', {\n      attrs: __assign(__assign({}, style), {\n        path: path\n      }),\n      name: 'interval'\n    });\n    return backgroundCfg ? group : shape;\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color,\n      isInPolar = markerCfg.isInPolar;\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          fill: color\n        }\n      };\n    }\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default IntervalShapeFactory;","map":{"version":3,"sources":["../../../../src/geometry/shape/interval/index.ts"],"names":[],"mappings":";AAGA,SAAS,aAAa,EAAE,oBAAoB,QAAQ,SAAS;AAC7D,SAAS,gBAAgB,QAAQ,aAAa;AAC9C,SAAS,sBAAsB,EAAE,QAAQ,QAAQ,mBAAmB;AACpE,SAAS,qBAAqB,EAAE,mBAAmB,EAAE,aAAa,EAAE,uBAAuB,QAAQ,QAAQ;AAE3G;AACA,IAAM,oBAAoB,GAAG,oBAAoB,CAAC,UAAU,EAAE;EAC5D,gBAAgB,EAAE,MAAM;EACxB,gBAAgB,EAAA,UAAC,SAAqB,EAAA;IACpC,OAAO,aAAa,CAAC,SAAS,CAAC;EACjC;CACD,CAAC;AAEF;AACA,aAAa,CAAC,UAAU,EAAE,MAAM,EAAE;EAChC,IAAI,EAAA,UAAC,GAAc,EAAE,SAAiB,EAAA;IACpC,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC;IACxC,IAAI,KAAK,GAAG,SAAS;IAErB,IAAM,aAAa,GAAG,GAAG,KAAA,IAAA,IAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,UAAU;IACrC,IAAI,aAAa,EAAE;MACjB,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC;QACzB,IAAI,EAAE;OACP,CAAC;MACF,IAAM,eAAe,GAAG,sBAAsB,CAAC,GAAG,CAAC;MACnD,IAAM,cAAc,GAAG,qBAAqB,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAY,EAAE,IAAI,CAAC,UAAU,CAAC;MAC3G,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;QACrB,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,eAAe,CAAA,EAAA;UAClB,IAAI,EAAE;QAAc,CAAA,CACrB;QACD,MAAM,EAAE,CAAC,CAAC;QACV,IAAI,EAAE;OACP,CAAC;IACH;IAED,IAAI,IAAI;IACR,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;MAC1C,IAAI,GAAG,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC;KAC5F,MAAM;MACL,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAiB,EAAE,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAClG;IAED,IAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;MACnC,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,KAAK,CAAA,EAAA;QACR,IAAI,EAAA;MAAA,CAAA,CACL;MACD,IAAI,EAAE;KACP,CAAC;IAEF,OAAO,aAAa,GAAG,KAAK,GAAG,KAAK;EACtC,CAAC;EACD,SAAS,EAAA,UAAC,SAAyB,EAAA;IACzB,IAAA,KAAK,GAAgB,SAAS,CAAA,KAAzB;MAAE,SAAS,GAAK,SAAS,CAAA,SAAd;IACxB,IAAI,SAAS,EAAE;MACb,OAAO;QACL,MAAM,EAAE,QAAQ;QAChB,KAAK,EAAE;UACL,CAAC,EAAE,GAAG;UACN,IAAI,EAAE;QACP;OACF;IACF;IAED,OAAO;MACL,MAAM,EAAE,QAAQ;MAChB,KAAK,EAAE;QACL,CAAC,EAAE,CAAC;QACJ,IAAI,EAAE;MACP;KACF;EACH;CACD,CAAC;AAEF,eAAe,oBAAoB","sourcesContent":["import { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { registerShape, registerShapeFactory } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getIntervalRectPath, getRectPoints, getRectWithCornerRadius } from './util';\n\n/** Interval 的 shape 工厂 */\nconst IntervalShapeFactory = registerShapeFactory('interval', {\n  defaultShapeType: 'rect',\n  getDefaultPoints(pointInfo: ShapePoint): Point[] {\n    return getRectPoints(pointInfo);\n  },\n});\n\n/** Inerval 默认 shape，填充的矩形 */\nregisterShape('interval', 'rect', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, false, true);\n    let group = container;\n\n    const backgroundCfg = cfg?.background;\n    if (backgroundCfg) {\n      group = container.addGroup({\n        name: 'interval-group',\n      });\n      const backgroundStyle = getBackgroundRectStyle(cfg);\n      const backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points) as Point[], this.coordinate);\n      group.addShape('path', {\n        attrs: {\n          ...backgroundStyle,\n          path: backgroundPath,\n        },\n        zIndex: -1,\n        name: BACKGROUND_SHAPE,\n      });\n    }\n\n    let path;\n    if (style.radius && this.coordinate.isRect) {\n      path = getRectWithCornerRadius(this.parsePoints(cfg.points), this.coordinate, style.radius);\n    } else {\n      path = this.parsePath(getIntervalRectPath(cfg.points as Point[], style.lineCap, this.coordinate));\n    }\n\n    const shape = group.addShape('path', {\n      attrs: {\n        ...style,\n        path,\n      },\n      name: 'interval',\n    });\n\n    return backgroundCfg ? group : shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color, isInPolar } = markerCfg;\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          fill: color,\n        },\n      };\n    }\n\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color,\n      },\n    };\n  },\n});\n\nexport default IntervalShapeFactory;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}