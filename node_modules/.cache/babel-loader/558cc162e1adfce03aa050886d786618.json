{"ast":null,"code":"import { isFunction } from '@antv/util';\nvar MyWorker = /** @class */function () {\n  function MyWorker(url) {\n    var _this = this;\n    this.queue = [];\n    this.worker = new Worker(url);\n    this.worker.onmessage = function (e) {\n      var _a;\n      (_a = _this.queue.shift()) === null || _a === void 0 ? void 0 : _a.resolve(e);\n    };\n    this.worker.onmessageerror = function (e) {\n      var _a;\n      console.warn('[AntV G2] Web worker is not available');\n      (_a = _this.queue.shift()) === null || _a === void 0 ? void 0 : _a.reject(e);\n    };\n  }\n  MyWorker.prototype.post = function (params, onError) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this.queue.push({\n        resolve: resolve,\n        reject: reject\n      });\n      try {\n        _this.worker.postMessage(params);\n      } catch (e) {\n        console.warn('[AntV G2] Web worker is not available');\n        isFunction(onError) && onError();\n      }\n    });\n  };\n  MyWorker.prototype.destroy = function () {\n    this.worker.terminate();\n  };\n  return MyWorker;\n}();\nexport function createWorker(f) {\n  if (typeof window === 'undefined') return;\n  var blob;\n  try {\n    blob = new Blob([f.toString()], {\n      type: 'application/javascript'\n    });\n  } catch (e) {\n    // @ts-ignore\n    blob = new window.BlobBuilder();\n    blob.append(f.toString());\n    blob = blob.getBlob();\n  }\n  return new MyWorker(URL.createObjectURL(blob));\n}","map":{"version":3,"sources":["../../../../src/geometry/label/util/createWorker.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,YAAY;AAEvC,IAAA,QAAA,GAAA,aAAA,YAAA;EAIE,SAAA,QAAA,CAAY,GAAG,EAAA;IAAf,IAAA,KAAA,GAAA,IAAA;IAHA,IAAA,CAAA,KAAK,GAAU,EAAE;IAIf,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC;IAC7B,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,UAAC,CAAe,EAAA;;MACtC,CAAA,EAAA,GAAA,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAC,CAAC,CAAC;IAChC,CAAC;IACD,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,UAAC,CAAe,EAAA;;MAC3C,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC;MACrD,CAAA,EAAA,GAAA,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,CAAC,CAAC,CAAC;IAC/B,CAAC;EACH;EAEA,QAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,UAAK,MAAM,EAAE,OAAmB,EAAA;IAAhC,IAAA,KAAA,GAAA,IAAA;IACE,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;MACjC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAAE,OAAO,EAAA,OAAA;QAAE,MAAM,EAAA;MAAA,CAAE,CAAC;MACpC,IAAI;QACF,KAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;OAChC,CAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC;QACrD,UAAU,CAAC,OAAO,CAAC,IAAI,OAAO,EAAE;MACjC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,QAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;EACzB,CAAC;EACH,OAAA,QAAC;AAAD,CAAC,EAAA;AAED,OAAM,SAAU,YAAY,CAAC,CAAM,EAAA;EACjC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;EAEnC,IAAI,IAAI;EACR,IAAI;IACF,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE;MAAE,IAAI,EAAE;IAAwB,CAAE,CAAC;GACpE,CAAC,OAAO,CAAC,EAAE;IACV;IACA,IAAI,GAAG,IAAI,MAAM,CAAC,WAAW,EAAE;IAC/B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACzB,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE;EACtB;EAED,OAAO,IAAI,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAChD","sourcesContent":["import { isFunction } from '@antv/util';\n\nclass MyWorker {\n  queue: any[] = [];\n  worker: Worker;\n\n  constructor(url) {\n    this.worker = new Worker(url);\n    this.worker.onmessage = (e: MessageEvent) => {\n      this.queue.shift()?.resolve(e);\n    };\n    this.worker.onmessageerror = (e: MessageEvent) => {\n      console.warn('[AntV G2] Web worker is not available');\n      this.queue.shift()?.reject(e);\n    };\n  }\n\n  post(params, onError?: () => any): Promise<MessageEvent> {\n    return new Promise((resolve, reject) => {\n      this.queue.push({ resolve, reject });\n      try {\n        this.worker.postMessage(params);\n      } catch (e) {\n        console.warn('[AntV G2] Web worker is not available');\n        isFunction(onError) && onError();\n      }\n    });\n  }\n\n  destroy() {\n    this.worker.terminate();\n  }\n}\n\nexport function createWorker(f: any) {\n  if (typeof window === 'undefined') return;\n\n  let blob;\n  try {\n    blob = new Blob([f.toString()], { type: 'application/javascript' });\n  } catch (e) {\n    // @ts-ignore\n    blob = new window.BlobBuilder();\n    blob.append(f.toString());\n    blob = blob.getBlob();\n  }\n\n  return new MyWorker(URL.createObjectURL(blob));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}