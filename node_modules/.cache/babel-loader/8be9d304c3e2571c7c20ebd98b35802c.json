{"ast":null,"code":"import { clone, isPlainObject, lowerCase, mix } from '@antv/util';\nimport GrammarInteraction from './grammar-interaction';\nvar Interactions = {};\n/**\n * 根据交互行为名字获取对应的交互类\n * @param name 交互名字\n * @returns 交互类\n */\nexport function getInteraction(name) {\n  return Interactions[lowerCase(name)];\n}\n/**\n * 注册交互行为\n * @param name 交互行为名字\n * @param interaction 交互类\n */\nexport function registerInteraction(name, interaction) {\n  Interactions[lowerCase(name)] = interaction;\n}\n/**\n * 创建交互实例\n * @param name 交互名\n * @param view 交互应用的 View 实例\n * @param cfg 交互行为配置\n */\nexport function createInteraction(name, view, cfg) {\n  var interaciton = getInteraction(name);\n  if (!interaciton) {\n    return null;\n  }\n  if (isPlainObject(interaciton)) {\n    // 如果不 clone 则会多个 interaction 实例共享 step 的定义\n    var steps = mix(clone(interaciton), cfg);\n    return new GrammarInteraction(view, steps);\n  } else {\n    var cls = interaciton;\n    return new cls(view, cfg);\n  }\n}\nexport { default as Interaction } from './interaction';\nexport { Action, registerAction, getActionClass } from './action';","map":{"version":3,"sources":["../../src/interaction/index.ts"],"names":[],"mappings":"AAAA,SAAS,KAAK,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,QAAQ,YAAY;AAGjE,OAAO,kBAAwC,MAAM,uBAAuB;AAG5E,IAAM,YAAY,GAAgB,CAAA,CAAE;AAEpC;;;;AAIG;AACH,OAAM,SAAU,cAAc,CAAC,IAAY,EAAA;EACzC,OAAO,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACtC;AAEA;;;;AAIG;AACH,OAAM,SAAU,mBAAmB,CAAC,IAAY,EAAE,WAAsD,EAAA;EACtG,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,WAAW;AAC7C;AAEA;;;;;AAKG;AACH,OAAM,SAAU,iBAAiB,CAAC,IAAY,EAAE,IAAU,EAAE,GAAiB,EAAA;EAC3E,IAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC;EACxC,IAAI,CAAC,WAAW,EAAE;IAChB,OAAO,IAAI;EACZ;EACD,IAAI,aAAa,CAAC,WAAW,CAAC,EAAE;IAC9B;IACA,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,GAAG,CAAqB;IAC9D,OAAO,IAAI,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC;GAC3C,MAAM;IACL,IAAM,GAAG,GAAG,WAAqC;IACjD,OAAO,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC;EAC1B;AACH;AAEA,SAAS,OAAO,IAAI,WAAW,QAAQ,eAAe;AACtD,SAAS,MAAM,EAAE,cAAc,EAAE,cAAc,QAAQ,UAAU","sourcesContent":["import { clone, isPlainObject, lowerCase, mix } from '@antv/util';\nimport { View } from '../chart';\nimport { LooseObject } from '../interface';\nimport GrammarInteraction, { InteractionSteps } from './grammar-interaction';\nimport { InteractionConstructor } from './interaction';\n\nconst Interactions: LooseObject = {};\n\n/**\n * 根据交互行为名字获取对应的交互类\n * @param name 交互名字\n * @returns 交互类\n */\nexport function getInteraction(name: string): InteractionSteps | InteractionConstructor {\n  return Interactions[lowerCase(name)];\n}\n\n/**\n * 注册交互行为\n * @param name 交互行为名字\n * @param interaction 交互类\n */\nexport function registerInteraction(name: string, interaction: InteractionSteps | InteractionConstructor) {\n  Interactions[lowerCase(name)] = interaction;\n}\n\n/**\n * 创建交互实例\n * @param name 交互名\n * @param view 交互应用的 View 实例\n * @param cfg 交互行为配置\n */\nexport function createInteraction(name: string, view: View, cfg?: LooseObject) {\n  const interaciton = getInteraction(name);\n  if (!interaciton) {\n    return null;\n  }\n  if (isPlainObject(interaciton)) {\n    // 如果不 clone 则会多个 interaction 实例共享 step 的定义\n    const steps = mix(clone(interaciton), cfg) as InteractionSteps;\n    return new GrammarInteraction(view, steps);\n  } else {\n    const cls = interaciton as InteractionConstructor;\n    return new cls(view, cfg);\n  }\n}\n\nexport { default as Interaction } from './interaction';\nexport { Action, registerAction, getActionClass } from './action';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}