{"ast":null,"code":"import { getMaxLabelWidth } from '../../util/label';\nimport { getAngleByMatrix } from '../../util/matrix';\nimport { near } from '../../util/util';\n// 文本是否旋转\nfunction isRotate(label) {\n  var matrix = label.attr('matrix');\n  return matrix && matrix[0] !== 1; // 仅在这个场景下判定\n}\n\nfunction getRotateAngle(label) {\n  var angle = isRotate(label) ? getAngleByMatrix(label.attr('matrix')) : 0;\n  return angle % 360;\n}\n// autohide 不再考虑超出限制\n// function isOutLimit(isVertical: boolean, label: IElement, limitLength: number) {\n//   if (!limitLength) {\n//     // 如果没限制 limitLength 则直接返回 false\n//     return false;\n//   }\n//   const canvasBBox = label.getCanvasBBox();\n//   let isOut = false;\n//   if (isVertical) {\n//     isOut = canvasBBox.width > limitLength;\n//   } else {\n//     isOut = canvasBBox.height > limitLength;\n//   }\n//   return isOut;\n// }\n// 是否重叠\nfunction isOverlap(isVertical, first, second, minGap) {\n  var overlap = false;\n  var angle = getRotateAngle(first);\n  var distance = isVertical ? Math.abs(second.attr('y') - first.attr('y')) : Math.abs(second.attr('x') - first.attr('x'));\n  var prevBBox = (isVertical ? second.attr('y') > first.attr('y') : second.attr('x') > first.attr('x')) ? first.getBBox() : second.getBBox();\n  if (isVertical) {\n    var ratio = Math.abs(Math.cos(angle));\n    if (near(ratio, 0, Math.PI / 180)) {\n      overlap = prevBBox.width + minGap > distance;\n    } else {\n      overlap = prevBBox.height / ratio + minGap > distance;\n    }\n  } else {\n    var ratio = Math.abs(Math.sin(angle));\n    if (near(ratio, 0, Math.PI / 180)) {\n      overlap = prevBBox.width + minGap > distance;\n    } else {\n      overlap = prevBBox.height / ratio + minGap > distance;\n    }\n  }\n  return overlap;\n}\n// 保留第一个或者最后一个\nfunction reserveOne(isVertical, labelsGroup, reversed, autoHideCfg) {\n  var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n  var labels = labelsGroup.getChildren().slice() // 复制数组\n  .filter(function (item) {\n    return item.get('visible');\n  });\n  if (!labels.length) {\n    return false;\n  }\n  var hasHide = false;\n  if (reversed) {\n    // 翻转\n    labels.reverse();\n  }\n  var count = labels.length;\n  var first = labels[0];\n  var prev = first;\n  for (var i = 1; i < count; i++) {\n    var label = labels[i];\n    var curBBox = label.getBBox();\n    // 不再考虑超出限制，而仅仅根据是否重叠进行隐藏 isOutLimit(isVertical, label, limitLength) ||\n    var isHide = isOverlap(isVertical, prev, label, minGap);\n    if (isHide) {\n      label.hide();\n      hasHide = true;\n    } else {\n      prev = label;\n    }\n  }\n  return hasHide;\n}\n// 均匀抽样隐藏标签，注意这里假设 label/tick 是均匀的\nfunction parityHide(isVertical, labelsGroup, autoHideCfg) {\n  var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n  var labels = labelsGroup.getChildren().slice(); // 复制数组\n  if (labels.length < 2) {\n    // 如果数量小于 2 则直接返回，等于 2 时可能也会重合\n    return false;\n  }\n  var hasHide = false;\n  var first = labels[0];\n  var firstBBox = first.getBBox();\n  var second = labels[1];\n  var count = labels.length;\n  var angle = getRotateAngle(first);\n  var distance = isVertical ? Math.abs(second.attr('y') - first.attr('y')) : Math.abs(second.attr('x') - first.attr('x'));\n  var interval = 0; // 不重叠的坐标文本间距个数\n  if (isVertical) {\n    // 垂直的坐标轴计算垂直方向的间距\n    var ratio = Math.abs(Math.cos(angle));\n    if (near(ratio, 0, Math.PI / 180)) {\n      var maxWidth = getMaxLabelWidth(labels);\n      interval = (maxWidth + minGap) / distance;\n    } else {\n      interval = (firstBBox.height / ratio + minGap) / distance;\n    }\n  } else {\n    // 水平坐标轴\n    var ratio = Math.abs(Math.sin(angle));\n    if (near(ratio, 0, Math.PI / 180)) {\n      var maxWidth = getMaxLabelWidth(labels);\n      interval = (maxWidth + minGap) / distance;\n    } else {\n      interval = (firstBBox.height / ratio + minGap) / distance;\n    }\n  }\n  // interval > 1 时需要对 label 进行隐藏\n  if (interval > 1) {\n    interval = Math.ceil(interval);\n    for (var i = 0; i < count; i++) {\n      if (i % interval !== 0) {\n        // 仅保留被整除的 label\n        labels[i].hide();\n        hasHide = true;\n      }\n    }\n  }\n  return hasHide;\n}\nexport function getDefault() {\n  return equidistance;\n}\n/**\n * 保证首个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function reserveFirst(isVertical, labelsGroup, limitLength, autoHideCfg) {\n  return reserveOne(isVertical, labelsGroup, false, autoHideCfg);\n}\n/**\n * 保证最后一个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function reserveLast(isVertical, labelsGroup, limitLength, autoHideCfg) {\n  return reserveOne(isVertical, labelsGroup, true, autoHideCfg);\n}\n/**\n * 保证第一个最后一个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function reserveBoth(isVertical, labelsGroup, limitLength, autoHideCfg) {\n  var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n  var labels = labelsGroup.getChildren().slice(); // 复制数组\n  if (labels.length <= 2) {\n    // 如果数量小于或等于 2 则直接返回\n    return false;\n  }\n  var hasHide = false;\n  var count = labels.length;\n  var first = labels[0];\n  var last = labels[count - 1];\n  var preLabel = first;\n  // 按照先保存第一个的逻辑循环一遍，最后一个不参与循环\n  for (var i = 1; i < count - 1; i++) {\n    var label = labels[i];\n    var curBBox = label.getBBox();\n    // 废弃 isOutLimit(isVertical, label, limitLength) ||\n    var isHide = isOverlap(isVertical, preLabel, label, minGap);\n    if (isHide) {\n      label.hide();\n      hasHide = true;\n    } else {\n      preLabel = label;\n    }\n  }\n  var overlap = isOverlap(isVertical, preLabel, last, minGap);\n  if (overlap) {\n    // 发生冲突，则隐藏前一个保留后一个\n    preLabel.hide();\n    hasHide = true;\n  }\n  return hasHide;\n}\n/**\n * 保证 label 均匀显示 和 不出现重叠，主要解决文本层叠的问题，对于 limitLength 不处理\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function equidistance(isVertical, labelsGroup, limitLength, autoHideCfg) {\n  var hasHide = parityHide(isVertical, labelsGroup, autoHideCfg);\n  // 处理  timeCat 类型的 tick，在均匀的基础上，再次检查出现重叠的进行隐藏\n  if (reserveOne(isVertical, labelsGroup, false)) {\n    hasHide = true;\n  }\n  return hasHide;\n}\n/**\n * 同 equidistance， 首先会保证 labels 均匀显示，然后会保留首尾\n * @param isVertical\n * @param labelsGroup\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function equidistanceWithReverseBoth(isVertical, labelsGroup, limitLength, autoHideCfg) {\n  var labels = labelsGroup.getChildren().slice(); // 复制数组\n  var hasHide = parityHide(isVertical, labelsGroup, autoHideCfg);\n  if (labels.length > 2) {\n    var first = labels[0];\n    var last = labels[labels.length - 1];\n    // 如果第一个被隐藏了\n    if (!first.get('visible')) {\n      first.show();\n      if (reserveOne(isVertical, labelsGroup, false, autoHideCfg)) {\n        hasHide = true;\n      }\n    }\n    // 如果最后一个被隐藏了\n    if (!last.get('visible')) {\n      last.show();\n      if (reserveOne(isVertical, labelsGroup, true, autoHideCfg)) {\n        hasHide = true;\n      }\n    }\n  }\n  return hasHide;\n}","map":{"version":3,"sources":["../../../src/axis/overlap/auto-hide.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getMaxLabelWidth } from '../../util/label';\nimport { getAngleByMatrix } from '../../util/matrix';\nimport { near } from '../../util/util';\n// 文本是否旋转\nfunction isRotate(label) {\n    var matrix = label.attr('matrix');\n    return matrix && matrix[0] !== 1; // 仅在这个场景下判定\n}\nfunction getRotateAngle(label) {\n    var angle = isRotate(label) ? getAngleByMatrix(label.attr('matrix')) : 0;\n    return angle % 360;\n}\n// autohide 不再考虑超出限制\n// function isOutLimit(isVertical: boolean, label: IElement, limitLength: number) {\n//   if (!limitLength) {\n//     // 如果没限制 limitLength 则直接返回 false\n//     return false;\n//   }\n//   const canvasBBox = label.getCanvasBBox();\n//   let isOut = false;\n//   if (isVertical) {\n//     isOut = canvasBBox.width > limitLength;\n//   } else {\n//     isOut = canvasBBox.height > limitLength;\n//   }\n//   return isOut;\n// }\n// 是否重叠\nfunction isOverlap(isVertical, first, second, minGap) {\n    var overlap = false;\n    var angle = getRotateAngle(first);\n    var distance = isVertical\n        ? Math.abs(second.attr('y') - first.attr('y'))\n        : Math.abs(second.attr('x') - first.attr('x'));\n    var prevBBox = (isVertical\n        ? second.attr('y') > first.attr('y')\n        : second.attr('x') > first.attr('x'))\n        ? first.getBBox()\n        : second.getBBox();\n    if (isVertical) {\n        var ratio = Math.abs(Math.cos(angle));\n        if (near(ratio, 0, Math.PI / 180)) {\n            overlap = prevBBox.width + minGap > distance;\n        }\n        else {\n            overlap = prevBBox.height / ratio + minGap > distance;\n        }\n    }\n    else {\n        var ratio = Math.abs(Math.sin(angle));\n        if (near(ratio, 0, Math.PI / 180)) {\n            overlap = prevBBox.width + minGap > distance;\n        }\n        else {\n            overlap = prevBBox.height / ratio + minGap > distance;\n        }\n    }\n    return overlap;\n}\n// 保留第一个或者最后一个\nfunction reserveOne(isVertical, labelsGroup, reversed, autoHideCfg) {\n    var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n    var labels = labelsGroup\n        .getChildren()\n        .slice() // 复制数组\n        .filter(function (item) { return item.get('visible'); });\n    if (!labels.length) {\n        return false;\n    }\n    var hasHide = false;\n    if (reversed) {\n        // 翻转\n        labels.reverse();\n    }\n    var count = labels.length;\n    var first = labels[0];\n    var prev = first;\n    for (var i = 1; i < count; i++) {\n        var label = labels[i];\n        var curBBox = label.getBBox();\n        // 不再考虑超出限制，而仅仅根据是否重叠进行隐藏 isOutLimit(isVertical, label, limitLength) ||\n        var isHide = isOverlap(isVertical, prev, label, minGap);\n        if (isHide) {\n            label.hide();\n            hasHide = true;\n        }\n        else {\n            prev = label;\n        }\n    }\n    return hasHide;\n}\n// 均匀抽样隐藏标签，注意这里假设 label/tick 是均匀的\nfunction parityHide(isVertical, labelsGroup, autoHideCfg) {\n    var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n    var labels = labelsGroup.getChildren().slice(); // 复制数组\n    if (labels.length < 2) {\n        // 如果数量小于 2 则直接返回，等于 2 时可能也会重合\n        return false;\n    }\n    var hasHide = false;\n    var first = labels[0];\n    var firstBBox = first.getBBox();\n    var second = labels[1];\n    var count = labels.length;\n    var angle = getRotateAngle(first);\n    var distance = isVertical\n        ? Math.abs(second.attr('y') - first.attr('y'))\n        : Math.abs(second.attr('x') - first.attr('x'));\n    var interval = 0; // 不重叠的坐标文本间距个数\n    if (isVertical) {\n        // 垂直的坐标轴计算垂直方向的间距\n        var ratio = Math.abs(Math.cos(angle));\n        if (near(ratio, 0, Math.PI / 180)) {\n            var maxWidth = getMaxLabelWidth(labels);\n            interval = (maxWidth + minGap) / distance;\n        }\n        else {\n            interval = (firstBBox.height / ratio + minGap) / distance;\n        }\n    }\n    else {\n        // 水平坐标轴\n        var ratio = Math.abs(Math.sin(angle));\n        if (near(ratio, 0, Math.PI / 180)) {\n            var maxWidth = getMaxLabelWidth(labels);\n            interval = (maxWidth + minGap) / distance;\n        }\n        else {\n            interval = (firstBBox.height / ratio + minGap) / distance;\n        }\n    }\n    // interval > 1 时需要对 label 进行隐藏\n    if (interval > 1) {\n        interval = Math.ceil(interval);\n        for (var i = 0; i < count; i++) {\n            if (i % interval !== 0) {\n                // 仅保留被整除的 label\n                labels[i].hide();\n                hasHide = true;\n            }\n        }\n    }\n    return hasHide;\n}\nexport function getDefault() {\n    return equidistance;\n}\n/**\n * 保证首个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function reserveFirst(isVertical, labelsGroup, limitLength, autoHideCfg) {\n    return reserveOne(isVertical, labelsGroup, false, autoHideCfg);\n}\n/**\n * 保证最后一个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function reserveLast(isVertical, labelsGroup, limitLength, autoHideCfg) {\n    return reserveOne(isVertical, labelsGroup, true, autoHideCfg);\n}\n/**\n * 保证第一个最后一个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function reserveBoth(isVertical, labelsGroup, limitLength, autoHideCfg) {\n    var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n    var labels = labelsGroup.getChildren().slice(); // 复制数组\n    if (labels.length <= 2) {\n        // 如果数量小于或等于 2 则直接返回\n        return false;\n    }\n    var hasHide = false;\n    var count = labels.length;\n    var first = labels[0];\n    var last = labels[count - 1];\n    var preLabel = first;\n    // 按照先保存第一个的逻辑循环一遍，最后一个不参与循环\n    for (var i = 1; i < count - 1; i++) {\n        var label = labels[i];\n        var curBBox = label.getBBox();\n        // 废弃 isOutLimit(isVertical, label, limitLength) ||\n        var isHide = isOverlap(isVertical, preLabel, label, minGap);\n        if (isHide) {\n            label.hide();\n            hasHide = true;\n        }\n        else {\n            preLabel = label;\n        }\n    }\n    var overlap = isOverlap(isVertical, preLabel, last, minGap);\n    if (overlap) {\n        // 发生冲突，则隐藏前一个保留后一个\n        preLabel.hide();\n        hasHide = true;\n    }\n    return hasHide;\n}\n/**\n * 保证 label 均匀显示 和 不出现重叠，主要解决文本层叠的问题，对于 limitLength 不处理\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function equidistance(isVertical, labelsGroup, limitLength, autoHideCfg) {\n    var hasHide = parityHide(isVertical, labelsGroup, autoHideCfg);\n    // 处理  timeCat 类型的 tick，在均匀的基础上，再次检查出现重叠的进行隐藏\n    if (reserveOne(isVertical, labelsGroup, false)) {\n        hasHide = true;\n    }\n    return hasHide;\n}\n/**\n * 同 equidistance， 首先会保证 labels 均匀显示，然后会保留首尾\n * @param isVertical\n * @param labelsGroup\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function equidistanceWithReverseBoth(isVertical, labelsGroup, limitLength, autoHideCfg) {\n    var labels = labelsGroup.getChildren().slice(); // 复制数组\n    var hasHide = parityHide(isVertical, labelsGroup, autoHideCfg);\n    if (labels.length > 2) {\n        var first = labels[0];\n        var last = labels[labels.length - 1];\n        // 如果第一个被隐藏了\n        if (!first.get('visible')) {\n            first.show();\n            if (reserveOne(isVertical, labelsGroup, false, autoHideCfg)) {\n                hasHide = true;\n            }\n        }\n        // 如果最后一个被隐藏了\n        if (!last.get('visible')) {\n            last.show();\n            if (reserveOne(isVertical, labelsGroup, true, autoHideCfg)) {\n                hasHide = true;\n            }\n        }\n    }\n    return hasHide;\n}\n//# sourceMappingURL=auto-hide.js.map"]},"metadata":{},"sourceType":"module"}