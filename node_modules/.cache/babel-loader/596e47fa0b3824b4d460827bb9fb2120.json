{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { each } from '@antv/util';\nimport { COMPONENT_TYPE } from '../../constant';\nimport { BBox } from '../../util/bbox';\nimport { isAutoPadding, parsePadding } from '../../util/padding';\nimport { PaddingCal } from './padding-cal';\n/**\n * @ignore\n * 根据 view 中的组件，计算实际的 padding 数值\n * @param view\n */\nexport function calculatePadding(view) {\n  var padding = view.padding;\n  // 如果不是 auto padding，那么直接解析之后返回\n  if (!isAutoPadding(padding)) {\n    return new (PaddingCal.bind.apply(PaddingCal, __spreadArray([void 0], __read(parsePadding(padding)), false)))();\n  }\n  // 是 auto padding，根据组件的情况，来计算 padding\n  var viewBBox = view.viewBBox;\n  var paddingCal = new PaddingCal();\n  var axisComponents = [];\n  var paddingComponents = [];\n  var otherComponents = [];\n  each(view.getComponents(), function (co) {\n    var type = co.type;\n    if (type === COMPONENT_TYPE.AXIS) {\n      axisComponents.push(co);\n    } else if ([COMPONENT_TYPE.LEGEND, COMPONENT_TYPE.SLIDER, COMPONENT_TYPE.SCROLLBAR].includes(type)) {\n      paddingComponents.push(co);\n    } else if (type !== COMPONENT_TYPE.GRID && type !== COMPONENT_TYPE.TOOLTIP) {\n      otherComponents.push(co);\n    }\n  });\n  // 进行坐标轴布局，应该是取 padding 的并集，而不是进行相加\n  each(axisComponents, function (co) {\n    var component = co.component;\n    var bboxObject = component.getLayoutBBox();\n    var componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height);\n    var exceed = componentBBox.exceed(viewBBox);\n    // 在对组件分组之后，先对 axis 进行处理，然后取最大的超出即可。\n    paddingCal.max(exceed);\n  });\n  // 有 padding 的组件布局\n  each(paddingComponents, function (co) {\n    var component = co.component,\n      direction = co.direction;\n    var bboxObject = component.getLayoutBBox();\n    var componentPadding = component.get('padding');\n    var componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(componentPadding);\n    // 按照方向计算 padding\n    paddingCal.inc(componentBBox, direction);\n  });\n  // 其他组件布局\n  each(otherComponents, function (co) {\n    var component = co.component,\n      direction = co.direction;\n    var bboxObject = component.getLayoutBBox();\n    var componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height);\n    // 按照方向计算 padding\n    paddingCal.inc(componentBBox, direction);\n  });\n  return paddingCal;\n}","map":{"version":3,"sources":["../../../src/chart/layout/auto.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { COMPONENT_TYPE } from '../../constant';\nimport { ComponentOption, Padding } from '../../interface';\nimport { BBox } from '../../util/bbox';\nimport { isAutoPadding, parsePadding } from '../../util/padding';\nimport View from '../view';\nimport { PaddingCal } from './padding-cal';\n\n/**\n * @ignore\n * 根据 view 中的组件，计算实际的 padding 数值\n * @param view\n */\nexport function calculatePadding(view: View): PaddingCal {\n  const padding = view.padding;\n\n  // 如果不是 auto padding，那么直接解析之后返回\n  if (!isAutoPadding(padding)) {\n    return new PaddingCal(...parsePadding(padding));\n  }\n\n  // 是 auto padding，根据组件的情况，来计算 padding\n  const { viewBBox } = view;\n\n  const paddingCal = new PaddingCal();\n\n  const axisComponents = [];\n  const paddingComponents = [];\n  const otherComponents = [];\n\n  each(view.getComponents(), (co: ComponentOption) => {\n    const { type } = co;\n    if (type === COMPONENT_TYPE.AXIS) {\n      axisComponents.push(co);\n    } else if ([COMPONENT_TYPE.LEGEND, COMPONENT_TYPE.SLIDER, COMPONENT_TYPE.SCROLLBAR].includes(type)) {\n      paddingComponents.push(co);\n    } else if (type !== COMPONENT_TYPE.GRID && type !== COMPONENT_TYPE.TOOLTIP) {\n      otherComponents.push(co);\n    }\n  });\n\n  // 进行坐标轴布局，应该是取 padding 的并集，而不是进行相加\n  each(axisComponents, (co: ComponentOption) => {\n    const { component } = co;\n    const bboxObject = component.getLayoutBBox();\n    const componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height);\n\n    const exceed = componentBBox.exceed(viewBBox);\n\n    // 在对组件分组之后，先对 axis 进行处理，然后取最大的超出即可。\n    paddingCal.max(exceed);\n  });\n\n  // 有 padding 的组件布局\n  each(paddingComponents, (co: ComponentOption) => {\n    const { component, direction } = co;\n    const bboxObject = component.getLayoutBBox();\n    const componentPadding: Padding = component.get('padding');\n    const componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(\n      componentPadding\n    );\n    // 按照方向计算 padding\n    paddingCal.inc(componentBBox, direction);\n  });\n\n  // 其他组件布局\n  each(otherComponents, (co: ComponentOption) => {\n    const { component, direction } = co;\n    const bboxObject = component.getLayoutBBox();\n    const componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height);\n    // 按照方向计算 padding\n    paddingCal.inc(componentBBox, direction);\n  });\n\n  return paddingCal;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}