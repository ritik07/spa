{"ast":null,"code":"import { ext } from '@antv/matrix-util';\nvar transform = ext.transform;\nexport { transform };\n/**\n * 对元素进行平移操作。\n * @param element 进行变换的元素\n * @param x x 方向位移\n * @param y y 方向位移\n */\nexport function translate(element, x, y) {\n  var matrix = transform(element.getMatrix(), [['t', x, y]]);\n  element.setMatrix(matrix);\n}\n/**\n * 获取元素旋转矩阵 (以元素的左上角为旋转点)\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\nexport function getRotateMatrix(element, rotateRadian) {\n  var _a = element.attr(),\n    x = _a.x,\n    y = _a.y;\n  var matrix = transform(element.getMatrix(), [['t', -x, -y], ['r', rotateRadian], ['t', x, y]]);\n  return matrix;\n}\n/**\n * 对元素进行旋转操作。\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\nexport function rotate(element, rotateRadian) {\n  var matrix = getRotateMatrix(element, rotateRadian);\n  element.setMatrix(matrix);\n}\n/**\n * 获取元矩阵。\n * @returns identity matrix\n */\nexport function getIdentityMatrix() {\n  return [1, 0, 0, 0, 1, 0, 0, 0, 1];\n}\n/**\n * 围绕图形中心点进行缩放\n * @param element 进行缩放的图形元素\n * @param ratio 缩放比例\n */\nexport function zoom(element, ratio) {\n  var bbox = element.getBBox();\n  var x = (bbox.minX + bbox.maxX) / 2;\n  var y = (bbox.minY + bbox.maxY) / 2;\n  element.applyToMatrix([x, y, 1]);\n  var matrix = transform(element.getMatrix(), [['t', -x, -y], ['s', ratio, ratio], ['t', x, y]]);\n  element.setMatrix(matrix);\n}","map":{"version":3,"sources":["../../src/util/transform.ts"],"names":[],"mappings":"AAAA,SAAS,GAAG,QAAQ,mBAAmB;AAGvC,IAAM,SAAS,GAAgD,GAAG,CAAC,SAAS;AAE5E,SAAS,SAAS;AAElB;;;;;AAKG;AACH,OAAM,SAAU,SAAS,CAAC,OAAwB,EAAE,CAAS,EAAE,CAAS,EAAA;EACtE,IAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAC5D,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC;AAC3B;AAEA;;;;AAIG;AACH,OAAM,SAAU,eAAe,CAAC,OAAiB,EAAE,YAAoB,EAAA;EAC/D,IAAA,EAAA,GAAW,OAAO,CAAC,IAAI,EAAE;IAAvB,CAAC,GAAA,EAAA,CAAA,CAAA;IAAE,CAAC,GAAA,EAAA,CAAA,CAAmB;EAC/B,IAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACb,CAAC,GAAG,EAAE,YAAY,CAAC,EACnB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ,CAAC;EACF,OAAO,MAAM;AACf;AAEA;;;;AAIG;AACH,OAAM,SAAU,MAAM,CAAC,OAAwB,EAAE,YAAoB,EAAA;EACnE,IAAM,MAAM,GAAG,eAAe,CAAC,OAAO,EAAE,YAAY,CAAC;EACrD,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC;AAC3B;AAEA;;;AAGG;AACH,OAAM,SAAU,iBAAiB,GAAA;EAC/B,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACpC;AAEA;;;;AAIG;AACH,OAAM,SAAU,IAAI,CAAC,OAAwB,EAAE,KAAa,EAAA;EAC1D,IAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE;EAC9B,IAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC;EACrC,IAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC;EACrC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAEhC,IAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAC5C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACb,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,EACnB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ,CAAC;EACF,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC;AAC3B","sourcesContent":["import { ext } from '@antv/matrix-util';\nimport { IElement, IGroup, IShape } from '../dependents';\n\nconst transform: (m: number[], actions: any[][]) => number[] = ext.transform;\n\nexport { transform };\n\n/**\n * 对元素进行平移操作。\n * @param element 进行变换的元素\n * @param x x 方向位移\n * @param y y 方向位移\n */\nexport function translate(element: IGroup | IShape, x: number, y: number) {\n  const matrix = transform(element.getMatrix(), [['t', x, y]]);\n  element.setMatrix(matrix);\n}\n\n/**\n * 获取元素旋转矩阵 (以元素的左上角为旋转点)\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\nexport function getRotateMatrix(element: IElement, rotateRadian: number) {\n  const { x, y } = element.attr();\n  const matrix = transform(element.getMatrix(), [\n    ['t', -x, -y],\n    ['r', rotateRadian],\n    ['t', x, y],\n  ]);\n  return matrix;\n}\n\n/**\n * 对元素进行旋转操作。\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\nexport function rotate(element: IGroup | IShape, rotateRadian: number) {\n  const matrix = getRotateMatrix(element, rotateRadian);\n  element.setMatrix(matrix);\n}\n\n/**\n * 获取元矩阵。\n * @returns identity matrix\n */\nexport function getIdentityMatrix(): number[] {\n  return [1, 0, 0, 0, 1, 0, 0, 0, 1];\n}\n\n/**\n * 围绕图形中心点进行缩放\n * @param element 进行缩放的图形元素\n * @param ratio 缩放比例\n */\nexport function zoom(element: IGroup | IShape, ratio: number) {\n  const bbox = element.getBBox();\n  const x = (bbox.minX + bbox.maxX) / 2;\n  const y = (bbox.minY + bbox.maxY) / 2;\n  element.applyToMatrix([x, y, 1]);\n\n  const matrix = transform(element.getMatrix(), [\n    ['t', -x, -y],\n    ['s', ratio, ratio],\n    ['t', x, y],\n  ]);\n  element.setMatrix(matrix);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}