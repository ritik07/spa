{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, max, map, isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nfunction normalizeSize(arr) {\n  if (!isArray(arr)) {\n    return [];\n  }\n  var maxValue = max(arr);\n  return map(arr, function (num) {\n    return num / maxValue;\n  });\n}\nvar ViolinShapeFactory = registerShapeFactory('violin', {\n  defaultShapeType: 'violin',\n  getDefaultPoints: function (pointInfo) {\n    var radius = pointInfo.size / 2;\n    var points = [];\n    var sizeArr = normalizeSize(pointInfo._size);\n    each(pointInfo.y, function (y, index) {\n      var offset = sizeArr[index] * radius;\n      var isMin = index === 0;\n      var isMax = index === pointInfo.y.length - 1;\n      points.push({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x - offset,\n        y: y\n      });\n      points.unshift({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x + offset,\n        y: y\n      });\n    });\n    return points;\n  }\n});\nregisterShape('violin', 'violin', {\n  draw: function (cfg, container) {\n    var shapeAttrs = getStyle(cfg, true, true);\n    var path = this.parsePath(getViolinPath(cfg.points));\n    return container.addShape('path', {\n      attrs: __assign(__assign({}, shapeAttrs), {\n        path: path\n      }),\n      name: 'violin'\n    });\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default ViolinShapeFactory;","map":{"version":3,"sources":["../../../../src/geometry/shape/violin/index.ts"],"names":[],"mappings":";AAAA,SAAS,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,QAAQ,YAAY;AAGpD,SAAS,aAAa,EAAE,oBAAoB,QAAQ,SAAS;AAC7D,SAAS,aAAa,QAAQ,yBAAyB;AACvD,SAAS,QAAQ,QAAQ,mBAAmB;AAE5C,SAAS,aAAa,CAAC,GAAa,EAAA;EAClC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACjB,OAAO,EAAE;EACV;EACD,IAAM,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC;EACzB,OAAO,GAAG,CAAC,GAAG,EAAE,UAAC,GAAG,EAAA;IAAK,OAAA,GAAG,GAAG,QAAQ;EAAd,CAAc,CAAC;AAC1C;AAEA,IAAM,kBAAkB,GAAG,oBAAoB,CAAC,QAAQ,EAAE;EACxD,gBAAgB,EAAE,QAAQ;EAC1B,gBAAgB,EAAA,UAAC,SAA2B,EAAA;IAC1C,IAAM,MAAM,GAAG,SAAS,CAAC,IAAI,GAAG,CAAC;IACjC,IAAM,MAAM,GAAG,EAAE;IACjB,IAAM,OAAO,GAAG,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;IAE9C,IAAI,CAAC,SAAS,CAAC,CAAa,EAAE,UAAC,CAAC,EAAE,KAAK,EAAA;MACrC,IAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM;MACtC,IAAM,KAAK,GAAG,KAAK,KAAK,CAAC;MACzB,IAAM,KAAK,GAAG,KAAK,KAAM,SAAS,CAAC,CAAc,CAAC,MAAM,GAAG,CAAC;MAC5D,MAAM,CAAC,IAAI,CAAC;QACV,KAAK,EAAA,KAAA;QACL,KAAK,EAAA,KAAA;QACL,CAAC,EAAG,SAAS,CAAC,CAAY,GAAG,MAAM;QACnC,CAAC,EAAA;OACF,CAAC;MACF,MAAM,CAAC,OAAO,CAAC;QACb,KAAK,EAAA,KAAA;QACL,KAAK,EAAA,KAAA;QACL,CAAC,EAAG,SAAS,CAAC,CAAY,GAAG,MAAM;QACnC,CAAC,EAAA;OACF,CAAC;IACJ,CAAC,CAAC;IACF,OAAO,MAAM;EACf;CACD,CAAC;AAEF,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE;EAChC,IAAI,EAAA,UAAC,GAAc,EAAE,SAAiB,EAAA;IACpC,IAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IAC5C,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtD,OAAO,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE;MAChC,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,UAAU,CAAA,EAAA;QACb,IAAI,EAAA;MAAA,CAAA,CACL;MACD,IAAI,EAAE;KACP,CAAC;EACJ,CAAC;EACD,SAAS,EAAA,UAAC,SAAyB,EAAA;IACzB,IAAA,KAAK,GAAK,SAAS,CAAA,KAAd;IAEb,OAAO;MACL,MAAM,EAAE,QAAQ;MAChB,KAAK,EAAE;QACL,CAAC,EAAE,CAAC;QACJ,IAAI,EAAE;MACP;KACF;EACH;CACD,CAAC;AAEF,eAAe,kBAAkB","sourcesContent":["import { each, max, map, isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { ShapeInfo, ShapeMarkerCfg, ViolinShapePoint } from '../../../interface';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\n\nfunction normalizeSize(arr: number[]) {\n  if (!isArray(arr)) {\n    return [];\n  }\n  const maxValue = max(arr);\n  return map(arr, (num) => num / maxValue);\n}\n\nconst ViolinShapeFactory = registerShapeFactory('violin', {\n  defaultShapeType: 'violin',\n  getDefaultPoints(pointInfo: ViolinShapePoint) {\n    const radius = pointInfo.size / 2;\n    const points = [];\n    const sizeArr = normalizeSize(pointInfo._size);\n\n    each(pointInfo.y as number[], (y, index) => {\n      const offset = sizeArr[index] * radius;\n      const isMin = index === 0;\n      const isMax = index === (pointInfo.y as number[]).length - 1;\n      points.push({\n        isMin,\n        isMax,\n        x: (pointInfo.x as number) - offset,\n        y,\n      });\n      points.unshift({\n        isMin,\n        isMax,\n        x: (pointInfo.x as number) + offset,\n        y,\n      });\n    });\n    return points;\n  },\n});\n\nregisterShape('violin', 'violin', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const shapeAttrs = getStyle(cfg, true, true);\n    const path = this.parsePath(getViolinPath(cfg.points));\n    return container.addShape('path', {\n      attrs: {\n        ...shapeAttrs,\n        path,\n      },\n      name: 'violin',\n    });\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4,\n        fill: color,\n      },\n    };\n  },\n});\n\nexport default ViolinShapeFactory;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}