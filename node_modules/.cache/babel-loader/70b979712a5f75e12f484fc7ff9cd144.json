{"ast":null,"code":"import { each, isArray, isString } from '@antv/util';\nvar regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/gi;\nvar regexDot = /[^\\s,]+/gi;\nexport function parseRadius(radius) {\n  var r1 = 0;\n  var r2 = 0;\n  var r3 = 0;\n  var r4 = 0;\n  if (isArray(radius)) {\n    if (radius.length === 1) {\n      r1 = r2 = r3 = r4 = radius[0];\n    } else if (radius.length === 2) {\n      r1 = r3 = radius[0];\n      r2 = r4 = radius[1];\n    } else if (radius.length === 3) {\n      r1 = radius[0];\n      r2 = r4 = radius[1];\n      r3 = radius[2];\n    } else {\n      r1 = radius[0];\n      r2 = radius[1];\n      r3 = radius[2];\n      r4 = radius[3];\n    }\n  } else {\n    r1 = r2 = r3 = r4 = radius;\n  }\n  return {\n    r1: r1,\n    r2: r2,\n    r3: r3,\n    r4: r4\n  };\n}\nexport function parsePath(path) {\n  path = path || [];\n  if (isArray(path)) {\n    return path;\n  }\n  if (isString(path)) {\n    path = path.match(regexTags);\n    each(path, function (item, index) {\n      item = item.match(regexDot);\n      if (item[0].length > 1) {\n        var tag = item[0].charAt(0);\n        item.splice(1, 0, item[0].substr(1));\n        item[0] = tag;\n      }\n      each(item, function (sub, i) {\n        if (!isNaN(sub)) {\n          item[i] = +sub;\n        }\n      });\n      path[index] = item;\n    });\n    return path;\n  }\n}","map":{"version":3,"sources":["../../src/util/format.ts"],"names":[],"mappings":"AAAA,SAAS,IAAI,EAAE,OAAO,EAAE,QAAQ,QAAQ,YAAY;AAEpD,IAAM,SAAS,GAAG,gCAAgC;AAClD,IAAM,QAAQ,GAAG,WAAW;AAE5B,OAAM,SAAU,WAAW,CAAC,MAAM,EAAA;EAChC,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;IACnB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;MACvB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;KAC9B,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;MAC9B,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACnB,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;KACpB,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;MAC9B,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACd,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACnB,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;KACf,MAAM;MACL,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACd,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACd,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;MACd,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;IACf;GACF,MAAM;IACL,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM;EAC3B;EACD,OAAO;IACL,EAAE,EAAA,EAAA;IACF,EAAE,EAAA,EAAA;IACF,EAAE,EAAA,EAAA;IACF,EAAE,EAAA;GACH;AACH;AAEA,OAAM,SAAU,SAAS,CAAC,IAAI,EAAA;EAC5B,IAAI,GAAG,IAAI,IAAI,EAAE;EACjB,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;IACjB,OAAO,IAAI;EACZ;EAED,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;IAClB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IAC5B,IAAI,CAAC,IAAI,EAAE,UAAC,IAAI,EAAE,KAAK,EAAA;MACrB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;MAC3B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;QACtB,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG;MACd;MACD,IAAI,CAAC,IAAI,EAAE,UAAC,GAAG,EAAE,CAAC,EAAA;QAChB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;UACf,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG;QACf;MACH,CAAC,CAAC;MACF,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI;IACpB,CAAC,CAAC;IACF,OAAO,IAAI;EACZ;AACH","sourceRoot":"","sourcesContent":["import { each, isArray, isString } from '@antv/util';\nvar regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/gi;\nvar regexDot = /[^\\s,]+/gi;\nexport function parseRadius(radius) {\n    var r1 = 0;\n    var r2 = 0;\n    var r3 = 0;\n    var r4 = 0;\n    if (isArray(radius)) {\n        if (radius.length === 1) {\n            r1 = r2 = r3 = r4 = radius[0];\n        }\n        else if (radius.length === 2) {\n            r1 = r3 = radius[0];\n            r2 = r4 = radius[1];\n        }\n        else if (radius.length === 3) {\n            r1 = radius[0];\n            r2 = r4 = radius[1];\n            r3 = radius[2];\n        }\n        else {\n            r1 = radius[0];\n            r2 = radius[1];\n            r3 = radius[2];\n            r4 = radius[3];\n        }\n    }\n    else {\n        r1 = r2 = r3 = r4 = radius;\n    }\n    return {\n        r1: r1,\n        r2: r2,\n        r3: r3,\n        r4: r4,\n    };\n}\nexport function parsePath(path) {\n    path = path || [];\n    if (isArray(path)) {\n        return path;\n    }\n    if (isString(path)) {\n        path = path.match(regexTags);\n        each(path, function (item, index) {\n            item = item.match(regexDot);\n            if (item[0].length > 1) {\n                var tag = item[0].charAt(0);\n                item.splice(1, 0, item[0].substr(1));\n                item[0] = tag;\n            }\n            each(item, function (sub, i) {\n                if (!isNaN(sub)) {\n                    item[i] = +sub;\n                }\n            });\n            path[index] = item;\n        });\n        return path;\n    }\n}\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"module"}