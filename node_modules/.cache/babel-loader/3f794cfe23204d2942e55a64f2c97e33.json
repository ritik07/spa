{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, some } from '@antv/util';\nimport ListState from './list-state';\nvar STATUS_UNCHECKED = 'unchecked';\nvar STATUS_CHECKED = 'checked';\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nvar ListChecked = /** @class */function (_super) {\n  __extends(ListChecked, _super);\n  function ListChecked() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_CHECKED;\n    return _this;\n  }\n  // 单个 item 设置状态\n  ListChecked.prototype.setItemState = function (list, item, enable) {\n    this.setCheckedBy(list, function (el) {\n      return el === item;\n    }, enable);\n  };\n  // 根据条件设置 checked\n  ListChecked.prototype.setCheckedBy = function (list, callback, enable) {\n    var items = list.getItems();\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  };\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n  ListChecked.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      var list_1 = triggerInfo.list,\n        item = triggerInfo.item;\n      // 不知道 🤷‍♀️ 只认 unchecked status\n      var allChecked = !some(list_1.getItems(), function (t) {\n        return list_1.hasState(t, STATUS_UNCHECKED);\n      });\n      //\n      if (allChecked || list_1.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list_1, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  };\n  /**\n   * checked 图例项\n   */\n  ListChecked.prototype.checked = function () {\n    this.setState();\n  };\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n  ListChecked.prototype.reset = function () {\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  };\n  return ListChecked;\n}(ListState);\nexport default ListChecked;","map":{"version":3,"sources":["../../../../src/interaction/action/component/list-checked.ts"],"names":[],"mappings":";AAAA,SAAS,IAAI,EAAE,IAAI,QAAQ,YAAY;AAEvC,OAAO,SAAS,MAAM,cAAc;AAEpC,IAAM,gBAAgB,GAAG,WAAW;AACpC,IAAM,cAAc,GAAG,SAAS;AAGhC;;;;;;AAMG;AACH,IAAA,WAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA0B,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;EAA1B,SAAA,WAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IACY,KAAA,CAAA,SAAS,GAAW,cAAc;;EAiE9C;EA/DE;EACU,WAAA,CAAA,SAAA,CAAA,YAAY,GAAtB,UAAuB,IAAW,EAAE,IAAc,EAAE,MAAe,EAAA;IACjE,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAC,EAAE,EAAA;MAAK,OAAA,EAAE,KAAK,IAAI;IAAX,CAAW,EAAE,MAAM,CAAC;EACtD,CAAC;EAED;EACQ,WAAA,CAAA,SAAA,CAAA,YAAY,GAApB,UAAqB,IAAW,EAAE,QAAuB,EAAE,MAAe,EAAA;IACxE,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;IAC7B,IAAI,MAAM,EAAE;MACV;MACA,IAAI,CAAC,KAAK,EAAE,UAAC,IAAI,EAAA;QACf,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;UAClB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,gBAAgB,CAAC,EAAE;YACzC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,gBAAgB,EAAE,KAAK,CAAC;UACjD;UACD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,cAAc,EAAE,IAAI,CAAC;SAC9C,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,EAAE;UAC/C,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,CAAC;QAChD;MACH,CAAC,CAAC;IACH;EACH,CAAC;EAED;;;;;AAKG;EACI,WAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,IAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE;IAC7C,IAAI,WAAW,IAAI,WAAW,CAAC,IAAI,EAAE;MAC3B,IAAA,MAAI,GAAW,WAAW,CAAA,IAAtB;QAAE,IAAI,GAAK,WAAW,CAAA,IAAhB;MAElB;MACA,IAAM,UAAU,GAAG,CAAC,IAAI,CAAC,MAAI,CAAC,QAAQ,EAAE,EAAE,UAAC,CAAC,EAAA;QAAK,OAAA,MAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,gBAAgB,CAAC;MAAlC,CAAkC,CAAC;MAEpF;MACA,IAAI,UAAU,IAAI,MAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,gBAAgB,CAAC,EAAE;QACvD,IAAI,CAAC,YAAY,CAAC,MAAI,EAAE,IAAI,EAAE,IAAI,CAAC;OACpC,MAAM;QACL,IAAI,CAAC,KAAK,EAAE;MACb;IACF;EACH,CAAC;EAED;;AAEG;EACI,WAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IACE,IAAI,CAAC,QAAQ,EAAE;EACjB,CAAC;EAED;;AAEG;EACI,WAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,YAAA;IACE,IAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE;IAC5C,IAAI,CAAC,UAAU,EAAE,UAAC,SAAS,EAAA;MACzB,SAAS,CAAC,eAAe,CAAC,cAAc,CAAC;MACzC,SAAS,CAAC,eAAe,CAAC,gBAAgB,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC;EACH,OAAA,WAAC;AAAD,CAAC,CAlEyB,SAAS,CAAA;AAoEnC,eAAe,WAAW","sourcesContent":["import { each, some } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport ListState from './list-state';\n\nconst STATUS_UNCHECKED = 'unchecked';\nconst STATUS_CHECKED = 'checked';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nclass ListChecked extends ListState {\n  protected stateName: string = STATUS_CHECKED;\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    this.setCheckedBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 checked\n  private setCheckedBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  }\n\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n\n      // 不知道 🤷‍♀️ 只认 unchecked status\n      const allChecked = !some(list.getItems(), (t) => list.hasState(t, STATUS_UNCHECKED));\n\n      //\n      if (allChecked || list.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  }\n\n  /**\n   * checked 图例项\n   */\n  public checked() {\n    this.setState();\n  }\n\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n  public reset() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  }\n}\n\nexport default ListChecked;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}