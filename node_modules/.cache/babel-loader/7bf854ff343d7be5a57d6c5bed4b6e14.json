{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isArray, isFunction, isString, debounce, throttle } from '@antv/util';\nimport { createAction, createCallbackAction } from './action/register';\nimport InteractionContext from './context';\nimport Interaction from './interaction';\n// 将字符串转换成 action\nexport function parseAction(actionStr, context, arg) {\n  var arr = actionStr.split(':');\n  var actionName = arr[0];\n  // 如果已经初始化过 action ，则直接引用之前的 action\n  var action = context.getAction(actionName) || createAction(actionName, context);\n  if (!action) {\n    throw new Error(\"There is no action named \".concat(actionName));\n  }\n  var methodName = arr[1];\n  return {\n    action: action,\n    methodName: methodName,\n    arg: arg\n  };\n}\n// 执行 Action\nfunction executeAction(actionObject) {\n  var action = actionObject.action,\n    methodName = actionObject.methodName,\n    arg = actionObject.arg;\n  if (action[methodName]) {\n    action[methodName](arg);\n  } else {\n    throw new Error(\"Action(\".concat(action.name, \") doesn't have a method called \").concat(methodName));\n  }\n}\nvar STEP_NAMES = {\n  START: 'start',\n  SHOW_ENABLE: 'showEnable',\n  END: 'end',\n  ROLLBACK: 'rollback',\n  PROCESSING: 'processing'\n};\n/**\n * 支持语法的交互类\n */\nvar GrammarInteraction = /** @class */function (_super) {\n  __extends(GrammarInteraction, _super);\n  function GrammarInteraction(view, steps) {\n    var _this = _super.call(this, view, steps) || this;\n    _this.callbackCaches = {};\n    // 某个触发和反馈在本环节是否执行或\n    _this.emitCaches = {};\n    _this.steps = steps;\n    return _this;\n  }\n  /**\n   * 初始化\n   */\n  GrammarInteraction.prototype.init = function () {\n    this.initContext();\n    _super.prototype.init.call(this);\n  };\n  /**\n   * 清理资源\n   */\n  GrammarInteraction.prototype.destroy = function () {\n    _super.prototype.destroy.call(this); // 先清理事件\n    this.steps = null;\n    if (this.context) {\n      this.context.destroy();\n      this.context = null;\n    }\n    this.callbackCaches = null;\n    this.view = null;\n  };\n  /**\n   * 绑定事件\n   */\n  GrammarInteraction.prototype.initEvents = function () {\n    var _this = this;\n    each(this.steps, function (stepArr, stepName) {\n      each(stepArr, function (step) {\n        var callback = _this.getActionCallback(stepName, step);\n        if (callback) {\n          // 如果存在 callback，才绑定，有时候会出现无 callback 的情况\n          _this.bindEvent(step.trigger, callback);\n        }\n      });\n    });\n  };\n  /**\n   * 清理绑定的事件\n   */\n  GrammarInteraction.prototype.clearEvents = function () {\n    var _this = this;\n    each(this.steps, function (stepArr, stepName) {\n      each(stepArr, function (step) {\n        var callback = _this.getActionCallback(stepName, step);\n        if (callback) {\n          _this.offEvent(step.trigger, callback);\n        }\n      });\n    });\n  };\n  // 初始化上下文，并初始化 action\n  GrammarInteraction.prototype.initContext = function () {\n    var view = this.view;\n    var context = new InteractionContext(view);\n    this.context = context;\n    var steps = this.steps;\n    // 生成具体的 Action\n    each(steps, function (subSteps) {\n      each(subSteps, function (step) {\n        if (isFunction(step.action)) {\n          // 如果传入回调函数，则直接生成 CallbackAction\n          step.actionObject = {\n            action: createCallbackAction(step.action, context),\n            methodName: 'execute'\n          };\n        } else if (isString(step.action)) {\n          // 如果是字符串\n          step.actionObject = parseAction(step.action, context, step.arg);\n        } else if (isArray(step.action)) {\n          // 如果是数组\n          var actionArr = step.action;\n          var argArr_1 = isArray(step.arg) ? step.arg : [step.arg];\n          step.actionObject = [];\n          each(actionArr, function (actionStr, idx) {\n            step.actionObject.push(parseAction(actionStr, context, argArr_1[idx]));\n          });\n        }\n        // 如果 action 既不是字符串，也不是函数，则不会生成 actionObject\n      });\n    });\n  };\n  // 是否允许指定阶段名称执行\n  GrammarInteraction.prototype.isAllowStep = function (stepName) {\n    var currentStepName = this.currentStepName;\n    var steps = this.steps;\n    // 相同的阶段允许同时执行\n    if (currentStepName === stepName) {\n      return true;\n    }\n    if (stepName === STEP_NAMES.SHOW_ENABLE) {\n      // 示能在整个过程中都可用\n      return true;\n    }\n    if (stepName === STEP_NAMES.PROCESSING) {\n      // 只有当前是 start 时，才允许 processing\n      return currentStepName === STEP_NAMES.START;\n    }\n    if (stepName === STEP_NAMES.START) {\n      // 如果当前是 processing，则无法 start，必须等待 end 后才能执行\n      return currentStepName !== STEP_NAMES.PROCESSING;\n    }\n    if (stepName === STEP_NAMES.END) {\n      return currentStepName === STEP_NAMES.PROCESSING || currentStepName === STEP_NAMES.START;\n    }\n    if (stepName === STEP_NAMES.ROLLBACK) {\n      if (steps[STEP_NAMES.END]) {\n        // 如果定义了 end, 只有 end 时才允许回滚\n        return currentStepName === STEP_NAMES.END;\n      } else if (currentStepName === STEP_NAMES.START) {\n        // 如果未定义 end, 则判断是否是开始\n        return true;\n      }\n    }\n    return false;\n  };\n  // 具体的指定阶段是否允许执行\n  GrammarInteraction.prototype.isAllowExecute = function (stepName, step) {\n    if (this.isAllowStep(stepName)) {\n      var key = this.getKey(stepName, step);\n      // 如果是在本环节内仅允许触发一次，同时已经触发过，则不允许再触发\n      if (step.once && this.emitCaches[key]) {\n        return false;\n      }\n      // 如果是允许的阶段，则验证 isEnable 方法\n      if (step.isEnable) {\n        return step.isEnable(this.context);\n      }\n      return true; // 如果没有 isEnable 则允许执行\n    }\n\n    return false;\n  };\n  GrammarInteraction.prototype.enterStep = function (stepName) {\n    this.currentStepName = stepName;\n    this.emitCaches = {}; // 清除所有本环节触发的缓存\n  };\n  // 执行完某个触发和反馈（子环节）\n  GrammarInteraction.prototype.afterExecute = function (stepName, step) {\n    // show enable 不计入正常的流程，其他情况则设置当前的 step\n    if (stepName !== STEP_NAMES.SHOW_ENABLE && this.currentStepName !== stepName) {\n      this.enterStep(stepName);\n    }\n    var key = this.getKey(stepName, step);\n    // 一旦执行，则缓存标记为，一直保持到跳出改环节\n    this.emitCaches[key] = true;\n  };\n  // 获取某个环节的唯一的键值\n  GrammarInteraction.prototype.getKey = function (stepName, step) {\n    return stepName + step.trigger + step.action;\n  };\n  // 获取 step 的回调函数，如果已经生成，则直接返回，如果未生成，则创建\n  GrammarInteraction.prototype.getActionCallback = function (stepName, step) {\n    var _this = this;\n    var context = this.context;\n    var callbackCaches = this.callbackCaches;\n    var actionObject = step.actionObject;\n    if (step.action && actionObject) {\n      var key = this.getKey(stepName, step);\n      if (!callbackCaches[key]) {\n        // 动态生成执行的方法，执行对应 action 的名称\n        var actionCallback = function (event) {\n          context.event = event; // 保证检测时的 event\n          if (_this.isAllowExecute(stepName, step)) {\n            // 如果是数组时，则依次执行\n            if (isArray(actionObject)) {\n              each(actionObject, function (obj) {\n                context.event = event; // 可能触发新的事件，保证执行前的 context.event 是正确的\n                executeAction(obj);\n              });\n            } else {\n              context.event = event; // 保证执行前的 context.event 是正确的\n              executeAction(actionObject);\n            }\n            _this.afterExecute(stepName, step);\n            if (step.callback) {\n              context.event = event; // 保证执行前的 context.event 是正确的\n              step.callback(context);\n            }\n          } else {\n            // 如果未通过验证，则事件不要绑定在上面\n            context.event = null;\n          }\n        };\n        // 如果设置了 debounce\n        if (step.debounce) {\n          callbackCaches[key] = debounce(actionCallback, step.debounce.wait, step.debounce.immediate);\n        } else if (step.throttle) {\n          // 设置 throttle\n          callbackCaches[key] = throttle(actionCallback, step.throttle.wait, {\n            leading: step.throttle.leading,\n            trailing: step.throttle.trailing\n          });\n        } else {\n          // 直接设置\n          callbackCaches[key] = actionCallback;\n        }\n      }\n      return callbackCaches[key];\n    }\n    return null;\n  };\n  GrammarInteraction.prototype.bindEvent = function (eventName, callback) {\n    var nameArr = eventName.split(':');\n    if (nameArr[0] === 'window') {\n      window.addEventListener(nameArr[1], callback);\n    } else if (nameArr[0] === 'document') {\n      document.addEventListener(nameArr[1], callback);\n    } else {\n      this.view.on(eventName, callback);\n    }\n  };\n  GrammarInteraction.prototype.offEvent = function (eventName, callback) {\n    var nameArr = eventName.split(':');\n    if (nameArr[0] === 'window') {\n      window.removeEventListener(nameArr[1], callback);\n    } else if (nameArr[0] === 'document') {\n      document.removeEventListener(nameArr[1], callback);\n    } else {\n      this.view.off(eventName, callback);\n    }\n  };\n  return GrammarInteraction;\n}(Interaction);\nexport default GrammarInteraction;","map":{"version":3,"sources":["../../src/interaction/grammar-interaction.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, isArray, isFunction, isString, debounce, throttle } from '@antv/util';\nimport { View } from '../chart';\nimport { ActionCallback, IAction, IInteractionContext, LooseObject } from '../interface';\nimport { createAction, createCallbackAction } from './action/register';\nimport InteractionContext from './context';\nimport Interaction from './interaction';\n\n// 将字符串转换成 action\nexport function parseAction(actionStr: string, context: IInteractionContext, arg?: any): ActionObject {\n  const arr = actionStr.split(':');\n  const actionName = arr[0];\n  // 如果已经初始化过 action ，则直接引用之前的 action\n  const action = context.getAction(actionName) || createAction(actionName, context);\n  if (!action) {\n    throw new Error(`There is no action named ${actionName}`);\n  }\n  const methodName = arr[1];\n  return {\n    action,\n    methodName,\n    arg,\n  };\n}\n\n// 执行 Action\nfunction executeAction(actionObject: ActionObject) {\n  const { action, methodName, arg } = actionObject;\n  if (action[methodName]) {\n    action[methodName](arg);\n  } else {\n    throw new Error(`Action(${action.name}) doesn't have a method called ${methodName}`);\n  }\n}\n\nconst STEP_NAMES = {\n  START: 'start',\n  SHOW_ENABLE: 'showEnable',\n  END: 'end',\n  ROLLBACK: 'rollback',\n  PROCESSING: 'processing',\n};\n\n/** 交互环节的定义 */\nexport interface InteractionStep {\n  /**\n   * 触发事件，支持 view，chart 的各种事件，也支持 document、window 的事件\n   */\n  trigger: string;\n  /**\n   * 是否可以触发 action\n   * @param context - 交互的上下文\n   */\n  isEnable?: (context: IInteractionContext) => boolean;\n  /**\n   * 反馈，支持三种方式：\n   * - action:method : action 的名字和方法的组合\n   * - [’action1:method1‘, ’action2:method‘]\n   * - ActionCallback: 回调函数\n   */\n  action: string | string[] | ActionCallback;\n  /**\n   * 反馈，具体 action method 的参数：\n   * - 当传递多个 action 时，args 必须是一个数组\n   */\n  arg?: any | any[];\n  /**\n   * 回调函数，action 执行后执行\n   */\n  callback?: (context: IInteractionContext) => void;\n  /**\n   * @private\n   * 不需要用户传入，通过上面的属性计算出来的属性\n   */\n  actionObject?: ActionObject | ActionObject[];\n  /**\n   * 在一个环节内是否只允许执行一次\n   */\n  once?: boolean;\n  /**\n   * 是否增加节流\n   */\n  throttle?: ThrottleOption;\n  /**\n   * 是否延迟\n   */\n  debounce?: DebounceOption;\n}\n\n// action 执行时支持 debounce 和 throttle，可以参考：https://css-tricks.com/debouncing-throttling-explained-examples/\n/**\n * debounce 的配置\n */\nexport interface DebounceOption {\n  /**\n   * 等待时间\n   */\n  wait: number;\n  /**\n   * 是否马上执行\n   */\n  immediate?: boolean;\n}\n\n/**\n * throttle 的配置\n */\nexport interface ThrottleOption {\n  /**\n   * 等待时间\n   */\n  wait: number;\n  /**\n   * 马上就执行\n   */\n  leading?: boolean;\n  /**\n   * 执行完毕后再执行一次\n   */\n  trailing?: boolean;\n}\n\n/** 缓存 action 对象，仅用于当前文件 */\ninterface ActionObject {\n  /**\n   * 缓存的 action\n   */\n  action: IAction;\n  /**\n   * action 的方法\n   */\n  methodName: string;\n  /**\n   * 用户传递的 action 方法的参数\n   */\n  arg?: any;\n}\n\n/** 交互的所有环节 */\nexport interface InteractionSteps {\n  /**\n   * 显示交互可以进行\n   */\n  showEnable?: InteractionStep[];\n  /**\n   * 交互开始\n   */\n  start?: InteractionStep[];\n  /**\n   * 交互持续\n   */\n  processing?: InteractionStep[];\n  /**\n   * 交互结束\n   */\n  end?: InteractionStep[];\n  /**\n   * 交互回滚\n   */\n  rollback?: InteractionStep[];\n}\n\n/**\n * 支持语法的交互类\n */\nexport default class GrammarInteraction extends Interaction {\n  // 存储的交互环节\n  private steps: InteractionSteps;\n  /** 当前执行到的阶段 */\n  public currentStepName: string;\n  /**\n   * 当前交互的上下文\n   */\n  public context: IInteractionContext;\n\n  private callbackCaches: LooseObject = {};\n  // 某个触发和反馈在本环节是否执行或\n  private emitCaches: LooseObject = {};\n\n  constructor(view: View, steps: InteractionSteps) {\n    super(view, steps);\n    this.steps = steps;\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {\n    this.initContext();\n    super.init();\n  }\n\n  /**\n   * 清理资源\n   */\n  public destroy() {\n    super.destroy(); // 先清理事件\n    this.steps = null;\n    if (this.context) {\n      this.context.destroy();\n      this.context = null;\n    }\n\n    this.callbackCaches = null;\n    this.view = null;\n  }\n\n  /**\n   * 绑定事件\n   */\n  protected initEvents() {\n    each(this.steps, (stepArr, stepName) => {\n      each(stepArr, (step) => {\n        const callback = this.getActionCallback(stepName, step);\n        if (callback) {\n          // 如果存在 callback，才绑定，有时候会出现无 callback 的情况\n          this.bindEvent(step.trigger, callback);\n        }\n      });\n    });\n  }\n\n  /**\n   * 清理绑定的事件\n   */\n  protected clearEvents() {\n    each(this.steps, (stepArr, stepName) => {\n      each(stepArr, (step) => {\n        const callback = this.getActionCallback(stepName, step);\n        if (callback) {\n          this.offEvent(step.trigger, callback);\n        }\n      });\n    });\n  }\n\n  // 初始化上下文，并初始化 action\n  private initContext() {\n    const view = this.view;\n    const context = new InteractionContext(view);\n    this.context = context;\n    const steps = this.steps;\n    // 生成具体的 Action\n    each(steps, (subSteps: InteractionStep[]) => {\n      each(subSteps, (step: InteractionStep) => {\n        if (isFunction(step.action)) {\n          // 如果传入回调函数，则直接生成 CallbackAction\n          step.actionObject = {\n            action: createCallbackAction(step.action, context),\n            methodName: 'execute',\n          };\n        } else if (isString(step.action)) {\n          // 如果是字符串\n          step.actionObject = parseAction(step.action, context, step.arg);\n        } else if (isArray(step.action)) {\n          // 如果是数组\n          const actionArr = step.action;\n          const argArr = isArray(step.arg) ? step.arg : [step.arg];\n          step.actionObject = [];\n          each(actionArr, (actionStr, idx) => {\n            (step.actionObject as ActionObject[]).push(parseAction(actionStr, context, argArr[idx]));\n          });\n        }\n        // 如果 action 既不是字符串，也不是函数，则不会生成 actionObject\n      });\n    });\n  }\n\n  // 是否允许指定阶段名称执行\n  private isAllowStep(stepName: string): boolean {\n    const currentStepName = this.currentStepName;\n    const steps = this.steps;\n    // 相同的阶段允许同时执行\n    if (currentStepName === stepName) {\n      return true;\n    }\n\n    if (stepName === STEP_NAMES.SHOW_ENABLE) {\n      // 示能在整个过程中都可用\n      return true;\n    }\n\n    if (stepName === STEP_NAMES.PROCESSING) {\n      // 只有当前是 start 时，才允许 processing\n      return currentStepName === STEP_NAMES.START;\n    }\n\n    if (stepName === STEP_NAMES.START) {\n      // 如果当前是 processing，则无法 start，必须等待 end 后才能执行\n      return currentStepName !== STEP_NAMES.PROCESSING;\n    }\n\n    if (stepName === STEP_NAMES.END) {\n      return currentStepName === STEP_NAMES.PROCESSING || currentStepName === STEP_NAMES.START;\n    }\n\n    if (stepName === STEP_NAMES.ROLLBACK) {\n      if (steps[STEP_NAMES.END]) {\n        // 如果定义了 end, 只有 end 时才允许回滚\n        return currentStepName === STEP_NAMES.END;\n      } else if (currentStepName === STEP_NAMES.START) {\n        // 如果未定义 end, 则判断是否是开始\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // 具体的指定阶段是否允许执行\n  private isAllowExecute(stepName: string, step: InteractionStep): boolean {\n    if (this.isAllowStep(stepName)) {\n      const key = this.getKey(stepName, step);\n      // 如果是在本环节内仅允许触发一次，同时已经触发过，则不允许再触发\n      if (step.once && this.emitCaches[key]) {\n        return false;\n      }\n      // 如果是允许的阶段，则验证 isEnable 方法\n      if (step.isEnable) {\n        return step.isEnable(this.context);\n      }\n      return true; // 如果没有 isEnable 则允许执行\n    }\n    return false;\n  }\n\n  private enterStep(stepName: string) {\n    this.currentStepName = stepName;\n    this.emitCaches = {}; // 清除所有本环节触发的缓存\n  }\n\n  // 执行完某个触发和反馈（子环节）\n  private afterExecute(stepName: string, step) {\n    // show enable 不计入正常的流程，其他情况则设置当前的 step\n    if (stepName !== STEP_NAMES.SHOW_ENABLE && this.currentStepName !== stepName) {\n      this.enterStep(stepName);\n    }\n    const key = this.getKey(stepName, step);\n    // 一旦执行，则缓存标记为，一直保持到跳出改环节\n    this.emitCaches[key] = true;\n  }\n  // 获取某个环节的唯一的键值\n  private getKey(stepName, step) {\n    return stepName + step.trigger + step.action;\n  }\n\n  // 获取 step 的回调函数，如果已经生成，则直接返回，如果未生成，则创建\n  private getActionCallback(stepName: string, step: InteractionStep): (e: object) => void {\n    const context = this.context;\n    const callbackCaches = this.callbackCaches;\n    const actionObject = step.actionObject;\n    if (step.action && actionObject) {\n      const key = this.getKey(stepName, step);\n      if (!callbackCaches[key]) {\n        // 动态生成执行的方法，执行对应 action 的名称\n        const actionCallback = (event) => {\n          context.event = event; // 保证检测时的 event\n          if (this.isAllowExecute(stepName, step)) {\n            // 如果是数组时，则依次执行\n            if (isArray(actionObject)) {\n              each(actionObject, (obj: ActionObject) => {\n                context.event = event; // 可能触发新的事件，保证执行前的 context.event 是正确的\n                executeAction(obj);\n              });\n            } else {\n              context.event = event; // 保证执行前的 context.event 是正确的\n              executeAction(actionObject);\n            }\n            this.afterExecute(stepName, step);\n            if (step.callback) {\n              context.event = event; // 保证执行前的 context.event 是正确的\n              step.callback(context);\n            }\n          } else {\n            // 如果未通过验证，则事件不要绑定在上面\n            context.event = null;\n          }\n        };\n        // 如果设置了 debounce\n        if (step.debounce) {\n          callbackCaches[key] = debounce(actionCallback, step.debounce.wait, step.debounce.immediate);\n        } else if (step.throttle) {\n          // 设置 throttle\n          callbackCaches[key] = throttle(actionCallback, step.throttle.wait, {\n            leading: step.throttle.leading,\n            trailing: step.throttle.trailing,\n          });\n        } else {\n          // 直接设置\n          callbackCaches[key] = actionCallback;\n        }\n      }\n      return callbackCaches[key];\n    }\n    return null;\n  }\n\n  private bindEvent(eventName, callback) {\n    const nameArr = eventName.split(':');\n    if (nameArr[0] === 'window') {\n      window.addEventListener(nameArr[1], callback);\n    } else if (nameArr[0] === 'document') {\n      document.addEventListener(nameArr[1], callback);\n    } else {\n      this.view.on(eventName, callback);\n    }\n  }\n\n  private offEvent(eventName, callback) {\n    const nameArr = eventName.split(':');\n    if (nameArr[0] === 'window') {\n      window.removeEventListener(nameArr[1], callback);\n    } else if (nameArr[0] === 'document') {\n      document.removeEventListener(nameArr[1], callback);\n    } else {\n      this.view.off(eventName, callback);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}