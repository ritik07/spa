{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { each, groupBy, uniq, map, size } from '@antv/util';\nimport { checkShapeOverlap } from '../../util';\nfunction filterLabel(labels) {\n  var MAX_CNT = 500; // 最多显示 500 个数据标签\n  var filteredLabels = [];\n  var pages = Math.max(Math.floor(labels.length / MAX_CNT), 1);\n  each(labels, function (label, idx) {\n    if (idx % pages === 0) {\n      filteredLabels.push(label);\n    } else {\n      label.set('visible', false);\n    }\n  });\n  return filteredLabels;\n}\n/**\n * 为 interval geometry 定制的数据标签重叠自动隐藏布局方法\n * @param items\n * @param labels\n * @param shapes\n */\nexport function intervalHideOverlap(items, labels, shapes) {\n  var _a;\n  if (shapes.length === 0) {\n    return;\n  }\n  var element = (_a = shapes[0]) === null || _a === void 0 ? void 0 : _a.get('element');\n  var geometry = element === null || element === void 0 ? void 0 : element.geometry;\n  if (!geometry || geometry.type !== 'interval') {\n    return;\n  }\n  var filteredLabels = filterLabel(labels);\n  var _b = __read(geometry.getXYFields(), 1),\n    xField = _b[0];\n  var dones = [];\n  var todo = [];\n  var groupedLabels = groupBy(filteredLabels, function (label) {\n    return label.get('data')[xField];\n  });\n  var xValues = uniq(map(filteredLabels, function (label) {\n    return label.get('data')[xField];\n  }));\n  var xValue;\n  filteredLabels.forEach(function (label) {\n    label.set('visible', true);\n  });\n  var addCurrentGroup = function (curItems) {\n    if (curItems) {\n      if (curItems.length) {\n        // 最后一个\n        todo.push(curItems.pop());\n      }\n      todo.push.apply(todo, __spreadArray([], __read(curItems), false));\n    }\n  };\n  if (size(xValues) > 0) {\n    // 第一组\n    xValue = xValues.shift();\n    addCurrentGroup(groupedLabels[xValue]);\n  }\n  if (size(xValues) > 0) {\n    // 最后一组\n    xValue = xValues.pop();\n    addCurrentGroup(groupedLabels[xValue]);\n  }\n  each(xValues.reverse(), function (val) {\n    // 其他组\n    addCurrentGroup(groupedLabels[val]);\n  });\n  while (todo.length > 0) {\n    var cur = todo.shift();\n    if (cur.get('visible')) {\n      if (checkShapeOverlap(cur, dones)) {\n        cur.set('visible', false);\n      } else {\n        dones.push(cur);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../../../src/geometry/label/layout/interval/hide-overlap.ts"],"names":[],"mappings":"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","sourcesContent":["import { IGroup, IShape } from '../../../../dependents';\nimport { each, groupBy, uniq, map, size, filter } from '@antv/util';\nimport Geometry from '../../../base';\nimport Element from '../../../element';\nimport { LabelItem } from '../../interface';\nimport { checkShapeOverlap } from '../../util';\n\nfunction filterLabel(labels: IShape[] | IGroup[]) {\n  const MAX_CNT = 500; // 最多显示 500 个数据标签\n  const filteredLabels = [];\n  const pages = Math.max(Math.floor(labels.length / MAX_CNT), 1);\n  each(labels, (label, idx) => {\n    if (idx % pages === 0) {\n      filteredLabels.push(label);\n    } else {\n      label.set('visible', false);\n    }\n  });\n\n  return filteredLabels;\n}\n\n/**\n * 为 interval geometry 定制的数据标签重叠自动隐藏布局方法\n * @param items\n * @param labels\n * @param shapes\n */\nexport function intervalHideOverlap(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[]) {\n  if (shapes.length === 0) {\n    return;\n  }\n  const element: Element = shapes[0]?.get('element');\n  const geometry: Geometry = element?.geometry;\n  if (!geometry || geometry.type !== 'interval') {\n    return;\n  }\n\n  const filteredLabels = filterLabel(labels);\n  const [xField] = geometry.getXYFields();\n  const dones: IShape[] = [];\n  const todo: IShape[] = [];\n  const groupedLabels = groupBy(filteredLabels, (label) => label.get('data')[xField]);\n  const xValues = uniq(map(filteredLabels, (label: IShape) => label.get('data')[xField]));\n  let xValue;\n\n  filteredLabels.forEach((label) => {\n    label.set('visible', true);\n  });\n\n  const addCurrentGroup = (curItems: IShape[]) => {\n    if (curItems) {\n      if (curItems.length) {\n        // 最后一个\n        todo.push(curItems.pop());\n      }\n      todo.push(...curItems);\n    }\n  };\n\n  if (size(xValues) > 0) {\n    // 第一组\n    xValue = xValues.shift();\n    addCurrentGroup(groupedLabels[xValue]);\n  }\n  if (size(xValues) > 0) {\n    // 最后一组\n    xValue = xValues.pop();\n    addCurrentGroup(groupedLabels[xValue]);\n  }\n  each(xValues.reverse(), (val) => {\n    // 其他组\n    addCurrentGroup(groupedLabels[val]);\n  });\n\n  while (todo.length > 0) {\n    const cur = todo.shift();\n    if (cur.get('visible')) {\n      if (checkShapeOverlap(cur, dones)) {\n        cur.set('visible', false);\n      } else {\n        dones.push(cur);\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}